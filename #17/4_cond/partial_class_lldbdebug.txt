Args: swift (LLVM option parsing) -debug 
Validating deps of /Users/kenta/swiftc/build/Xcode-DebugAssert/swift-macosx-x86_64/Debug/lib/swift/macosx/Swift.swiftmodule/x86_64.swiftmodule
Found up-to-date module at /Users/kenta/swiftc/build/Xcode-DebugAssert/swift-macosx-x86_64/Debug/lib/swift/macosx/Swift.swiftmodule/x86_64.swiftmodule; deferring to serialized module loader
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(init), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(Bool), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(f), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(init), hasLazyMembers()=0, useNamedLazyMemberLoading=0
B.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(init), hasLazyMembers()=0, useNamedLazyMemberLoading=0
B.lookupDirect(Bool), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(Bool), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(f(_:)), hasLazyMembers()=0, useNamedLazyMemberLoading=0
B.lookupDirect(f), hasLazyMembers()=0, useNamedLazyMemberLoading=0
B.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
B.lookupDirect(init), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(init), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(A), hasLazyMembers()=0, useNamedLazyMemberLoading=0
_ExpressibleByBuiltinBooleanLiteral.lookupDirect(init(_builtinBooleanLiteral:)), hasLazyMembers()=1, useNamedLazyMemberLoading=1
B.lookupDirect(init), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(init), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(f), hasLazyMembers()=0, useNamedLazyMemberLoading=0
_ExpressibleByBuiltinIntegerLiteral.lookupDirect(init(_builtinIntegerLiteral:)), hasLazyMembers()=1, useNamedLazyMemberLoading=1
lowering type for constant #A.init!allocator.1
  formal type: @convention(method) (A.Type) -> () -> A
  lowered AST type: @convention(method) (A.Type) -> A
  SIL type: @convention(method) (@thick A.Type) -> @owned A
lowering @$s7partial1ACACycfC : $@convention(method) (@thick A.Type) -> @owned A
(constructor_decl range=[partial.swift:2:5 - line:2:13] "init()" interface type='(A.Type) -> () -> A' access=internal designated
  (parameter "self")
  (parameter_list range=[partial.swift:2:9 - line:2:10])
  (brace_stmt range=[partial.swift:2:12 - line:2:13]
    (return_stmt implicit range=[partial.swift:2:13 - line:2:13])))

lowering type for constant #A.init!initializer.1
  formal type: @convention(method) (A) -> () -> A
  lowered AST type: @convention(method) (A) -> A
  SIL type: @convention(method) (@owned A) -> @owned A
lowering type for constant #A.init!initializer.1
  formal type: @convention(method) (A) -> () -> A
  lowered AST type: @convention(method) (A) -> A
  SIL type: @convention(method) (@owned A) -> @owned A
lowered sil:
// A.__allocating_init()
sil hidden [exact_self_class] [ossa] @$s7partial1ACACycfC : $@convention(method) (@thick A.Type) -> @owned A {
bb0(%0 : $@thick A.Type):
  %1 = alloc_ref $A                               // user: %3
  // function_ref A.init()
  %2 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
  return %3 : $A                                  // id: %4
} // end sil function '$s7partial1ACACycfC'

	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick A.Type
Input types for SIL function type @convention(method) (@thick A.Type) -> @owned A:
$@thick A.Type
Verifying ownership of: %0 = argument of bb0 : $@thick A.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = alloc_ref $A                               // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.init()
  %2 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %4
function return type: $A
return inst type: $A
lowering @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A
(constructor_decl range=[partial.swift:2:5 - line:2:13] "init()" interface type='(A.Type) -> () -> A' access=internal designated
  (parameter "self" type='A' interface type='A')
  (parameter_list range=[partial.swift:2:9 - line:2:10])
  (brace_stmt range=[partial.swift:2:12 - line:2:13]
    (return_stmt implicit range=[partial.swift:2:13 - line:2:13])))

lowered sil:
// A.init()
sil hidden [ossa] @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A {
// %0                                             // users: %2, %1
bb0(%0 : @owned $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  %2 = mark_uninitialized [rootself] %0 : $A      // users: %4, %3
  %3 = copy_value %2 : $A                         // user: %5
  destroy_value %2 : $A                           // id: %4
  return %3 : $A                                  // id: %5
} // end sil function '$s7partial1ACACycfc'

	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> @owned A:
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   %2 = mark_uninitialized [rootself] %0 : $A      // users: %4, %3
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = mark_uninitialized [rootself] %0 : $A      // users: %4, %3
    Gathering and classifying uses!
        Regular User:   %3 = copy_value %2 : $A                         // user: %5
        Lifetime Ending User:   destroy_value %2 : $A                           // id: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %3 = copy_value %2 : $A                         // user: %5
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %5
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %5
function return type: $A
return inst type: $A
lowering type for constant #A.f!1
  formal type: @convention(method) <τ_0_0> (A) -> (τ_0_0) -> Bool
  lowered AST type: @convention(method) <τ_0_0> (τ_0_0, A) -> Bool
  SIL type: @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool
lowering @$s7partial1AC1fySbxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool
(func_decl range=[partial.swift:4:5 - line:6:5] "f(_:)" <T> interface type='<T> (A) -> (T) -> Bool' access=internal captures=(<generic> )
  (parameter "self")
  (parameter_list
    (parameter "v" type='T' interface type='T') range=[partial.swift:4:14 - line:4:21])
  (result
    (type_ident
      (component id='Bool' bind=Swift.(file).Bool@/Users/kenta/swiftc/swift/stdlib/public/core/Bool.swift:64:15)))
  (binary_expr type='Bool' location=partial.swift:5:16 range=[partial.swift:5:9 - line:5:21] nothrow
    (declref_expr type='(Any.Type?, Any.Type?) -> Bool' location=partial.swift:5:16 range=[partial.swift:5:16 - line:5:16] decl=Swift.(file).==@/Users/kenta/swiftc/swift/stdlib/public/core/Builtin.swift:140:13 function_ref=unapplied)
    (tuple_expr implicit type='(Any.Type?, Any.Type?)' location=partial.swift:5:9 range=[partial.swift:5:9 - line:5:21]
      (inject_into_optional implicit type='Any.Type?' location=partial.swift:5:9 range=[partial.swift:5:9 - line:5:11]
        (erasure_expr implicit type='Any.Type' location=partial.swift:5:9 range=[partial.swift:5:9 - line:5:11]
          (dot_self_expr type='T.Type' location=partial.swift:5:9 range=[partial.swift:5:9 - line:5:11]
            (type_expr type='T.Type' location=partial.swift:5:9 range=[partial.swift:5:9 - line:5:9] typerepr='T'))))
      (inject_into_optional implicit type='Any.Type?' location=partial.swift:5:19 range=[partial.swift:5:19 - line:5:21]
        (erasure_expr implicit type='Any.Type' location=partial.swift:5:19 range=[partial.swift:5:19 - line:5:21]
          (dot_self_expr type='A.Type' location=partial.swift:5:19 range=[partial.swift:5:19 - line:5:21]
            (type_expr type='A.Type' location=partial.swift:5:19 range=[partial.swift:5:19 - line:5:19] typerepr='A')))))))

lowering type for constant #"=="
  formal type: @convention(thin) (Optional<Any.Type>, Optional<Any.Type>) -> Bool
  lowered AST type: @convention(thin) (Optional<Any.Type>, Optional<Any.Type>) -> Bool
  SIL type: @convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool
lowering type for constant #"=="
  formal type: @convention(thin) (Optional<Any.Type>, Optional<Any.Type>) -> Bool
  lowered AST type: @convention(thin) (Optional<Any.Type>, Optional<Any.Type>) -> Bool
  SIL type: @convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool
lowered sil:
// A.f<A>(_:)
sil hidden [ossa] @$s7partial1AC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed A) -> Bool {
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $*T, %1 : @guaranteed $A):
  debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
  debug_value %1 : $A, let, name "self", argno 2  // id: %3
  %4 = metatype $@thick T.Type                    // user: %5
  %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
  %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
  %7 = metatype $@thick A.Type                    // user: %8
  %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
  %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
  // function_ref == infix(_:_:)
  %10 = function_ref @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %11
  %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
  return %11 : $Bool                              // id: %12
} // end sil function '$s7partial1AC1fySbxlF'

	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$A
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool:
$*τ_0_0
$A
Verifying ownership of: %0 = argument of bb0 : $*T                        // user: %2
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $A                         // user: %3
    Gathering and classifying uses!
        Regular User:   debug_value %1 : $A, let, name "self", argno 2  // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = metatype $@thick T.Type                    // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
    Gathering and classifying uses!
        Regular User:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = metatype $@thick A.Type                    // user: %8
    Gathering and classifying uses!
        Regular User:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref == infix(_:_:)
  %10 = function_ref @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    Gathering and classifying uses!
        Regular User:   return %11 : $Bool                              // id: %12
    No lifetime ending users?! Bailing early.
  return %11 : $Bool                              // id: %12
function return type: $Bool
return inst type: $Bool
lowering type for constant #A.deinit!destroyer.1
  formal type: @convention(method) (A) -> () -> Builtin.NativeObject
  lowered AST type: @convention(method) (A) -> Builtin.NativeObject
  SIL type: @convention(method) (@guaranteed A) -> @owned Builtin.NativeObject
lowering @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject
(destructor_decl implicit range=[partial.swift:1:7 - line:1:7] "deinit" interface type='(A) -> () -> ()' access=internal
  (parameter "self")
  (parameter_list)
  (brace_stmt implicit range=[partial.swift:1:7 - line:1:7]))

lowered sil:
// A.deinit
sil hidden [ossa] @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject {
// %0                                             // users: %2, %1
bb0(%0 : @guaranteed $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
  %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
  return %3 : $Builtin.NativeObject               // id: %4
} // end sil function '$s7partial1ACfd'

	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@guaranteed A) -> @owned Builtin.NativeObject:
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Regular User:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
        Regular User:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $Builtin.NativeObject               // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $Builtin.NativeObject               // id: %4
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
lowering type for constant #A.deinit!deallocator.1
  formal type: @convention(method) (A) -> () -> ()
  lowered AST type: @convention(method) (A) -> ()
  SIL type: @convention(method) (@owned A) -> ()
lowering @$s7partial1ACfD : $@convention(method) (@owned A) -> ()
(destructor_decl implicit range=[partial.swift:1:7 - line:1:7] "deinit" interface type='(A) -> () -> ()' access=internal
  (parameter "self" type='A' interface type='A')
  (parameter_list)
  (brace_stmt implicit range=[partial.swift:1:7 - line:1:7]))

lowering type for constant #A.deinit!destroyer.1
  formal type: @convention(method) (A) -> () -> Builtin.NativeObject
  lowered AST type: @convention(method) (A) -> Builtin.NativeObject
  SIL type: @convention(method) (@guaranteed A) -> @owned Builtin.NativeObject
lowered sil:
// A.__deallocating_deinit
sil hidden [ossa] @$s7partial1ACfD : $@convention(method) (@owned A) -> () {
// %0                                             // users: %6, %3, %1
bb0(%0 : @owned $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  // function_ref A.deinit
  %2 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
  %3 = begin_borrow %0 : $A                       // users: %5, %4
  %4 = apply %2(%3) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %7
  end_borrow %3 : $A                              // id: %5
  end_lifetime %0 : $A                            // id: %6
  %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $A // user: %8
  dealloc_ref %7 : $A                             // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function '$s7partial1ACfD'

	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> ():
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %6, %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Regular User:   %3 = begin_borrow %0 : $A                       // users: %5, %4
        Lifetime Ending User:   end_lifetime %0 : $A                            // id: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.deinit
  %2 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %2(%3) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = begin_borrow %0 : $A                       // users: %5, %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %2(%3) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %7
        Lifetime Ending User:   end_borrow %3 : $A                              // id: %5
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %4 = apply %2(%3) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %7
    Gathering and classifying uses!
        Lifetime Ending User:   %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $A // user: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $A // user: %8
    Gathering and classifying uses!
        Lifetime Ending User:   dealloc_ref %7 : $A                             // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %9 = tuple ()                                   // user: %10
    Gathering and classifying uses!
        Regular User:   return %9 : $()                                 // id: %10
    No lifetime ending users?! Bailing early.
  return %9 : $()                                 // id: %10
function return type: $()
return inst type: $()
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
lowering type for constant #B.f!1
  formal type: @convention(method) <τ_0_0> (B) -> (τ_0_0) -> Bool
  lowered AST type: @convention(method) <τ_0_0> (τ_0_0, B) -> Bool
  SIL type: @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool
lowering @$s7partial1BC1fySbxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool
(func_decl range=[partial.swift:10:14 - line:12:5] "f(_:)" <T> interface type='<T> (B) -> (T) -> Bool' access=internal override=partial.(file).A.f@partial.swift:4:10 captures=(<generic> )
  (parameter "self")
  (parameter_list
    (parameter "v" type='T' interface type='T') range=[partial.swift:10:23 - line:10:30])
  (result
    (type_ident
      (component id='Bool' bind=Swift.(file).Bool@/Users/kenta/swiftc/swift/stdlib/public/core/Bool.swift:64:15)))
  (boolean_literal_expr type='Bool' location=partial.swift:11:9 range=[partial.swift:11:9 - line:11:9] value=false builtin_initializer=Swift.(file).Bool extension.init(_builtinBooleanLiteral:)@/Users/kenta/swiftc/swift/stdlib/public/core/Bool.swift:145:10 initializer=**NULL**))

lowering type for constant #Bool.init!allocator.1
  formal type: @convention(method) (Bool.Type) -> (Builtin.Int1) -> Bool
  lowered AST type: @convention(method) (Builtin.Int1, Bool.Type) -> Bool
  SIL type: @convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool
lowering type for constant #Bool.init!allocator.1
  formal type: @convention(method) (Bool.Type) -> (Builtin.Int1) -> Bool
  lowered AST type: @convention(method) (Builtin.Int1, Bool.Type) -> Bool
  SIL type: @convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool
lowered sil:
// B.f<A>(_:)
sil hidden [ossa] @$s7partial1BC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed B) -> Bool {
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $*T, %1 : @guaranteed $B):
  debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
  debug_value %1 : $B, let, name "self", argno 2  // id: %3
  %4 = integer_literal $Builtin.Int1, 0           // user: %7
  %5 = metatype $@thin Bool.Type                  // user: %7
  // function_ref Bool.init(_builtinBooleanLiteral:)
  %6 = function_ref @$sSb22_builtinBooleanLiteralSbBi1__tcfC : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %7
  %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$s7partial1BC1fySbxlF'

	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$B
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool:
$*τ_0_0
$B
Verifying ownership of: %0 = argument of bb0 : $*T                        // user: %2
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $B                         // user: %3
    Gathering and classifying uses!
        Regular User:   debug_value %1 : $B, let, name "self", argno 2  // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = integer_literal $Builtin.Int1, 0           // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = metatype $@thin Bool.Type                  // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref Bool.init(_builtinBooleanLiteral:)
  %6 = function_ref @$sSb22_builtinBooleanLiteralSbBi1__tcfC : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $Bool                               // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $Bool                               // id: %8
function return type: $Bool
return inst type: $Bool
lowering type for constant #B.deinit!destroyer.1
  formal type: @convention(method) (B) -> () -> Builtin.NativeObject
  lowered AST type: @convention(method) (B) -> Builtin.NativeObject
  SIL type: @convention(method) (@guaranteed B) -> @owned Builtin.NativeObject
lowering @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject
(destructor_decl implicit range=[partial.swift:9:7 - line:9:7] "deinit" interface type='(B) -> () -> ()' access=internal
  (parameter "self")
  (parameter_list)
  (brace_stmt implicit range=[partial.swift:9:7 - line:9:7]))

A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
lowering type for constant #A.deinit!destroyer.1
  formal type: @convention(method) (A) -> () -> Builtin.NativeObject
  lowered AST type: @convention(method) (A) -> Builtin.NativeObject
  SIL type: @convention(method) (@guaranteed A) -> @owned Builtin.NativeObject
lowered sil:
// B.deinit
sil hidden [ossa] @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject {
// %0                                             // users: %2, %1
bb0(%0 : @guaranteed $B):
  debug_value %0 : $B, let, name "self", argno 1  // id: %1
  %2 = upcast %0 : $B to $A                       // user: %4
  // function_ref A.deinit
  %3 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
  %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
  %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
  %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
  end_borrow %5 : $Builtin.NativeObject           // id: %7
  return %4 : $Builtin.NativeObject               // id: %8
} // end sil function '$s7partial1BCfd'

	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@guaranteed B) -> @owned Builtin.NativeObject:
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
        Regular User:   %2 = upcast %0 : $B to $A                       // user: %4
        Regular User:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = upcast %0 : $B to $A                       // user: %4
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref A.deinit
  %3 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    Gathering and classifying uses!
        Regular User:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
        Lifetime Ending User:   return %4 : $Builtin.NativeObject               // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
    Gathering and classifying uses!
        Regular User:   %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
        Lifetime Ending User:   end_borrow %5 : $Builtin.NativeObject           // id: %7
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
  return %4 : $Builtin.NativeObject               // id: %8
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
lowering type for constant #B.deinit!deallocator.1
  formal type: @convention(method) (B) -> () -> ()
  lowered AST type: @convention(method) (B) -> ()
  SIL type: @convention(method) (@owned B) -> ()
lowering @$s7partial1BCfD : $@convention(method) (@owned B) -> ()
(destructor_decl implicit range=[partial.swift:9:7 - line:9:7] "deinit" interface type='(B) -> () -> ()' access=internal
  (parameter "self" type='B' interface type='B')
  (parameter_list)
  (brace_stmt implicit range=[partial.swift:9:7 - line:9:7]))

lowering type for constant #B.deinit!destroyer.1
  formal type: @convention(method) (B) -> () -> Builtin.NativeObject
  lowered AST type: @convention(method) (B) -> Builtin.NativeObject
  SIL type: @convention(method) (@guaranteed B) -> @owned Builtin.NativeObject
lowered sil:
// B.__deallocating_deinit
sil hidden [ossa] @$s7partial1BCfD : $@convention(method) (@owned B) -> () {
// %0                                             // users: %6, %3, %1
bb0(%0 : @owned $B):
  debug_value %0 : $B, let, name "self", argno 1  // id: %1
  // function_ref B.deinit
  %2 = function_ref @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %4
  %3 = begin_borrow %0 : $B                       // users: %5, %4
  %4 = apply %2(%3) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %7
  end_borrow %3 : $B                              // id: %5
  end_lifetime %0 : $B                            // id: %6
  %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $B // user: %8
  dealloc_ref %7 : $B                             // id: %8
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function '$s7partial1BCfD'

	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> ():
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // users: %6, %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
        Regular User:   %3 = begin_borrow %0 : $B                       // users: %5, %4
        Lifetime Ending User:   end_lifetime %0 : $B                            // id: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref B.deinit
  %2 = function_ref @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %2(%3) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = begin_borrow %0 : $B                       // users: %5, %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %2(%3) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %7
        Lifetime Ending User:   end_borrow %3 : $B                              // id: %5
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %4 = apply %2(%3) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %7
    Gathering and classifying uses!
        Lifetime Ending User:   %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $B // user: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $B // user: %8
    Gathering and classifying uses!
        Lifetime Ending User:   dealloc_ref %7 : $B                             // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %9 = tuple ()                                   // user: %10
    Gathering and classifying uses!
        Regular User:   return %9 : $()                                 // id: %10
    No lifetime ending users?! Bailing early.
  return %9 : $()                                 // id: %10
function return type: $()
return inst type: $()
lowering type for constant #B.init!allocator.1
  formal type: @convention(method) (B.Type) -> () -> B
  lowered AST type: @convention(method) (B.Type) -> B
  SIL type: @convention(method) (@thick B.Type) -> @owned B
lowering @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B
(constructor_decl implicit range=[partial.swift:9:12 - line:9:12] "init()" interface type='(B.Type) -> () -> B' access=internal override=partial.(file).A.init()@partial.swift:2:5 designated
  (parameter "self" type='B' interface type='B')
  (parameter_list range=[partial.swift:2:9 - line:2:10])
  (brace_stmt implicit
    (rebind_self_in_constructor_expr implicit type='()'
      (call_expr implicit type='A' nothrow arg_labels=
        (dot_syntax_call_expr implicit type='() -> A' super nothrow
          (other_constructor_ref_expr implicit type='(A) -> () -> A' decl=partial.(file).A.init()@partial.swift:2:5)
          (super_ref_expr implicit type='A'))
        (tuple_expr implicit type='()')))
    (return_stmt implicit)))

lowering type for constant #B.init!initializer.1
  formal type: @convention(method) (B) -> () -> B
  lowered AST type: @convention(method) (B) -> B
  SIL type: @convention(method) (@owned B) -> @owned B
lowering type for constant #B.init!initializer.1
  formal type: @convention(method) (B) -> () -> B
  lowered AST type: @convention(method) (B) -> B
  SIL type: @convention(method) (@owned B) -> @owned B
lowered sil:
// B.__allocating_init()
sil hidden [exact_self_class] [ossa] @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B {
bb0(%0 : $@thick B.Type):
  %1 = alloc_ref $B                               // user: %3
  // function_ref B.init()
  %2 = function_ref @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B // user: %3
  %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
  return %3 : $B                                  // id: %4
} // end sil function '$s7partial1BCACycfC'

	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick B.Type
Input types for SIL function type @convention(method) (@thick B.Type) -> @owned B:
$@thick B.Type
Verifying ownership of: %0 = argument of bb0 : $@thick B.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = alloc_ref $B                               // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref B.init()
  %2 = function_ref @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $B                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $B                                  // id: %4
function return type: $B
return inst type: $B
lowering @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B
(constructor_decl implicit range=[partial.swift:9:12 - line:9:12] "init()" interface type='(B.Type) -> () -> B' access=internal override=partial.(file).A.init()@partial.swift:2:5 designated
  (parameter "self" type='B' interface type='B')
  (parameter_list range=[partial.swift:2:9 - line:2:10])
  (brace_stmt implicit
    (rebind_self_in_constructor_expr implicit type='()'
      (call_expr implicit type='A' nothrow arg_labels=
        (dot_syntax_call_expr implicit type='() -> A' super nothrow
          (other_constructor_ref_expr implicit type='(A) -> () -> A' decl=partial.(file).A.init()@partial.swift:2:5)
          (super_ref_expr implicit type='A'))
        (tuple_expr implicit type='()')))
    (return_stmt implicit)))

lowering type for constant #A.init!initializer.1
  formal type: @convention(method) (A) -> () -> A
  lowered AST type: @convention(method) (A) -> A
  SIL type: @convention(method) (@owned A) -> @owned A
lowered sil:
// B.init()
sil hidden [ossa] @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B {
// %0                                             // user: %4
bb0(%0 : @owned $B):
  %1 = alloc_box ${ var B }, let, name "self"     // user: %2
  %2 = mark_uninitialized [derivedself] %1 : ${ var B } // users: %12, %3
  %3 = project_box %2 : ${ var B }, 0             // users: %11, %10, %5, %4
  store %0 to [init] %3 : $*B                     // id: %4
  %5 = load [take] %3 : $*B                       // user: %6
  %6 = upcast %5 : $B to $A                       // user: %8
  // function_ref A.init()
  %7 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %8
  %8 = apply %7(%6) : $@convention(method) (@owned A) -> @owned A // user: %9
  %9 = unchecked_ref_cast %8 : $A to $B           // user: %10
  store %9 to [init] %3 : $*B                     // id: %10
  %11 = load [copy] %3 : $*B                      // user: %13
  destroy_value %2 : ${ var B }                   // id: %12
  return %11 : $B                                 // id: %13
} // end sil function '$s7partial1BCACycfc'

	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> @owned B:
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   store %0 to [init] %3 : $*B                     // id: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %1 = alloc_box ${ var B }, let, name "self"     // user: %2
    Gathering and classifying uses!
        Lifetime Ending User:   %2 = mark_uninitialized [derivedself] %1 : ${ var B } // users: %12, %3
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = mark_uninitialized [derivedself] %1 : ${ var B } // users: %12, %3
    Gathering and classifying uses!
        Regular User:   %3 = project_box %2 : ${ var B }, 0             // users: %11, %10, %5, %4
        Lifetime Ending User:   destroy_value %2 : ${ var B }                   // id: %12
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %3 = project_box %2 : ${ var B }, 0             // users: %11, %10, %5, %4
    Gathering and classifying uses!
        Regular User:   store %0 to [init] %3 : $*B                     // id: %4
        Regular User:   %5 = load [take] %3 : $*B                       // user: %6
        Regular User:   store %9 to [init] %3 : $*B                     // id: %10
        Regular User:   %11 = load [copy] %3 : $*B                      // user: %13
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = load [take] %3 : $*B                       // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   %6 = upcast %5 : $B to $A                       // user: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %6 = upcast %5 : $B to $A                       // user: %8
    Gathering and classifying uses!
        Lifetime Ending User:   %8 = apply %7(%6) : $@convention(method) (@owned A) -> @owned A // user: %9
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.init()
  %7 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %8
    Gathering and classifying uses!
        Regular User:   %8 = apply %7(%6) : $@convention(method) (@owned A) -> @owned A // user: %9
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = apply %7(%6) : $@convention(method) (@owned A) -> @owned A // user: %9
    Gathering and classifying uses!
        Lifetime Ending User:   %9 = unchecked_ref_cast %8 : $A to $B           // user: %10
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %9 = unchecked_ref_cast %8 : $A to $B           // user: %10
    Gathering and classifying uses!
        Lifetime Ending User:   store %9 to [init] %3 : $*B                     // id: %10
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %11 = load [copy] %3 : $*B                      // user: %13
    Gathering and classifying uses!
        Lifetime Ending User:   return %11 : $B                                 // id: %13
    Found lifetime ending users! Performing initial checks
  return %11 : $B                                 // id: %13
function return type: $B
return inst type: $B
B.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
lowering type for constant #makeAorB
  formal type: @convention(thin) () -> A
  lowered AST type: @convention(thin) () -> A
  SIL type: @convention(thin) () -> @owned A
lowering @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A
(func_decl range=[partial.swift:16:1 - line:18:1] "makeAorB()" interface type='() -> A' access=internal
  (parameter_list range=[partial.swift:16:14 - line:16:15])
  (result
    (type_ident
      (component id='A' bind=partial.(file).A@partial.swift:1:7)))
  (derived_to_base_expr implicit type='A' location=partial.swift:17:5 range=[partial.swift:17:5 - line:17:7]
    (call_expr type='B' location=partial.swift:17:5 range=[partial.swift:17:5 - line:17:7] nothrow arg_labels=
      (constructor_ref_call_expr type='() -> B' location=partial.swift:17:5 range=[partial.swift:17:5 - line:17:5] nothrow
        (declref_expr implicit type='(B.Type) -> () -> B' location=partial.swift:17:5 range=[partial.swift:17:5 - line:17:5] decl=partial.(file).B.init()@partial.swift:9:12 function_ref=single)
        (type_expr type='B.Type' location=partial.swift:17:5 range=[partial.swift:17:5 - line:17:5] typerepr='B'))
      (tuple_expr type='()' location=partial.swift:17:6 range=[partial.swift:17:6 - line:17:7]))))

lowering type for constant #B.init!allocator.1
  formal type: @convention(method) (B.Type) -> () -> B
  lowered AST type: @convention(method) (B.Type) -> B
  SIL type: @convention(method) (@thick B.Type) -> @owned B
lowered sil:
// makeAorB()
sil hidden [noinline] [ossa] @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A {
bb0:
  %0 = metatype $@thick B.Type                    // user: %2
  // function_ref B.__allocating_init()
  %1 = function_ref @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B // user: %2
  %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
  %3 = upcast %2 : $B to $A                       // user: %4
  return %3 : $A                                  // id: %4
} // end sil function '$s7partial8makeAorBAA1ACyF'

	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> @owned A:
Verifying ownership of:   %0 = metatype $@thick B.Type                    // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref B.__allocating_init()
  %1 = function_ref @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = upcast %2 : $B to $A                       // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %3 = upcast %2 : $B to $A                       // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %4
function return type: $A
return inst type: $A
lowering type for constant #g
  formal type: @convention(thin) () -> Bool
  lowered AST type: @convention(thin) () -> Bool
  SIL type: @convention(thin) () -> Bool
lowering @$s7partial1gSbyF : $@convention(thin) () -> Bool
(func_decl range=[partial.swift:20:1 - line:22:1] "g()" interface type='() -> Bool' access=internal
  (parameter_list range=[partial.swift:20:7 - line:20:8])
  (result
    (type_ident
      (component id='Bool' bind=Swift.(file).Bool@/Users/kenta/swiftc/swift/stdlib/public/core/Bool.swift:64:15)))
  (call_expr type='Bool' location=partial.swift:21:16 range=[partial.swift:21:5 - line:21:27] nothrow arg_labels=_:
    (dot_syntax_call_expr type='(UInt16) -> Bool' location=partial.swift:21:16 range=[partial.swift:21:5 - line:21:16] nothrow
      (declref_expr type='(A) -> (UInt16) -> Bool' location=partial.swift:21:16 range=[partial.swift:21:16 - line:21:16] decl=partial.(file).A.f@partial.swift:4:10 [with (substitution_map generic_signature=<T> (substitution T -> UInt16))] function_ref=single)
      (call_expr type='A' location=partial.swift:21:5 range=[partial.swift:21:5 - line:21:14] nothrow arg_labels=
        (declref_expr type='() -> A' location=partial.swift:21:5 range=[partial.swift:21:5 - line:21:5] decl=partial.(file).makeAorB()@partial.swift:16:6 function_ref=single)
        (tuple_expr type='()' location=partial.swift:21:13 range=[partial.swift:21:13 - line:21:14])))
    (paren_expr type='(UInt16)' location=partial.swift:21:18 range=[partial.swift:21:17 - line:21:27]
      (coerce_expr implicit type='UInt16' location=partial.swift:21:18 range=[partial.swift:21:18 - line:21:26] writtenType='UInt16'
        (integer_literal_expr type='UInt16' location=partial.swift:21:25 range=[partial.swift:21:25 - line:21:25] value=9 builtin_initializer=Swift.(file).UInt16.init(_builtinIntegerLiteral:)@/Users/kenta/swiftc/build/Xcode-DebugAssert/swift-macosx-x86_64/stdlib/public/core/8/IntegerTypes.swift:2859:10 initializer=**NULL**)))))

lowering type for constant #A.f!1
  formal type: @convention(method) <τ_0_0> (A) -> (τ_0_0) -> Bool
  lowered AST type: @convention(method) <τ_0_0> (τ_0_0, A) -> Bool
  SIL type: @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool
lowering type for constant #makeAorB
  formal type: @convention(thin) () -> A
  lowered AST type: @convention(thin) () -> A
  SIL type: @convention(thin) () -> @owned A
lowering type for constant #UInt16.init!allocator.1
  formal type: @convention(method) (UInt16.Type) -> (Builtin.IntLiteral) -> UInt16
  lowered AST type: @convention(method) (Builtin.IntLiteral, UInt16.Type) -> UInt16
  SIL type: @convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16
lowering type for constant #UInt16.init!allocator.1
  formal type: @convention(method) (UInt16.Type) -> (Builtin.IntLiteral) -> UInt16
  lowered AST type: @convention(method) (Builtin.IntLiteral, UInt16.Type) -> UInt16
  SIL type: @convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16
lowered sil:
// g()
sil hidden [ossa] @$s7partial1gSbyF : $@convention(thin) () -> Bool {
bb0:
  // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %11, %9, %8
  %2 = integer_literal $Builtin.IntLiteral, 9     // user: %5
  %3 = metatype $@thin UInt16.Type                // user: %5
  // function_ref UInt16.init(_builtinIntegerLiteral:)
  %4 = function_ref @$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %5
  %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
  %6 = alloc_stack $UInt16                        // users: %10, %9, %7
  store %5 to [trivial] %6 : $*UInt16             // id: %7
  %8 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %9
  %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
  dealloc_stack %6 : $*UInt16                     // id: %10
  destroy_value %1 : $A                           // id: %11
  return %9 : $Bool                               // id: %12
} // end sil function '$s7partial1gSbyF'

	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> Bool:
Verifying ownership of:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
    Gathering and classifying uses!
        Regular User:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %11, %9, %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %11, %9, %8
    Gathering and classifying uses!
        Regular User:   %8 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %9
        Regular User:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
        Lifetime Ending User:   destroy_value %1 : $A                           // id: %11
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = integer_literal $Builtin.IntLiteral, 9     // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = metatype $@thin UInt16.Type                // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref UInt16.init(_builtinIntegerLiteral:)
  %4 = function_ref @$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    Gathering and classifying uses!
        Regular User:   store %5 to [trivial] %6 : $*UInt16             // id: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = alloc_stack $UInt16                        // users: %10, %9, %7
    Gathering and classifying uses!
        Regular User:   store %5 to [trivial] %6 : $*UInt16             // id: %7
        Regular User:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
        Regular User:   dealloc_stack %6 : $*UInt16                     // id: %10
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
    Gathering and classifying uses!
        Regular User:   return %9 : $Bool                               // id: %12
    No lifetime ending users?! Bailing early.
  return %9 : $Bool                               // id: %12
function return type: $Bool
return inst type: $Bool
lowered toplevel sil:
// main
sil [ossa] @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Verifying ownership of: %0 = argument of bb0 : $Int32
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    Gathering and classifying uses!
        Regular User:   return %3 : $Int32                              // id: %4
    No lifetime ending users?! Bailing early.
  return %3 : $Int32                              // id: %4
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Verifying ownership of: %0 = argument of bb0 : $Int32
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    Gathering and classifying uses!
        Regular User:   return %3 : $Int32                              // id: %4
    No lifetime ending users?! Bailing early.
  return %3 : $Int32                              // id: %4
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick A.Type
Input types for SIL function type @convention(method) (@thick A.Type) -> @owned A:
$@thick A.Type
Verifying ownership of: %0 = argument of bb0 : $@thick A.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = alloc_ref $A                               // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.init()
  %2 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %4
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> @owned A:
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   %2 = mark_uninitialized [rootself] %0 : $A      // users: %4, %3
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = mark_uninitialized [rootself] %0 : $A      // users: %4, %3
    Gathering and classifying uses!
        Regular User:   %3 = copy_value %2 : $A                         // user: %5
        Lifetime Ending User:   destroy_value %2 : $A                           // id: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %3 = copy_value %2 : $A                         // user: %5
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %5
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %5
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$A
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool:
$*τ_0_0
$A
Verifying ownership of: %0 = argument of bb0 : $*T                        // user: %2
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $A                         // user: %3
    Gathering and classifying uses!
        Regular User:   debug_value %1 : $A, let, name "self", argno 2  // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = metatype $@thick T.Type                    // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
    Gathering and classifying uses!
        Regular User:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = metatype $@thick A.Type                    // user: %8
    Gathering and classifying uses!
        Regular User:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref == infix(_:_:)
  %10 = function_ref @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    Gathering and classifying uses!
        Regular User:   return %11 : $Bool                              // id: %12
    No lifetime ending users?! Bailing early.
  return %11 : $Bool                              // id: %12
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@guaranteed A) -> @owned Builtin.NativeObject:
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Regular User:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
        Regular User:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $Builtin.NativeObject               // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $Builtin.NativeObject               // id: %4
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> ():
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %6, %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Regular User:   %3 = begin_borrow %0 : $A                       // users: %5, %4
        Lifetime Ending User:   end_lifetime %0 : $A                            // id: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.deinit
  %2 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %2(%3) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = begin_borrow %0 : $A                       // users: %5, %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %2(%3) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %7
        Lifetime Ending User:   end_borrow %3 : $A                              // id: %5
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %4 = apply %2(%3) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %7
    Gathering and classifying uses!
        Lifetime Ending User:   %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $A // user: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $A // user: %8
    Gathering and classifying uses!
        Lifetime Ending User:   dealloc_ref %7 : $A                             // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %9 = tuple ()                                   // user: %10
    Gathering and classifying uses!
        Regular User:   return %9 : $()                                 // id: %10
    No lifetime ending users?! Bailing early.
  return %9 : $()                                 // id: %10
function return type: $()
return inst type: $()
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$B
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool:
$*τ_0_0
$B
Verifying ownership of: %0 = argument of bb0 : $*T                        // user: %2
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $B                         // user: %3
    Gathering and classifying uses!
        Regular User:   debug_value %1 : $B, let, name "self", argno 2  // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = integer_literal $Builtin.Int1, 0           // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = metatype $@thin Bool.Type                  // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref Bool.init(_builtinBooleanLiteral:)
  %6 = function_ref @$sSb22_builtinBooleanLiteralSbBi1__tcfC : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $Bool                               // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $Bool                               // id: %8
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@guaranteed B) -> @owned Builtin.NativeObject:
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
        Regular User:   %2 = upcast %0 : $B to $A                       // user: %4
        Regular User:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = upcast %0 : $B to $A                       // user: %4
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref A.deinit
  %3 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    Gathering and classifying uses!
        Regular User:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
        Lifetime Ending User:   return %4 : $Builtin.NativeObject               // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
    Gathering and classifying uses!
        Regular User:   %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
        Lifetime Ending User:   end_borrow %5 : $Builtin.NativeObject           // id: %7
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
  return %4 : $Builtin.NativeObject               // id: %8
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> ():
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // users: %6, %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
        Regular User:   %3 = begin_borrow %0 : $B                       // users: %5, %4
        Lifetime Ending User:   end_lifetime %0 : $B                            // id: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref B.deinit
  %2 = function_ref @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %2(%3) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = begin_borrow %0 : $B                       // users: %5, %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %2(%3) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %7
        Lifetime Ending User:   end_borrow %3 : $B                              // id: %5
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %4 = apply %2(%3) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %7
    Gathering and classifying uses!
        Lifetime Ending User:   %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $B // user: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $B // user: %8
    Gathering and classifying uses!
        Lifetime Ending User:   dealloc_ref %7 : $B                             // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %9 = tuple ()                                   // user: %10
    Gathering and classifying uses!
        Regular User:   return %9 : $()                                 // id: %10
    No lifetime ending users?! Bailing early.
  return %9 : $()                                 // id: %10
function return type: $()
return inst type: $()
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick B.Type
Input types for SIL function type @convention(method) (@thick B.Type) -> @owned B:
$@thick B.Type
Verifying ownership of: %0 = argument of bb0 : $@thick B.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = alloc_ref $B                               // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref B.init()
  %2 = function_ref @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $B                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $B                                  // id: %4
function return type: $B
return inst type: $B
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> @owned B:
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   store %0 to [init] %3 : $*B                     // id: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %1 = alloc_box ${ var B }, let, name "self"     // user: %2
    Gathering and classifying uses!
        Lifetime Ending User:   %2 = mark_uninitialized [derivedself] %1 : ${ var B } // users: %12, %3
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = mark_uninitialized [derivedself] %1 : ${ var B } // users: %12, %3
    Gathering and classifying uses!
        Regular User:   %3 = project_box %2 : ${ var B }, 0             // users: %11, %10, %5, %4
        Lifetime Ending User:   destroy_value %2 : ${ var B }                   // id: %12
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %3 = project_box %2 : ${ var B }, 0             // users: %11, %10, %5, %4
    Gathering and classifying uses!
        Regular User:   store %0 to [init] %3 : $*B                     // id: %4
        Regular User:   %5 = load [take] %3 : $*B                       // user: %6
        Regular User:   store %9 to [init] %3 : $*B                     // id: %10
        Regular User:   %11 = load [copy] %3 : $*B                      // user: %13
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = load [take] %3 : $*B                       // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   %6 = upcast %5 : $B to $A                       // user: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %6 = upcast %5 : $B to $A                       // user: %8
    Gathering and classifying uses!
        Lifetime Ending User:   %8 = apply %7(%6) : $@convention(method) (@owned A) -> @owned A // user: %9
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.init()
  %7 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %8
    Gathering and classifying uses!
        Regular User:   %8 = apply %7(%6) : $@convention(method) (@owned A) -> @owned A // user: %9
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = apply %7(%6) : $@convention(method) (@owned A) -> @owned A // user: %9
    Gathering and classifying uses!
        Lifetime Ending User:   %9 = unchecked_ref_cast %8 : $A to $B           // user: %10
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %9 = unchecked_ref_cast %8 : $A to $B           // user: %10
    Gathering and classifying uses!
        Lifetime Ending User:   store %9 to [init] %3 : $*B                     // id: %10
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %11 = load [copy] %3 : $*B                      // user: %13
    Gathering and classifying uses!
        Lifetime Ending User:   return %11 : $B                                 // id: %13
    Found lifetime ending users! Performing initial checks
  return %11 : $B                                 // id: %13
function return type: $B
return inst type: $B
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> @owned A:
Verifying ownership of:   %0 = metatype $@thick B.Type                    // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref B.__allocating_init()
  %1 = function_ref @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = upcast %2 : $B to $A                       // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %3 = upcast %2 : $B to $A                       // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %4
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> Bool:
Verifying ownership of:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
    Gathering and classifying uses!
        Regular User:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %11, %9, %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %11, %9, %8
    Gathering and classifying uses!
        Regular User:   %8 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %9
        Regular User:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
        Lifetime Ending User:   destroy_value %1 : $A                           // id: %11
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = integer_literal $Builtin.IntLiteral, 9     // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = metatype $@thin UInt16.Type                // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref UInt16.init(_builtinIntegerLiteral:)
  %4 = function_ref @$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    Gathering and classifying uses!
        Regular User:   store %5 to [trivial] %6 : $*UInt16             // id: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = alloc_stack $UInt16                        // users: %10, %9, %7
    Gathering and classifying uses!
        Regular User:   store %5 to [trivial] %6 : $*UInt16             // id: %7
        Regular User:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
        Regular User:   dealloc_stack %6 : $*UInt16                     // id: %10
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
    Gathering and classifying uses!
        Regular User:   return %9 : $Bool                               // id: %12
    No lifetime ending users?! Bailing early.
  return %9 : $Bool                               // id: %12
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** Checking witness tables for duplicates ***
*** Checking default witness tables for duplicates ***
*** Checking property descriptors ***
CallerAnalysis: Creating caller info for: main
CallerAnalysis: Creating caller info for: $s7partial1ACACycfC
CallerAnalysis: Creating caller info for: $s7partial1ACACycfc
CallerAnalysis: Creating caller info for: $s7partial1AC1fySbxlF
CallerAnalysis: Creating caller info for: $ss2eeoiySbypXpSg_ABtF
CallerAnalysis: Creating caller info for: $s7partial1ACfd
CallerAnalysis: Creating caller info for: $s7partial1ACfD
CallerAnalysis: Creating caller info for: $s7partial1BC1fySbxlF
CallerAnalysis: Creating caller info for: $sSb22_builtinBooleanLiteralSbBi1__tcfC
CallerAnalysis: Creating caller info for: $s7partial1BCfd
CallerAnalysis: Creating caller info for: $s7partial1BCfD
CallerAnalysis: Creating caller info for: $s7partial1BCACycfC
CallerAnalysis: Creating caller info for: $s7partial1BCACycfc
CallerAnalysis: Creating caller info for: $s7partial8makeAorBAA1ACyF
CallerAnalysis: Creating caller info for: $s7partial1gSbyF
CallerAnalysis: Creating caller info for: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
PMVerifierAnalysis. Add: main
PMVerifierAnalysis. Add: $s7partial1ACACycfC
PMVerifierAnalysis. Add: $s7partial1ACACycfc
PMVerifierAnalysis. Add: $s7partial1AC1fySbxlF
PMVerifierAnalysis. Add: $ss2eeoiySbypXpSg_ABtF
PMVerifierAnalysis. Add: $s7partial1ACfd
PMVerifierAnalysis. Add: $s7partial1ACfD
PMVerifierAnalysis. Add: $s7partial1BC1fySbxlF
PMVerifierAnalysis. Add: $sSb22_builtinBooleanLiteralSbBi1__tcfC
PMVerifierAnalysis. Add: $s7partial1BCfd
PMVerifierAnalysis. Add: $s7partial1BCfD
PMVerifierAnalysis. Add: $s7partial1BCACycfC
PMVerifierAnalysis. Add: $s7partial1BCACycfc
PMVerifierAnalysis. Add: $s7partial8makeAorBAA1ACyF
PMVerifierAnalysis. Add: $s7partial1gSbyF
PMVerifierAnalysis. Add: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
*** Optimizing the module (Guaranteed Passes) *** 

Running SILGenCleanup on main

Running SILGenCleanup on $s7partial1ACACycfC

Running SILGenCleanup on $s7partial1ACACycfc

Running SILGenCleanup on $s7partial1AC1fySbxlF

Running SILGenCleanup on $ss2eeoiySbypXpSg_ABtF

Running SILGenCleanup on $s7partial1ACfd

Running SILGenCleanup on $s7partial1ACfD

Running SILGenCleanup on $s7partial1BC1fySbxlF

Running SILGenCleanup on $sSb22_builtinBooleanLiteralSbBi1__tcfC

Running SILGenCleanup on $s7partial1BCfd

Running SILGenCleanup on $s7partial1BCfD

Running SILGenCleanup on $s7partial1BCACycfC

Running SILGenCleanup on $s7partial1BCACycfc

Running SILGenCleanup on $s7partial8makeAorBAA1ACyF

Running SILGenCleanup on $s7partial1gSbyF

Running SILGenCleanup on $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
******** Performing Capture Promotion on: main********
Invalidating caller: main
******** Performing Capture Promotion on: $s7partial1ACACycfC********
Invalidating caller: $s7partial1ACACycfC
******** Performing Capture Promotion on: $s7partial1ACACycfc********
Invalidating caller: $s7partial1ACACycfc
******** Performing Capture Promotion on: $s7partial1AC1fySbxlF********
Invalidating caller: $s7partial1AC1fySbxlF
******** Performing Capture Promotion on: $ss2eeoiySbypXpSg_ABtF********
Invalidating caller: $ss2eeoiySbypXpSg_ABtF
******** Performing Capture Promotion on: $s7partial1ACfd********
Invalidating caller: $s7partial1ACfd
******** Performing Capture Promotion on: $s7partial1ACfD********
Invalidating caller: $s7partial1ACfD
******** Performing Capture Promotion on: $s7partial1BC1fySbxlF********
Invalidating caller: $s7partial1BC1fySbxlF
******** Performing Capture Promotion on: $sSb22_builtinBooleanLiteralSbBi1__tcfC********
Invalidating caller: $sSb22_builtinBooleanLiteralSbBi1__tcfC
******** Performing Capture Promotion on: $s7partial1BCfd********
Invalidating caller: $s7partial1BCfd
******** Performing Capture Promotion on: $s7partial1BCfD********
Invalidating caller: $s7partial1BCfD
******** Performing Capture Promotion on: $s7partial1BCACycfC********
Invalidating caller: $s7partial1BCACycfC
******** Performing Capture Promotion on: $s7partial1BCACycfc********
Visiting alloc box:   %1 = alloc_box ${ var B }, let, name "self"     // user: %2
    Found project box:   %3 = project_box %2 : ${ var B }, 0             // users: %11, %10, %5, %4
We can optimize this alloc box!
Checking for any mutations that invalidate captures...
    Ran out of valid captures... bailing!

Invalidating caller: $s7partial1BCACycfc
******** Performing Capture Promotion on: $s7partial8makeAorBAA1ACyF********
Invalidating caller: $s7partial8makeAorBAA1ACyF
******** Performing Capture Promotion on: $s7partial1gSbyF********
Invalidating caller: $s7partial1gSbyF
******** Performing Capture Promotion on: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC********
Invalidating caller: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
Access Enforcement Selection in main
Invalidating caller: main
Access Enforcement Selection in $s7partial1ACACycfC
Invalidating caller: $s7partial1ACACycfC
Access Enforcement Selection in $s7partial1ACACycfc
Invalidating caller: $s7partial1ACACycfc
Access Enforcement Selection in $s7partial1AC1fySbxlF
Invalidating caller: $s7partial1AC1fySbxlF
Access Enforcement Selection in $s7partial1ACfd
Invalidating caller: $s7partial1ACfd
Access Enforcement Selection in $s7partial1ACfD
Invalidating caller: $s7partial1ACfD
Access Enforcement Selection in $s7partial1BC1fySbxlF
Invalidating caller: $s7partial1BC1fySbxlF
Access Enforcement Selection in $s7partial1BCfd
Invalidating caller: $s7partial1BCfd
Access Enforcement Selection in $s7partial1BCfD
Invalidating caller: $s7partial1BCfD
Access Enforcement Selection in $s7partial1BCACycfC
Invalidating caller: $s7partial1BCACycfC
Access Enforcement Selection in $s7partial1BCACycfc
  Box:   %1 = alloc_box ${ var B }, let, name "self"     // user: %2
Invalidating caller: $s7partial1BCACycfc
Access Enforcement Selection in $s7partial8makeAorBAA1ACyF
Invalidating caller: $s7partial8makeAorBAA1ACyF
Access Enforcement Selection in $s7partial1gSbyF
Invalidating caller: $s7partial1gSbyF
*** No return function processing: main
*** Definite Init visiting function: main
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Verifying ownership of: %0 = argument of bb0 : $Int32
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    Gathering and classifying uses!
        Regular User:   return %3 : $Int32                              // id: %4
    No lifetime ending users?! Bailing early.
  return %3 : $Int32                              // id: %4
function return type: $Int32
return inst type: $Int32
*** DestroyHoisting on function: main ***
*** No return function processing: $s7partial1ACACycfc
*** Definite Init visiting function: $s7partial1ACACycfc
*** Definite Init looking at:   %2 = mark_uninitialized [rootself] %0 : $A      // users: %4, %3

Get liveness 0, #0 at   return %3 : $A                                  // id: %5
Get liveness 0, #0 at   destroy_value %2 : $A                           // id: %4
Invalidating caller: $s7partial1ACACycfc
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> @owned A:
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %2, %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   destroy_value %0 : $A                           // id: %3
        Regular User:   %2 = copy_value %0 : $A                         // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = copy_value %0 : $A                         // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %2 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %2 : $A                                  // id: %4
function return type: $A
return inst type: $A
*** DestroyHoisting on function: $s7partial1ACACycfc ***
*** No return function processing: $s7partial1ACACycfC
*** Definite Init visiting function: $s7partial1ACACycfC
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick A.Type
Input types for SIL function type @convention(method) (@thick A.Type) -> @owned A:
$@thick A.Type
Verifying ownership of: %0 = argument of bb0 : $@thick A.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = alloc_ref $A                               // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.init()
  %2 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %4
function return type: $A
return inst type: $A
*** DestroyHoisting on function: $s7partial1ACACycfC ***
*** No return function processing: $s7partial1AC1fySbxlF
*** Definite Init visiting function: $s7partial1AC1fySbxlF
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$A
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool:
$*τ_0_0
$A
Verifying ownership of: %0 = argument of bb0 : $*T                        // user: %2
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $A                         // user: %3
    Gathering and classifying uses!
        Regular User:   debug_value %1 : $A, let, name "self", argno 2  // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = metatype $@thick T.Type                    // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
    Gathering and classifying uses!
        Regular User:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = metatype $@thick A.Type                    // user: %8
    Gathering and classifying uses!
        Regular User:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref == infix(_:_:)
  %10 = function_ref @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    Gathering and classifying uses!
        Regular User:   return %11 : $Bool                              // id: %12
    No lifetime ending users?! Bailing early.
  return %11 : $Bool                              // id: %12
function return type: $Bool
return inst type: $Bool
*** DestroyHoisting on function: $s7partial1AC1fySbxlF ***
*** No return function processing: $s7partial1ACfd
*** Definite Init visiting function: $s7partial1ACfd
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@guaranteed A) -> @owned Builtin.NativeObject:
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Regular User:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
        Regular User:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $Builtin.NativeObject               // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $Builtin.NativeObject               // id: %4
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
*** DestroyHoisting on function: $s7partial1ACfd ***
*** No return function processing: $s7partial1ACfD
*** Definite Init visiting function: $s7partial1ACfD
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> ():
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %6, %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Regular User:   %3 = begin_borrow %0 : $A                       // users: %5, %4
        Lifetime Ending User:   end_lifetime %0 : $A                            // id: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.deinit
  %2 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %2(%3) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = begin_borrow %0 : $A                       // users: %5, %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %2(%3) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %7
        Lifetime Ending User:   end_borrow %3 : $A                              // id: %5
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %4 = apply %2(%3) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %7
    Gathering and classifying uses!
        Lifetime Ending User:   %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $A // user: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $A // user: %8
    Gathering and classifying uses!
        Lifetime Ending User:   dealloc_ref %7 : $A                             // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %9 = tuple ()                                   // user: %10
    Gathering and classifying uses!
        Regular User:   return %9 : $()                                 // id: %10
    No lifetime ending users?! Bailing early.
  return %9 : $()                                 // id: %10
function return type: $()
return inst type: $()
Invalidating caller: $s7partial1ACfD
*** DestroyHoisting on function: $s7partial1ACfD ***
*** No return function processing: $s7partial1BC1fySbxlF
*** Definite Init visiting function: $s7partial1BC1fySbxlF
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$B
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool:
$*τ_0_0
$B
Verifying ownership of: %0 = argument of bb0 : $*T                        // user: %2
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $B                         // user: %3
    Gathering and classifying uses!
        Regular User:   debug_value %1 : $B, let, name "self", argno 2  // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = integer_literal $Builtin.Int1, 0           // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = metatype $@thin Bool.Type                  // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref Bool.init(_builtinBooleanLiteral:)
  %6 = function_ref @$sSb22_builtinBooleanLiteralSbBi1__tcfC : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $Bool                               // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $Bool                               // id: %8
function return type: $Bool
return inst type: $Bool
*** DestroyHoisting on function: $s7partial1BC1fySbxlF ***
*** No return function processing: $s7partial1BCfd
*** Definite Init visiting function: $s7partial1BCfd
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@guaranteed B) -> @owned Builtin.NativeObject:
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
        Regular User:   %2 = upcast %0 : $B to $A                       // user: %4
        Regular User:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = upcast %0 : $B to $A                       // user: %4
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref A.deinit
  %3 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    Gathering and classifying uses!
        Regular User:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
        Lifetime Ending User:   return %4 : $Builtin.NativeObject               // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
    Gathering and classifying uses!
        Regular User:   %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
        Lifetime Ending User:   end_borrow %5 : $Builtin.NativeObject           // id: %7
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
  return %4 : $Builtin.NativeObject               // id: %8
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
*** DestroyHoisting on function: $s7partial1BCfd ***
*** No return function processing: $s7partial1BCfD
*** Definite Init visiting function: $s7partial1BCfD
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> ():
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // users: %6, %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
        Regular User:   %3 = begin_borrow %0 : $B                       // users: %5, %4
        Lifetime Ending User:   end_lifetime %0 : $B                            // id: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref B.deinit
  %2 = function_ref @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %2(%3) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = begin_borrow %0 : $B                       // users: %5, %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %2(%3) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %7
        Lifetime Ending User:   end_borrow %3 : $B                              // id: %5
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %4 = apply %2(%3) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %7
    Gathering and classifying uses!
        Lifetime Ending User:   %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $B // user: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = unchecked_ref_cast %4 : $Builtin.NativeObject to $B // user: %8
    Gathering and classifying uses!
        Lifetime Ending User:   dealloc_ref %7 : $B                             // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %9 = tuple ()                                   // user: %10
    Gathering and classifying uses!
        Regular User:   return %9 : $()                                 // id: %10
    No lifetime ending users?! Bailing early.
  return %9 : $()                                 // id: %10
function return type: $()
return inst type: $()
Invalidating caller: $s7partial1BCfD
*** DestroyHoisting on function: $s7partial1BCfD ***
*** Promoting alloc_box to stack:   %1 = alloc_box ${ var B }, let, name "self"     // user: %2
Invalidating caller: $s7partial1BCACycfc
*** No return function processing: $s7partial1BCACycfc
*** Definite Init visiting function: $s7partial1BCACycfc
*** Definite Init looking at:   %2 = mark_uninitialized [derivedself] %1 : $*B  // users: %11, %3, %4, %9, %10

Get liveness 0, #1 at   return %10 : $B                                 // id: %13
Get self initialized at   return %10 : $B                                 // id: %13
Get liveness 0, #1 at   %7 = apply %6(%5) : $@convention(method) (@owned A) -> @owned A // user: %8
Get liveness 0, #1 at   destroy_addr %2 : $*B                           // id: %11
Get self initialized at   destroy_addr %2 : $*B                           // id: %11
Invalidating caller: $s7partial1BCACycfc
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> @owned B:
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // user: %2
    Gathering and classifying uses!
        Lifetime Ending User:   store %0 to [init] %1 : $*B                     // id: %2
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %1 = alloc_stack $B, let, name "self"           // users: %9, %8, %3, %2, %10, %11
    Gathering and classifying uses!
        Regular User:   dealloc_stack %1 : $*B                          // id: %11
        Regular User:   destroy_addr %1 : $*B                           // id: %10
        Regular User:   store %0 to [init] %1 : $*B                     // id: %2
        Regular User:   %3 = load [take] %1 : $*B                       // user: %4
        Regular User:   store %7 to [init] %1 : $*B                     // id: %8
        Regular User:   %9 = load [copy] %1 : $*B                       // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = load [take] %1 : $*B                       // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   %4 = upcast %3 : $B to $A                       // user: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %4 = upcast %3 : $B to $A                       // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.init()
  %5 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %6
    Gathering and classifying uses!
        Regular User:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    Gathering and classifying uses!
        Lifetime Ending User:   %7 = unchecked_ref_cast %6 : $A to $B           // user: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = unchecked_ref_cast %6 : $A to $B           // user: %8
    Gathering and classifying uses!
        Lifetime Ending User:   store %7 to [init] %1 : $*B                     // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %9 = load [copy] %1 : $*B                       // user: %12
    Gathering and classifying uses!
        Lifetime Ending User:   return %9 : $B                                  // id: %12
    Found lifetime ending users! Performing initial checks
  return %9 : $B                                  // id: %12
function return type: $B
return inst type: $B
*** DestroyHoisting on function: $s7partial1BCACycfc ***
*** No return function processing: $s7partial1BCACycfC
*** Definite Init visiting function: $s7partial1BCACycfC
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick B.Type
Input types for SIL function type @convention(method) (@thick B.Type) -> @owned B:
$@thick B.Type
Verifying ownership of: %0 = argument of bb0 : $@thick B.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = alloc_ref $B                               // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref B.init()
  %2 = function_ref @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $B                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $B                                  // id: %4
function return type: $B
return inst type: $B
*** DestroyHoisting on function: $s7partial1BCACycfC ***
*** No return function processing: $s7partial8makeAorBAA1ACyF
*** Definite Init visiting function: $s7partial8makeAorBAA1ACyF
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> @owned A:
Verifying ownership of:   %0 = metatype $@thick B.Type                    // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref B.__allocating_init()
  %1 = function_ref @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = upcast %2 : $B to $A                       // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %3 = upcast %2 : $B to $A                       // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %4
function return type: $A
return inst type: $A
*** DestroyHoisting on function: $s7partial8makeAorBAA1ACyF ***
*** No return function processing: $s7partial1gSbyF
*** Definite Init visiting function: $s7partial1gSbyF
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> Bool:
Verifying ownership of:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
    Gathering and classifying uses!
        Regular User:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %11, %9, %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %11, %9, %8
    Gathering and classifying uses!
        Regular User:   %8 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %9
        Regular User:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
        Lifetime Ending User:   destroy_value %1 : $A                           // id: %11
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = integer_literal $Builtin.IntLiteral, 9     // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = metatype $@thin UInt16.Type                // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref UInt16.init(_builtinIntegerLiteral:)
  %4 = function_ref @$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    Gathering and classifying uses!
        Regular User:   store %5 to [trivial] %6 : $*UInt16             // id: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = alloc_stack $UInt16                        // users: %10, %9, %7
    Gathering and classifying uses!
        Regular User:   store %5 to [trivial] %6 : $*UInt16             // id: %7
        Regular User:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
        Regular User:   dealloc_stack %6 : $*UInt16                     // id: %10
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
    Gathering and classifying uses!
        Regular User:   return %9 : $Bool                               // id: %12
    No lifetime ending users?! Bailing early.
  return %9 : $Bool                               // id: %12
function return type: $Bool
return inst type: $Bool
*** DestroyHoisting on function: $s7partial1gSbyF ***
    Trying to devirtualize:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Trying to devirtualize:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    Trying to devirtualize:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
    Trying to devirtualize:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Verifying ownership of: %0 = argument of bb0 : $Int32
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    Gathering and classifying uses!
        Regular User:   return %3 : $Int32                              // id: %4
    No lifetime ending users?! Bailing early.
  return %3 : $Int32                              // id: %4
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick A.Type
Input types for SIL function type @convention(method) (@thick A.Type) -> @owned A:
$@thick A.Type
Verifying ownership of: %0 = argument of bb0 : $@thick A.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = alloc_ref $A                               // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.init()
  %2 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %4
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> @owned A:
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %2, %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   destroy_value %0 : $A                           // id: %3
        Regular User:   %2 = copy_value %0 : $A                         // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = copy_value %0 : $A                         // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %2 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %2 : $A                                  // id: %4
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$A
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool:
$*τ_0_0
$A
Verifying ownership of: %0 = argument of bb0 : $*T                        // user: %2
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $A                         // user: %3
    Gathering and classifying uses!
        Regular User:   debug_value %1 : $A, let, name "self", argno 2  // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = metatype $@thick T.Type                    // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
    Gathering and classifying uses!
        Regular User:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = metatype $@thick A.Type                    // user: %8
    Gathering and classifying uses!
        Regular User:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref == infix(_:_:)
  %10 = function_ref @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    Gathering and classifying uses!
        Regular User:   return %11 : $Bool                              // id: %12
    No lifetime ending users?! Bailing early.
  return %11 : $Bool                              // id: %12
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@guaranteed A) -> @owned Builtin.NativeObject:
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Regular User:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
        Regular User:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $Builtin.NativeObject               // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $Builtin.NativeObject               // id: %4
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> ():
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %3, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   end_lifetime %0 : $A                            // id: %4
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.deinit
  %2 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
    Gathering and classifying uses!
        Lifetime Ending User:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A // user: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   dealloc_ref %5 : $A                             // id: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = tuple ()                                   // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $()                                 // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $()                                 // id: %8
function return type: $()
return inst type: $()
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$B
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool:
$*τ_0_0
$B
Verifying ownership of: %0 = argument of bb0 : $*T                        // user: %2
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $B                         // user: %3
    Gathering and classifying uses!
        Regular User:   debug_value %1 : $B, let, name "self", argno 2  // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = integer_literal $Builtin.Int1, 0           // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = metatype $@thin Bool.Type                  // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref Bool.init(_builtinBooleanLiteral:)
  %6 = function_ref @$sSb22_builtinBooleanLiteralSbBi1__tcfC : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = apply %6(%4, %5) : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $Bool                               // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $Bool                               // id: %8
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@guaranteed B) -> @owned Builtin.NativeObject:
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
        Regular User:   %2 = upcast %0 : $B to $A                       // user: %4
        Regular User:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = upcast %0 : $B to $A                       // user: %4
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref A.deinit
  %3 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    Gathering and classifying uses!
        Regular User:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
        Lifetime Ending User:   return %4 : $Builtin.NativeObject               // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
    Gathering and classifying uses!
        Regular User:   %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
        Lifetime Ending User:   end_borrow %5 : $Builtin.NativeObject           // id: %7
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
  return %4 : $Builtin.NativeObject               // id: %8
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> ():
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // users: %3, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   end_lifetime %0 : $B                            // id: %4
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %5
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref B.deinit
  %2 = function_ref @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %5
    Gathering and classifying uses!
        Lifetime Ending User:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B // user: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   dealloc_ref %5 : $B                             // id: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = tuple ()                                   // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $()                                 // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $()                                 // id: %8
function return type: $()
return inst type: $()
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick B.Type
Input types for SIL function type @convention(method) (@thick B.Type) -> @owned B:
$@thick B.Type
Verifying ownership of: %0 = argument of bb0 : $@thick B.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = alloc_ref $B                               // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref B.init()
  %2 = function_ref @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $B                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $B                                  // id: %4
function return type: $B
return inst type: $B
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> @owned B:
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // user: %2
    Gathering and classifying uses!
        Lifetime Ending User:   store %0 to [init] %1 : $*B                     // id: %2
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %1 = alloc_stack $B, let, name "self"           // users: %9, %8, %3, %2, %10, %11
    Gathering and classifying uses!
        Regular User:   dealloc_stack %1 : $*B                          // id: %11
        Regular User:   destroy_addr %1 : $*B                           // id: %10
        Regular User:   store %0 to [init] %1 : $*B                     // id: %2
        Regular User:   %3 = load [take] %1 : $*B                       // user: %4
        Regular User:   store %7 to [init] %1 : $*B                     // id: %8
        Regular User:   %9 = load [copy] %1 : $*B                       // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = load [take] %1 : $*B                       // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   %4 = upcast %3 : $B to $A                       // user: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %4 = upcast %3 : $B to $A                       // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.init()
  %5 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %6
    Gathering and classifying uses!
        Regular User:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    Gathering and classifying uses!
        Lifetime Ending User:   %7 = unchecked_ref_cast %6 : $A to $B           // user: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = unchecked_ref_cast %6 : $A to $B           // user: %8
    Gathering and classifying uses!
        Lifetime Ending User:   store %7 to [init] %1 : $*B                     // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %9 = load [copy] %1 : $*B                       // user: %12
    Gathering and classifying uses!
        Lifetime Ending User:   return %9 : $B                                  // id: %12
    Found lifetime ending users! Performing initial checks
  return %9 : $B                                  // id: %12
function return type: $B
return inst type: $B
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> @owned A:
Verifying ownership of:   %0 = metatype $@thick B.Type                    // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref B.__allocating_init()
  %1 = function_ref @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = upcast %2 : $B to $A                       // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %3 = upcast %2 : $B to $A                       // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %4
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> Bool:
Verifying ownership of:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
    Gathering and classifying uses!
        Regular User:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %11, %9, %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %11, %9, %8
    Gathering and classifying uses!
        Regular User:   %8 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %9
        Regular User:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
        Lifetime Ending User:   destroy_value %1 : $A                           // id: %11
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = integer_literal $Builtin.IntLiteral, 9     // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = metatype $@thin UInt16.Type                // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref UInt16.init(_builtinIntegerLiteral:)
  %4 = function_ref @$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    Gathering and classifying uses!
        Regular User:   store %5 to [trivial] %6 : $*UInt16             // id: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = alloc_stack $UInt16                        // users: %10, %9, %7
    Gathering and classifying uses!
        Regular User:   store %5 to [trivial] %6 : $*UInt16             // id: %7
        Regular User:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
        Regular User:   dealloc_stack %6 : $*UInt16                     // id: %10
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
    Gathering and classifying uses!
        Regular User:   return %9 : $Bool                               // id: %12
    No lifetime ending users?! Bailing early.
  return %9 : $Bool                               // id: %12
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** Checking witness tables for duplicates ***
*** Checking default witness tables for duplicates ***
*** Checking property descriptors ***
*** Deserialization Notification: DeserializeFunctionBody ***
    Begin Notifying: SILModule::SerializationCallback
    End Notifying: SILModule::SerializationCallback
    Begin Notifying: PassManagerDeserializationNotificationHandler
    End Notifying: PassManagerDeserializationNotificationHandler
*** Completed Deserialization Notifications for DeserializeFunctionBody
Deserialize SIL:
// Bool.init(_builtinBooleanLiteral:)
sil public_external [transparent] [serialized] [canonical] [ossa] @$sSb22_builtinBooleanLiteralSbBi1__tcfC : $@convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool {
// %0                                             // user: %2
bb0(%0 : $Builtin.Int1, %1 : $@thin Bool.Type):
  %2 = struct $Bool (%0 : $Builtin.Int1)          // user: %3
  return %2 : $Bool                               // id: %3
} // end sil function '$sSb22_builtinBooleanLiteralSbBi1__tcfC'

Deserialized $sSb22_builtinBooleanLiteralSbBi1__tcfC from Swift
Inlining @$sSb22_builtinBooleanLiteralSbBi1__tcfC into @$s7partial1BC1fySbxlF
    Trying to devirtualize:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    Trying to devirtualize:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %5
    Trying to devirtualize:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Trying to devirtualize:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    Trying to devirtualize:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    Trying to devirtualize:   %9 = apply %8<UInt16>(%6, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %12
    Trying to devirtualize:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
*** Deserialization Notification: DeserializeFunctionBody ***
    Begin Notifying: SILModule::SerializationCallback
    End Notifying: SILModule::SerializationCallback
    Begin Notifying: PassManagerDeserializationNotificationHandler
    End Notifying: PassManagerDeserializationNotificationHandler
*** Completed Deserialization Notifications for DeserializeFunctionBody
Deserialize SIL:
// UInt16.init(_builtinIntegerLiteral:)
sil public_external [transparent] [serialized] [canonical] [ossa] @$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin UInt16.Type):
  %2 = builtin "s_to_u_checked_trunc_IntLiteral_Int16"(%0 : $Builtin.IntLiteral) : $(Builtin.Int16, Builtin.Int1) // user: %3
  (%3, %4) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1) // user: %5
  %5 = struct $UInt16 (%3 : $Builtin.Int16)       // user: %6
  return %5 : $UInt16                             // id: %6
} // end sil function '$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC'

Deserialized $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC from Swift
Inlining @$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC into @$s7partial1gSbyF
    Trying to devirtualize:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %14, %12, %11
Invalidating caller: main
Invalidating caller: $s7partial1ACACycfC
Invalidating caller: $s7partial1ACACycfc
Invalidating caller: $s7partial1AC1fySbxlF
Invalidating caller: $ss2eeoiySbypXpSg_ABtF
Invalidating caller: $s7partial1ACfd
Invalidating caller: $s7partial1ACfD
Invalidating caller: $s7partial1BC1fySbxlF
Invalidating caller: $sSb22_builtinBooleanLiteralSbBi1__tcfC
Invalidating caller: $s7partial1BCfd
Invalidating caller: $s7partial1BCfD
Invalidating caller: $s7partial1BCACycfC
Invalidating caller: $s7partial1BCACycfc
Invalidating caller: $s7partial8makeAorBAA1ACyF
Invalidating caller: $s7partial1gSbyF
Invalidating caller: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
Process imports in function: main
Process imports in function: $s7partial1ACACycfC
Process imports in function: $s7partial1ACACycfc
Process imports in function: $s7partial1AC1fySbxlF
Deserialize SIL:
// == infix(_:_:)
sil [serialized] [canonical] @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool

Deserialized $ss2eeoiySbypXpSg_ABtF from Swift
Deserialize SIL:
// == infix(_:_:)
sil [serialized] [canonical] @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool

Deserialized $ss2eeoiySbypXpSg_ABtF from Swift
Process imports in function: $s7partial1ACfd
Process imports in function: $s7partial1ACfD
Process imports in function: $s7partial1BC1fySbxlF
Process imports in function: $sSb22_builtinBooleanLiteralSbBi1__tcfC
Process imports in function: $s7partial1BCfd
Process imports in function: $s7partial1BCfD
Process imports in function: $s7partial1BCACycfC
Process imports in function: $s7partial1BCACycfc
Process imports in function: $s7partial8makeAorBAA1ACyF
Process imports in function: $s7partial1gSbyF
Process imports in function: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
*** ConstPropagation processing: 
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
*** Diagnose Unreachable processing: main
Invalidating caller: main
	discovered a new reachable node bb0
*** ConstPropagation processing: 
*** Diagnose Unreachable processing: $s7partial1ACACycfc
Invalidating caller: $s7partial1ACACycfc
	discovered a new reachable node bb0
*** ConstPropagation processing: 
*** Diagnose Unreachable processing: $s7partial1ACACycfC
Invalidating caller: $s7partial1ACACycfC
	discovered a new reachable node bb0
*** ConstPropagation processing: 
*** Diagnose Unreachable processing: $s7partial1AC1fySbxlF
Invalidating caller: $s7partial1AC1fySbxlF
	discovered a new reachable node bb0
*** ConstPropagation processing: 
*** Diagnose Unreachable processing: $s7partial1ACfd
Invalidating caller: $s7partial1ACfd
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %7 = tuple ()                                   // user: %8
    User:   return %7 : $()                                 // id: %8
*** Diagnose Unreachable processing: $s7partial1ACfD
Invalidating caller: $s7partial1ACfD
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
    User:   return %5 : $Bool                               // id: %6
Visiting:   %4 = integer_literal $Builtin.Int1, 0           // user: %5
    User:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
    User:   return %5 : $Bool                               // id: %6
*** Diagnose Unreachable processing: $s7partial1BC1fySbxlF
Invalidating caller: $s7partial1BC1fySbxlF
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %2 = struct $Bool (%0 : $Builtin.Int1)          // user: %3
    User:   return %2 : $Bool                               // id: %3
*** Diagnose Unreachable processing: $sSb22_builtinBooleanLiteralSbBi1__tcfC
Invalidating caller: $sSb22_builtinBooleanLiteralSbBi1__tcfC
	discovered a new reachable node bb0
*** ConstPropagation processing: 
*** Diagnose Unreachable processing: $s7partial1BCfd
Invalidating caller: $s7partial1BCfd
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %7 = tuple ()                                   // user: %8
    User:   return %7 : $()                                 // id: %8
*** Diagnose Unreachable processing: $s7partial1BCfD
Invalidating caller: $s7partial1BCfD
	discovered a new reachable node bb0
*** PMO Optimize Memory Accesses looking at:   %1 = alloc_stack $B, let, name "self"           // users: %9, %8, %3, %2, %10, %11
  *** Promoting load:   %10 = load [copy] %1 : $*B                      // user: %13
      To value:   %8 = copy_value %7 : $B
Inserted Phis!
Invalidating caller: $s7partial1BCACycfc
*** ConstPropagation processing: 
*** PMO Dead Allocation Elimination looking at:   %1 = alloc_stack $B, let, name "self"           // users: %9, %3, %2, %12, %13
*** Diagnose Unreachable processing: $s7partial1BCACycfc
Invalidating caller: $s7partial1BCACycfc
	discovered a new reachable node bb0
*** ConstPropagation processing: 
*** Diagnose Unreachable processing: $s7partial1BCACycfC
Invalidating caller: $s7partial1BCACycfC
	discovered a new reachable node bb0
*** ConstPropagation processing: 
*** Diagnose Unreachable processing: $s7partial8makeAorBAA1ACyF
Invalidating caller: $s7partial8makeAorBAA1ACyF
	discovered a new reachable node bb0
*** PMO Optimize Memory Accesses looking at:   %7 = alloc_stack $UInt16                        // users: %11, %10, %8
*** ConstPropagation processing: 
Visiting:   %6 = struct $UInt16 (%4 : $Builtin.Int16)       // user: %8
    User:   store %6 to [trivial] %7 : $*UInt16             // id: %8
Visiting:   %2 = integer_literal $Builtin.IntLiteral, 9     // user: %3
    User:   %3 = builtin "s_to_u_checked_trunc_IntLiteral_Int16"(%2 : $Builtin.IntLiteral) : $(Builtin.Int16, Builtin.Int1) // user: %4
Visiting:   %4 = tuple (%2 : $Builtin.Int16, %3 : $Builtin.Int1) // user: %5
    User:   (%5, %6) = destructure_tuple %4 : $(Builtin.Int16, Builtin.Int1) // user: %7
Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
    User:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    User:   store %3 to [trivial] %4 : $*UInt16             // id: %5
Invalidating caller: $s7partial1gSbyF
*** PMO Dead Allocation Elimination looking at:   %4 = alloc_stack $UInt16                        // users: %8, %7, %5
*** Failed to remove autogenerated alloc: kept alive by:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
*** Diagnose Unreachable processing: $s7partial1gSbyF
Invalidating caller: $s7partial1gSbyF
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %5 = struct $UInt16 (%3 : $Builtin.Int16)       // user: %6
    User:   return %5 : $UInt16                             // id: %6
*** Diagnose Unreachable processing: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
Invalidating caller: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
	discovered a new reachable node bb0
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Verifying ownership of: %0 = argument of bb0 : $Int32
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    Gathering and classifying uses!
        Regular User:   return %3 : $Int32                              // id: %4
    No lifetime ending users?! Bailing early.
  return %3 : $Int32                              // id: %4
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick A.Type
Input types for SIL function type @convention(method) (@thick A.Type) -> @owned A:
$@thick A.Type
Verifying ownership of: %0 = argument of bb0 : $@thick A.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = alloc_ref $A                               // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.init()
  %2 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %4
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> @owned A:
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %2, %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   destroy_value %0 : $A                           // id: %3
        Regular User:   %2 = copy_value %0 : $A                         // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = copy_value %0 : $A                         // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %2 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %2 : $A                                  // id: %4
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$A
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool:
$*τ_0_0
$A
Verifying ownership of: %0 = argument of bb0 : $*T                        // user: %2
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $A                         // user: %3
    Gathering and classifying uses!
        Regular User:   debug_value %1 : $A, let, name "self", argno 2  // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = metatype $@thick T.Type                    // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
    Gathering and classifying uses!
        Regular User:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = metatype $@thick A.Type                    // user: %8
    Gathering and classifying uses!
        Regular User:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref == infix(_:_:)
  %10 = function_ref @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    Gathering and classifying uses!
        Regular User:   return %11 : $Bool                              // id: %12
    No lifetime ending users?! Bailing early.
  return %11 : $Bool                              // id: %12
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@guaranteed A) -> @owned Builtin.NativeObject:
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Regular User:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
        Regular User:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $Builtin.NativeObject               // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $Builtin.NativeObject               // id: %4
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> ():
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %3, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   end_lifetime %0 : $A                            // id: %4
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.deinit
  %2 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
    Gathering and classifying uses!
        Lifetime Ending User:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A // user: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   dealloc_ref %5 : $A                             // id: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = tuple ()                                   // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $()                                 // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $()                                 // id: %8
function return type: $()
return inst type: $()
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$B
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool:
$*τ_0_0
$B
Verifying ownership of: %0 = argument of bb0 : $*T                        // user: %2
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $B                         // user: %3
    Gathering and classifying uses!
        Regular User:   debug_value %1 : $B, let, name "self", argno 2  // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = integer_literal $Builtin.Int1, 0           // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
    Gathering and classifying uses!
        Regular User:   return %5 : $Bool                               // id: %6
    No lifetime ending users?! Bailing early.
  return %5 : $Bool                               // id: %6
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$Builtin.Int1
$@thin Bool.Type
Input types for SIL function type @convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool:
$Builtin.Int1
$@thin Bool.Type
Verifying ownership of: %0 = argument of bb0 : $Builtin.Int1              // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = struct $Bool (%0 : $Builtin.Int1)          // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $@thin Bool.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = struct $Bool (%0 : $Builtin.Int1)          // user: %3
    Gathering and classifying uses!
        Regular User:   return %2 : $Bool                               // id: %3
    No lifetime ending users?! Bailing early.
  return %2 : $Bool                               // id: %3
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@guaranteed B) -> @owned Builtin.NativeObject:
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
        Regular User:   %2 = upcast %0 : $B to $A                       // user: %4
        Regular User:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = upcast %0 : $B to $A                       // user: %4
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref A.deinit
  %3 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    Gathering and classifying uses!
        Regular User:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
        Lifetime Ending User:   return %4 : $Builtin.NativeObject               // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
    Gathering and classifying uses!
        Regular User:   %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
        Lifetime Ending User:   end_borrow %5 : $Builtin.NativeObject           // id: %7
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
  return %4 : $Builtin.NativeObject               // id: %8
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> ():
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // users: %3, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   end_lifetime %0 : $B                            // id: %4
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %5
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref B.deinit
  %2 = function_ref @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %5
    Gathering and classifying uses!
        Lifetime Ending User:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B // user: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   dealloc_ref %5 : $B                             // id: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = tuple ()                                   // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $()                                 // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $()                                 // id: %8
function return type: $()
return inst type: $()
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick B.Type
Input types for SIL function type @convention(method) (@thick B.Type) -> @owned B:
$@thick B.Type
Verifying ownership of: %0 = argument of bb0 : $@thick B.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = alloc_ref $B                               // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref B.init()
  %2 = function_ref @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $B                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $B                                  // id: %4
function return type: $B
return inst type: $B
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> @owned B:
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // user: %2
    Gathering and classifying uses!
        Lifetime Ending User:   store %0 to [init] %1 : $*B                     // id: %2
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %1 = alloc_stack $B, let, name "self"           // users: %9, %3, %2, %12, %13
    Gathering and classifying uses!
        Regular User:   dealloc_stack %1 : $*B                          // id: %13
        Regular User:   destroy_addr %1 : $*B                           // id: %12
        Regular User:   store %0 to [init] %1 : $*B                     // id: %2
        Regular User:   %3 = load [take] %1 : $*B                       // user: %4
        Regular User:   store %7 to [init] %1 : $*B                     // id: %9
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = load [take] %1 : $*B                       // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   %4 = upcast %3 : $B to $A                       // user: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %4 = upcast %3 : $B to $A                       // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.init()
  %5 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %6
    Gathering and classifying uses!
        Regular User:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    Gathering and classifying uses!
        Lifetime Ending User:   %7 = unchecked_ref_cast %6 : $A to $B           // users: %8, %9
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = unchecked_ref_cast %6 : $A to $B           // users: %8, %9
    Gathering and classifying uses!
        Lifetime Ending User:   store %7 to [init] %1 : $*B                     // id: %9
        Regular User:   %8 = copy_value %7 : $B                         // users: %10, %11
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %8 = copy_value %7 : $B                         // users: %10, %11
    Gathering and classifying uses!
        Lifetime Ending User:   destroy_value %8 : $B                           // id: %11
        Regular User:   %10 = copy_value %8 : $B                        // user: %14
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %10 = copy_value %8 : $B                        // user: %14
    Gathering and classifying uses!
        Lifetime Ending User:   return %10 : $B                                 // id: %14
    Found lifetime ending users! Performing initial checks
  return %10 : $B                                 // id: %14
function return type: $B
return inst type: $B
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> @owned A:
Verifying ownership of:   %0 = metatype $@thick B.Type                    // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref B.__allocating_init()
  %1 = function_ref @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = upcast %2 : $B to $A                       // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %3 = upcast %2 : $B to $A                       // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %4
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> Bool:
Verifying ownership of:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
    Gathering and classifying uses!
        Regular User:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6
    Gathering and classifying uses!
        Regular User:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
        Regular User:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
        Lifetime Ending User:   destroy_value %1 : $A                           // id: %9
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    Gathering and classifying uses!
        Regular User:   store %3 to [trivial] %4 : $*UInt16             // id: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = alloc_stack $UInt16                        // users: %8, %7, %5
    Gathering and classifying uses!
        Regular User:   store %3 to [trivial] %4 : $*UInt16             // id: %5
        Regular User:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
        Regular User:   dealloc_stack %4 : $*UInt16                     // id: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
    Gathering and classifying uses!
        Regular User:   return %7 : $Bool                               // id: %10
    No lifetime ending users?! Bailing early.
  return %7 : $Bool                               // id: %10
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$Builtin.IntLiteral
$@thin UInt16.Type
Input types for SIL function type @convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16:
$Builtin.IntLiteral
$@thin UInt16.Type
Verifying ownership of: %0 = argument of bb0 : $Builtin.IntLiteral        // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = builtin "s_to_u_checked_trunc_IntLiteral_Int16"(%0 : $Builtin.IntLiteral) : $(Builtin.Int16, Builtin.Int1) // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $@thin UInt16.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = builtin "s_to_u_checked_trunc_IntLiteral_Int16"(%0 : $Builtin.IntLiteral) : $(Builtin.Int16, Builtin.Int1) // user: %3
    Gathering and classifying uses!
        Regular User:   (%3, %4) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1) // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of: (**%3**, %4) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1) // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = struct $UInt16 (%3 : $Builtin.Int16)       // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of: (%3, **%4**) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1)
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = struct $UInt16 (%3 : $Builtin.Int16)       // user: %6
    Gathering and classifying uses!
        Regular User:   return %5 : $UInt16                             // id: %6
    No lifetime ending users?! Bailing early.
  return %5 : $UInt16                             // id: %6
function return type: $UInt16
return inst type: $UInt16
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** Checking witness tables for duplicates ***
*** Checking default witness tables for duplicates ***
*** Checking property descriptors ***
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Verifying ownership of: %0 = argument of bb0 : $Int32
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    Gathering and classifying uses!
        Regular User:   return %3 : $Int32                              // id: %4
    No lifetime ending users?! Bailing early.
  return %3 : $Int32                              // id: %4
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick A.Type
Input types for SIL function type @convention(method) (@thick A.Type) -> @owned A:
$@thick A.Type
Verifying ownership of: %0 = argument of bb0 : $@thick A.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = alloc_ref $A                               // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.init()
  %2 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %4
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> @owned A:
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %2, %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   destroy_value %0 : $A                           // id: %3
        Regular User:   %2 = copy_value %0 : $A                         // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = copy_value %0 : $A                         // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %2 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %2 : $A                                  // id: %4
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$A
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool:
$*τ_0_0
$A
Verifying ownership of: %0 = argument of bb0 : $*T                        // user: %2
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $A                         // user: %3
    Gathering and classifying uses!
        Regular User:   debug_value %1 : $A, let, name "self", argno 2  // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = metatype $@thick T.Type                    // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
    Gathering and classifying uses!
        Regular User:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = metatype $@thick A.Type                    // user: %8
    Gathering and classifying uses!
        Regular User:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref == infix(_:_:)
  %10 = function_ref @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    Gathering and classifying uses!
        Regular User:   return %11 : $Bool                              // id: %12
    No lifetime ending users?! Bailing early.
  return %11 : $Bool                              // id: %12
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@guaranteed A) -> @owned Builtin.NativeObject:
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Regular User:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
        Regular User:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $Builtin.NativeObject               // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $Builtin.NativeObject               // id: %4
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> ():
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %3, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   end_lifetime %0 : $A                            // id: %4
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.deinit
  %2 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
    Gathering and classifying uses!
        Lifetime Ending User:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A // user: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   dealloc_ref %5 : $A                             // id: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = tuple ()                                   // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $()                                 // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $()                                 // id: %8
function return type: $()
return inst type: $()
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$B
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool:
$*τ_0_0
$B
Verifying ownership of: %0 = argument of bb0 : $*T                        // user: %2
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $B                         // user: %3
    Gathering and classifying uses!
        Regular User:   debug_value %1 : $B, let, name "self", argno 2  // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = integer_literal $Builtin.Int1, 0           // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
    Gathering and classifying uses!
        Regular User:   return %5 : $Bool                               // id: %6
    No lifetime ending users?! Bailing early.
  return %5 : $Bool                               // id: %6
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$Builtin.Int1
$@thin Bool.Type
Input types for SIL function type @convention(method) (Builtin.Int1, @thin Bool.Type) -> Bool:
$Builtin.Int1
$@thin Bool.Type
Verifying ownership of: %0 = argument of bb0 : $Builtin.Int1              // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = struct $Bool (%0 : $Builtin.Int1)          // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $@thin Bool.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = struct $Bool (%0 : $Builtin.Int1)          // user: %3
    Gathering and classifying uses!
        Regular User:   return %2 : $Bool                               // id: %3
    No lifetime ending users?! Bailing early.
  return %2 : $Bool                               // id: %3
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@guaranteed B) -> @owned Builtin.NativeObject:
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
        Regular User:   %2 = upcast %0 : $B to $A                       // user: %4
        Regular User:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = upcast %0 : $B to $A                       // user: %4
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref A.deinit
  %3 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    Gathering and classifying uses!
        Regular User:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
        Lifetime Ending User:   return %4 : $Builtin.NativeObject               // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
    Gathering and classifying uses!
        Regular User:   %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
        Lifetime Ending User:   end_borrow %5 : $Builtin.NativeObject           // id: %7
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
  return %4 : $Builtin.NativeObject               // id: %8
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> ():
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // users: %3, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   end_lifetime %0 : $B                            // id: %4
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %5
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref B.deinit
  %2 = function_ref @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %5
    Gathering and classifying uses!
        Lifetime Ending User:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B // user: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   dealloc_ref %5 : $B                             // id: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = tuple ()                                   // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $()                                 // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $()                                 // id: %8
function return type: $()
return inst type: $()
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick B.Type
Input types for SIL function type @convention(method) (@thick B.Type) -> @owned B:
$@thick B.Type
Verifying ownership of: %0 = argument of bb0 : $@thick B.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = alloc_ref $B                               // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref B.init()
  %2 = function_ref @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $B                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $B                                  // id: %4
function return type: $B
return inst type: $B
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> @owned B:
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // user: %2
    Gathering and classifying uses!
        Lifetime Ending User:   store %0 to [init] %1 : $*B                     // id: %2
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %1 = alloc_stack $B, let, name "self"           // users: %9, %3, %2, %12, %13
    Gathering and classifying uses!
        Regular User:   dealloc_stack %1 : $*B                          // id: %13
        Regular User:   destroy_addr %1 : $*B                           // id: %12
        Regular User:   store %0 to [init] %1 : $*B                     // id: %2
        Regular User:   %3 = load [take] %1 : $*B                       // user: %4
        Regular User:   store %7 to [init] %1 : $*B                     // id: %9
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = load [take] %1 : $*B                       // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   %4 = upcast %3 : $B to $A                       // user: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %4 = upcast %3 : $B to $A                       // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.init()
  %5 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %6
    Gathering and classifying uses!
        Regular User:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    Gathering and classifying uses!
        Lifetime Ending User:   %7 = unchecked_ref_cast %6 : $A to $B           // users: %8, %9
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = unchecked_ref_cast %6 : $A to $B           // users: %8, %9
    Gathering and classifying uses!
        Lifetime Ending User:   store %7 to [init] %1 : $*B                     // id: %9
        Regular User:   %8 = copy_value %7 : $B                         // users: %10, %11
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %8 = copy_value %7 : $B                         // users: %10, %11
    Gathering and classifying uses!
        Lifetime Ending User:   destroy_value %8 : $B                           // id: %11
        Regular User:   %10 = copy_value %8 : $B                        // user: %14
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %10 = copy_value %8 : $B                        // user: %14
    Gathering and classifying uses!
        Lifetime Ending User:   return %10 : $B                                 // id: %14
    Found lifetime ending users! Performing initial checks
  return %10 : $B                                 // id: %14
function return type: $B
return inst type: $B
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> @owned A:
Verifying ownership of:   %0 = metatype $@thick B.Type                    // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref B.__allocating_init()
  %1 = function_ref @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = upcast %2 : $B to $A                       // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %3 = upcast %2 : $B to $A                       // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %4
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> Bool:
Verifying ownership of:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
    Gathering and classifying uses!
        Regular User:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6
    Gathering and classifying uses!
        Regular User:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
        Regular User:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
        Lifetime Ending User:   destroy_value %1 : $A                           // id: %9
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    Gathering and classifying uses!
        Regular User:   store %3 to [trivial] %4 : $*UInt16             // id: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = alloc_stack $UInt16                        // users: %8, %7, %5
    Gathering and classifying uses!
        Regular User:   store %3 to [trivial] %4 : $*UInt16             // id: %5
        Regular User:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
        Regular User:   dealloc_stack %4 : $*UInt16                     // id: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
    Gathering and classifying uses!
        Regular User:   return %7 : $Bool                               // id: %10
    No lifetime ending users?! Bailing early.
  return %7 : $Bool                               // id: %10
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$Builtin.IntLiteral
$@thin UInt16.Type
Input types for SIL function type @convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16:
$Builtin.IntLiteral
$@thin UInt16.Type
Verifying ownership of: %0 = argument of bb0 : $Builtin.IntLiteral        // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = builtin "s_to_u_checked_trunc_IntLiteral_Int16"(%0 : $Builtin.IntLiteral) : $(Builtin.Int16, Builtin.Int1) // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $@thin UInt16.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = builtin "s_to_u_checked_trunc_IntLiteral_Int16"(%0 : $Builtin.IntLiteral) : $(Builtin.Int16, Builtin.Int1) // user: %3
    Gathering and classifying uses!
        Regular User:   (%3, %4) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1) // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of: (**%3**, %4) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1) // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = struct $UInt16 (%3 : $Builtin.Int16)       // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of: (%3, **%4**) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1)
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = struct $UInt16 (%3 : $Builtin.Int16)       // user: %6
    Gathering and classifying uses!
        Regular User:   return %5 : $UInt16                             // id: %6
    No lifetime ending users?! Bailing early.
  return %5 : $UInt16                             // id: %6
function return type: $UInt16
return inst type: $UInt16
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** Checking witness tables for duplicates ***
*** Checking default witness tables for duplicates ***
*** Checking property descriptors ***
CallerAnalysis: Creating caller info for: main
CallerAnalysis: Creating caller info for: $s7partial1ACACycfC
CallerAnalysis: Creating caller info for: $s7partial1ACACycfc
CallerAnalysis: Creating caller info for: $s7partial1AC1fySbxlF
CallerAnalysis: Creating caller info for: $ss2eeoiySbypXpSg_ABtF
CallerAnalysis: Creating caller info for: $s7partial1ACfd
CallerAnalysis: Creating caller info for: $s7partial1ACfD
CallerAnalysis: Creating caller info for: $s7partial1BC1fySbxlF
CallerAnalysis: Creating caller info for: $sSb22_builtinBooleanLiteralSbBi1__tcfC
CallerAnalysis: Creating caller info for: $s7partial1BCfd
CallerAnalysis: Creating caller info for: $s7partial1BCfD
CallerAnalysis: Creating caller info for: $s7partial1BCACycfC
CallerAnalysis: Creating caller info for: $s7partial1BCACycfc
CallerAnalysis: Creating caller info for: $s7partial8makeAorBAA1ACyF
CallerAnalysis: Creating caller info for: $s7partial1gSbyF
CallerAnalysis: Creating caller info for: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
PMVerifierAnalysis. Add: main
PMVerifierAnalysis. Add: $s7partial1ACACycfC
PMVerifierAnalysis. Add: $s7partial1ACACycfc
PMVerifierAnalysis. Add: $s7partial1AC1fySbxlF
PMVerifierAnalysis. Add: $ss2eeoiySbypXpSg_ABtF
PMVerifierAnalysis. Add: $s7partial1ACfd
PMVerifierAnalysis. Add: $s7partial1ACfD
PMVerifierAnalysis. Add: $s7partial1BC1fySbxlF
PMVerifierAnalysis. Add: $sSb22_builtinBooleanLiteralSbBi1__tcfC
PMVerifierAnalysis. Add: $s7partial1BCfd
PMVerifierAnalysis. Add: $s7partial1BCfD
PMVerifierAnalysis. Add: $s7partial1BCACycfC
PMVerifierAnalysis. Add: $s7partial1BCACycfc
PMVerifierAnalysis. Add: $s7partial8makeAorBAA1ACyF
PMVerifierAnalysis. Add: $s7partial1gSbyF
PMVerifierAnalysis. Add: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
*** Optimizing the module (SILOpt Prepare Passes) *** 
MC: ADDING: 3 instrs to worklist
MC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

MC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

MC: Visiting:   return %3 : $Int32                              // id: %4

MC: ADDING: 4 instrs to worklist
MC: Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

MC: Visiting:   %2 = copy_value %0 : $A                         // user: %4

MC: Visiting:   destroy_value %0 : $A                           // id: %3

MC: Visiting:   return %2 : $A                                  // id: %4

MC: ADDING: 4 instrs to worklist
MC: Visiting:   %1 = alloc_ref $A                               // user: %3

MC: Visiting:   // function_ref A.init()
  %2 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %3

MC: Visiting:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4

MC: Visiting:   return %3 : $A                                  // id: %4

MC: ADDING: 11 instrs to worklist
MC: Visiting:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2

MC: Visiting:   debug_value %1 : $A, let, name "self", argno 2  // id: %3

MC: Visiting:   %4 = metatype $@thick T.Type                    // user: %5

MC: Visiting:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6

MC: Visiting:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11

MC: Visiting:   %7 = metatype $@thick A.Type                    // user: %8

MC: Visiting:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9

MC: Visiting:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11

MC: Visiting:   // function_ref == infix(_:_:)
  %10 = function_ref @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %11

MC: Visiting:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12

MC: Visiting:   return %11 : $Bool                              // id: %12

MC: ADDING: 4 instrs to worklist
MC: Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

MC: Visiting:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3

MC: Visiting:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4

MC: Visiting:   return %3 : $Builtin.NativeObject               // id: %4

MC: ADDING: 8 instrs to worklist
MC: Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

MC: Visiting:   // function_ref A.deinit
  %2 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %3

MC: Visiting:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5

MC: Visiting:   end_lifetime %0 : $A                            // id: %4

MC: Visiting:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A // user: %6

MC: Visiting:   dealloc_ref %5 : $A                             // id: %6

MC: Visiting:   %7 = tuple ()                                   // user: %8

MC: Visiting:   return %7 : $()                                 // id: %8

MC: ADDING: 5 instrs to worklist
MC: Visiting:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2

MC: Visiting:   debug_value %1 : $B, let, name "self", argno 2  // id: %3

MC: Visiting:   %4 = integer_literal $Builtin.Int1, 0           // user: %5

MC: Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6

MC: Visiting:   return %5 : $Bool                               // id: %6

MC: ADDING: 2 instrs to worklist
MC: Visiting:   %2 = struct $Bool (%0 : $Builtin.Int1)          // user: %3

MC: Visiting:   return %2 : $Bool                               // id: %3

MC: ADDING: 7 instrs to worklist
MC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

MC: Visiting:   %2 = upcast %0 : $B to $A                       // user: %4

MC: Visiting:   // function_ref A.deinit
  %3 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4

MC: Visiting:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5

MC: Visiting:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6

MC: Visiting:   end_borrow %5 : $Builtin.NativeObject           // id: %7

MC: Visiting:   return %4 : $Builtin.NativeObject               // id: %8

MC: ADDING: 8 instrs to worklist
MC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

MC: Visiting:   // function_ref B.deinit
  %2 = function_ref @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %3

MC: Visiting:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %5

MC: Visiting:   end_lifetime %0 : $B                            // id: %4

MC: Visiting:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B // user: %6

MC: Visiting:   dealloc_ref %5 : $B                             // id: %6

MC: Visiting:   %7 = tuple ()                                   // user: %8

MC: Visiting:   return %7 : $()                                 // id: %8

MC: ADDING: 14 instrs to worklist
MC: Visiting:   %1 = alloc_stack $B, let, name "self"           // users: %9, %3, %2, %12, %13

MC: Visiting:   store %0 to [init] %1 : $*B                     // id: %2

MC: Visiting:   %3 = load [take] %1 : $*B                       // user: %4

MC: Visiting:   %4 = upcast %3 : $B to $A                       // user: %6

MC: Visiting:   // function_ref A.init()
  %5 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %6

MC: Visiting:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7

MC: Visiting:   %7 = unchecked_ref_cast %6 : $A to $B           // users: %8, %9

MC: Visiting:   %8 = copy_value %7 : $B                         // users: %10, %11

MC: Visiting:   store %7 to [init] %1 : $*B                     // id: %9

MC: Visiting:   %10 = copy_value %8 : $B                        // user: %14

MC: Visiting:   destroy_value %8 : $B                           // id: %11

MC: Visiting:   destroy_addr %1 : $*B                           // id: %12

MC: Visiting:   dealloc_stack %1 : $*B                          // id: %13

MC: Visiting:   return %10 : $B                                 // id: %14

MC: ADDING: 4 instrs to worklist
MC: Visiting:   %1 = alloc_ref $B                               // user: %3

MC: Visiting:   // function_ref B.init()
  %2 = function_ref @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B // user: %3

MC: Visiting:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4

MC: Visiting:   return %3 : $B                                  // id: %4

MC: ADDING: 5 instrs to worklist
MC: Visiting:   %0 = metatype $@thick B.Type                    // user: %2

MC: Visiting:   // function_ref B.__allocating_init()
  %1 = function_ref @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B // user: %2

MC: Visiting:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3

MC: Visiting:   %3 = upcast %2 : $B to $A                       // user: %4

MC: Visiting:   return %3 : $A                                  // id: %4

MC: ADDING: 11 instrs to worklist
MC: Visiting:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

MC: Visiting:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6

MC: Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3

MC: Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

MC: Visiting:   %4 = alloc_stack $UInt16                        // users: %8, %7, %5

MC: Visiting:   store %3 to [trivial] %4 : $*UInt16             // id: %5

MC: Visiting:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7

MC: Visiting:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10

MC: Visiting:   dealloc_stack %4 : $*UInt16                     // id: %8

MC: Visiting:   destroy_value %1 : $A                           // id: %9

MC: Visiting:   return %7 : $Bool                               // id: %10

MC: ADDING: 4 instrs to worklist
MC: Visiting:   %2 = builtin "s_to_u_checked_trunc_IntLiteral_Int16"(%0 : $Builtin.IntLiteral) : $(Builtin.Int16, Builtin.Int1) // user: %3

MC: Visiting:   (%3, %4) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1) // user: %5

MC: Visiting:   %5 = struct $UInt16 (%3 : $Builtin.Int16)       // user: %6

MC: Visiting:   return %5 : $UInt16                             // id: %6

CallerAnalysis: Creating caller info for: main
CallerAnalysis: Creating caller info for: $s7partial1ACACycfC
CallerAnalysis: Creating caller info for: $s7partial1ACACycfc
CallerAnalysis: Creating caller info for: $s7partial1AC1fySbxlF
CallerAnalysis: Creating caller info for: $ss2eeoiySbypXpSg_ABtF
CallerAnalysis: Creating caller info for: $s7partial1ACfd
CallerAnalysis: Creating caller info for: $s7partial1ACfD
CallerAnalysis: Creating caller info for: $s7partial1BC1fySbxlF
CallerAnalysis: Creating caller info for: $sSb22_builtinBooleanLiteralSbBi1__tcfC
CallerAnalysis: Creating caller info for: $s7partial1BCfd
CallerAnalysis: Creating caller info for: $s7partial1BCfD
CallerAnalysis: Creating caller info for: $s7partial1BCACycfC
CallerAnalysis: Creating caller info for: $s7partial1BCACycfc
CallerAnalysis: Creating caller info for: $s7partial8makeAorBAA1ACyF
CallerAnalysis: Creating caller info for: $s7partial1gSbyF
CallerAnalysis: Creating caller info for: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
PMVerifierAnalysis. Add: main
PMVerifierAnalysis. Add: $s7partial1ACACycfC
PMVerifierAnalysis. Add: $s7partial1ACACycfc
PMVerifierAnalysis. Add: $s7partial1AC1fySbxlF
PMVerifierAnalysis. Add: $ss2eeoiySbypXpSg_ABtF
PMVerifierAnalysis. Add: $s7partial1ACfd
PMVerifierAnalysis. Add: $s7partial1ACfD
PMVerifierAnalysis. Add: $s7partial1BC1fySbxlF
PMVerifierAnalysis. Add: $sSb22_builtinBooleanLiteralSbBi1__tcfC
PMVerifierAnalysis. Add: $s7partial1BCfd
PMVerifierAnalysis. Add: $s7partial1BCfD
PMVerifierAnalysis. Add: $s7partial1BCACycfC
PMVerifierAnalysis. Add: $s7partial1BCACycfc
PMVerifierAnalysis. Add: $s7partial8makeAorBAA1ACyF
PMVerifierAnalysis. Add: $s7partial1gSbyF
PMVerifierAnalysis. Add: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
*** Optimizing the module (EarlyModulePasses) *** 
Running DeadFuncElimination
running dead function elimination
running function elimination
  anchor function: main
  anchor function: $s7partial1ACACycfC
  anchor function: $s7partial1ACACycfc
  anchor function: $s7partial1AC1fySbxlF
  anchor function: $s7partial1ACfd
  anchor function: $s7partial1ACfD
  anchor function: $s7partial1BC1fySbxlF
  anchor function: $s7partial1BCfd
  anchor function: $s7partial1BCfD
  anchor function: $s7partial1BCACycfC
  anchor function: $s7partial1BCACycfc
  anchor function: $s7partial8makeAorBAA1ACyF
  anchor function: $s7partial1gSbyF
    scan function $s7partial1gSbyF
    scan function $s7partial8makeAorBAA1ACyF
    scan function $s7partial1BCACycfc
    scan function $s7partial1BCfd
    scan function $s7partial1ACfd
    scan function $s7partial1ACACycfc
    scan function main
    scan function $s7partial1BCfD
    scan function $s7partial1ACfD
    scan function $s7partial1BC1fySbxlF
    scan function $s7partial1AC1fySbxlF
    scan function $ss2eeoiySbypXpSg_ABtF
    scan function $s7partial1BCACycfC
    scan function $s7partial1ACACycfC
  erase dead function $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
Invalidating caller: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
PMVerifierAnalysis. Delete: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
  erase dead function $sSb22_builtinBooleanLiteralSbBi1__tcfC
Invalidating caller: $sSb22_builtinBooleanLiteralSbBi1__tcfC
PMVerifierAnalysis. Delete: $sSb22_builtinBooleanLiteralSbBi1__tcfC
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Verifying ownership of: %0 = argument of bb0 : $Int32
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    Gathering and classifying uses!
        Regular User:   return %3 : $Int32                              // id: %4
    No lifetime ending users?! Bailing early.
  return %3 : $Int32                              // id: %4
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick A.Type
Input types for SIL function type @convention(method) (@thick A.Type) -> @owned A:
$@thick A.Type
Verifying ownership of: %0 = argument of bb0 : $@thick A.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = alloc_ref $A                               // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.init()
  %2 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %4
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> @owned A:
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %2, %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   destroy_value %0 : $A                           // id: %3
        Regular User:   %2 = copy_value %0 : $A                         // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = copy_value %0 : $A                         // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %2 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %2 : $A                                  // id: %4
function return type: $A
return inst type: $A
Invalidating caller: $s7partial1ACACycfc
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$A
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool:
$*τ_0_0
$A
Verifying ownership of: %0 = argument of bb0 : $*T                        // user: %2
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $A                         // user: %3
    Gathering and classifying uses!
        Regular User:   debug_value %1 : $A, let, name "self", argno 2  // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = metatype $@thick T.Type                    // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
    Gathering and classifying uses!
        Regular User:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = metatype $@thick A.Type                    // user: %8
    Gathering and classifying uses!
        Regular User:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref == infix(_:_:)
  %10 = function_ref @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %11
    Gathering and classifying uses!
        Regular User:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
    Gathering and classifying uses!
        Regular User:   return %11 : $Bool                              // id: %12
    No lifetime ending users?! Bailing early.
  return %11 : $Bool                              // id: %12
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@guaranteed A) -> @owned Builtin.NativeObject:
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Regular User:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
        Regular User:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = unchecked_ownership_conversion %2 : $Builtin.NativeObject, @guaranteed to @owned // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $Builtin.NativeObject               // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $Builtin.NativeObject               // id: %4
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
Invalidating caller: $s7partial1ACfd
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> ():
$A
Verifying ownership of: %0 = argument of bb0 : $A                         // users: %3, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   end_lifetime %0 : $A                            // id: %4
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.deinit
  %2 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
    Gathering and classifying uses!
        Lifetime Ending User:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A // user: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   dealloc_ref %5 : $A                             // id: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = tuple ()                                   // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $()                                 // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $()                                 // id: %8
function return type: $()
return inst type: $()
Invalidating caller: $s7partial1ACfD
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$B
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool:
$*τ_0_0
$B
Verifying ownership of: %0 = argument of bb0 : $*T                        // user: %2
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $B                         // user: %3
    Gathering and classifying uses!
        Regular User:   debug_value %1 : $B, let, name "self", argno 2  // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = integer_literal $Builtin.Int1, 0           // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
    Gathering and classifying uses!
        Regular User:   return %5 : $Bool                               // id: %6
    No lifetime ending users?! Bailing early.
  return %5 : $Bool                               // id: %6
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@guaranteed B) -> @owned Builtin.NativeObject:
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // users: %2, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
        Regular User:   %2 = upcast %0 : $B to $A                       // user: %4
        Regular User:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = upcast %0 : $B to $A                       // user: %4
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref A.deinit
  %3 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %8, %5
    Gathering and classifying uses!
        Regular User:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
        Lifetime Ending User:   return %4 : $Builtin.NativeObject               // id: %8
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = begin_borrow %4 : $Builtin.NativeObject    // users: %7, %6
    Gathering and classifying uses!
        Regular User:   %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
        Lifetime Ending User:   end_borrow %5 : $Builtin.NativeObject           // id: %7
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %6 = unchecked_ref_cast %5 : $Builtin.NativeObject to $B
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
  return %4 : $Builtin.NativeObject               // id: %8
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
Invalidating caller: $s7partial1BCfd
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> ():
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // users: %3, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
        Lifetime Ending User:   end_lifetime %0 : $B                            // id: %4
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %5
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref B.deinit
  %2 = function_ref @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %5
    Gathering and classifying uses!
        Lifetime Ending User:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B // user: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %5 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   dealloc_ref %5 : $B                             // id: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = tuple ()                                   // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $()                                 // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $()                                 // id: %8
function return type: $()
return inst type: $()
Invalidating caller: $s7partial1BCfD
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick B.Type
Input types for SIL function type @convention(method) (@thick B.Type) -> @owned B:
$@thick B.Type
Verifying ownership of: %0 = argument of bb0 : $@thick B.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = alloc_ref $B                               // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref B.init()
  %2 = function_ref @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $B                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $B                                  // id: %4
function return type: $B
return inst type: $B
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> @owned B:
$B
Verifying ownership of: %0 = argument of bb0 : $B                         // user: %2
    Gathering and classifying uses!
        Lifetime Ending User:   store %0 to [init] %1 : $*B                     // id: %2
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %1 = alloc_stack $B, let, name "self"           // users: %9, %3, %2, %12, %13
    Gathering and classifying uses!
        Regular User:   dealloc_stack %1 : $*B                          // id: %13
        Regular User:   destroy_addr %1 : $*B                           // id: %12
        Regular User:   store %0 to [init] %1 : $*B                     // id: %2
        Regular User:   %3 = load [take] %1 : $*B                       // user: %4
        Regular User:   store %7 to [init] %1 : $*B                     // id: %9
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = load [take] %1 : $*B                       // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   %4 = upcast %3 : $B to $A                       // user: %6
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %4 = upcast %3 : $B to $A                       // user: %6
    Gathering and classifying uses!
        Lifetime Ending User:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   // function_ref A.init()
  %5 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %6
    Gathering and classifying uses!
        Regular User:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
    Gathering and classifying uses!
        Lifetime Ending User:   %7 = unchecked_ref_cast %6 : $A to $B           // users: %8, %9
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %7 = unchecked_ref_cast %6 : $A to $B           // users: %8, %9
    Gathering and classifying uses!
        Lifetime Ending User:   store %7 to [init] %1 : $*B                     // id: %9
        Regular User:   %8 = copy_value %7 : $B                         // users: %10, %11
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %8 = copy_value %7 : $B                         // users: %10, %11
    Gathering and classifying uses!
        Lifetime Ending User:   destroy_value %8 : $B                           // id: %11
        Regular User:   %10 = copy_value %8 : $B                        // user: %14
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %10 = copy_value %8 : $B                        // user: %14
    Gathering and classifying uses!
        Lifetime Ending User:   return %10 : $B                                 // id: %14
    Found lifetime ending users! Performing initial checks
  return %10 : $B                                 // id: %14
function return type: $B
return inst type: $B
Invalidating caller: $s7partial1BCACycfc
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> @owned A:
Verifying ownership of:   %0 = metatype $@thick B.Type                    // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref B.__allocating_init()
  %1 = function_ref @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
    Gathering and classifying uses!
        Lifetime Ending User:   %3 = upcast %2 : $B to $A                       // user: %4
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %3 = upcast %2 : $B to $A                       // user: %4
    Gathering and classifying uses!
        Lifetime Ending User:   return %3 : $A                                  // id: %4
    Found lifetime ending users! Performing initial checks
  return %3 : $A                                  // id: %4
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> Bool:
Verifying ownership of:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
    Gathering and classifying uses!
        Regular User:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6
    Gathering and classifying uses!
        Regular User:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
        Regular User:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
        Lifetime Ending User:   destroy_value %1 : $A                           // id: %9
    Found lifetime ending users! Performing initial checks
Verifying ownership of:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    Gathering and classifying uses!
        Regular User:   store %3 to [trivial] %4 : $*UInt16             // id: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = alloc_stack $UInt16                        // users: %8, %7, %5
    Gathering and classifying uses!
        Regular User:   store %3 to [trivial] %4 : $*UInt16             // id: %5
        Regular User:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
        Regular User:   dealloc_stack %4 : $*UInt16                     // id: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
    Gathering and classifying uses!
        Regular User:   return %7 : $Bool                               // id: %10
    No lifetime ending users?! Bailing early.
  return %7 : $Bool                               // id: %10
function return type: $Bool
return inst type: $Bool
Invalidating caller: $s7partial1gSbyF
Process imports in function: main
Process imports in function: $s7partial1ACACycfC
Process imports in function: $s7partial1ACACycfc
Process imports in function: $s7partial1AC1fySbxlF
Imported function: $ss2eeoiySbypXpSg_ABtF
*** Deserialization Notification: DeserializeFunctionBody ***
    Begin Notifying: SILModule::SerializationCallback
    End Notifying: SILModule::SerializationCallback
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: PassManagerDeserializationNotificationHandler
    End Notifying: PassManagerDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
After deserialization, stripping ownership in:$ss2eeoiySbypXpSg_ABtF
    End Notifying: FunctionBodyDeserializationNotificationHandler
*** Completed Deserialization Notifications for DeserializeFunctionBody
Deserialize SIL:
// == infix(_:_:)
sil public_external [serialized] @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool {
// %0                                             // user: %2
// %1                                             // users: %10, %4
bb0(%0 : $Optional<@thick Any.Type>, %1 : $Optional<@thick Any.Type>):
  switch_enum %0 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb1 // id: %2

// %3                                             // user: %7
bb1(%3 : $@thick Any.Type):                       // Preds: bb0
  switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb3, default bb2 // id: %4

bb2:                                              // Preds: bb1
  br bb6                                          // id: %5

// %6                                             // user: %7
bb3(%6 : $@thick Any.Type):                       // Preds: bb1
  %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8
  %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
  br bb8(%8 : $Bool)                              // id: %9

bb4:                                              // Preds: bb0
  switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb7, default bb5 // id: %10

bb5:                                              // Preds: bb4
  br bb6                                          // id: %11

bb6:                                              // Preds: bb5 bb2
  %12 = integer_literal $Builtin.Int1, 0          // user: %13
  %13 = struct $Bool (%12 : $Builtin.Int1)        // user: %14
  br bb8(%13 : $Bool)                             // id: %14

bb7:                                              // Preds: bb4
  %15 = integer_literal $Builtin.Int1, -1         // user: %16
  %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
  br bb8(%16 : $Bool)                             // id: %17

// %18                                            // user: %19
bb8(%18 : $Bool):                                 // Preds: bb7 bb6 bb3
  return %18 : $Bool                              // id: %19
} // end sil function '$ss2eeoiySbypXpSg_ABtF'

Deserialized $ss2eeoiySbypXpSg_ABtF from Swift
	discovered a new reachable node bb0
	discovered a new reachable node bb4
	discovered a new reachable node bb7
	discovered a new reachable node bb8
	discovered a new reachable node bb5
	discovered a new reachable node bb6
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb2
Argument types for entry point BB:
$Optional<@thick Any.Type>
$Optional<@thick Any.Type>
Input types for SIL function type @convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool:
$Optional<@thick Any.Type>
$Optional<@thick Any.Type>
  return %18 : $Bool                              // id: %19
function return type: $Bool
return inst type: $Bool
Process imports in function: $ss2eeoiySbypXpSg_ABtF
Invalidating caller: $s7partial1AC1fySbxlF
Process imports in function: $ss2eeoiySbypXpSg_ABtF
Process imports in function: $s7partial1ACfd
Process imports in function: $s7partial1ACfD
Process imports in function: $s7partial1BC1fySbxlF
Process imports in function: $s7partial1BCfd
Process imports in function: $s7partial1BCfD
Process imports in function: $s7partial1BCACycfC
Process imports in function: $s7partial1BCACycfc
Process imports in function: $s7partial8makeAorBAA1ACyF
Process imports in function: $s7partial1gSbyF
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
Copy Peephole in Func main
Copy Peephole in Func $s7partial1ACACycfc
Copy Peephole in Func $s7partial1ACACycfC
Copy Peephole in Func $ss2eeoiySbypXpSg_ABtF
Copy Peephole in Func $s7partial1AC1fySbxlF
Copy Peephole in Func $s7partial1ACfd
Copy Peephole in Func $s7partial1ACfD
Copy Peephole in Func $s7partial1BC1fySbxlF
Copy Peephole in Func $s7partial1BCfd
Copy Peephole in Func $s7partial1BCfD
Copy Peephole in Func $s7partial1BCACycfc
Copy Peephole in Func $s7partial1BCACycfC
Copy Peephole in Func $s7partial8makeAorBAA1ACyF
Copy Peephole in Func $s7partial1gSbyF
*** Optimizing the module (HighLevel+EarlyLoopOpt) *** 
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
Copy Forwarding in Func main
***** LowerAggregate on function: main *****
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   return %3 : $Int32                              // id: %4
***** SROA on function: main *****
** Mem2Reg on function: main **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
### Run SimplifyCFG on main
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

***** Devirtualizer on function:main *****
***** GenericSpecializer on function:main *****
### Run SimplifyCFG on main
	discovered a new reachable node bb0
***** CSE on function: main *****
SILCSE VISITING:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
 ->   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE VISITING:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE Adding to value table:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
 ->   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE VISITING:   return %3 : $Int32                              // id: %4

*** RLE on function: main ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main
***** CodeMotion on function: main *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94f600
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: main ***
***** Processing main *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
VISITING:
      %2 = integer_literal $Builtin.Int32, 0          // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = integer_literal $Builtin.Int32, 0          // user: %3
VISITING:
      %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
VISITING:
      return %3 : $Int32                              // id: %4
**** Computing ARC Matching Sets for main ****

### Run SimplifyCFG on main
	discovered a new reachable node bb0
*** ARCCM on function: main ***
***** LowerAggregate on function: main *****
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   return %3 : $Int32                              // id: %4


SILCOMBINE ITERATION #0 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

***** SROA on function: main *****
** Mem2Reg on function: main **
	discovered a new reachable node bb0
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main


SILCOMBINE ITERATION #0 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

### Run SimplifyCFG on main
	discovered a new reachable node bb0
** StackPromotion **
No loops in main
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main
***** CSE on function: main *****
SILCSE VISITING:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
 ->   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE VISITING:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE Adding to value table:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
 ->   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE VISITING:   return %3 : $Int32                              // id: %4



SILCOMBINE ITERATION #0 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

### Run SimplifyCFG on main
	discovered a new reachable node bb0
Running AccessEnforcementReleaseSinking on main
Running local AccessEnforcementOpts on main
**** LOOP REGION FUNCTION INFO ****
Analyzing function: main
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in main
*** ConstPropagation processing: 
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
Removing in BB
sil_scope 1 {  parent @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 }
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
 not a check_bounds call   %2 = integer_literal $Builtin.Int32, 0          // user: %3
 not a check_bounds call   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
 not a check_bounds call   return %3 : $Int32                              // id: %4
No loops in main
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main
COW Array Opts in Func main
  Skipping Function: No loops.
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main
Copy Forwarding in Func $s7partial1ACACycfc
***** LowerAggregate on function: $s7partial1ACACycfc *****
Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
Visiting:   return %0 : $A                                  // id: %2
***** SROA on function: $s7partial1ACACycfc *****
** Mem2Reg on function: $s7partial1ACACycfc **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1ACACycfc
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1ACACycfc
SC: ADDING: 2 instrs to worklist
SC: Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

SC: Visiting:   return %0 : $A                                  // id: %2

***** Devirtualizer on function:$s7partial1ACACycfc *****
***** GenericSpecializer on function:$s7partial1ACACycfc *****
### Run SimplifyCFG on $s7partial1ACACycfc
	discovered a new reachable node bb0
***** CSE on function: $s7partial1ACACycfc *****
SILCSE VISITING:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

SILCSE VISITING:   return %0 : $A                                  // id: %2

*** RLE on function: $s7partial1ACACycfc ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// A.init()
sil hidden @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A {
// %0                                             // users: %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  return %0 : $A                                  // id: %2
} // end sil function '$s7partial1ACACycfc'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %0 : $A                                  // id: %2
Marking as live:
%0 = argument of bb0 : $A                         // users: %2, %1
Marking as live:
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
***** CodeMotion on function: $s7partial1ACACycfc *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6bb4ced0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1ACACycfc ***
***** Processing $s7partial1ACACycfc *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      debug_value %0 : $A, let, name "self", argno 1  // id: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING ENTRANCE ARGUMENT: %0 = argument of bb0 : $A                         // users: %2, %1
    Initializing state.
VISITING:
      debug_value %0 : $A, let, name "self", argno 1  // id: %1
VISITING:
      return %0 : $A                                  // id: %2
**** Computing ARC Matching Sets for $s7partial1ACACycfc ****

*** ARCCM on function: $s7partial1ACACycfc ***
** StackPromotion **
No loops in $s7partial1ACACycfc
***** CSE on function: $s7partial1ACACycfc *****
SILCSE VISITING:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

SILCSE VISITING:   return %0 : $A                                  // id: %2

Running AccessEnforcementReleaseSinking on $s7partial1ACACycfc
Running local AccessEnforcementOpts on $s7partial1ACACycfc
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1ACACycfc
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1ACACycfc
Removing in BB
sil_scope 1 { loc "partial.swift":2:5 parent @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A }
sil_scope 2 { loc "partial.swift":2:12 parent 1 }
// %0                                             // users: %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  return %0 : $A                                  // id: %2
 not a check_bounds call   debug_value %0 : $A, let, name "self", argno 1  // id: %1
 not a check_bounds call   return %0 : $A                                  // id: %2
No loops in $s7partial1ACACycfc
COW Array Opts in Func $s7partial1ACACycfc
  Skipping Function: No loops.
Copy Forwarding in Func $s7partial1ACACycfC
***** LowerAggregate on function: $s7partial1ACACycfC *****
Visiting:   %1 = alloc_ref $A                               // user: %3
Visiting:   // function_ref A.init()
  %2 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %3
Visiting:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
Visiting:   return %3 : $A                                  // id: %4
***** SROA on function: $s7partial1ACACycfC *****
** Mem2Reg on function: $s7partial1ACACycfC **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s7partial1ACACycfc -> abort
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1ACACycfC
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1ACACycfC
SC: ADDING: 4 instrs to worklist
SC: Visiting:   %1 = alloc_ref $A                               // user: %3

SC: Visiting:   // function_ref A.init()
  %2 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %3

SC: Visiting:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4

SC: Visiting:   return %3 : $A                                  // id: %4

***** Devirtualizer on function:$s7partial1ACACycfC *****
    Trying to devirtualize:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
***** GenericSpecializer on function:$s7partial1ACACycfC *****
recompute function-effect analysis with UpdateID 1
  >> analyze $s7partial1ACACycfc
  << finished $s7partial1ACACycfc
new iteration
  update callers of $s7partial1ACACycfc

Inline into caller: $s7partial1ACACycfC
    pure-call decision $s7partial1ACACycfc
    inline [1->1] $s7partial1ACACycfc
Invalidating caller: $s7partial1ACACycfC
Copy Forwarding in Func $s7partial1ACACycfC
***** LowerAggregate on function: $s7partial1ACACycfC *****
Visiting:   %1 = alloc_ref $A                               // users: %3, %2
Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2
Visiting:   return %1 : $A                                  // id: %3
***** SROA on function: $s7partial1ACACycfC *****
** Mem2Reg on function: $s7partial1ACACycfC **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1ACACycfC
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1ACACycfC
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %1 = alloc_ref $A                               // users: %3, %2

SC: Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2

SC: Visiting:   return %1 : $A                                  // id: %3

***** Devirtualizer on function:$s7partial1ACACycfC *****
***** GenericSpecializer on function:$s7partial1ACACycfC *****
### Run SimplifyCFG on $s7partial1ACACycfC
	discovered a new reachable node bb0
***** CSE on function: $s7partial1ACACycfC *****
SILCSE VISITING:   %1 = alloc_ref $A                               // users: %3, %2

SILCSE VISITING:   debug_value %1 : $A, let, name "self", argno 1  // id: %2

SILCSE VISITING:   return %1 : $A                                  // id: %3

*** RLE on function: $s7partial1ACACycfC ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// A.__allocating_init()
sil hidden [exact_self_class] @$s7partial1ACACycfC : $@convention(method) (@thick A.Type) -> @owned A {
bb0(%0 : $@thick A.Type):
  %1 = alloc_ref $A                               // users: %3, %2
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
  return %1 : $A                                  // id: %3
} // end sil function '$s7partial1ACACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $A                                  // id: %3
Marking as live:
  %1 = alloc_ref $A                               // users: %3, %2
Marking as live:
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
Removing dead argument:
%0 = argument of bb0 : $@thick A.Type
Invalidating caller: $s7partial1ACACycfC
***** CodeMotion on function: $s7partial1ACACycfC *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a74eac0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1ACACycfC ***
***** Processing $s7partial1ACACycfC *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      debug_value %1 : $A, let, name "self", argno 1  // id: %2
VISITING:
      %1 = alloc_ref $A                               // users: %3, %2
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %1 = alloc_ref $A                               // users: %3, %2
VISITING:
      debug_value %1 : $A, let, name "self", argno 1  // id: %2
VISITING:
      return %1 : $A                                  // id: %3
**** Computing ARC Matching Sets for $s7partial1ACACycfC ****

### Run SimplifyCFG on $s7partial1ACACycfC
	discovered a new reachable node bb0
*** ARCCM on function: $s7partial1ACACycfC ***
***** LowerAggregate on function: $s7partial1ACACycfC *****
Visiting:   %1 = alloc_ref $A                               // users: %3, %2
Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2
Visiting:   return %1 : $A                                  // id: %3


SILCOMBINE ITERATION #0 on $s7partial1ACACycfC
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %1 = alloc_ref $A                               // users: %3, %2

SC: Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2

SC: Visiting:   return %1 : $A                                  // id: %3

***** SROA on function: $s7partial1ACACycfC *****
** Mem2Reg on function: $s7partial1ACACycfC **
	discovered a new reachable node bb0
// A.__allocating_init()
sil hidden [exact_self_class] @$s7partial1ACACycfC : $@convention(method) (@thick A.Type) -> @owned A {
bb0(%0 : $@thick A.Type):
  %1 = alloc_ref $A                               // users: %3, %2
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
  return %1 : $A                                  // id: %3
} // end sil function '$s7partial1ACACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $A                                  // id: %3
Marking as live:
  %1 = alloc_ref $A                               // users: %3, %2
Marking as live:
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
Removing dead argument:
%0 = argument of bb0 : $@thick A.Type
Invalidating caller: $s7partial1ACACycfC


SILCOMBINE ITERATION #0 on $s7partial1ACACycfC
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %1 = alloc_ref $A                               // users: %3, %2

SC: Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2

SC: Visiting:   return %1 : $A                                  // id: %3

### Run SimplifyCFG on $s7partial1ACACycfC
	discovered a new reachable node bb0
** StackPromotion **
No loops in $s7partial1ACACycfC
// A.__allocating_init()
sil hidden [exact_self_class] @$s7partial1ACACycfC : $@convention(method) (@thick A.Type) -> @owned A {
bb0(%0 : $@thick A.Type):
  %1 = alloc_ref $A                               // users: %3, %2
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
  return %1 : $A                                  // id: %3
} // end sil function '$s7partial1ACACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $A                                  // id: %3
Marking as live:
  %1 = alloc_ref $A                               // users: %3, %2
Marking as live:
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
Removing dead argument:
%0 = argument of bb0 : $@thick A.Type
Invalidating caller: $s7partial1ACACycfC
***** CSE on function: $s7partial1ACACycfC *****
SILCSE VISITING:   %1 = alloc_ref $A                               // users: %3, %2

SILCSE VISITING:   debug_value %1 : $A, let, name "self", argno 1  // id: %2

SILCSE VISITING:   return %1 : $A                                  // id: %3



SILCOMBINE ITERATION #0 on $s7partial1ACACycfC
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %1 = alloc_ref $A                               // users: %3, %2

SC: Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2

SC: Visiting:   return %1 : $A                                  // id: %3

### Run SimplifyCFG on $s7partial1ACACycfC
	discovered a new reachable node bb0
Running AccessEnforcementReleaseSinking on $s7partial1ACACycfC
Running local AccessEnforcementOpts on $s7partial1ACACycfC
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1ACACycfC
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1ACACycfC
*** ConstPropagation processing: 
Removing in BB
sil_scope 1 { loc "partial.swift":2:5 parent @$s7partial1ACACycfC : $@convention(method) (@thick A.Type) -> @owned A }
sil_scope 2 { loc "partial.swift":2:5 parent 1 }
sil_scope 3 { loc "partial.swift":2:5 parent @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A inlined_at 2 }
bb0(%0 : $@thick A.Type):
  %1 = alloc_ref $A                               // users: %3, %2
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
  return %1 : $A                                  // id: %3
 not a check_bounds call   %1 = alloc_ref $A                               // users: %3, %2
 not a check_bounds call   debug_value %1 : $A, let, name "self", argno 1  // id: %2
 not a check_bounds call   return %1 : $A                                  // id: %3
No loops in $s7partial1ACACycfC
// A.__allocating_init()
sil hidden [exact_self_class] @$s7partial1ACACycfC : $@convention(method) (@thick A.Type) -> @owned A {
bb0(%0 : $@thick A.Type):
  %1 = alloc_ref $A                               // users: %3, %2
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
  return %1 : $A                                  // id: %3
} // end sil function '$s7partial1ACACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $A                                  // id: %3
Marking as live:
  %1 = alloc_ref $A                               // users: %3, %2
Marking as live:
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
Removing dead argument:
%0 = argument of bb0 : $@thick A.Type
Invalidating caller: $s7partial1ACACycfC
COW Array Opts in Func $s7partial1ACACycfC
  Skipping Function: No loops.
// A.__allocating_init()
sil hidden [exact_self_class] @$s7partial1ACACycfC : $@convention(method) (@thick A.Type) -> @owned A {
bb0(%0 : $@thick A.Type):
  %1 = alloc_ref $A                               // users: %3, %2
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
  return %1 : $A                                  // id: %3
} // end sil function '$s7partial1ACACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $A                                  // id: %3
Marking as live:
  %1 = alloc_ref $A                               // users: %3, %2
Marking as live:
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
Removing dead argument:
%0 = argument of bb0 : $@thick A.Type
Invalidating caller: $s7partial1ACACycfC
Copy Forwarding in Func $ss2eeoiySbypXpSg_ABtF
***** LowerAggregate on function: $ss2eeoiySbypXpSg_ABtF *****
Visiting:   switch_enum %0 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb1 // id: %2
Visiting:   switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb3, default bb2 // id: %4
Visiting:   br bb6                                          // id: %5
Visiting:   %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8
Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
Visiting:   br bb8(%8 : $Bool)                              // id: %9
Visiting:   switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb7, default bb5 // id: %10
Visiting:   br bb6                                          // id: %11
Visiting:   %12 = integer_literal $Builtin.Int1, 0          // user: %13
Visiting:   %13 = struct $Bool (%12 : $Builtin.Int1)        // user: %14
Visiting:   br bb8(%13 : $Bool)                             // id: %14
Visiting:   %15 = integer_literal $Builtin.Int1, -1         // user: %16
Visiting:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
Visiting:   br bb8(%16 : $Bool)                             // id: %17
Visiting:   return %18 : $Bool                              // id: %19
***** SROA on function: $ss2eeoiySbypXpSg_ABtF *****
** Mem2Reg on function: $ss2eeoiySbypXpSg_ABtF **
	discovered a new reachable node bb0
	discovered a new reachable node bb4
	discovered a new reachable node bb7
	discovered a new reachable node bb8
	discovered a new reachable node bb5
	discovered a new reachable node bb6
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb2
	discovered a new reachable node bb0
	discovered a new reachable node bb4
	discovered a new reachable node bb7
	discovered a new reachable node bb8
	discovered a new reachable node bb5
	discovered a new reachable node bb6
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb2
*** ConstPropagation processing: 
Visiting:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
    User:   br bb8(%16 : $Bool)                             // id: %17
Visiting:   %15 = integer_literal $Builtin.Int1, -1         // user: %16
    User:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
Visiting:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
    User:   br bb8(%16 : $Bool)                             // id: %17
Visiting:   %13 = struct $Bool (%12 : $Builtin.Int1)        // user: %14
    User:   br bb8(%13 : $Bool)                             // id: %14
Visiting:   %12 = integer_literal $Builtin.Int1, 0          // user: %13
    User:   %13 = struct $Bool (%12 : $Builtin.Int1)        // user: %14
Visiting:   %13 = struct $Bool (%12 : $Builtin.Int1)        // user: %14
    User:   br bb8(%13 : $Bool)                             // id: %14
Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
    User:   br bb8(%8 : $Bool)                              // id: %9
### Run SimplifyCFG on $ss2eeoiySbypXpSg_ABtF
	discovered a new reachable node bb0
	discovered a new reachable node bb4
	discovered a new reachable node bb7
	discovered a new reachable node bb8
	discovered a new reachable node bb5
	discovered a new reachable node bb6
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb2
Invalidating caller: $ss2eeoiySbypXpSg_ABtF


SILCOMBINE ITERATION #0 on $ss2eeoiySbypXpSg_ABtF
SC: ADDING: 15 instrs to worklist
SC: Visiting:   switch_enum %0 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb1 // id: %2

SC: Visiting:   switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb2 // id: %4

SC: Visiting:   br bb6                                          // id: %5

SC: Visiting:   %12 = integer_literal $Builtin.Int1, 0          // user: %13

SC: Visiting:   %13 = struct $Bool (%12 : $Builtin.Int1)        // user: %14

SC: Visiting:   br bb8(%13 : $Bool)                             // id: %14

SC: Visiting:   return %18 : $Bool                              // id: %19

SC: Visiting:   %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8

SC: Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9

SC: Visiting:   br bb8(%8 : $Bool)                              // id: %9

SC: Visiting:   switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb7, case #Optional.some!enumelt.1: bb5 // id: %10

SC: Visiting:   br bb6                                          // id: %11

SC: Visiting:   %15 = integer_literal $Builtin.Int1, -1         // user: %16

SC: Visiting:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17

SC: Visiting:   br bb8(%16 : $Bool)                             // id: %17

***** Devirtualizer on function:$ss2eeoiySbypXpSg_ABtF *****
***** GenericSpecializer on function:$ss2eeoiySbypXpSg_ABtF *****
	discovered a new reachable node bb0
	discovered a new reachable node bb4
	discovered a new reachable node bb7
	discovered a new reachable node bb8
	discovered a new reachable node bb5
	discovered a new reachable node bb6
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb2
** Mem2Reg on function: $ss2eeoiySbypXpSg_ABtF **
	discovered a new reachable node bb0
	discovered a new reachable node bb4
	discovered a new reachable node bb7
	discovered a new reachable node bb8
	discovered a new reachable node bb5
	discovered a new reachable node bb6
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb2
*** ConstPropagation processing: 
Visiting:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
    User:   br bb8(%16 : $Bool)                             // id: %17
Visiting:   %15 = integer_literal $Builtin.Int1, -1         // user: %16
    User:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
Visiting:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
    User:   br bb8(%16 : $Bool)                             // id: %17
Visiting:   %13 = struct $Bool (%12 : $Builtin.Int1)        // user: %14
    User:   br bb8(%13 : $Bool)                             // id: %14
Visiting:   %12 = integer_literal $Builtin.Int1, 0          // user: %13
    User:   %13 = struct $Bool (%12 : $Builtin.Int1)        // user: %14
Visiting:   %13 = struct $Bool (%12 : $Builtin.Int1)        // user: %14
    User:   br bb8(%13 : $Bool)                             // id: %14
Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
    User:   br bb8(%8 : $Bool)                              // id: %9
### Run SimplifyCFG on $ss2eeoiySbypXpSg_ABtF
	discovered a new reachable node bb0
	discovered a new reachable node bb4
	discovered a new reachable node bb7
	discovered a new reachable node bb8
	discovered a new reachable node bb5
	discovered a new reachable node bb6
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb2
### Run SimplifyCFG on $ss2eeoiySbypXpSg_ABtF
	discovered a new reachable node bb0
	discovered a new reachable node bb4
	discovered a new reachable node bb7
	discovered a new reachable node bb8
	discovered a new reachable node bb5
	discovered a new reachable node bb6
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb2
***** CSE on function: $ss2eeoiySbypXpSg_ABtF *****
SILCSE VISITING:   switch_enum %0 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb1 // id: %2

SILCSE VISITING:   switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb7, case #Optional.some!enumelt.1: bb5 // id: %10

SILCSE VISITING:   %15 = integer_literal $Builtin.Int1, -1         // user: %16

SILCSE Adding to value table:   %15 = integer_literal $Builtin.Int1, -1         // user: %16
 ->   %15 = integer_literal $Builtin.Int1, -1         // user: %16

SILCSE VISITING:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17

SILCSE Adding to value table:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
 ->   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17

SILCSE VISITING:   br bb8(%16 : $Bool)                             // id: %17

SILCSE VISITING:   br bb6                                          // id: %11

SILCSE VISITING:   return %18 : $Bool                              // id: %19

SILCSE VISITING:   %12 = integer_literal $Builtin.Int1, 0          // user: %13

SILCSE Adding to value table:   %12 = integer_literal $Builtin.Int1, 0          // user: %13
 ->   %12 = integer_literal $Builtin.Int1, 0          // user: %13

SILCSE VISITING:   %13 = struct $Bool (%12 : $Builtin.Int1)        // user: %14

SILCSE Adding to value table:   %13 = struct $Bool (%12 : $Builtin.Int1)        // user: %14
 ->   %13 = struct $Bool (%12 : $Builtin.Int1)        // user: %14

SILCSE VISITING:   br bb8(%13 : $Bool)                             // id: %14

SILCSE VISITING:   switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb2 // id: %4

SILCSE VISITING:   %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8

SILCSE Adding to value table:   %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8
 ->   %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8

SILCSE VISITING:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9

SILCSE Adding to value table:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
 ->   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9

SILCSE VISITING:   br bb8(%8 : $Bool)                              // id: %9

SILCSE VISITING:   br bb6                                          // id: %5

*** RLE on function: $ss2eeoiySbypXpSg_ABtF ***
		Looking for trivial roots
Found a new trivial root: bb8
Last visited node: bb7
		Looking for non-trivial roots
Total: 9, Num: 10
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb8
3: bb3
4: bb1
5: bb0
6: bb6
7: bb2
8: bb5
9: bb4
10: bb7
Found roots: bb8 
	discovered a new reachable node nullptr
	discovered a new reachable node bb8
	discovered a new reachable node bb3
	discovered a new reachable node bb1
	discovered a new reachable node bb0
	discovered a new reachable node bb6
	discovered a new reachable node bb2
	discovered a new reachable node bb5
	discovered a new reachable node bb4
	discovered a new reachable node bb7
// == infix(_:_:)
sil public_external [serialized] @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool {
// %0                                             // user: %2
// %1                                             // users: %10, %4
bb0(%0 : $Optional<@thick Any.Type>, %1 : $Optional<@thick Any.Type>):
  switch_enum %0 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb1 // id: %2

// %3                                             // user: %7
bb1(%3 : $@thick Any.Type):                       // Preds: bb0
  switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb2 // id: %4

bb2:                                              // Preds: bb1
  br bb6                                          // id: %5

// %6                                             // user: %7
bb3(%6 : $@thick Any.Type):                       // Preds: bb1
  %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8
  %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
  br bb8(%8 : $Bool)                              // id: %9

bb4:                                              // Preds: bb0
  switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb7, case #Optional.some!enumelt.1: bb5 // id: %10

bb5:                                              // Preds: bb4
  br bb6                                          // id: %11

bb6:                                              // Preds: bb5 bb2
  %12 = integer_literal $Builtin.Int1, 0          // user: %13
  %13 = struct $Bool (%12 : $Builtin.Int1)        // user: %14
  br bb8(%13 : $Bool)                             // id: %14

bb7:                                              // Preds: bb4
  %15 = integer_literal $Builtin.Int1, -1         // user: %16
  %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
  br bb8(%16 : $Bool)                             // id: %17

// %18                                            // user: %19
bb8(%18 : $Bool):                                 // Preds: bb7 bb6 bb3
  return %18 : $Bool                              // id: %19
} // end sil function '$ss2eeoiySbypXpSg_ABtF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb8 {4294967295,4294967295} [1]
      [3] bb3 {4294967295,4294967295} [2]
      [3] bb1 {4294967295,4294967295} [2]
      [3] bb0 {4294967295,4294967295} [2]
      [3] bb6 {4294967295,4294967295} [2]
        [4] bb2 {4294967295,4294967295} [3]
        [4] bb5 {4294967295,4294967295} [3]
      [3] bb4 {4294967295,4294967295} [2]
      [3] bb7 {4294967295,4294967295} [2]
Roots: bb8 
Marking as live:
  return %18 : $Bool                              // id: %19
Marking as live:
%18 = argument of bb8 : $Bool                     // user: %19
Marking as live:
  br bb8(%16 : $Bool)                             // id: %17
Marking as live:
  switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb7, case #Optional.some!enumelt.1: bb5 // id: %10
Marking as live:
  switch_enum %0 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb1 // id: %2
Marking as live:
  %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
Marking as live:
  br bb8(%13 : $Bool)                             // id: %14
Marking as live:
  switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb2 // id: %4
Marking as live:
  %13 = struct $Bool (%12 : $Builtin.Int1)        // user: %14
Marking as live:
  br bb8(%8 : $Bool)                              // id: %9
Marking as live:
  %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
Marking as live:
  %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8
Marking as live:
%3 = argument of bb1 : $@thick Any.Type           // user: %7
Marking as live:
%6 = argument of bb3 : $@thick Any.Type           // user: %7
Marking as live:
  %12 = integer_literal $Builtin.Int1, 0          // user: %13
Marking as live:
%1 = argument of bb0 : $Optional<@thick Any.Type> // users: %10, %4
Marking as live:
  %15 = integer_literal $Builtin.Int1, -1         // user: %16
Marking as live:
%0 = argument of bb0 : $Optional<@thick Any.Type> // user: %2
***** CodeMotion on function: $ss2eeoiySbypXpSg_ABtF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6d984c00
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#1
    Predecessors (empty if no predecessors):
        BB#1; Ptr: 0x7f9e6a97bf40
    State Addr: 0x7f9e6d984e30
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#2
    Predecessors (empty if no predecessors):
        BB#2; Ptr: 0x7f9e6a97c020
    State Addr: 0x7f9e6d985060
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#3
    Predecessors (empty if no predecessors):
        BB#3; Ptr: 0x7f9e6a97c020
    State Addr: 0x7f9e6d985290
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#4
    Predecessors (empty if no predecessors):
        BB#4; Ptr: 0x7f9e6a97bf40
    State Addr: 0x7f9e6d9854c0
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#5
    Predecessors (empty if no predecessors):
        BB#5; Ptr: 0x7f9e6a97bfd8
    State Addr: 0x7f9e6d9856f0
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#6
    Predecessors (empty if no predecessors):
        BB#6; Ptr: 0x7f9e6a97c200
        BB#6; Ptr: 0x7f9e6a97c090
    State Addr: 0x7f9e6d985920
    Merging predecessors!
            Merging in rest of predecessors...
                Blotting: 0                Blotting: 1    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#7
    Predecessors (empty if no predecessors):
        BB#7; Ptr: 0x7f9e6a97bfd8
    State Addr: 0x7f9e6d985b50
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#8
    Predecessors (empty if no predecessors):
        BB#8; Ptr: 0x7f9e6a97c248
        BB#8; Ptr: 0x7f9e6a97c148
        BB#8; Ptr: 0x7f9e6a97c0d8
    State Addr: 0x7f9e6d985d80
    Merging predecessors!
            Merging in rest of predecessors...
                Blotting: 0                Blotting: 1                Blotting: 0                Blotting: 1    Attempting to move releases into predecessors!
 Sinking values from predecessors.
Processing:   br bb8(%16 : $Bool)                             // id: %17
Continuing scan. Next inst:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
Processing:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
Continuing scan. Next inst:   %15 = integer_literal $Builtin.Int1, -1         // user: %16
Processing:   %15 = integer_literal $Builtin.Int1, -1         // user: %16
Reached the first instruction.    Performing the dataflow!
Invalidating caller: $ss2eeoiySbypXpSg_ABtF
*** ARCCM on function: $ss2eeoiySbypXpSg_ABtF ***
***** Processing $ss2eeoiySbypXpSg_ABtF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 8
Merging Successors!
>>>> Bottom Up!
VISITING:
      %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
Processing BB#: 7
Merging Successors!
>>>> Bottom Up!
VISITING:
      %13 = integer_literal $Builtin.Int1, -1         // user: %14
Processing BB#: 6
Merging Successors!
>>>> Bottom Up!
VISITING:
      %11 = integer_literal $Builtin.Int1, 0          // user: %12
Processing BB#: 5
Merging Successors!
>>>> Bottom Up!
Processing BB#: 4
Merging Successors!
>>>> Bottom Up!
Processing BB#: 3
Merging Successors!
>>>> Bottom Up!
VISITING:
      %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8
Processing BB#: 2
Merging Successors!
>>>> Bottom Up!
Processing BB#: 1
Merging Successors!
>>>> Bottom Up!
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      switch_enum %0 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb1 // id: %2
Processing BB#: 1
Merging Predecessors!
    Merging Pred: 0
>>>> Top Down!
VISITING:
      switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb2 // id: %4
Processing BB#: 2
Merging Predecessors!
    Merging Pred: 1
>>>> Top Down!
VISITING:
      br bb6                                          // id: %5
Processing BB#: 3
Merging Predecessors!
    Merging Pred: 1
>>>> Top Down!
VISITING:
      %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8
VISITING:
      br bb8(%7 : $Builtin.Int1)                      // id: %8
Processing BB#: 4
Merging Predecessors!
    Merging Pred: 0
>>>> Top Down!
VISITING:
      switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb7, case #Optional.some!enumelt.1: bb5 // id: %9
Processing BB#: 5
Merging Predecessors!
    Merging Pred: 4
>>>> Top Down!
VISITING:
      br bb6                                          // id: %10
Processing BB#: 6
Merging Predecessors!
    Merging Pred: 5
    Merging Pred: 2
>>>> Top Down!
VISITING:
      %11 = integer_literal $Builtin.Int1, 0          // user: %12
VISITING:
      br bb8(%11 : $Builtin.Int1)                     // id: %12
Processing BB#: 7
Merging Predecessors!
    Merging Pred: 4
>>>> Top Down!
VISITING:
      %13 = integer_literal $Builtin.Int1, -1         // user: %14
VISITING:
      br bb8(%13 : $Builtin.Int1)                     // id: %14
Processing BB#: 8
Merging Predecessors!
    Merging Pred: 7
    Merging Pred: 6
    Merging Pred: 3
>>>> Top Down!
VISITING:
      %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
VISITING:
      return %16 : $Bool                              // id: %17
**** Computing ARC Matching Sets for $ss2eeoiySbypXpSg_ABtF ****

### Run SimplifyCFG on $ss2eeoiySbypXpSg_ABtF
	discovered a new reachable node bb0
	discovered a new reachable node bb4
	discovered a new reachable node bb7
	discovered a new reachable node bb8
	discovered a new reachable node bb5
	discovered a new reachable node bb6
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb2
***** CodeMotion on function: $ss2eeoiySbypXpSg_ABtF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6c9fb600
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#1
    Predecessors (empty if no predecessors):
        BB#1; Ptr: 0x7f9e6a97bf40
    State Addr: 0x7f9e6c9fb830
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#2
    Predecessors (empty if no predecessors):
        BB#2; Ptr: 0x7f9e6a97c020
    State Addr: 0x7f9e6c9fba60
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#3
    Predecessors (empty if no predecessors):
        BB#3; Ptr: 0x7f9e6a97c020
    State Addr: 0x7f9e6c9fbc90
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#4
    Predecessors (empty if no predecessors):
        BB#4; Ptr: 0x7f9e6a97bf40
    State Addr: 0x7f9e6c9fbec0
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#5
    Predecessors (empty if no predecessors):
        BB#5; Ptr: 0x7f9e6a97bfd8
    State Addr: 0x7f9e6c9fc0f0
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#6
    Predecessors (empty if no predecessors):
        BB#6; Ptr: 0x7f9e6a97c200
        BB#6; Ptr: 0x7f9e6a97c090
    State Addr: 0x7f9e6c9fc320
    Merging predecessors!
            Merging in rest of predecessors...
                Blotting: 0                Blotting: 1    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#7
    Predecessors (empty if no predecessors):
        BB#7; Ptr: 0x7f9e6a97bfd8
    State Addr: 0x7f9e6c9fc550
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#8
    Predecessors (empty if no predecessors):
        BB#8; Ptr: 0x7f9e6a97c248
        BB#8; Ptr: 0x7f9e6a97c148
        BB#8; Ptr: 0x7f9e6a97c0d8
    State Addr: 0x7f9e6c9fc780
    Merging predecessors!
            Merging in rest of predecessors...
                Blotting: 0                Blotting: 1                Blotting: 0                Blotting: 1    Attempting to move releases into predecessors!
 Sinking values from predecessors.
Processing:   br bb8(%13 : $Builtin.Int1)                     // id: %14
Continuing scan. Next inst:   %13 = integer_literal $Builtin.Int1, -1         // user: %14
Processing:   %13 = integer_literal $Builtin.Int1, -1         // user: %14
Reached the first instruction.    Performing the dataflow!
*** ARCCM on function: $ss2eeoiySbypXpSg_ABtF ***
***** LowerAggregate on function: $ss2eeoiySbypXpSg_ABtF *****
Visiting:   switch_enum %0 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb1 // id: %2
Visiting:   switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb2 // id: %4
Visiting:   br bb6                                          // id: %5
Visiting:   %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8
Visiting:   br bb8(%7 : $Builtin.Int1)                      // id: %8
Visiting:   switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb7, case #Optional.some!enumelt.1: bb5 // id: %9
Visiting:   br bb6                                          // id: %10
Visiting:   %11 = integer_literal $Builtin.Int1, 0          // user: %12
Visiting:   br bb8(%11 : $Builtin.Int1)                     // id: %12
Visiting:   %13 = integer_literal $Builtin.Int1, -1         // user: %14
Visiting:   br bb8(%13 : $Builtin.Int1)                     // id: %14
Visiting:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
Visiting:   return %16 : $Bool                              // id: %17


SILCOMBINE ITERATION #0 on $ss2eeoiySbypXpSg_ABtF
SC: ADDING: 13 instrs to worklist
SC: Visiting:   switch_enum %0 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb1 // id: %2

SC: Visiting:   switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb2 // id: %4

SC: Visiting:   br bb6                                          // id: %5

SC: Visiting:   %11 = integer_literal $Builtin.Int1, 0          // user: %12

SC: Visiting:   br bb8(%11 : $Builtin.Int1)                     // id: %12

SC: Visiting:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17

SC: Visiting:   return %16 : $Bool                              // id: %17

SC: Visiting:   %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8

SC: Visiting:   br bb8(%7 : $Builtin.Int1)                      // id: %8

SC: Visiting:   switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb7, case #Optional.some!enumelt.1: bb5 // id: %9

SC: Visiting:   br bb6                                          // id: %10

SC: Visiting:   %13 = integer_literal $Builtin.Int1, -1         // user: %14

SC: Visiting:   br bb8(%13 : $Builtin.Int1)                     // id: %14

***** SROA on function: $ss2eeoiySbypXpSg_ABtF *****
** Mem2Reg on function: $ss2eeoiySbypXpSg_ABtF **
	discovered a new reachable node bb0
	discovered a new reachable node bb4
	discovered a new reachable node bb7
	discovered a new reachable node bb8
	discovered a new reachable node bb5
	discovered a new reachable node bb6
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb2
// == infix(_:_:)
sil public_external [serialized] @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool {
// %0                                             // user: %2
// %1                                             // users: %9, %4
bb0(%0 : $Optional<@thick Any.Type>, %1 : $Optional<@thick Any.Type>):
  switch_enum %0 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb1 // id: %2

// %3                                             // user: %7
bb1(%3 : $@thick Any.Type):                       // Preds: bb0
  switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb2 // id: %4

bb2:                                              // Preds: bb1
  br bb6                                          // id: %5

// %6                                             // user: %7
bb3(%6 : $@thick Any.Type):                       // Preds: bb1
  %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8
  br bb8(%7 : $Builtin.Int1)                      // id: %8

bb4:                                              // Preds: bb0
  switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb7, case #Optional.some!enumelt.1: bb5 // id: %9

bb5:                                              // Preds: bb4
  br bb6                                          // id: %10

bb6:                                              // Preds: bb5 bb2
  %11 = integer_literal $Builtin.Int1, 0          // user: %12
  br bb8(%11 : $Builtin.Int1)                     // id: %12

bb7:                                              // Preds: bb4
  %13 = integer_literal $Builtin.Int1, -1         // user: %14
  br bb8(%13 : $Builtin.Int1)                     // id: %14

// %15                                            // user: %16
bb8(%15 : $Builtin.Int1):                         // Preds: bb7 bb6 bb3
  %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
  return %16 : $Bool                              // id: %17
} // end sil function '$ss2eeoiySbypXpSg_ABtF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb8 {4294967295,4294967295} [1]
      [3] bb3 {4294967295,4294967295} [2]
      [3] bb1 {4294967295,4294967295} [2]
      [3] bb0 {4294967295,4294967295} [2]
      [3] bb6 {4294967295,4294967295} [2]
        [4] bb2 {4294967295,4294967295} [3]
        [4] bb5 {4294967295,4294967295} [3]
      [3] bb4 {4294967295,4294967295} [2]
      [3] bb7 {4294967295,4294967295} [2]
Roots: bb8 
Marking as live:
  return %16 : $Bool                              // id: %17
Marking as live:
  %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
Marking as live:
%15 = argument of bb8 : $Builtin.Int1             // user: %16
Marking as live:
  br bb8(%13 : $Builtin.Int1)                     // id: %14
Marking as live:
  switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb7, case #Optional.some!enumelt.1: bb5 // id: %9
Marking as live:
  switch_enum %0 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb1 // id: %2
Marking as live:
  %13 = integer_literal $Builtin.Int1, -1         // user: %14
Marking as live:
  br bb8(%11 : $Builtin.Int1)                     // id: %12
Marking as live:
  switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb2 // id: %4
Marking as live:
  %11 = integer_literal $Builtin.Int1, 0          // user: %12
Marking as live:
  br bb8(%7 : $Builtin.Int1)                      // id: %8
Marking as live:
  %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8
Marking as live:
%3 = argument of bb1 : $@thick Any.Type           // user: %7
Marking as live:
%6 = argument of bb3 : $@thick Any.Type           // user: %7
Marking as live:
%1 = argument of bb0 : $Optional<@thick Any.Type> // users: %9, %4
Marking as live:
%0 = argument of bb0 : $Optional<@thick Any.Type> // user: %2
** StackPromotion **
No loops in $ss2eeoiySbypXpSg_ABtF
***** CSE on function: $ss2eeoiySbypXpSg_ABtF *****
SILCSE VISITING:   switch_enum %0 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb1 // id: %2

SILCSE VISITING:   switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb7, case #Optional.some!enumelt.1: bb5 // id: %9

SILCSE VISITING:   %13 = integer_literal $Builtin.Int1, -1         // user: %14

SILCSE Adding to value table:   %13 = integer_literal $Builtin.Int1, -1         // user: %14
 ->   %13 = integer_literal $Builtin.Int1, -1         // user: %14

SILCSE VISITING:   br bb8(%13 : $Builtin.Int1)                     // id: %14

SILCSE VISITING:   br bb6                                          // id: %10

SILCSE VISITING:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17

SILCSE Adding to value table:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
 ->   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17

SILCSE VISITING:   return %16 : $Bool                              // id: %17

SILCSE VISITING:   %11 = integer_literal $Builtin.Int1, 0          // user: %12

SILCSE Adding to value table:   %11 = integer_literal $Builtin.Int1, 0          // user: %12
 ->   %11 = integer_literal $Builtin.Int1, 0          // user: %12

SILCSE VISITING:   br bb8(%11 : $Builtin.Int1)                     // id: %12

SILCSE VISITING:   switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb2 // id: %4

SILCSE VISITING:   %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8

SILCSE Adding to value table:   %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8
 ->   %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8

SILCSE VISITING:   br bb8(%7 : $Builtin.Int1)                      // id: %8

SILCSE VISITING:   br bb6                                          // id: %5

Running AccessEnforcementReleaseSinking on $ss2eeoiySbypXpSg_ABtF
Running local AccessEnforcementOpts on $ss2eeoiySbypXpSg_ABtF
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $ss2eeoiySbypXpSg_ABtF
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
    Succ: bb4 RPONum: 4
    Succ: bb1 RPONum: 1
Checking Preds for Back Edges

Visiting BB: bb1 RPO: 1
    Succ: bb3 RPONum: 3
    Succ: bb2 RPONum: 2
Checking Preds for Back Edges

Visiting BB: bb2 RPO: 2
    Succ: bb6 RPONum: 6
Checking Preds for Back Edges

Visiting BB: bb3 RPO: 3
    Succ: bb8 RPONum: 8
Checking Preds for Back Edges

Visiting BB: bb4 RPO: 4
    Succ: bb7 RPONum: 7
    Succ: bb5 RPONum: 5
Checking Preds for Back Edges

Visiting BB: bb5 RPO: 5
    Succ: bb6 RPONum: 6
Checking Preds for Back Edges

Visiting BB: bb6 RPO: 6
    Succ: bb8 RPONum: 8
Checking Preds for Back Edges

Visiting BB: bb7 RPO: 7
    Succ: bb8 RPONum: 8
Checking Preds for Back Edges

Visiting BB: bb8 RPO: 8
Checking Preds for Back Edges

Initializing Loop Region 9
Skipping AccessConflictAndMergeAnalysis...
No loops in $ss2eeoiySbypXpSg_ABtF
*** ConstPropagation processing: 
Visiting:   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
    User:   return %16 : $Bool                              // id: %17
Visiting:   %13 = integer_literal $Builtin.Int1, -1         // user: %14
    User:   br bb8(%13 : $Builtin.Int1)                     // id: %14
Visiting:   %11 = integer_literal $Builtin.Int1, 0          // user: %12
    User:   br bb8(%11 : $Builtin.Int1)                     // id: %12
Removing in BB
sil_scope 1 { loc "/Users/kenta/swiftc/swift/stdlib/public/core/Builtin.swift":140:13 parent @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool }
// %0                                             // user: %2
// %1                                             // users: %9, %4
bb0(%0 : $Optional<@thick Any.Type>, %1 : $Optional<@thick Any.Type>):
  switch_enum %0 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb1 // id: %2
 not a check_bounds call   switch_enum %0 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt.1: bb1 // id: %2
Removing in BB
sil_scope 1 { loc "/Users/kenta/swiftc/swift/stdlib/public/core/Builtin.swift":140:13 parent @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool }
// %3                                             // user: %7
bb1(%3 : $@thick Any.Type):                       // Preds: bb0
  switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb2 // id: %4
 not a check_bounds call   switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb3, case #Optional.none!enumelt: bb2 // id: %4
Removing in BB
sil_scope 1 { loc "/Users/kenta/swiftc/swift/stdlib/public/core/Builtin.swift":140:13 parent @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool }
bb2:                                              // Preds: bb1
  br bb6                                          // id: %5
 not a check_bounds call   br bb6                                          // id: %5
Removing in BB
sil_scope 1 { loc "/Users/kenta/swiftc/swift/stdlib/public/core/Builtin.swift":140:13 parent @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool }
// %6                                             // user: %7
bb3(%6 : $@thick Any.Type):                       // Preds: bb1
  %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8
  br bb8(%7 : $Builtin.Int1)                      // id: %8
 not a check_bounds call   %7 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %6 : $@thick Any.Type) : $Builtin.Int1 // user: %8
 not a check_bounds call   br bb8(%7 : $Builtin.Int1)                      // id: %8
Removing in BB
sil_scope 1 { loc "/Users/kenta/swiftc/swift/stdlib/public/core/Builtin.swift":140:13 parent @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool }
bb4:                                              // Preds: bb0
  switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb7, case #Optional.some!enumelt.1: bb5 // id: %9
 not a check_bounds call   switch_enum %1 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb7, case #Optional.some!enumelt.1: bb5 // id: %9
Removing in BB
sil_scope 1 { loc "/Users/kenta/swiftc/swift/stdlib/public/core/Builtin.swift":140:13 parent @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool }
bb5:                                              // Preds: bb4
  br bb6                                          // id: %10
 not a check_bounds call   br bb6                                          // id: %10
Removing in BB
sil_scope 1 { loc "/Users/kenta/swiftc/swift/stdlib/public/core/Builtin.swift":140:13 parent @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool }
bb6:                                              // Preds: bb5 bb2
  %11 = integer_literal $Builtin.Int1, 0          // user: %12
  br bb8(%11 : $Builtin.Int1)                     // id: %12
 not a check_bounds call   %11 = integer_literal $Builtin.Int1, 0          // user: %12
 not a check_bounds call   br bb8(%11 : $Builtin.Int1)                     // id: %12
Removing in BB
sil_scope 1 { loc "/Users/kenta/swiftc/swift/stdlib/public/core/Builtin.swift":140:13 parent @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool }
bb7:                                              // Preds: bb4
  %13 = integer_literal $Builtin.Int1, -1         // user: %14
  br bb8(%13 : $Builtin.Int1)                     // id: %14
 not a check_bounds call   %13 = integer_literal $Builtin.Int1, -1         // user: %14
 not a check_bounds call   br bb8(%13 : $Builtin.Int1)                     // id: %14
Removing in BB
sil_scope 1 { loc "/Users/kenta/swiftc/swift/stdlib/public/core/Builtin.swift":140:13 parent @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool }
// %15                                            // user: %16
bb8(%15 : $Builtin.Int1):                         // Preds: bb7 bb6 bb3
  %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
  return %16 : $Bool                              // id: %17
 not a check_bounds call   %16 = struct $Bool (%15 : $Builtin.Int1)        // user: %17
 not a check_bounds call   return %16 : $Bool                              // id: %17
No loops in $ss2eeoiySbypXpSg_ABtF
COW Array Opts in Func $ss2eeoiySbypXpSg_ABtF
  Skipping Function: No loops.
Copy Forwarding in Func $s7partial1AC1fySbxlF
***** LowerAggregate on function: $s7partial1AC1fySbxlF *****
Visiting:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
Visiting:   debug_value %1 : $A, let, name "self", argno 2  // id: %3
Visiting:   %4 = metatype $@thick T.Type                    // user: %5
Visiting:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
Visiting:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11
Visiting:   %7 = metatype $@thick A.Type                    // user: %8
Visiting:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
Visiting:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
Visiting:   // function_ref == infix(_:_:)
  %10 = function_ref @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %11
Visiting:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
Visiting:   return %11 : $Bool                              // id: %12
***** SROA on function: $s7partial1AC1fySbxlF *****
** Mem2Reg on function: $s7partial1AC1fySbxlF **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
ExistentialSpecializer Pass: Bail! Due to canSpecializeCalleeFunction.
  %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1AC1fySbxlF
SC: ADDING: 11 instrs to worklist
SC: Visiting:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2

SC: Visiting:   debug_value %1 : $A, let, name "self", argno 2  // id: %3

SC: Visiting:   %4 = metatype $@thick T.Type                    // user: %5

SC: Visiting:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6

SC: Visiting:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %11

SC: Visiting:   %7 = metatype $@thick A.Type                    // user: %8

SC: Visiting:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9

SC: Visiting:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11

SC: Visiting:   // function_ref == infix(_:_:)
  %10 = function_ref @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %11

SC: Visiting:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12

SC: Visiting:   return %11 : $Bool                              // id: %12

***** Devirtualizer on function:$s7partial1AC1fySbxlF *****
    Trying to devirtualize:   %11 = apply %10(%6, %9) : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool // user: %12
***** GenericSpecializer on function:$s7partial1AC1fySbxlF *****

Inline into caller: $s7partial1AC1fySbxlF
    decision {c=5, b=50, l=3, c-w=0/9, bb=9, c-bb=10} $ss2eeoiySbypXpSg_ABtF
    inline [9->1] $ss2eeoiySbypXpSg_ABtF
Invalidating caller: $s7partial1AC1fySbxlF
Copy Forwarding in Func $s7partial1AC1fySbxlF
***** LowerAggregate on function: $s7partial1AC1fySbxlF *****
Visiting:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
Visiting:   debug_value %1 : $A, let, name "self", argno 2  // id: %3
Visiting:   %4 = metatype $@thick T.Type                    // user: %5
Visiting:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %6
Visiting:   %6 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %5 : $@thick Any.Type // user: %10
Visiting:   %7 = metatype $@thick A.Type                    // user: %8
Visiting:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // user: %9
Visiting:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // users: %13, %11
Visiting:   switch_enum %6 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb1, case #Optional.some!enumelt.1: bb2 // id: %10
Visiting:   switch_enum %9 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb3, case #Optional.some!enumelt.1: bb4 // id: %11
Visiting:   switch_enum %9 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb7, case #Optional.none!enumelt: bb8 // id: %13
Visiting:   %14 = integer_literal $Builtin.Int1, -1         // user: %15
Visiting:   br bb5(%14 : $Builtin.Int1)                     // id: %15
Visiting:   br bb6                                          // id: %16
Visiting:   %18 = struct $Bool (%17 : $Builtin.Int1)        // user: %19
Visiting:   return %18 : $Bool                              // id: %19
Visiting:   %20 = integer_literal $Builtin.Int1, 0          // user: %21
Visiting:   br bb5(%20 : $Builtin.Int1)                     // id: %21
Visiting:   %23 = builtin "is_same_metatype"(%12 : $@thick Any.Type, %22 : $@thick Any.Type) : $Builtin.Int1 // user: %24
Visiting:   br bb5(%23 : $Builtin.Int1)                     // id: %24
Visiting:   br bb6                                          // id: %25
***** SROA on function: $s7partial1AC1fySbxlF *****
** Mem2Reg on function: $s7partial1AC1fySbxlF **
	discovered a new reachable node bb0
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb5
	discovered a new reachable node bb4
	discovered a new reachable node bb6
	discovered a new reachable node bb2
	discovered a new reachable node bb7
	discovered a new reachable node bb8
	discovered a new reachable node bb0
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb5
	discovered a new reachable node bb4
	discovered a new reachable node bb6
	discovered a new reachable node bb2
	discovered a new reachable node bb7
	discovered a new reachable node bb8
*** ConstPropagation processing: 
Visiting:   %20 = integer_literal $Builtin.Int1, 0          // user: %21
    User:   br bb5(%20 : $Builtin.Int1)                     // id: %21
Visiting:   %18 = struct $Bool (%17 : $Builtin.Int1)        // user: %19
    User:   return %18 : $Bool                              // id: %19
Visiting:   %14 = integer_literal $Builtin.Int1, -1         // user: %15
    User:   br bb5(%14 : $Builtin.Int1)                     // id: %15
### Run SimplifyCFG on $s7partial1AC1fySbxlF
remove   switch_enum %9 : $Optional<@thick Any.Type>, case #Optional.some!enumelt.1: bb7, case #Optional.none!enumelt: bb8 // id: %13
remove dead bb8
merge bb2 with bb7
*** ConstPropagation processing: 
Visiting:   %8 = init_existential_metatype %7 : $@thick A.Type, $@thick Any.Type // users: %23, %13, %9
    User:   %23 = builtin "is_same_metatype"(%12 : $@thick Any.Type, %8 : $@thick Any.Type) : $Builtin.Int1 // user: %24
    User:   br bb7(%8 : $@thick Any.Type)                   // id: %13
    User:   %9 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %8 : $@thick Any.Type // user: %11
convert to select_enum:   switch_enum %9 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb3, case #Optional.some!enumelt.1: bb4 // id: %13
simplify branch operand   %13 = select_enum %9 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: %11, default %12 : $Builtin.Int1 // user: %14
remove   switch_enum %6 : $Optional<@thick Any.Type>, case #Optional.none!enumelt: bb1, case #Optional.some!enumelt.1: bb2 // id: %10
remove dead bb1
merge bb0 with bb1
*** ConstPropagation processing: 
Visiting:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // users: %11, %9
    User:   %11 = builtin "is_same_metatype"(%5 : $@thick Any.Type, %7 : $@thick Any.Type) : $Builtin.Int1 // user: %12
    User:   br bb1(%5 : $@thick Any.Type)                   // id: %9
	discovered a new reachable node bb0
	discovered a new reachable node bb1
replace arg with incoming value:%11 = argument of bb1 : $Builtin.Int1             // user: %12
merge bb0 with bb1
	discovered a new reachable node bb0
Invalidating caller: $s7partial1AC1fySbxlF


SILCOMBINE ITERATION #0 on $s7partial1AC1fySbxlF
SC: DCE:   %8 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %7 : $@thick Any.Type

SC: ERASE   %8 = enum $Optional<@thick Any.Type>, #Optional.some!enumelt.1, %7 : $@thick Any.Type

SC: ADDING: 9 instrs to worklist
SC: Visiting:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2

SC: Visiting:   debug_value %1 : $A, let, name "self", argno 2  // id: %3

SC: Visiting:   %4 = metatype $@thick T.Type                    // user: %5

SC: Visiting:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %8

SC: Visiting:   %6 = metatype $@thick A.Type                    // user: %7

SC: Visiting:   %7 = init_existential_metatype %6 : $@thick A.Type, $@thick Any.Type // user: %8

SC: Visiting:   %8 = builtin "is_same_metatype"(%5 : $@thick Any.Type, %7 : $@thick Any.Type) : $Builtin.Int1 // user: %9

SC: Visiting:   %9 = struct $Bool (%8 : $Builtin.Int1)          // user: %10

SC: Visiting:   return %9 : $Bool                               // id: %10



SILCOMBINE ITERATION #1 on $s7partial1AC1fySbxlF
SC: ADDING: 9 instrs to worklist
SC: Visiting:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2

SC: Visiting:   debug_value %1 : $A, let, name "self", argno 2  // id: %3

SC: Visiting:   %4 = metatype $@thick T.Type                    // user: %5

SC: Visiting:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %8

SC: Visiting:   %6 = metatype $@thick A.Type                    // user: %7

SC: Visiting:   %7 = init_existential_metatype %6 : $@thick A.Type, $@thick Any.Type // user: %8

SC: Visiting:   %8 = builtin "is_same_metatype"(%5 : $@thick Any.Type, %7 : $@thick Any.Type) : $Builtin.Int1 // user: %9

SC: Visiting:   %9 = struct $Bool (%8 : $Builtin.Int1)          // user: %10

SC: Visiting:   return %9 : $Bool                               // id: %10

Invalidating caller: $s7partial1AC1fySbxlF
***** Devirtualizer on function:$s7partial1AC1fySbxlF *****
***** GenericSpecializer on function:$s7partial1AC1fySbxlF *****
	discovered a new reachable node bb0
** Mem2Reg on function: $s7partial1AC1fySbxlF **
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %9 = struct $Bool (%8 : $Builtin.Int1)          // user: %10
    User:   return %9 : $Bool                               // id: %10
### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1AC1fySbxlF
SC: ADDING: 9 instrs to worklist
SC: Visiting:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2

SC: Visiting:   debug_value %1 : $A, let, name "self", argno 2  // id: %3

SC: Visiting:   %4 = metatype $@thick T.Type                    // user: %5

SC: Visiting:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %8

SC: Visiting:   %6 = metatype $@thick A.Type                    // user: %7

SC: Visiting:   %7 = init_existential_metatype %6 : $@thick A.Type, $@thick Any.Type // user: %8

SC: Visiting:   %8 = builtin "is_same_metatype"(%5 : $@thick Any.Type, %7 : $@thick Any.Type) : $Builtin.Int1 // user: %9

SC: Visiting:   %9 = struct $Bool (%8 : $Builtin.Int1)          // user: %10

SC: Visiting:   return %9 : $Bool                               // id: %10

### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0
***** CSE on function: $s7partial1AC1fySbxlF *****
SILCSE VISITING:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2

SILCSE VISITING:   debug_value %1 : $A, let, name "self", argno 2  // id: %3

SILCSE VISITING:   %4 = metatype $@thick T.Type                    // user: %5

SILCSE Adding to value table:   %4 = metatype $@thick T.Type                    // user: %5
 ->   %4 = metatype $@thick T.Type                    // user: %5

SILCSE VISITING:   %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %8

SILCSE VISITING:   %6 = metatype $@thick A.Type                    // user: %7

SILCSE Adding to value table:   %6 = metatype $@thick A.Type                    // user: %7
 ->   %6 = metatype $@thick A.Type                    // user: %7

SILCSE VISITING:   %7 = init_existential_metatype %6 : $@thick A.Type, $@thick Any.Type // user: %8

SILCSE VISITING:   %8 = builtin "is_same_metatype"(%5 : $@thick Any.Type, %7 : $@thick Any.Type) : $Builtin.Int1 // user: %9

SILCSE Adding to value table:   %8 = builtin "is_same_metatype"(%5 : $@thick Any.Type, %7 : $@thick Any.Type) : $Builtin.Int1 // user: %9
 ->   %8 = builtin "is_same_metatype"(%5 : $@thick Any.Type, %7 : $@thick Any.Type) : $Builtin.Int1 // user: %9

SILCSE VISITING:   %9 = struct $Bool (%8 : $Builtin.Int1)          // user: %10

SILCSE Adding to value table:   %9 = struct $Bool (%8 : $Builtin.Int1)          // user: %10
 ->   %9 = struct $Bool (%8 : $Builtin.Int1)          // user: %10

SILCSE VISITING:   return %9 : $Bool                               // id: %10

*** RLE on function: $s7partial1AC1fySbxlF ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// A.f<A>(_:)
sil hidden @$s7partial1AC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed A) -> Bool {
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $*T, %1 : $A):
  debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
  debug_value %1 : $A, let, name "self", argno 2  // id: %3
  %4 = metatype $@thick T.Type                    // user: %5
  %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %8
  %6 = metatype $@thick A.Type                    // user: %7
  %7 = init_existential_metatype %6 : $@thick A.Type, $@thick Any.Type // user: %8
  %8 = builtin "is_same_metatype"(%5 : $@thick Any.Type, %7 : $@thick Any.Type) : $Builtin.Int1 // user: %9
  %9 = struct $Bool (%8 : $Builtin.Int1)          // user: %10
  return %9 : $Bool                               // id: %10
} // end sil function '$s7partial1AC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %9 : $Bool                               // id: %10
Marking as live:
  %9 = struct $Bool (%8 : $Builtin.Int1)          // user: %10
Marking as live:
  %8 = builtin "is_same_metatype"(%5 : $@thick Any.Type, %7 : $@thick Any.Type) : $Builtin.Int1 // user: %9
Marking as live:
  %5 = init_existential_metatype %4 : $@thick T.Type, $@thick Any.Type // user: %8
Marking as live:
  %7 = init_existential_metatype %6 : $@thick A.Type, $@thick Any.Type // user: %8
Marking as live:
  %6 = metatype $@thick A.Type                    // user: %7
Marking as live:
  %4 = metatype $@thick T.Type                    // user: %5
Removing dead argument:
%0 = argument of bb0 : $*T                        // user: %2
Removing dead argument:
%1 = argument of bb0 : $A                         // user: %3
Removing dead instruction:
  debug_value_addr undef : $*T, let, name "v", argno 1 // id: %2
Removing dead instruction:
  debug_value undef : $A, let, name "self", argno 2 // id: %2
Invalidating caller: $s7partial1AC1fySbxlF
***** CodeMotion on function: $s7partial1AC1fySbxlF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6bb4d050
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1AC1fySbxlF ***
***** Processing $s7partial1AC1fySbxlF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
VISITING:
      %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
VISITING:
      %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
VISITING:
      %4 = metatype $@thick A.Type                    // user: %5
VISITING:
      %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
VISITING:
      %2 = metatype $@thick T.Type                    // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = metatype $@thick T.Type                    // user: %3
VISITING:
      %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
VISITING:
      %4 = metatype $@thick A.Type                    // user: %5
VISITING:
      %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
VISITING:
      %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
VISITING:
      %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
VISITING:
      return %7 : $Bool                               // id: %8
**** Computing ARC Matching Sets for $s7partial1AC1fySbxlF ****

### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0
*** ARCCM on function: $s7partial1AC1fySbxlF ***
***** LowerAggregate on function: $s7partial1AC1fySbxlF *****
Visiting:   %2 = metatype $@thick T.Type                    // user: %3
Visiting:   %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
Visiting:   %4 = metatype $@thick A.Type                    // user: %5
Visiting:   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
Visiting:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
Visiting:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
Visiting:   return %7 : $Bool                               // id: %8


SILCOMBINE ITERATION #0 on $s7partial1AC1fySbxlF
SC: ADDING: 7 instrs to worklist
SC: Visiting:   %2 = metatype $@thick T.Type                    // user: %3

SC: Visiting:   %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6

SC: Visiting:   %4 = metatype $@thick A.Type                    // user: %5

SC: Visiting:   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6

SC: Visiting:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7

SC: Visiting:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8

SC: Visiting:   return %7 : $Bool                               // id: %8

***** SROA on function: $s7partial1AC1fySbxlF *****
** Mem2Reg on function: $s7partial1AC1fySbxlF **
	discovered a new reachable node bb0
// A.f<A>(_:)
sil hidden @$s7partial1AC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed A) -> Bool {
bb0(%0 : $*T, %1 : $A):
  %2 = metatype $@thick T.Type                    // user: %3
  %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
  %4 = metatype $@thick A.Type                    // user: %5
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$s7partial1AC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %7 : $Bool                               // id: %8
Marking as live:
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
Marking as live:
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
Marking as live:
  %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
Marking as live:
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
Marking as live:
  %4 = metatype $@thick A.Type                    // user: %5
Marking as live:
  %2 = metatype $@thick T.Type                    // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $A
Invalidating caller: $s7partial1AC1fySbxlF


SILCOMBINE ITERATION #0 on $s7partial1AC1fySbxlF
SC: ADDING: 7 instrs to worklist
SC: Visiting:   %2 = metatype $@thick T.Type                    // user: %3

SC: Visiting:   %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6

SC: Visiting:   %4 = metatype $@thick A.Type                    // user: %5

SC: Visiting:   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6

SC: Visiting:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7

SC: Visiting:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8

SC: Visiting:   return %7 : $Bool                               // id: %8

### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0
** StackPromotion **
No loops in $s7partial1AC1fySbxlF
// A.f<A>(_:)
sil hidden @$s7partial1AC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed A) -> Bool {
bb0(%0 : $*T, %1 : $A):
  %2 = metatype $@thick T.Type                    // user: %3
  %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
  %4 = metatype $@thick A.Type                    // user: %5
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$s7partial1AC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %7 : $Bool                               // id: %8
Marking as live:
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
Marking as live:
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
Marking as live:
  %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
Marking as live:
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
Marking as live:
  %4 = metatype $@thick A.Type                    // user: %5
Marking as live:
  %2 = metatype $@thick T.Type                    // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $A
Invalidating caller: $s7partial1AC1fySbxlF
***** CSE on function: $s7partial1AC1fySbxlF *****
SILCSE VISITING:   %2 = metatype $@thick T.Type                    // user: %3

SILCSE Adding to value table:   %2 = metatype $@thick T.Type                    // user: %3
 ->   %2 = metatype $@thick T.Type                    // user: %3

SILCSE VISITING:   %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6

SILCSE VISITING:   %4 = metatype $@thick A.Type                    // user: %5

SILCSE Adding to value table:   %4 = metatype $@thick A.Type                    // user: %5
 ->   %4 = metatype $@thick A.Type                    // user: %5

SILCSE VISITING:   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6

SILCSE VISITING:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7

SILCSE Adding to value table:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
 ->   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7

SILCSE VISITING:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8

SILCSE Adding to value table:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
 ->   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8

SILCSE VISITING:   return %7 : $Bool                               // id: %8



SILCOMBINE ITERATION #0 on $s7partial1AC1fySbxlF
SC: ADDING: 7 instrs to worklist
SC: Visiting:   %2 = metatype $@thick T.Type                    // user: %3

SC: Visiting:   %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6

SC: Visiting:   %4 = metatype $@thick A.Type                    // user: %5

SC: Visiting:   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6

SC: Visiting:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7

SC: Visiting:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8

SC: Visiting:   return %7 : $Bool                               // id: %8

### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0
Running AccessEnforcementReleaseSinking on $s7partial1AC1fySbxlF
Running local AccessEnforcementOpts on $s7partial1AC1fySbxlF
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1AC1fySbxlF
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1AC1fySbxlF
*** ConstPropagation processing: 
Visiting:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
    User:   return %7 : $Bool                               // id: %8
Removing in BB
sil_scope 1 { loc "partial.swift":4:10 parent @$s7partial1AC1fySbxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool }
sil_scope 2 { loc "partial.swift":4:31 parent 1 }
sil_scope 3 { loc "partial.swift":5:16 parent 2 }
sil_scope 4 { loc "/Users/kenta/swiftc/swift/stdlib/public/core/Builtin.swift":140:13 parent @$ss2eeoiySbypXpSg_ABtF : $@convention(thin) (Optional<@thick Any.Type>, Optional<@thick Any.Type>) -> Bool inlined_at 3 }
bb0(%0 : $*T, %1 : $A):
  %2 = metatype $@thick T.Type                    // user: %3
  %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
  %4 = metatype $@thick A.Type                    // user: %5
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
  return %7 : $Bool                               // id: %8
 not a check_bounds call   %2 = metatype $@thick T.Type                    // user: %3
 not a check_bounds call   %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
 not a check_bounds call   %4 = metatype $@thick A.Type                    // user: %5
 not a check_bounds call   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
 not a check_bounds call   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
 not a check_bounds call   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
 not a check_bounds call   return %7 : $Bool                               // id: %8
No loops in $s7partial1AC1fySbxlF
// A.f<A>(_:)
sil hidden @$s7partial1AC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed A) -> Bool {
bb0(%0 : $*T, %1 : $A):
  %2 = metatype $@thick T.Type                    // user: %3
  %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
  %4 = metatype $@thick A.Type                    // user: %5
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$s7partial1AC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %7 : $Bool                               // id: %8
Marking as live:
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
Marking as live:
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
Marking as live:
  %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
Marking as live:
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
Marking as live:
  %4 = metatype $@thick A.Type                    // user: %5
Marking as live:
  %2 = metatype $@thick T.Type                    // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $A
Invalidating caller: $s7partial1AC1fySbxlF
COW Array Opts in Func $s7partial1AC1fySbxlF
  Skipping Function: No loops.
// A.f<A>(_:)
sil hidden @$s7partial1AC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed A) -> Bool {
bb0(%0 : $*T, %1 : $A):
  %2 = metatype $@thick T.Type                    // user: %3
  %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
  %4 = metatype $@thick A.Type                    // user: %5
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$s7partial1AC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %7 : $Bool                               // id: %8
Marking as live:
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
Marking as live:
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
Marking as live:
  %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
Marking as live:
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
Marking as live:
  %4 = metatype $@thick A.Type                    // user: %5
Marking as live:
  %2 = metatype $@thick T.Type                    // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $A
Invalidating caller: $s7partial1AC1fySbxlF
Copy Forwarding in Func $s7partial1ACfd
***** LowerAggregate on function: $s7partial1ACfd *****
Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
Visiting:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
Visiting:   return %2 : $Builtin.NativeObject               // id: %3
***** SROA on function: $s7partial1ACfd *****
** Mem2Reg on function: $s7partial1ACfd **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1ACfd
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1ACfd
SC: ADDING: 3 instrs to worklist
SC: Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

SC: Visiting:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3

SC: Visiting:   return %2 : $Builtin.NativeObject               // id: %3

***** Devirtualizer on function:$s7partial1ACfd *****
***** GenericSpecializer on function:$s7partial1ACfd *****
### Run SimplifyCFG on $s7partial1ACfd
	discovered a new reachable node bb0
***** CSE on function: $s7partial1ACfd *****
SILCSE VISITING:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

SILCSE VISITING:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3

SILCSE Adding to value table:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
 ->   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3

SILCSE VISITING:   return %2 : $Builtin.NativeObject               // id: %3

*** RLE on function: $s7partial1ACfd ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// A.deinit
sil hidden @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject {
// %0                                             // users: %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function '$s7partial1ACfd'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %2 : $Builtin.NativeObject               // id: %3
Marking as live:
  %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
Marking as live:
%0 = argument of bb0 : $A                         // users: %2, %1
Marking as live:
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
***** CodeMotion on function: $s7partial1ACfd *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a441bc0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1ACfd ***
***** Processing $s7partial1ACfd *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
VISITING:
      debug_value %0 : $A, let, name "self", argno 1  // id: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      debug_value %0 : $A, let, name "self", argno 1  // id: %1
VISITING:
      %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
VISITING:
      return %2 : $Builtin.NativeObject               // id: %3
**** Computing ARC Matching Sets for $s7partial1ACfd ****

*** ARCCM on function: $s7partial1ACfd ***
** StackPromotion **
No loops in $s7partial1ACfd
***** CSE on function: $s7partial1ACfd *****
SILCSE VISITING:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

SILCSE VISITING:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3

SILCSE Adding to value table:   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
 ->   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3

SILCSE VISITING:   return %2 : $Builtin.NativeObject               // id: %3

Running AccessEnforcementReleaseSinking on $s7partial1ACfd
Running local AccessEnforcementOpts on $s7partial1ACfd
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1ACfd
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1ACfd
Removing in BB
sil_scope 1 { loc "partial.swift":1:7 parent @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject }
sil_scope 2 { loc "partial.swift":1:7 parent 1 }
// %0                                             // users: %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
 not a check_bounds call   debug_value %0 : $A, let, name "self", argno 1  // id: %1
 not a check_bounds call   %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
 not a check_bounds call   return %2 : $Builtin.NativeObject               // id: %3
No loops in $s7partial1ACfd
COW Array Opts in Func $s7partial1ACfd
  Skipping Function: No loops.
Copy Forwarding in Func $s7partial1ACfD
***** LowerAggregate on function: $s7partial1ACfD *****
Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
Visiting:   // function_ref A.deinit
  %2 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %3
Visiting:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
Visiting:   %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A // user: %5
Visiting:   dealloc_ref %4 : $A                             // id: %5
Visiting:   %6 = tuple ()                                   // user: %7
Visiting:   return %6 : $()                                 // id: %7
***** SROA on function: $s7partial1ACfD *****
** Mem2Reg on function: $s7partial1ACfD **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s7partial1ACfd -> abort
*** ConstPropagation processing: 
Visiting:   %6 = tuple ()                                   // user: %7
    User:   return %6 : $()                                 // id: %7
### Run SimplifyCFG on $s7partial1ACfD
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1ACfD
SC: ADDING: 7 instrs to worklist
SC: Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

SC: Visiting:   // function_ref A.deinit
  %2 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %3

SC: Visiting:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4

SC: Visiting:   %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A // user: %5

SC: Visiting:   dealloc_ref %4 : $A                             // id: %5

SC: Visiting:   %6 = tuple ()                                   // user: %7

SC: Visiting:   return %6 : $()                                 // id: %7

***** Devirtualizer on function:$s7partial1ACfD *****
    Trying to devirtualize:   %3 = apply %2(%0) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
***** GenericSpecializer on function:$s7partial1ACfD *****
recompute function-effect analysis with UpdateID 2
  >> analyze $s7partial1ACfd
  << finished $s7partial1ACfd
new iteration
  update callers of $s7partial1ACfd

Inline into caller: $s7partial1ACfD
    decision {c=0, b=40, l=0, c-w=0/1, bb=1, c-bb=2} $s7partial1ACfd
    inline [1->1] $s7partial1ACfd
Invalidating caller: $s7partial1ACfD
Copy Forwarding in Func $s7partial1ACfD
***** LowerAggregate on function: $s7partial1ACfD *****
Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %2
Visiting:   %3 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %4
Visiting:   %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A // user: %5
Visiting:   dealloc_ref %4 : $A                             // id: %5
Visiting:   %6 = tuple ()                                   // user: %7
Visiting:   return %6 : $()                                 // id: %7
***** SROA on function: $s7partial1ACfD *****
** Mem2Reg on function: $s7partial1ACfD **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %6 = tuple ()                                   // user: %7
    User:   return %6 : $()                                 // id: %7
### Run SimplifyCFG on $s7partial1ACfD
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1ACfD
SC: ADDING: 7 instrs to worklist
SC: Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

SC: Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %2

SC: Visiting:   %3 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %4

Simplify Old =   %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A // user: %5
    New = %0 = argument of bb0 : $A                         // users: %3, %2, %1

SC: ERASE   %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $A

SC: add op   %3 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %4

 from erased inst to worklist
SC: ADD:   %3 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %4

SC: ADD:   debug_value %0 : $A, let, name "self", argno 1  // id: %2

SC: ADD:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

SC: Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

SC: Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %2

SC: DCE:   %3 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject

SC: ERASE   %3 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject

SC: Visiting:   dealloc_ref %0 : $A                             // id: %3

SC: Visiting:   %4 = tuple ()                                   // user: %5

SC: Visiting:   return %4 : $()                                 // id: %5



SILCOMBINE ITERATION #1 on $s7partial1ACfD
SC: ADDING: 5 instrs to worklist
SC: Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

SC: Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %2

SC: Visiting:   dealloc_ref %0 : $A                             // id: %3

SC: Visiting:   %4 = tuple ()                                   // user: %5

SC: Visiting:   return %4 : $()                                 // id: %5

Invalidating caller: $s7partial1ACfD
***** Devirtualizer on function:$s7partial1ACfD *****
***** GenericSpecializer on function:$s7partial1ACfD *****
	discovered a new reachable node bb0
** Mem2Reg on function: $s7partial1ACfD **
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %4 = tuple ()                                   // user: %5
    User:   return %4 : $()                                 // id: %5
### Run SimplifyCFG on $s7partial1ACfD
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1ACfD
SC: ADDING: 5 instrs to worklist
SC: Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

SC: Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %2

SC: Visiting:   dealloc_ref %0 : $A                             // id: %3

SC: Visiting:   %4 = tuple ()                                   // user: %5

SC: Visiting:   return %4 : $()                                 // id: %5

### Run SimplifyCFG on $s7partial1ACfD
	discovered a new reachable node bb0
***** CSE on function: $s7partial1ACfD *****
SILCSE VISITING:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

SILCSE VISITING:   debug_value %0 : $A, let, name "self", argno 1  // id: %2

SILCSE VISITING:   dealloc_ref %0 : $A                             // id: %3

SILCSE VISITING:   %4 = tuple ()                                   // user: %5

SILCSE Adding to value table:   %4 = tuple ()                                   // user: %5
 ->   %4 = tuple ()                                   // user: %5

SILCSE VISITING:   return %4 : $()                                 // id: %5

*** RLE on function: $s7partial1ACfD ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// A.__deallocating_deinit
sil hidden @$s7partial1ACfD : $@convention(method) (@owned A) -> () {
// %0                                             // users: %3, %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  debug_value %0 : $A, let, name "self", argno 1  // id: %2
  dealloc_ref %0 : $A                             // id: %3
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function '$s7partial1ACfD'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  dealloc_ref %0 : $A                             // id: %3
Marking as live:
  return %4 : $()                                 // id: %5
Marking as live:
  %4 = tuple ()                                   // user: %5
Marking as live:
%0 = argument of bb0 : $A                         // users: %3, %2, %1
Marking as live:
  debug_value %0 : $A, let, name "self", argno 1  // id: %2
Marking as live:
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
***** CodeMotion on function: $s7partial1ACfD *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a7553a0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1ACfD ***
***** Processing $s7partial1ACfD *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %4 = tuple ()                                   // user: %5
VISITING:
      dealloc_ref %0 : $A                             // id: %3
VISITING:
      debug_value %0 : $A, let, name "self", argno 1  // id: %2
VISITING:
      debug_value %0 : $A, let, name "self", argno 1  // id: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING ENTRANCE ARGUMENT: %0 = argument of bb0 : $A                         // users: %3, %2, %1
    Initializing state.
VISITING:
      debug_value %0 : $A, let, name "self", argno 1  // id: %1
VISITING:
      debug_value %0 : $A, let, name "self", argno 1  // id: %2
VISITING:
      dealloc_ref %0 : $A                             // id: %3
VISITING:
      %4 = tuple ()                                   // user: %5
VISITING:
      return %4 : $()                                 // id: %5
**** Computing ARC Matching Sets for $s7partial1ACfD ****

*** ARCCM on function: $s7partial1ACfD ***
***** LowerAggregate on function: $s7partial1ACfD *****
Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %2
Visiting:   dealloc_ref %0 : $A                             // id: %3
Visiting:   %4 = tuple ()                                   // user: %5
Visiting:   return %4 : $()                                 // id: %5
***** SROA on function: $s7partial1ACfD *****
** StackPromotion **
No loops in $s7partial1ACfD
***** CSE on function: $s7partial1ACfD *****
SILCSE VISITING:   debug_value %0 : $A, let, name "self", argno 1  // id: %1

SILCSE VISITING:   debug_value %0 : $A, let, name "self", argno 1  // id: %2

SILCSE VISITING:   dealloc_ref %0 : $A                             // id: %3

SILCSE VISITING:   %4 = tuple ()                                   // user: %5

SILCSE Adding to value table:   %4 = tuple ()                                   // user: %5
 ->   %4 = tuple ()                                   // user: %5

SILCSE VISITING:   return %4 : $()                                 // id: %5

Running AccessEnforcementReleaseSinking on $s7partial1ACfD
Found a barrier   dealloc_ref %0 : $A                             // id: %3
, clearing last seen end_access
Running local AccessEnforcementOpts on $s7partial1ACfD
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1ACfD
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1ACfD
Removing in BB
sil_scope 1 { loc "partial.swift":1:7 parent @$s7partial1ACfD : $@convention(method) (@owned A) -> () }
sil_scope 2 { loc "partial.swift":1:7 parent 1 }
sil_scope 3 { loc "partial.swift":1:7 parent @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject inlined_at 2 }
// %0                                             // users: %3, %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  debug_value %0 : $A, let, name "self", argno 1  // id: %2
  dealloc_ref %0 : $A                             // id: %3
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
 not a check_bounds call   debug_value %0 : $A, let, name "self", argno 1  // id: %1
 not a check_bounds call   debug_value %0 : $A, let, name "self", argno 1  // id: %2
 no safe because kMayChangeAny   dealloc_ref %0 : $A                             // id: %3
 not a check_bounds call   %4 = tuple ()                                   // user: %5
 not a check_bounds call   return %4 : $()                                 // id: %5
No loops in $s7partial1ACfD
COW Array Opts in Func $s7partial1ACfD
  Skipping Function: No loops.
Copy Forwarding in Func $s7partial1BC1fySbxlF
***** LowerAggregate on function: $s7partial1BC1fySbxlF *****
Visiting:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
Visiting:   debug_value %1 : $B, let, name "self", argno 2  // id: %3
Visiting:   %4 = integer_literal $Builtin.Int1, 0           // user: %5
Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
Visiting:   return %5 : $Bool                               // id: %6
***** SROA on function: $s7partial1BC1fySbxlF *****
** Mem2Reg on function: $s7partial1BC1fySbxlF **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
    User:   return %5 : $Bool                               // id: %6
Visiting:   %4 = integer_literal $Builtin.Int1, 0           // user: %5
    User:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
    User:   return %5 : $Bool                               // id: %6
### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BC1fySbxlF
SC: ADDING: 5 instrs to worklist
SC: Visiting:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2

SC: Visiting:   debug_value %1 : $B, let, name "self", argno 2  // id: %3

SC: Visiting:   %4 = integer_literal $Builtin.Int1, 0           // user: %5

SC: Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6

SC: Visiting:   return %5 : $Bool                               // id: %6

***** Devirtualizer on function:$s7partial1BC1fySbxlF *****
***** GenericSpecializer on function:$s7partial1BC1fySbxlF *****
### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0
***** CSE on function: $s7partial1BC1fySbxlF *****
SILCSE VISITING:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2

SILCSE VISITING:   debug_value %1 : $B, let, name "self", argno 2  // id: %3

SILCSE VISITING:   %4 = integer_literal $Builtin.Int1, 0           // user: %5

SILCSE Adding to value table:   %4 = integer_literal $Builtin.Int1, 0           // user: %5
 ->   %4 = integer_literal $Builtin.Int1, 0           // user: %5

SILCSE VISITING:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6

SILCSE Adding to value table:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
 ->   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6

SILCSE VISITING:   return %5 : $Bool                               // id: %6

*** RLE on function: $s7partial1BC1fySbxlF ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// B.f<A>(_:)
sil hidden @$s7partial1BC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed B) -> Bool {
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $*T, %1 : $B):
  debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %2
  debug_value %1 : $B, let, name "self", argno 2  // id: %3
  %4 = integer_literal $Builtin.Int1, 0           // user: %5
  %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
  return %5 : $Bool                               // id: %6
} // end sil function '$s7partial1BC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %5 : $Bool                               // id: %6
Marking as live:
  %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
Marking as live:
  %4 = integer_literal $Builtin.Int1, 0           // user: %5
Removing dead argument:
%0 = argument of bb0 : $*T                        // user: %2
Removing dead argument:
%1 = argument of bb0 : $B                         // user: %3
Removing dead instruction:
  debug_value_addr undef : $*T, let, name "v", argno 1 // id: %2
Removing dead instruction:
  debug_value undef : $B, let, name "self", argno 2 // id: %2
Invalidating caller: $s7partial1BC1fySbxlF
***** CodeMotion on function: $s7partial1BC1fySbxlF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b950000
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BC1fySbxlF ***
***** Processing $s7partial1BC1fySbxlF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
VISITING:
      %2 = integer_literal $Builtin.Int1, 0           // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = integer_literal $Builtin.Int1, 0           // user: %3
VISITING:
      %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
VISITING:
      return %3 : $Bool                               // id: %4
**** Computing ARC Matching Sets for $s7partial1BC1fySbxlF ****

### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0
*** ARCCM on function: $s7partial1BC1fySbxlF ***
***** LowerAggregate on function: $s7partial1BC1fySbxlF *****
Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Visiting:   return %3 : $Bool                               // id: %4


SILCOMBINE ITERATION #0 on $s7partial1BC1fySbxlF
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SC: Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4

***** SROA on function: $s7partial1BC1fySbxlF *****
** Mem2Reg on function: $s7partial1BC1fySbxlF **
	discovered a new reachable node bb0
// B.f<A>(_:)
sil hidden @$s7partial1BC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed B) -> Bool {
bb0(%0 : $*T, %1 : $B):
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1BC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Bool                               // id: %4
Marking as live:
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $B
Invalidating caller: $s7partial1BC1fySbxlF


SILCOMBINE ITERATION #0 on $s7partial1BC1fySbxlF
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SC: Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4

### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0
** StackPromotion **
No loops in $s7partial1BC1fySbxlF
// B.f<A>(_:)
sil hidden @$s7partial1BC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed B) -> Bool {
bb0(%0 : $*T, %1 : $B):
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1BC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Bool                               // id: %4
Marking as live:
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $B
Invalidating caller: $s7partial1BC1fySbxlF
***** CSE on function: $s7partial1BC1fySbxlF *****
SILCSE VISITING:   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int1, 0           // user: %3
 ->   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SILCSE VISITING:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SILCSE Adding to value table:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
 ->   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SILCSE VISITING:   return %3 : $Bool                               // id: %4



SILCOMBINE ITERATION #0 on $s7partial1BC1fySbxlF
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SC: Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4

### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0
Running AccessEnforcementReleaseSinking on $s7partial1BC1fySbxlF
Running local AccessEnforcementOpts on $s7partial1BC1fySbxlF
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1BC1fySbxlF
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1BC1fySbxlF
*** ConstPropagation processing: 
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
    User:   return %3 : $Bool                               // id: %4
Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3
    User:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
    User:   return %3 : $Bool                               // id: %4
Removing in BB
sil_scope 1 { loc "partial.swift":10:19 parent @$s7partial1BC1fySbxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool }
sil_scope 2 { loc "partial.swift":10:40 parent 1 }
bb0(%0 : $*T, %1 : $B):
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
 not a check_bounds call   %2 = integer_literal $Builtin.Int1, 0           // user: %3
 not a check_bounds call   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
 not a check_bounds call   return %3 : $Bool                               // id: %4
No loops in $s7partial1BC1fySbxlF
// B.f<A>(_:)
sil hidden @$s7partial1BC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed B) -> Bool {
bb0(%0 : $*T, %1 : $B):
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1BC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Bool                               // id: %4
Marking as live:
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $B
Invalidating caller: $s7partial1BC1fySbxlF
COW Array Opts in Func $s7partial1BC1fySbxlF
  Skipping Function: No loops.
// B.f<A>(_:)
sil hidden @$s7partial1BC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed B) -> Bool {
bb0(%0 : $*T, %1 : $B):
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1BC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Bool                               // id: %4
Marking as live:
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $B
Invalidating caller: $s7partial1BC1fySbxlF
Copy Forwarding in Func $s7partial1BCfd
***** LowerAggregate on function: $s7partial1BCfd *****
Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
Visiting:   %2 = upcast %0 : $B to $A                       // user: %4
Visiting:   // function_ref A.deinit
  %3 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4
Visiting:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // users: %5, %6
Visiting:   %5 = unchecked_ref_cast %4 : $Builtin.NativeObject to $B
Visiting:   return %4 : $Builtin.NativeObject               // id: %6
***** SROA on function: $s7partial1BCfd *****
** Mem2Reg on function: $s7partial1BCfd **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s7partial1ACfd -> abort
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1BCfd
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BCfd
SC: DCE:   %5 = unchecked_ref_cast %4 : $Builtin.NativeObject to $B

SC: ERASE   %5 = unchecked_ref_cast %4 : $Builtin.NativeObject to $B

SC: ADDING: 5 instrs to worklist
SC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SC: Visiting:   %2 = upcast %0 : $B to $A                       // user: %4

SC: Visiting:   // function_ref A.deinit
  %3 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4

SC: Visiting:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5

SC: Visiting:   return %4 : $Builtin.NativeObject               // id: %5



SILCOMBINE ITERATION #1 on $s7partial1BCfd
SC: ADDING: 5 instrs to worklist
SC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SC: Visiting:   %2 = upcast %0 : $B to $A                       // user: %4

SC: Visiting:   // function_ref A.deinit
  %3 = function_ref @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %4

SC: Visiting:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5

SC: Visiting:   return %4 : $Builtin.NativeObject               // id: %5

Invalidating caller: $s7partial1BCfd
***** Devirtualizer on function:$s7partial1BCfd *****
    Trying to devirtualize:   %4 = apply %3(%2) : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject // user: %5
***** GenericSpecializer on function:$s7partial1BCfd *****
	discovered a new reachable node bb0

Inline into caller: $s7partial1BCfd
    decision {c=0, b=40, l=0, c-w=0/0, bb=1, c-bb=2} $s7partial1ACfd
    inline [1->1] $s7partial1ACfd
Invalidating caller: $s7partial1BCfd
Copy Forwarding in Func $s7partial1BCfd
***** LowerAggregate on function: $s7partial1BCfd *****
Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
Visiting:   %2 = upcast %0 : $B to $A                       // users: %4, %3
Visiting:   debug_value %2 : $A, let, name "self", argno 1  // id: %3
Visiting:   %4 = unchecked_ref_cast %2 : $A to $Builtin.NativeObject // user: %5
Visiting:   return %4 : $Builtin.NativeObject               // id: %5
***** SROA on function: $s7partial1BCfd *****
** Mem2Reg on function: $s7partial1BCfd **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1BCfd
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BCfd
SC: ADDING: 5 instrs to worklist
SC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SC: Visiting:   %2 = upcast %0 : $B to $A                       // users: %4, %3

SC: Visiting:   debug_value %2 : $A, let, name "self", argno 1  // id: %3

SC: Visiting:   %4 = unchecked_ref_cast %2 : $A to $Builtin.NativeObject // user: %5

SC: Old =   %5 = unchecked_ref_cast %2 : $A to $Builtin.NativeObject // user: %6

    New =   %4 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject

SC: Replacing   %5 = unchecked_ref_cast %2 : $A to $Builtin.NativeObject // user: %6

    with   %4 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject

SC: ADD:   %4 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %6

SC: ERASE   %5 = unchecked_ref_cast %2 : $A to $Builtin.NativeObject

SC: add op   %2 = upcast %0 : $B to $A                       // users: %5, %3

 from erased inst to worklist
SC: ADD:   %2 = upcast %0 : $B to $A                       // users: %5, %3

SC: add   %4 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %5
 from tracking list to worklist
SC: DCE:   %2 = upcast %0 : $B to $A                       // user: %3

SC: ERASE   %2 = upcast %0 : $B to $A

SC: Visiting:   %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3

SC: Visiting:   return %2 : $Builtin.NativeObject               // id: %3



SILCOMBINE ITERATION #1 on $s7partial1BCfd
SC: ADDING: 3 instrs to worklist
SC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SC: Visiting:   %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3

SC: Visiting:   return %2 : $Builtin.NativeObject               // id: %3

Invalidating caller: $s7partial1BCfd
***** Devirtualizer on function:$s7partial1BCfd *****
***** GenericSpecializer on function:$s7partial1BCfd *****
	discovered a new reachable node bb0
** Mem2Reg on function: $s7partial1BCfd **
	discovered a new reachable node bb0
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1BCfd
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BCfd
SC: ADDING: 3 instrs to worklist
SC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SC: Visiting:   %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3

SC: Visiting:   return %2 : $Builtin.NativeObject               // id: %3

### Run SimplifyCFG on $s7partial1BCfd
	discovered a new reachable node bb0
***** CSE on function: $s7partial1BCfd *****
SILCSE VISITING:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SILCSE VISITING:   %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3

SILCSE Adding to value table:   %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3
 ->   %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3

SILCSE VISITING:   return %2 : $Builtin.NativeObject               // id: %3

*** RLE on function: $s7partial1BCfd ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// B.deinit
sil hidden @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject {
// %0                                             // users: %2, %1
bb0(%0 : $B):
  debug_value %0 : $B, let, name "self", argno 1  // id: %1
  %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function '$s7partial1BCfd'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %2 : $Builtin.NativeObject               // id: %3
Marking as live:
  %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3
Marking as live:
%0 = argument of bb0 : $B                         // users: %2, %1
Marking as live:
  debug_value %0 : $B, let, name "self", argno 1  // id: %1
***** CodeMotion on function: $s7partial1BCfd *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b801790
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BCfd ***
***** Processing $s7partial1BCfd *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3
VISITING:
      debug_value %0 : $B, let, name "self", argno 1  // id: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      debug_value %0 : $B, let, name "self", argno 1  // id: %1
VISITING:
      %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3
VISITING:
      return %2 : $Builtin.NativeObject               // id: %3
**** Computing ARC Matching Sets for $s7partial1BCfd ****

*** ARCCM on function: $s7partial1BCfd ***
***** LowerAggregate on function: $s7partial1BCfd *****
Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
Visiting:   %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3
Visiting:   return %2 : $Builtin.NativeObject               // id: %3
***** SROA on function: $s7partial1BCfd *****
** StackPromotion **
No loops in $s7partial1BCfd
***** CSE on function: $s7partial1BCfd *****
SILCSE VISITING:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SILCSE VISITING:   %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3

SILCSE Adding to value table:   %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3
 ->   %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3

SILCSE VISITING:   return %2 : $Builtin.NativeObject               // id: %3

Running AccessEnforcementReleaseSinking on $s7partial1BCfd
Running local AccessEnforcementOpts on $s7partial1BCfd
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1BCfd
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1BCfd
Removing in BB
sil_scope 1 { loc "partial.swift":9:7 parent @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject }
sil_scope 2 { loc "partial.swift":9:7 parent @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject }
sil_scope 3 { loc "partial.swift":9:7 parent 1 }
// %0                                             // users: %2, %1
bb0(%0 : $B):
  debug_value %0 : $B, let, name "self", argno 1  // id: %1
  %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
 not a check_bounds call   debug_value %0 : $B, let, name "self", argno 1  // id: %1
 not a check_bounds call   %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3
 not a check_bounds call   return %2 : $Builtin.NativeObject               // id: %3
No loops in $s7partial1BCfd
COW Array Opts in Func $s7partial1BCfd
  Skipping Function: No loops.
Copy Forwarding in Func $s7partial1BCfD
***** LowerAggregate on function: $s7partial1BCfD *****
Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
Visiting:   // function_ref B.deinit
  %2 = function_ref @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %3
Visiting:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %4
Visiting:   %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B // user: %5
Visiting:   dealloc_ref %4 : $B                             // id: %5
Visiting:   %6 = tuple ()                                   // user: %7
Visiting:   return %6 : $()                                 // id: %7
***** SROA on function: $s7partial1BCfD *****
** Mem2Reg on function: $s7partial1BCfD **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s7partial1BCfd -> abort
*** ConstPropagation processing: 
Visiting:   %6 = tuple ()                                   // user: %7
    User:   return %6 : $()                                 // id: %7
### Run SimplifyCFG on $s7partial1BCfD
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BCfD
SC: ADDING: 7 instrs to worklist
SC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SC: Visiting:   // function_ref B.deinit
  %2 = function_ref @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %3

SC: Visiting:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %4

SC: Visiting:   %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B // user: %5

SC: Visiting:   dealloc_ref %4 : $B                             // id: %5

SC: Visiting:   %6 = tuple ()                                   // user: %7

SC: Visiting:   return %6 : $()                                 // id: %7

***** Devirtualizer on function:$s7partial1BCfD *****
    Trying to devirtualize:   %3 = apply %2(%0) : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject // user: %4
***** GenericSpecializer on function:$s7partial1BCfD *****
recompute function-effect analysis with UpdateID 3
  >> analyze $s7partial1BCfd
  << finished $s7partial1BCfd
new iteration
  update callers of $s7partial1BCfd

Inline into caller: $s7partial1BCfD
    decision {c=0, b=40, l=0, c-w=0/1, bb=1, c-bb=2} $s7partial1BCfd
    inline [1->1] $s7partial1BCfd
Invalidating caller: $s7partial1BCfD
Copy Forwarding in Func $s7partial1BCfD
***** LowerAggregate on function: $s7partial1BCfD *****
Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %2
Visiting:   %3 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %4
Visiting:   %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B // user: %5
Visiting:   dealloc_ref %4 : $B                             // id: %5
Visiting:   %6 = tuple ()                                   // user: %7
Visiting:   return %6 : $()                                 // id: %7
***** SROA on function: $s7partial1BCfD *****
** Mem2Reg on function: $s7partial1BCfD **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %6 = tuple ()                                   // user: %7
    User:   return %6 : $()                                 // id: %7
### Run SimplifyCFG on $s7partial1BCfD
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BCfD
SC: ADDING: 7 instrs to worklist
SC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %2

SC: Visiting:   %3 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %4

Simplify Old =   %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B // user: %5
    New = %0 = argument of bb0 : $B                         // users: %3, %2, %1

SC: ERASE   %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $B

SC: add op   %3 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %4

 from erased inst to worklist
SC: ADD:   %3 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %4

SC: ADD:   debug_value %0 : $B, let, name "self", argno 1  // id: %2

SC: ADD:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %2

SC: DCE:   %3 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject

SC: ERASE   %3 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject

SC: Visiting:   dealloc_ref %0 : $B                             // id: %3

SC: Visiting:   %4 = tuple ()                                   // user: %5

SC: Visiting:   return %4 : $()                                 // id: %5



SILCOMBINE ITERATION #1 on $s7partial1BCfD
SC: ADDING: 5 instrs to worklist
SC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %2

SC: Visiting:   dealloc_ref %0 : $B                             // id: %3

SC: Visiting:   %4 = tuple ()                                   // user: %5

SC: Visiting:   return %4 : $()                                 // id: %5

Invalidating caller: $s7partial1BCfD
***** Devirtualizer on function:$s7partial1BCfD *****
***** GenericSpecializer on function:$s7partial1BCfD *****
	discovered a new reachable node bb0
** Mem2Reg on function: $s7partial1BCfD **
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %4 = tuple ()                                   // user: %5
    User:   return %4 : $()                                 // id: %5
### Run SimplifyCFG on $s7partial1BCfD
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BCfD
SC: ADDING: 5 instrs to worklist
SC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SC: Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %2

SC: Visiting:   dealloc_ref %0 : $B                             // id: %3

SC: Visiting:   %4 = tuple ()                                   // user: %5

SC: Visiting:   return %4 : $()                                 // id: %5

### Run SimplifyCFG on $s7partial1BCfD
	discovered a new reachable node bb0
***** CSE on function: $s7partial1BCfD *****
SILCSE VISITING:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SILCSE VISITING:   debug_value %0 : $B, let, name "self", argno 1  // id: %2

SILCSE VISITING:   dealloc_ref %0 : $B                             // id: %3

SILCSE VISITING:   %4 = tuple ()                                   // user: %5

SILCSE Adding to value table:   %4 = tuple ()                                   // user: %5
 ->   %4 = tuple ()                                   // user: %5

SILCSE VISITING:   return %4 : $()                                 // id: %5

*** RLE on function: $s7partial1BCfD ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// B.__deallocating_deinit
sil hidden @$s7partial1BCfD : $@convention(method) (@owned B) -> () {
// %0                                             // users: %3, %2, %1
bb0(%0 : $B):
  debug_value %0 : $B, let, name "self", argno 1  // id: %1
  debug_value %0 : $B, let, name "self", argno 1  // id: %2
  dealloc_ref %0 : $B                             // id: %3
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function '$s7partial1BCfD'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  dealloc_ref %0 : $B                             // id: %3
Marking as live:
  return %4 : $()                                 // id: %5
Marking as live:
  %4 = tuple ()                                   // user: %5
Marking as live:
%0 = argument of bb0 : $B                         // users: %3, %2, %1
Marking as live:
  debug_value %0 : $B, let, name "self", argno 1  // id: %2
Marking as live:
  debug_value %0 : $B, let, name "self", argno 1  // id: %1
***** CodeMotion on function: $s7partial1BCfD *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b9505e0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BCfD ***
***** Processing $s7partial1BCfD *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %4 = tuple ()                                   // user: %5
VISITING:
      dealloc_ref %0 : $B                             // id: %3
VISITING:
      debug_value %0 : $B, let, name "self", argno 1  // id: %2
VISITING:
      debug_value %0 : $B, let, name "self", argno 1  // id: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING ENTRANCE ARGUMENT: %0 = argument of bb0 : $B                         // users: %3, %2, %1
    Initializing state.
VISITING:
      debug_value %0 : $B, let, name "self", argno 1  // id: %1
VISITING:
      debug_value %0 : $B, let, name "self", argno 1  // id: %2
VISITING:
      dealloc_ref %0 : $B                             // id: %3
VISITING:
      %4 = tuple ()                                   // user: %5
VISITING:
      return %4 : $()                                 // id: %5
**** Computing ARC Matching Sets for $s7partial1BCfD ****

*** ARCCM on function: $s7partial1BCfD ***
***** LowerAggregate on function: $s7partial1BCfD *****
Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %2
Visiting:   dealloc_ref %0 : $B                             // id: %3
Visiting:   %4 = tuple ()                                   // user: %5
Visiting:   return %4 : $()                                 // id: %5
***** SROA on function: $s7partial1BCfD *****
** StackPromotion **
No loops in $s7partial1BCfD
***** CSE on function: $s7partial1BCfD *****
SILCSE VISITING:   debug_value %0 : $B, let, name "self", argno 1  // id: %1

SILCSE VISITING:   debug_value %0 : $B, let, name "self", argno 1  // id: %2

SILCSE VISITING:   dealloc_ref %0 : $B                             // id: %3

SILCSE VISITING:   %4 = tuple ()                                   // user: %5

SILCSE Adding to value table:   %4 = tuple ()                                   // user: %5
 ->   %4 = tuple ()                                   // user: %5

SILCSE VISITING:   return %4 : $()                                 // id: %5

Running AccessEnforcementReleaseSinking on $s7partial1BCfD
Found a barrier   dealloc_ref %0 : $B                             // id: %3
, clearing last seen end_access
Running local AccessEnforcementOpts on $s7partial1BCfD
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1BCfD
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1BCfD
Removing in BB
sil_scope 1 { loc "partial.swift":9:7 parent @$s7partial1BCfD : $@convention(method) (@owned B) -> () }
sil_scope 2 { loc "partial.swift":9:7 parent 1 }
sil_scope 3 { loc "partial.swift":9:7 parent @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject inlined_at 2 }
// %0                                             // users: %3, %2, %1
bb0(%0 : $B):
  debug_value %0 : $B, let, name "self", argno 1  // id: %1
  debug_value %0 : $B, let, name "self", argno 1  // id: %2
  dealloc_ref %0 : $B                             // id: %3
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
 not a check_bounds call   debug_value %0 : $B, let, name "self", argno 1  // id: %1
 not a check_bounds call   debug_value %0 : $B, let, name "self", argno 1  // id: %2
 no safe because kMayChangeAny   dealloc_ref %0 : $B                             // id: %3
 not a check_bounds call   %4 = tuple ()                                   // user: %5
 not a check_bounds call   return %4 : $()                                 // id: %5
No loops in $s7partial1BCfD
COW Array Opts in Func $s7partial1BCfD
  Skipping Function: No loops.
Copy Forwarding in Func $s7partial1BCACycfc
***** LowerAggregate on function: $s7partial1BCACycfc *****
Visiting:   %1 = alloc_stack $B, let, name "self"           // users: %9, %3, %2, %10, %11
Visiting:   store %0 to %1 : $*B                            // id: %2
Visiting:   %3 = load %1 : $*B                              // user: %4
Visiting:   %4 = upcast %3 : $B to $A                       // user: %6
Visiting:   // function_ref A.init()
  %5 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %6
Visiting:   %6 = apply %5(%4) : $@convention(method) (@owned A) -> @owned A // user: %7
Visiting:   %7 = unchecked_ref_cast %6 : $A to $B           // users: %12, %9, %8
Visiting:   strong_retain %7 : $B                           // id: %8
Visiting:   store %7 to %1 : $*B                            // id: %9
Visiting:   destroy_addr %1 : $*B                           // id: %10
Visiting:   dealloc_stack %1 : $*B                          // id: %12
Visiting:   return %7 : $B                                  // id: %13
Invalidating caller: $s7partial1BCACycfc
***** SROA on function: $s7partial1BCACycfc *****
** Mem2Reg on function: $s7partial1BCACycfc **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** Memory to register looking at:   %1 = alloc_stack $B, let, name "self"           // users: %10, %9, %3, %2, %12
*** AllocStack has non-write use:   %10 = load %1 : $*B                             // user: %11
*** Promoting in-block:   %1 = alloc_stack $B, let, name "self"           // users: %10, %9, %3, %2, %12
*** Deleting single block AllocStackInst:   %1 = alloc_stack $B, let, name "self"
Invalidating caller: $s7partial1BCACycfc
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s7partial1ACACycfc -> abort
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1BCACycfc
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BCACycfc
SC: ADDING: 7 instrs to worklist
SC: Visiting:   %1 = upcast %0 : $B to $A                       // user: %3

SC: Visiting:   // function_ref A.init()
  %2 = function_ref @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A // user: %3

SC: Visiting:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4

SC: Visiting:   %4 = unchecked_ref_cast %3 : $A to $B           // users: %6, %7, %5

SC: Visiting:   strong_retain %4 : $B                           // id: %5

SC: Visiting:   strong_release %4 : $B                          // id: %6

SC: Visiting:   return %4 : $B                                  // id: %7

***** Devirtualizer on function:$s7partial1BCACycfc *****
    Trying to devirtualize:   %3 = apply %2(%1) : $@convention(method) (@owned A) -> @owned A // user: %4
***** GenericSpecializer on function:$s7partial1BCACycfc *****

Inline into caller: $s7partial1BCACycfc
    decision {c=0, b=40, l=0, c-w=0/2, bb=1, c-bb=2} $s7partial1ACACycfc
    inline [1->1] $s7partial1ACACycfc
Invalidating caller: $s7partial1BCACycfc
Copy Forwarding in Func $s7partial1BCACycfc
***** LowerAggregate on function: $s7partial1BCACycfc *****
Visiting:   %1 = upcast %0 : $B to $A                       // users: %3, %2
Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2
Visiting:   %3 = unchecked_ref_cast %1 : $A to $B           // users: %5, %6, %4
Visiting:   strong_retain %3 : $B                           // id: %4
Visiting:   strong_release %3 : $B                          // id: %5
Visiting:   return %3 : $B                                  // id: %6
***** SROA on function: $s7partial1BCACycfc *****
** Mem2Reg on function: $s7partial1BCACycfc **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1BCACycfc
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BCACycfc
SC: ADDING: 6 instrs to worklist
SC: Visiting:   %1 = upcast %0 : $B to $A                       // users: %3, %2

SC: Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2

Simplify Old =   %3 = unchecked_ref_cast %1 : $A to $B           // users: %5, %6, %4
    New = %0 = argument of bb0 : $B                         // user: %1

SC: ERASE   %3 = unchecked_ref_cast %1 : $A to $B

SC: add op   %1 = upcast %0 : $B to $A                       // users: %3, %2

 from erased inst to worklist
SC: ADD:   %1 = upcast %0 : $B to $A                       // users: %3, %2

SC: DCE:   %1 = upcast %0 : $B to $A                       // user: %2

SC: ERASE   %1 = upcast %0 : $B to $A

SC: Visiting:   strong_retain %0 : $B                           // id: %1

SC: Visiting:   strong_release %0 : $B                          // id: %2

SC: Visiting:   return %0 : $B                                  // id: %3



SILCOMBINE ITERATION #1 on $s7partial1BCACycfc
SC: ADDING: 3 instrs to worklist
SC: Visiting:   strong_retain %0 : $B                           // id: %1

SC: Visiting:   strong_release %0 : $B                          // id: %2

SC: Visiting:   return %0 : $B                                  // id: %3

Invalidating caller: $s7partial1BCACycfc
***** Devirtualizer on function:$s7partial1BCACycfc *****
***** GenericSpecializer on function:$s7partial1BCACycfc *****
	discovered a new reachable node bb0
** Mem2Reg on function: $s7partial1BCACycfc **
	discovered a new reachable node bb0
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1BCACycfc
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BCACycfc
SC: ADDING: 3 instrs to worklist
SC: Visiting:   strong_retain %0 : $B                           // id: %1

SC: Visiting:   strong_release %0 : $B                          // id: %2

SC: Visiting:   return %0 : $B                                  // id: %3

### Run SimplifyCFG on $s7partial1BCACycfc
	discovered a new reachable node bb0
***** CSE on function: $s7partial1BCACycfc *****
SILCSE VISITING:   strong_retain %0 : $B                           // id: %1

SILCSE VISITING:   strong_release %0 : $B                          // id: %2

SILCSE VISITING:   return %0 : $B                                  // id: %3

*** RLE on function: $s7partial1BCACycfc ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// B.init()
sil hidden @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B {
// %0                                             // users: %1, %3, %2
bb0(%0 : $B):
  strong_retain %0 : $B                           // id: %1
  strong_release %0 : $B                          // id: %2
  return %0 : $B                                  // id: %3
} // end sil function '$s7partial1BCACycfc'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  strong_retain %0 : $B                           // id: %1
Marking as live:
  strong_release %0 : $B                          // id: %2
Marking as live:
  return %0 : $B                                  // id: %3
Marking as live:
%0 = argument of bb0 : $B                         // users: %1, %3, %2
***** CodeMotion on function: $s7partial1BCACycfc *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a756520
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BCACycfc ***
***** Processing $s7partial1BCACycfc *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      strong_release %0 : $B                          // id: %2
    REF COUNT DECREMENT! Known Safe: no
VISITING:
      strong_retain %0 : $B                           // id: %1
    REF COUNT INCREMENT!
    MATCHING DECREMENT:%0 = argument of bb0 : $B                         // users: %1, %3, %2
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING ENTRANCE ARGUMENT: %0 = argument of bb0 : $B                         // users: %1, %3, %2
    Initializing state.
VISITING:
      strong_retain %0 : $B                           // id: %1
    REF COUNT INCREMENT! Known Safe: yes
VISITING:
      strong_release %0 : $B                          // id: %2
    REF COUNT DECREMENT!
    MATCHING INCREMENT:
%0 = argument of bb0 : $B                         // users: %1, %3, %2
VISITING:
      return %0 : $B                                  // id: %3
**** Computing ARC Matching Sets for $s7partial1BCACycfc ****
Constructing Matching Set For:   strong_retain %0 : $B                           // id: %1
Attempting to match up increments -> decrements:
    Looking up state for increment:   strong_retain %0 : $B                           // id: %1
        SUCCESS! Found state for increment.
        BOTTOM UP KNOWNSAFE: false
        BOTTOM UP CODEMOTIONSAFE: true
        Decrement:   strong_release %0 : $B                          // id: %2
            SUCCESS! Found state for decrement.
    NOT KNOWN SAFE!
Attempting to match up decrements -> increments:
    Looking up state for decrement:   strong_release %0 : $B                          // id: %2
        SUCCESS! Found state for decrement.
        TOP DOWN KNOWNSAFE: true
        TOP DOWN CODEMOTIONSAFE: true
        Increment:   strong_retain %0 : $B                           // id: %1
            SUCCESS! Found state for increment.
Attempting to match up increments -> decrements:
    Looking up state for increment:   strong_retain %0 : $B                           // id: %1
        SUCCESS! Found state for increment.
        BOTTOM UP KNOWNSAFE: false
        BOTTOM UP CODEMOTIONSAFE: true
        Decrement:   strong_release %0 : $B                          // id: %2
            SUCCESS! Found state for decrement.
        SKIPPING! Already processed this decrement
    NOT KNOWN SAFE!
UNCONDITIONALLY OR CODE MOTION SAFE! DELETING INSTS.
SUCCESS! We can remove things.
**** Optimizing Matching Set ****
    Deleting increment:   strong_retain %0 : $B                           // id: %1
    Deleting decrement:   strong_release %0 : $B                          // id: %2

<<< Made a Change! Reprocessing Function! >>>
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING ENTRANCE ARGUMENT: %0 = argument of bb0 : $B                         // user: %1
    Initializing state.
VISITING:
      return %0 : $B                                  // id: %1
**** Computing ARC Matching Sets for $s7partial1BCACycfc ****

***** Processing $s7partial1BCACycfc *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING ENTRANCE ARGUMENT: %0 = argument of bb0 : $B                         // user: %1
    Initializing state.
VISITING:
      return %0 : $B                                  // id: %1
**** Computing ARC Matching Sets for $s7partial1BCACycfc ****

Invalidating caller: $s7partial1BCACycfc
### Run SimplifyCFG on $s7partial1BCACycfc
	discovered a new reachable node bb0
***** CodeMotion on function: $s7partial1BCACycfc *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a756520
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BCACycfc ***
*** ARCCM on function: $s7partial1BCACycfc ***
***** Processing $s7partial1BCACycfc *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING ENTRANCE ARGUMENT: %0 = argument of bb0 : $B                         // user: %1
    Initializing state.
VISITING:
      return %0 : $B                                  // id: %1
**** Computing ARC Matching Sets for $s7partial1BCACycfc ****

***** LowerAggregate on function: $s7partial1BCACycfc *****
Visiting:   return %0 : $B                                  // id: %1


SILCOMBINE ITERATION #0 on $s7partial1BCACycfc
SC: ADDING: 1 instrs to worklist
SC: Visiting:   return %0 : $B                                  // id: %1

***** SROA on function: $s7partial1BCACycfc *****
** Mem2Reg on function: $s7partial1BCACycfc **
	discovered a new reachable node bb0
// B.init()
sil hidden @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B {
// %0                                             // user: %1
bb0(%0 : $B):
  return %0 : $B                                  // id: %1
} // end sil function '$s7partial1BCACycfc'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %0 : $B                                  // id: %1
Marking as live:
%0 = argument of bb0 : $B                         // user: %1
** StackPromotion **
No loops in $s7partial1BCACycfc
***** CSE on function: $s7partial1BCACycfc *****
SILCSE VISITING:   return %0 : $B                                  // id: %1

Running AccessEnforcementReleaseSinking on $s7partial1BCACycfc
Running local AccessEnforcementOpts on $s7partial1BCACycfc
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1BCACycfc
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1BCACycfc
*** ConstPropagation processing: 
Removing in BB
sil_scope 1 { loc "partial.swift":9:12 parent @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B }
sil_scope 2 {  parent 1 }
// %0                                             // user: %1
bb0(%0 : $B):
  return %0 : $B                                  // id: %1
 not a check_bounds call   return %0 : $B                                  // id: %1
No loops in $s7partial1BCACycfc
COW Array Opts in Func $s7partial1BCACycfc
  Skipping Function: No loops.
Copy Forwarding in Func $s7partial1BCACycfC
***** LowerAggregate on function: $s7partial1BCACycfC *****
Visiting:   %1 = alloc_ref $B                               // user: %3
Visiting:   // function_ref B.init()
  %2 = function_ref @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B // user: %3
Visiting:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
Visiting:   return %3 : $B                                  // id: %4
***** SROA on function: $s7partial1BCACycfC *****
** Mem2Reg on function: $s7partial1BCACycfC **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s7partial1BCACycfc -> abort
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1BCACycfC
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BCACycfC
SC: ADDING: 4 instrs to worklist
SC: Visiting:   %1 = alloc_ref $B                               // user: %3

SC: Visiting:   // function_ref B.init()
  %2 = function_ref @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B // user: %3

SC: Visiting:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4

SC: Visiting:   return %3 : $B                                  // id: %4

***** Devirtualizer on function:$s7partial1BCACycfC *****
    Trying to devirtualize:   %3 = apply %2(%1) : $@convention(method) (@owned B) -> @owned B // user: %4
***** GenericSpecializer on function:$s7partial1BCACycfC *****
recompute function-effect analysis with UpdateID 4
  >> analyze $s7partial1BCACycfc
  << finished $s7partial1BCACycfc
new iteration
  update callers of $s7partial1BCACycfc

Inline into caller: $s7partial1BCACycfC
    pure-call decision $s7partial1BCACycfc
    inline [1->1] $s7partial1BCACycfc
Invalidating caller: $s7partial1BCACycfC
Copy Forwarding in Func $s7partial1BCACycfC
***** LowerAggregate on function: $s7partial1BCACycfC *****
Visiting:   %1 = alloc_ref $B                               // user: %2
Visiting:   return %1 : $B                                  // id: %2
***** SROA on function: $s7partial1BCACycfC *****
** Mem2Reg on function: $s7partial1BCACycfC **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1BCACycfC
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BCACycfC
SC: ADDING: 2 instrs to worklist
SC: Visiting:   %1 = alloc_ref $B                               // user: %2

SC: Visiting:   return %1 : $B                                  // id: %2

***** Devirtualizer on function:$s7partial1BCACycfC *****
***** GenericSpecializer on function:$s7partial1BCACycfC *****
### Run SimplifyCFG on $s7partial1BCACycfC
	discovered a new reachable node bb0
***** CSE on function: $s7partial1BCACycfC *****
SILCSE VISITING:   %1 = alloc_ref $B                               // user: %2

SILCSE VISITING:   return %1 : $B                                  // id: %2

*** RLE on function: $s7partial1BCACycfC ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// B.__allocating_init()
sil hidden [exact_self_class] @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B {
bb0(%0 : $@thick B.Type):
  %1 = alloc_ref $B                               // user: %2
  return %1 : $B                                  // id: %2
} // end sil function '$s7partial1BCACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $B                                  // id: %2
Marking as live:
  %1 = alloc_ref $B                               // user: %2
Removing dead argument:
%0 = argument of bb0 : $@thick B.Type
Invalidating caller: $s7partial1BCACycfC
***** CodeMotion on function: $s7partial1BCACycfC *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a7568a0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BCACycfC ***
***** Processing $s7partial1BCACycfC *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %1 = alloc_ref $B                               // user: %2
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %1 = alloc_ref $B                               // user: %2
VISITING:
      return %1 : $B                                  // id: %2
**** Computing ARC Matching Sets for $s7partial1BCACycfC ****

### Run SimplifyCFG on $s7partial1BCACycfC
	discovered a new reachable node bb0
*** ARCCM on function: $s7partial1BCACycfC ***
***** LowerAggregate on function: $s7partial1BCACycfC *****
Visiting:   %1 = alloc_ref $B                               // user: %2
Visiting:   return %1 : $B                                  // id: %2


SILCOMBINE ITERATION #0 on $s7partial1BCACycfC
SC: ADDING: 2 instrs to worklist
SC: Visiting:   %1 = alloc_ref $B                               // user: %2

SC: Visiting:   return %1 : $B                                  // id: %2

***** SROA on function: $s7partial1BCACycfC *****
** Mem2Reg on function: $s7partial1BCACycfC **
	discovered a new reachable node bb0
// B.__allocating_init()
sil hidden [exact_self_class] @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B {
bb0(%0 : $@thick B.Type):
  %1 = alloc_ref $B                               // user: %2
  return %1 : $B                                  // id: %2
} // end sil function '$s7partial1BCACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $B                                  // id: %2
Marking as live:
  %1 = alloc_ref $B                               // user: %2
Removing dead argument:
%0 = argument of bb0 : $@thick B.Type
Invalidating caller: $s7partial1BCACycfC


SILCOMBINE ITERATION #0 on $s7partial1BCACycfC
SC: ADDING: 2 instrs to worklist
SC: Visiting:   %1 = alloc_ref $B                               // user: %2

SC: Visiting:   return %1 : $B                                  // id: %2

### Run SimplifyCFG on $s7partial1BCACycfC
	discovered a new reachable node bb0
** StackPromotion **
No loops in $s7partial1BCACycfC
// B.__allocating_init()
sil hidden [exact_self_class] @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B {
bb0(%0 : $@thick B.Type):
  %1 = alloc_ref $B                               // user: %2
  return %1 : $B                                  // id: %2
} // end sil function '$s7partial1BCACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $B                                  // id: %2
Marking as live:
  %1 = alloc_ref $B                               // user: %2
Removing dead argument:
%0 = argument of bb0 : $@thick B.Type
Invalidating caller: $s7partial1BCACycfC
***** CSE on function: $s7partial1BCACycfC *****
SILCSE VISITING:   %1 = alloc_ref $B                               // user: %2

SILCSE VISITING:   return %1 : $B                                  // id: %2



SILCOMBINE ITERATION #0 on $s7partial1BCACycfC
SC: ADDING: 2 instrs to worklist
SC: Visiting:   %1 = alloc_ref $B                               // user: %2

SC: Visiting:   return %1 : $B                                  // id: %2

### Run SimplifyCFG on $s7partial1BCACycfC
	discovered a new reachable node bb0
Running AccessEnforcementReleaseSinking on $s7partial1BCACycfC
Running local AccessEnforcementOpts on $s7partial1BCACycfC
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1BCACycfC
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1BCACycfC
*** ConstPropagation processing: 
Removing in BB
sil_scope 1 { loc "partial.swift":9:12 parent @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B }
bb0(%0 : $@thick B.Type):
  %1 = alloc_ref $B                               // user: %2
  return %1 : $B                                  // id: %2
 not a check_bounds call   %1 = alloc_ref $B                               // user: %2
 not a check_bounds call   return %1 : $B                                  // id: %2
No loops in $s7partial1BCACycfC
// B.__allocating_init()
sil hidden [exact_self_class] @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B {
bb0(%0 : $@thick B.Type):
  %1 = alloc_ref $B                               // user: %2
  return %1 : $B                                  // id: %2
} // end sil function '$s7partial1BCACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $B                                  // id: %2
Marking as live:
  %1 = alloc_ref $B                               // user: %2
Removing dead argument:
%0 = argument of bb0 : $@thick B.Type
Invalidating caller: $s7partial1BCACycfC
COW Array Opts in Func $s7partial1BCACycfC
  Skipping Function: No loops.
// B.__allocating_init()
sil hidden [exact_self_class] @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B {
bb0(%0 : $@thick B.Type):
  %1 = alloc_ref $B                               // user: %2
  return %1 : $B                                  // id: %2
} // end sil function '$s7partial1BCACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $B                                  // id: %2
Marking as live:
  %1 = alloc_ref $B                               // user: %2
Removing dead argument:
%0 = argument of bb0 : $@thick B.Type
Invalidating caller: $s7partial1BCACycfC
Copy Forwarding in Func $s7partial8makeAorBAA1ACyF
***** LowerAggregate on function: $s7partial8makeAorBAA1ACyF *****
Visiting:   %0 = metatype $@thick B.Type                    // user: %2
Visiting:   // function_ref B.__allocating_init()
  %1 = function_ref @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B // user: %2
Visiting:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
Visiting:   %3 = upcast %2 : $B to $A                       // user: %4
Visiting:   return %3 : $A                                  // id: %4
***** SROA on function: $s7partial8makeAorBAA1ACyF *****
** Mem2Reg on function: $s7partial8makeAorBAA1ACyF **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s7partial1BCACycfC -> abort
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial8makeAorBAA1ACyF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial8makeAorBAA1ACyF
SC: ADDING: 5 instrs to worklist
SC: Visiting:   %0 = metatype $@thick B.Type                    // user: %2

SC: Visiting:   // function_ref B.__allocating_init()
  %1 = function_ref @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B // user: %2

SC: Visiting:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3

SC: Visiting:   %3 = upcast %2 : $B to $A                       // user: %4

SC: Visiting:   return %3 : $A                                  // id: %4

***** Devirtualizer on function:$s7partial8makeAorBAA1ACyF *****
    Trying to devirtualize:   %2 = apply %1(%0) : $@convention(method) (@thick B.Type) -> @owned B // user: %3
***** GenericSpecializer on function:$s7partial8makeAorBAA1ACyF *****
recompute function-effect analysis with UpdateID 5
  >> analyze $s7partial1BCACycfC
  << finished $s7partial1BCACycfC
new iteration
  update callers of $s7partial1BCACycfC

Inline into caller: $s7partial8makeAorBAA1ACyF
    pure-call decision $s7partial1BCACycfC
    inline [1->1] $s7partial1BCACycfC
Invalidating caller: $s7partial8makeAorBAA1ACyF
Copy Forwarding in Func $s7partial8makeAorBAA1ACyF
***** LowerAggregate on function: $s7partial8makeAorBAA1ACyF *****
Visiting:   %0 = alloc_ref $B                               // user: %1
Visiting:   %1 = upcast %0 : $B to $A                       // user: %2
Visiting:   return %1 : $A                                  // id: %2
***** SROA on function: $s7partial8makeAorBAA1ACyF *****
** Mem2Reg on function: $s7partial8makeAorBAA1ACyF **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial8makeAorBAA1ACyF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial8makeAorBAA1ACyF
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %0 = alloc_ref $B                               // user: %1

SC: Visiting:   %1 = upcast %0 : $B to $A                       // user: %2

SC: Visiting:   return %1 : $A                                  // id: %2

***** Devirtualizer on function:$s7partial8makeAorBAA1ACyF *****
***** GenericSpecializer on function:$s7partial8makeAorBAA1ACyF *****
### Run SimplifyCFG on $s7partial8makeAorBAA1ACyF
	discovered a new reachable node bb0
***** CSE on function: $s7partial8makeAorBAA1ACyF *****
SILCSE VISITING:   %0 = alloc_ref $B                               // user: %1

SILCSE VISITING:   %1 = upcast %0 : $B to $A                       // user: %2

SILCSE Adding to value table:   %1 = upcast %0 : $B to $A                       // user: %2
 ->   %1 = upcast %0 : $B to $A                       // user: %2

SILCSE VISITING:   return %1 : $A                                  // id: %2

*** RLE on function: $s7partial8makeAorBAA1ACyF ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// makeAorB()
sil hidden [noinline] @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A {
bb0:
  %0 = alloc_ref $B                               // user: %1
  %1 = upcast %0 : $B to $A                       // user: %2
  return %1 : $A                                  // id: %2
} // end sil function '$s7partial8makeAorBAA1ACyF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $A                                  // id: %2
Marking as live:
  %1 = upcast %0 : $B to $A                       // user: %2
Marking as live:
  %0 = alloc_ref $B                               // user: %1
***** CodeMotion on function: $s7partial8makeAorBAA1ACyF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a756b20
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial8makeAorBAA1ACyF ***
***** Processing $s7partial8makeAorBAA1ACyF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %1 = upcast %0 : $B to $A                       // user: %2
VISITING:
      %0 = alloc_ref $B                               // user: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %0 = alloc_ref $B                               // user: %1
VISITING:
      %1 = upcast %0 : $B to $A                       // user: %2
VISITING:
      return %1 : $A                                  // id: %2
**** Computing ARC Matching Sets for $s7partial8makeAorBAA1ACyF ****

*** ARCCM on function: $s7partial8makeAorBAA1ACyF ***
** StackPromotion **
No loops in $s7partial8makeAorBAA1ACyF
***** CSE on function: $s7partial8makeAorBAA1ACyF *****
SILCSE VISITING:   %0 = alloc_ref $B                               // user: %1

SILCSE VISITING:   %1 = upcast %0 : $B to $A                       // user: %2

SILCSE Adding to value table:   %1 = upcast %0 : $B to $A                       // user: %2
 ->   %1 = upcast %0 : $B to $A                       // user: %2

SILCSE VISITING:   return %1 : $A                                  // id: %2

Running AccessEnforcementReleaseSinking on $s7partial8makeAorBAA1ACyF
Running local AccessEnforcementOpts on $s7partial8makeAorBAA1ACyF
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial8makeAorBAA1ACyF
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial8makeAorBAA1ACyF
Removing in BB
sil_scope 1 { loc "partial.swift":16:6 parent @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A }
sil_scope 2 { loc "partial.swift":16:22 parent 1 }
sil_scope 3 { loc "partial.swift":17:5 parent 2 }
sil_scope 4 { loc "partial.swift":9:12 parent @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B inlined_at 3 }
bb0:
  %0 = alloc_ref $B                               // user: %1
  %1 = upcast %0 : $B to $A                       // user: %2
  return %1 : $A                                  // id: %2
 not a check_bounds call   %0 = alloc_ref $B                               // user: %1
 not a check_bounds call   %1 = upcast %0 : $B to $A                       // user: %2
 not a check_bounds call   return %1 : $A                                  // id: %2
No loops in $s7partial8makeAorBAA1ACyF
COW Array Opts in Func $s7partial8makeAorBAA1ACyF
  Skipping Function: No loops.
Copy Forwarding in Func $s7partial1gSbyF
***** LowerAggregate on function: $s7partial1gSbyF *****
Visiting:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
Visiting:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6
Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Visiting:   %4 = alloc_stack $UInt16                        // users: %5, %8, %7
Visiting:   store %3 to %4 : $*UInt16                       // id: %5
Visiting:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
Visiting:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
Visiting:   dealloc_stack %4 : $*UInt16                     // id: %8
Visiting:   strong_release %1 : $A                          // id: %9
Visiting:   return %7 : $Bool                               // id: %10
***** SROA on function: $s7partial1gSbyF *****
    Visiting use:   store %3 to %4 : $*UInt16                       // id: %5
        Found a store into the projection.
    Visiting use:   dealloc_stack %4 : $*UInt16                     // id: %8
    Visiting use:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
        Found unknown user, pointer escapes!
** Mem2Reg on function: $s7partial1gSbyF **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** Memory to register looking at:   %4 = alloc_stack $UInt16                        // users: %5, %8, %7
*** AllocStack is captured by:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s7partial8makeAorBAA1ACyF -> abort
ExistentialSpecializer Pass: Bail! Due to canSpecializeCalleeFunction.
  %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
*** ConstPropagation processing: 
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    User:   store %3 to %4 : $*UInt16                       // id: %5
Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
    User:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    User:   store %3 to %4 : $*UInt16                       // id: %5
### Run SimplifyCFG on $s7partial1gSbyF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1gSbyF
SC: ADDING: 11 instrs to worklist
SC: Visiting:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

SC: Visiting:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6

SC: Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SC: Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SC: Visiting:   %4 = alloc_stack $UInt16                        // users: %5, %8, %7

SC: Visiting:   store %3 to %4 : $*UInt16                       // id: %5

SC: Visiting:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7

SC: Visiting:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10

SC: Visiting:   dealloc_stack %4 : $*UInt16                     // id: %8

SC: Visiting:   strong_release %1 : $A                          // id: %9

SC: Visiting:   return %7 : $Bool                               // id: %10

***** Devirtualizer on function:$s7partial1gSbyF *****
    Trying to devirtualize:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6
    Trying to devirtualize:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
***** GenericSpecializer on function:$s7partial1gSbyF *****
### Run SimplifyCFG on $s7partial1gSbyF
	discovered a new reachable node bb0
***** CSE on function: $s7partial1gSbyF *****
SILCSE VISITING:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

SILCSE Adding to value table:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
 ->   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

SILCSE VISITING:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6

recompute function-effect analysis with UpdateID 6
  >> analyze $s7partial8makeAorBAA1ACyF
  << finished $s7partial8makeAorBAA1ACyF
new iteration
  update callers of $s7partial8makeAorBAA1ACyF
SILCSE VISITING:   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
 ->   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SILCSE VISITING:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SILCSE Adding to value table:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
 ->   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SILCSE VISITING:   %4 = alloc_stack $UInt16                        // users: %5, %8, %7

SILCSE VISITING:   store %3 to %4 : $*UInt16                       // id: %5

SILCSE VISITING:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7

SILCSE Adding to value table:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
 ->   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7

SILCSE VISITING:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10

SILCSE VISITING:   dealloc_stack %4 : $*UInt16                     // id: %8

SILCSE VISITING:   strong_release %1 : $A                          // id: %9

SILCSE VISITING:   return %7 : $Bool                               // id: %10

*** RLE on function: $s7partial1gSbyF ***
Visiting type: $*UInt16
Visiting type: $*Builtin.Int16
    No projections. Finished projection list
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// g()
sil hidden @$s7partial1gSbyF : $@convention(thin) () -> Bool {
bb0:
  // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6
  %2 = integer_literal $Builtin.Int16, 9          // user: %3
  %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
  %4 = alloc_stack $UInt16                        // users: %5, %8, %7
  store %3 to %4 : $*UInt16                       // id: %5
  %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
  %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
  dealloc_stack %4 : $*UInt16                     // id: %8
  strong_release %1 : $A                          // id: %9
  return %7 : $Bool                               // id: %10
} // end sil function '$s7partial1gSbyF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6
Marking as live:
  store %3 to %4 : $*UInt16                       // id: %5
Marking as live:
  %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
Marking as live:
  dealloc_stack %4 : $*UInt16                     // id: %8
Marking as live:
  strong_release %1 : $A                          // id: %9
Marking as live:
  return %7 : $Bool                               // id: %10
Marking as live:
  %4 = alloc_stack $UInt16                        // users: %5, %8, %7
Marking as live:
  %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
Marking as live:
  %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Marking as live:
  %2 = integer_literal $Builtin.Int16, 9          // user: %3
Marking as live:
  // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
***** CodeMotion on function: $s7partial1gSbyF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a756c00
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1gSbyF ***
Release Root #1   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6
Release   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %7, %6
  at interference   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
Invalidating caller: $s7partial1gSbyF
***** Processing $s7partial1gSbyF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      dealloc_stack %4 : $*UInt16                     // id: %9
VISITING:
      strong_release %1 : $A                          // id: %8
    REF COUNT DECREMENT! Known Safe: no
VISITING:
      %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
ALIAS ANALYSIS:
    V1:   %4 = alloc_stack $UInt16                        // users: %5, %9, %7
    V2:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
        After Cast Stripping V1:  %4 = alloc_stack $UInt16                        // users: %5, %9, %7
        After Cast Stripping V2:  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
        Underlying V1:  %4 = alloc_stack $UInt16                        // users: %5, %9, %7
        Underlying V2:  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
recompute escape analysis with UpdateID 1
  >> build graph for $s7partial1gSbyF
  >> build graph for $s7partial8makeAorBAA1ACyF
  << finished graph for $s7partial8makeAorBAA1ACyF
  << finished graph for $s7partial1gSbyF
iteration 0
  create summary graph for $s7partial8makeAorBAA1ACyF
  merge  $s7partial8makeAorBAA1ACyF into $s7partial1gSbyF
  create summary graph for $s7partial1gSbyF
    Found Potential Guaranteed Use:
          %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING:
      %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
VISITING:
      store %3 to %4 : $*UInt16                       // id: %5
VISITING:
      %4 = alloc_stack $UInt16                        // users: %5, %9, %7
VISITING:
      %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
VISITING:
      %2 = integer_literal $Builtin.Int16, 9          // user: %3
VISITING:
      %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING:
      // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
VISITING:
      %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING ENTRANCE APPLY:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
    Initializing state.
VISITING:
      %2 = integer_literal $Builtin.Int16, 9          // user: %3
VISITING:
      %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
VISITING:
      %4 = alloc_stack $UInt16                        // users: %5, %9, %7
VISITING:
      store %3 to %4 : $*UInt16                       // id: %5
VISITING:
      %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
VISITING:
      %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
    Found Potential Guaranteed Use:
          %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING:
      strong_release %1 : $A                          // id: %8
    REF COUNT DECREMENT!
VISITING:
      dealloc_stack %4 : $*UInt16                     // id: %9
VISITING:
      return %7 : $Bool                               // id: %10
**** Computing ARC Matching Sets for $s7partial1gSbyF ****

### Run SimplifyCFG on $s7partial1gSbyF
	discovered a new reachable node bb0
***** CodeMotion on function: $s7partial1gSbyF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a756d00
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1gSbyF ***
*** ARCCM on function: $s7partial1gSbyF ***
Release Root #1   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
Release   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
  at interference   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
Invalidating caller: $s7partial1gSbyF
  invalidate $s7partial1gSbyF
***** Processing $s7partial1gSbyF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      dealloc_stack %4 : $*UInt16                     // id: %9
VISITING:
      strong_release %1 : $A                          // id: %8
    REF COUNT DECREMENT! Known Safe: no
VISITING:
      %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
ALIAS ANALYSIS:
    V1:   %4 = alloc_stack $UInt16                        // users: %5, %9, %7
    V2:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
        After Cast Stripping V1:  %4 = alloc_stack $UInt16                        // users: %5, %9, %7
        After Cast Stripping V2:  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
        Underlying V1:  %4 = alloc_stack $UInt16                        // users: %5, %9, %7
        Underlying V2:  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
recompute escape analysis with UpdateID 2
  >> build graph for $s7partial1gSbyF
  << finished graph for $s7partial1gSbyF
iteration 0
  merge  $s7partial8makeAorBAA1ACyF into $s7partial1gSbyF
  create summary graph for $s7partial1gSbyF
    Found Potential Guaranteed Use:
          %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING:
      %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
VISITING:
      store %3 to %4 : $*UInt16                       // id: %5
VISITING:
      %4 = alloc_stack $UInt16                        // users: %5, %9, %7
VISITING:
      %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
VISITING:
      %2 = integer_literal $Builtin.Int16, 9          // user: %3
VISITING:
      %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING:
      // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
VISITING:
      %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING ENTRANCE APPLY:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
    Initializing state.
VISITING:
      %2 = integer_literal $Builtin.Int16, 9          // user: %3
VISITING:
      %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
VISITING:
      %4 = alloc_stack $UInt16                        // users: %5, %9, %7
VISITING:
      store %3 to %4 : $*UInt16                       // id: %5
VISITING:
      %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
VISITING:
      %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
    Found Potential Guaranteed Use:
          %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING:
      strong_release %1 : $A                          // id: %8
    REF COUNT DECREMENT!
VISITING:
      dealloc_stack %4 : $*UInt16                     // id: %9
VISITING:
      return %7 : $Bool                               // id: %10
**** Computing ARC Matching Sets for $s7partial1gSbyF ****

***** LowerAggregate on function: $s7partial1gSbyF *****
Visiting:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
Visiting:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Visiting:   %4 = alloc_stack $UInt16                        // users: %5, %9, %7
Visiting:   store %3 to %4 : $*UInt16                       // id: %5
Visiting:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
Visiting:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
Visiting:   strong_release %1 : $A                          // id: %8
Visiting:   dealloc_stack %4 : $*UInt16                     // id: %9
Visiting:   return %7 : $Bool                               // id: %10


SILCOMBINE ITERATION #0 on $s7partial1gSbyF
SC: ADDING: 11 instrs to worklist
SC: Visiting:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

SC: Visiting:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6

SC: Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SC: Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SC: Visiting:   %4 = alloc_stack $UInt16                        // users: %5, %9, %7

SC: Visiting:   store %3 to %4 : $*UInt16                       // id: %5

SC: Visiting:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7

SC: Visiting:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10

SC: Visiting:   strong_release %1 : $A                          // id: %8

SC: Visiting:   dealloc_stack %4 : $*UInt16                     // id: %9

SC: Visiting:   return %7 : $Bool                               // id: %10

***** SROA on function: $s7partial1gSbyF *****
    Visiting use:   store %3 to %4 : $*UInt16                       // id: %5
        Found a store into the projection.
    Visiting use:   dealloc_stack %4 : $*UInt16                     // id: %9
    Visiting use:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
        Found unknown user, pointer escapes!
** Mem2Reg on function: $s7partial1gSbyF **
	discovered a new reachable node bb0
*** Memory to register looking at:   %4 = alloc_stack $UInt16                        // users: %5, %9, %7
*** AllocStack is captured by:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
// g()
sil hidden @$s7partial1gSbyF : $@convention(thin) () -> Bool {
bb0:
  // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
  %2 = integer_literal $Builtin.Int16, 9          // user: %3
  %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
  %4 = alloc_stack $UInt16                        // users: %5, %9, %7
  store %3 to %4 : $*UInt16                       // id: %5
  %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
  %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
  strong_release %1 : $A                          // id: %8
  dealloc_stack %4 : $*UInt16                     // id: %9
  return %7 : $Bool                               // id: %10
} // end sil function '$s7partial1gSbyF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
Marking as live:
  store %3 to %4 : $*UInt16                       // id: %5
Marking as live:
  %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
Marking as live:
  strong_release %1 : $A                          // id: %8
Marking as live:
  dealloc_stack %4 : $*UInt16                     // id: %9
Marking as live:
  return %7 : $Bool                               // id: %10
Marking as live:
  %4 = alloc_stack $UInt16                        // users: %5, %9, %7
Marking as live:
  %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
Marking as live:
  %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Marking as live:
  %2 = integer_literal $Builtin.Int16, 9          // user: %3
Marking as live:
  // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
### Run SimplifyCFG on $s7partial1gSbyF
	discovered a new reachable node bb0
** StackPromotion **
No loops in $s7partial1gSbyF
***** CSE on function: $s7partial1gSbyF *****
SILCSE VISITING:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

SILCSE Adding to value table:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
 ->   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

SILCSE VISITING:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6

SILCSE VISITING:   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
 ->   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SILCSE VISITING:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SILCSE Adding to value table:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
 ->   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SILCSE VISITING:   %4 = alloc_stack $UInt16                        // users: %5, %9, %7

SILCSE VISITING:   store %3 to %4 : $*UInt16                       // id: %5

SILCSE VISITING:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7

SILCSE Adding to value table:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
 ->   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7

SILCSE VISITING:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10

SILCSE VISITING:   strong_release %1 : $A                          // id: %8

SILCSE VISITING:   dealloc_stack %4 : $*UInt16                     // id: %9

SILCSE VISITING:   return %7 : $Bool                               // id: %10

Running AccessEnforcementReleaseSinking on $s7partial1gSbyF
Found a barrier   dealloc_stack %4 : $*UInt16                     // id: %9
, clearing last seen end_access
Found a sinkable instruction   strong_release %1 : $A                          // id: %8

Cannot be sunk: no open barrier-less end_access found
Found a barrier   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
, clearing last seen end_access
Found a barrier   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
, clearing last seen end_access
Running local AccessEnforcementOpts on $s7partial1gSbyF
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1gSbyF
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1gSbyF
*** ConstPropagation processing: 
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    User:   store %3 to %4 : $*UInt16                       // id: %5
Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
    User:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    User:   store %3 to %4 : $*UInt16                       // id: %5
Removing in BB
sil_scope 1 { loc "partial.swift":20:6 parent @$s7partial1gSbyF : $@convention(thin) () -> Bool }
sil_scope 2 { loc "partial.swift":20:18 parent 1 }
bb0:
  // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
  %2 = integer_literal $Builtin.Int16, 9          // user: %3
  %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
  %4 = alloc_stack $UInt16                        // users: %5, %9, %7
  store %3 to %4 : $*UInt16                       // id: %5
  %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
  %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
  strong_release %1 : $A                          // id: %8
  dealloc_stack %4 : $*UInt16                     // id: %9
  return %7 : $Bool                               // id: %10
 not a check_bounds call   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
 no safe because kMayChangeAny   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
 not a check_bounds call   %2 = integer_literal $Builtin.Int16, 9          // user: %3
 not a check_bounds call   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
 not a check_bounds call   %4 = alloc_stack $UInt16                        // users: %5, %9, %7
 not a check_bounds call   store %3 to %4 : $*UInt16                       // id: %5
 not a check_bounds call   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
 no safe because kMayChangeAny   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
 no safe because kMayChangeAny   strong_release %1 : $A                          // id: %8
 not a check_bounds call   dealloc_stack %4 : $*UInt16                     // id: %9
 not a check_bounds call   return %7 : $Bool                               // id: %10
No loops in $s7partial1gSbyF
COW Array Opts in Func $s7partial1gSbyF
  Skipping Function: No loops.
*** Optimizing the module (MidModulePasses+StackPromote) *** 
Running DeadFuncElimination
running dead function elimination
running function elimination
  anchor function: main
  anchor function: $s7partial1ACACycfC
  anchor function: $s7partial1ACACycfc
  anchor function: $s7partial1AC1fySbxlF
  anchor function: $s7partial1ACfd
  anchor function: $s7partial1ACfD
  anchor function: $s7partial1BC1fySbxlF
  anchor function: $s7partial1BCfd
  anchor function: $s7partial1BCfD
  anchor function: $s7partial1BCACycfC
  anchor function: $s7partial1BCACycfc
  anchor function: $s7partial8makeAorBAA1ACyF
  anchor function: $s7partial1gSbyF
    scan function $s7partial1gSbyF
    scan function $s7partial8makeAorBAA1ACyF
    scan function $s7partial1BCACycfc
    scan function $s7partial1BCfd
    scan function $s7partial1ACfd
    scan function $s7partial1ACACycfc
    scan function main
    scan function $s7partial1BCfD
    scan function $s7partial1ACfD
    scan function $s7partial1BC1fySbxlF
    scan function $s7partial1AC1fySbxlF
    scan function $s7partial1BCACycfC
    scan function $s7partial1ACACycfC
  erase dead function $ss2eeoiySbypXpSg_ABtF
Invalidating caller: $ss2eeoiySbypXpSg_ABtF
PMVerifierAnalysis. Delete: $ss2eeoiySbypXpSg_ABtF
Process imports in function: main
Process imports in function: $s7partial1ACACycfC
Process imports in function: $s7partial1ACACycfc
Process imports in function: $s7partial1AC1fySbxlF
Process imports in function: $s7partial1ACfd
Process imports in function: $s7partial1ACfD
Process imports in function: $s7partial1BC1fySbxlF
Process imports in function: $s7partial1BCfd
Process imports in function: $s7partial1BCfD
Process imports in function: $s7partial1BCACycfC
Process imports in function: $s7partial1BCACycfc
Process imports in function: $s7partial8makeAorBAA1ACyF
Process imports in function: $s7partial1gSbyF
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
    Found destructor!
    Analyzing destructor.
        Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
            SAFE! Instruction has no side effects.
        Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %2
            SAFE! Instruction has no side effects.
        Visiting:   dealloc_ref %0 : $A                             // id: %3
            SAFE! dealloc_ref on self.
        Visiting:   %4 = tuple ()                                   // user: %5
            SAFE! Instruction has no side effects.
        Visiting:   return %4 : $()                                 // id: %5
            SAFE! Instruction has no side effects.
    Analyzing Use Graph.        Visiting:   %1 = alloc_ref $A                               // users: %3, %2
        Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2
        Visiting:   return %1 : $A                                  // id: %3
        Found instruction we can't zap...
    Found a use that cannot be zapped...
B.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
    Found destructor!
    Analyzing destructor.
        Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
            SAFE! Instruction has no side effects.
        Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %2
            SAFE! Instruction has no side effects.
        Visiting:   dealloc_ref %0 : $B                             // id: %3
            SAFE! dealloc_ref on self.
        Visiting:   %4 = tuple ()                                   // user: %5
            SAFE! Instruction has no side effects.
        Visiting:   return %4 : $()                                 // id: %5
            SAFE! Instruction has no side effects.
    Analyzing Use Graph.        Visiting:   %1 = alloc_ref $B                               // user: %2
        Visiting:   return %1 : $B                                  // id: %2
        Found instruction we can't zap...
    Found a use that cannot be zapped...
B.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
    Found destructor!
    Analyzing destructor.
        Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
            SAFE! Instruction has no side effects.
        Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %2
            SAFE! Instruction has no side effects.
        Visiting:   dealloc_ref %0 : $B                             // id: %3
            SAFE! dealloc_ref on self.
        Visiting:   %4 = tuple ()                                   // user: %5
            SAFE! Instruction has no side effects.
        Visiting:   return %4 : $()                                 // id: %5
            SAFE! Instruction has no side effects.
    Analyzing Use Graph.        Visiting:   %0 = alloc_ref $B                               // user: %1
        Visiting:   %1 = upcast %0 : $B to $A                       // user: %2
        Visiting:   return %1 : $A                                  // id: %2
        Found instruction we can't zap...
    Found a use that cannot be zapped...
    Analyzing Use Graph.        Visiting:   %4 = alloc_stack $UInt16                        // users: %5, %9, %7
        Visiting:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
        Found instruction we can't zap...
    Found a use that cannot be zapped...
** GlobalPropertyOpt **
  scan function main
    scan basic block 0
  scan function $s7partial1ACACycfC
    scan basic block 0
  scan function $s7partial1ACACycfc
    scan basic block 0
  scan function $s7partial1AC1fySbxlF
    scan basic block 0
  scan function $s7partial1ACfd
    scan basic block 0
  scan function $s7partial1ACfD
    scan basic block 0
  scan function $s7partial1BC1fySbxlF
    scan basic block 0
  scan function $s7partial1BCfd
    scan basic block 0
  scan function $s7partial1BCfD
    scan basic block 0
  scan function $s7partial1BCACycfC
    scan basic block 0
  scan function $s7partial1BCACycfc
    scan basic block 0
  scan function $s7partial8makeAorBAA1ACyF
    scan basic block 0
  scan function $s7partial1gSbyF
    scan basic block 0
  propagate properties
     address escapes: unknown-address
      set not-native: unknown-address
    handle non-native entry: unknown-address
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
** StackPromotion in main **
** StackPromotion in $s7partial1ACACycfC **
recompute escape analysis with UpdateID 3
  >> build graph for $s7partial1ACACycfC
  << finished graph for $s7partial1ACACycfC
iteration 0
  create summary graph for $s7partial1ACACycfC
** StackPromotion in $s7partial1ACACycfc **
** StackPromotion in $s7partial1AC1fySbxlF **
** StackPromotion in $s7partial1ACfd **
** StackPromotion in $s7partial1ACfD **
** StackPromotion in $s7partial1BC1fySbxlF **
** StackPromotion in $s7partial1BCfd **
** StackPromotion in $s7partial1BCfD **
** StackPromotion in $s7partial1BCACycfC **
recompute escape analysis with UpdateID 4
  >> build graph for $s7partial1BCACycfC
  << finished graph for $s7partial1BCACycfC
iteration 0
  create summary graph for $s7partial1BCACycfC
** StackPromotion in $s7partial1BCACycfc **
** StackPromotion in $s7partial8makeAorBAA1ACyF **
** StackPromotion in $s7partial1gSbyF **
*** Optimizing the module (MidLevel) *** 
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
Copy Forwarding in Func main
***** LowerAggregate on function: main *****
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   return %3 : $Int32                              // id: %4
***** SROA on function: main *****
** Mem2Reg on function: main **
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
### Run SimplifyCFG on main
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

***** Devirtualizer on function:main *****
***** GenericSpecializer on function:main *****
Copy Forwarding in Func $s7partial1ACACycfC
***** LowerAggregate on function: $s7partial1ACACycfC *****
Visiting:   %1 = alloc_ref $A                               // users: %3, %2
Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2
Visiting:   return %1 : $A                                  // id: %3
***** SROA on function: $s7partial1ACACycfC *****
** Mem2Reg on function: $s7partial1ACACycfC **
	discovered a new reachable node bb0
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1ACACycfC
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1ACACycfC
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %1 = alloc_ref $A                               // users: %3, %2

SC: Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2

SC: Visiting:   return %1 : $A                                  // id: %3

***** Devirtualizer on function:$s7partial1ACACycfC *****
***** GenericSpecializer on function:$s7partial1ACACycfC *****
Copy Forwarding in Func $s7partial1AC1fySbxlF
***** LowerAggregate on function: $s7partial1AC1fySbxlF *****
Visiting:   %2 = metatype $@thick T.Type                    // user: %3
Visiting:   %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
Visiting:   %4 = metatype $@thick A.Type                    // user: %5
Visiting:   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
Visiting:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
Visiting:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
Visiting:   return %7 : $Bool                               // id: %8
***** SROA on function: $s7partial1AC1fySbxlF *****
** Mem2Reg on function: $s7partial1AC1fySbxlF **
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
    User:   return %7 : $Bool                               // id: %8
### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1AC1fySbxlF
SC: ADDING: 7 instrs to worklist
SC: Visiting:   %2 = metatype $@thick T.Type                    // user: %3

SC: Visiting:   %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6

SC: Visiting:   %4 = metatype $@thick A.Type                    // user: %5

SC: Visiting:   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6

SC: Visiting:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7

SC: Visiting:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8

SC: Visiting:   return %7 : $Bool                               // id: %8

***** Devirtualizer on function:$s7partial1AC1fySbxlF *****
***** GenericSpecializer on function:$s7partial1AC1fySbxlF *****
Copy Forwarding in Func $s7partial1ACfD
Copy Forwarding in Func $s7partial1BC1fySbxlF
***** LowerAggregate on function: $s7partial1BC1fySbxlF *****
Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Visiting:   return %3 : $Bool                               // id: %4
***** SROA on function: $s7partial1BC1fySbxlF *****
** Mem2Reg on function: $s7partial1BC1fySbxlF **
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
    User:   return %3 : $Bool                               // id: %4
Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3
    User:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
    User:   return %3 : $Bool                               // id: %4
### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BC1fySbxlF
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SC: Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4

***** Devirtualizer on function:$s7partial1BC1fySbxlF *****
***** GenericSpecializer on function:$s7partial1BC1fySbxlF *****
Copy Forwarding in Func $s7partial1BCfd
Copy Forwarding in Func $s7partial1BCfD
Copy Forwarding in Func $s7partial1BCACycfC
***** LowerAggregate on function: $s7partial1BCACycfC *****
Visiting:   %1 = alloc_ref $B                               // user: %2
Visiting:   return %1 : $B                                  // id: %2
***** SROA on function: $s7partial1BCACycfC *****
** Mem2Reg on function: $s7partial1BCACycfC **
	discovered a new reachable node bb0
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1BCACycfC
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BCACycfC
SC: ADDING: 2 instrs to worklist
SC: Visiting:   %1 = alloc_ref $B                               // user: %2

SC: Visiting:   return %1 : $B                                  // id: %2

***** Devirtualizer on function:$s7partial1BCACycfC *****
***** GenericSpecializer on function:$s7partial1BCACycfC *****
Copy Forwarding in Func $s7partial1BCACycfc
***** Devirtualizer on function:$s7partial1BCACycfc *****
***** GenericSpecializer on function:$s7partial1BCACycfc *****
Copy Forwarding in Func $s7partial1gSbyF
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s7partial8makeAorBAA1ACyF -> abort
ExistentialSpecializer Pass: Bail! Due to canSpecializeCalleeFunction.
  %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
***** Devirtualizer on function:$s7partial1gSbyF *****
    Trying to devirtualize:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
    Trying to devirtualize:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
***** GenericSpecializer on function:$s7partial1gSbyF *****
Serializing SILModule in SerializeSILPass
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
### Run SimplifyCFG on main
	discovered a new reachable node bb0
***** CSE on function: main *****
SILCSE VISITING:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
 ->   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE VISITING:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE Adding to value table:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
 ->   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE VISITING:   return %3 : $Int32                              // id: %4

*** RLE on function: main ***
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main
***** CodeMotion on function: main *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94fb70
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: main ***
***** Processing main *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
VISITING:
      %2 = integer_literal $Builtin.Int32, 0          // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = integer_literal $Builtin.Int32, 0          // user: %3
VISITING:
      %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
VISITING:
      return %3 : $Int32                              // id: %4
**** Computing ARC Matching Sets for main ****

### Run SimplifyCFG on main
	discovered a new reachable node bb0
*** ARCCM on function: main ***
*** FSO on function: main ***
Constructing Projection Tree For : $Int32
Constructing Projection Tree For : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
### Run SimplifyCFG on $s7partial1ACACycfC
	discovered a new reachable node bb0
***** CSE on function: $s7partial1ACACycfC *****
SILCSE VISITING:   %1 = alloc_ref $A                               // users: %3, %2

SILCSE VISITING:   debug_value %1 : $A, let, name "self", argno 1  // id: %2

SILCSE VISITING:   return %1 : $A                                  // id: %3

*** RLE on function: $s7partial1ACACycfC ***
// A.__allocating_init()
sil hidden [exact_self_class] @$s7partial1ACACycfC : $@convention(method) (@thick A.Type) -> @owned A {
bb0(%0 : $@thick A.Type):
  %1 = alloc_ref $A                               // users: %3, %2
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
  return %1 : $A                                  // id: %3
} // end sil function '$s7partial1ACACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $A                                  // id: %3
Marking as live:
  %1 = alloc_ref $A                               // users: %3, %2
Marking as live:
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
Removing dead argument:
%0 = argument of bb0 : $@thick A.Type
Invalidating caller: $s7partial1ACACycfC
  invalidate $s7partial1ACACycfC
***** CodeMotion on function: $s7partial1ACACycfC *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94aa70
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1ACACycfC ***
***** Processing $s7partial1ACACycfC *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      debug_value %1 : $A, let, name "self", argno 1  // id: %2
VISITING:
      %1 = alloc_ref $A                               // users: %3, %2
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %1 = alloc_ref $A                               // users: %3, %2
VISITING:
      debug_value %1 : $A, let, name "self", argno 1  // id: %2
VISITING:
      return %1 : $A                                  // id: %3
**** Computing ARC Matching Sets for $s7partial1ACACycfC ****

### Run SimplifyCFG on $s7partial1ACACycfC
	discovered a new reachable node bb0
*** ARCCM on function: $s7partial1ACACycfC ***
*** FSO on function: $s7partial1ACACycfC ***
Constructing Projection Tree For : $@thick A.Type
*** RLE on function: $s7partial1ACACycfc ***
*** FSO on function: $s7partial1ACACycfc ***
Constructing Projection Tree For : $A
### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0
***** CSE on function: $s7partial1AC1fySbxlF *****
SILCSE VISITING:   %2 = metatype $@thick T.Type                    // user: %3

SILCSE Adding to value table:   %2 = metatype $@thick T.Type                    // user: %3
 ->   %2 = metatype $@thick T.Type                    // user: %3

SILCSE VISITING:   %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6

SILCSE VISITING:   %4 = metatype $@thick A.Type                    // user: %5

SILCSE Adding to value table:   %4 = metatype $@thick A.Type                    // user: %5
 ->   %4 = metatype $@thick A.Type                    // user: %5

SILCSE VISITING:   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6

SILCSE VISITING:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7

SILCSE Adding to value table:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
 ->   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7

SILCSE VISITING:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8

SILCSE Adding to value table:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
 ->   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8

SILCSE VISITING:   return %7 : $Bool                               // id: %8

*** RLE on function: $s7partial1AC1fySbxlF ***
// A.f<A>(_:)
sil hidden @$s7partial1AC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed A) -> Bool {
bb0(%0 : $*T, %1 : $A):
  %2 = metatype $@thick T.Type                    // user: %3
  %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
  %4 = metatype $@thick A.Type                    // user: %5
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$s7partial1AC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %7 : $Bool                               // id: %8
Marking as live:
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
Marking as live:
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
Marking as live:
  %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
Marking as live:
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
Marking as live:
  %4 = metatype $@thick A.Type                    // user: %5
Marking as live:
  %2 = metatype $@thick T.Type                    // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $A
Invalidating caller: $s7partial1AC1fySbxlF
***** CodeMotion on function: $s7partial1AC1fySbxlF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a756bb0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1AC1fySbxlF ***
***** Processing $s7partial1AC1fySbxlF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
VISITING:
      %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
VISITING:
      %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
VISITING:
      %4 = metatype $@thick A.Type                    // user: %5
VISITING:
      %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
VISITING:
      %2 = metatype $@thick T.Type                    // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = metatype $@thick T.Type                    // user: %3
VISITING:
      %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
VISITING:
      %4 = metatype $@thick A.Type                    // user: %5
VISITING:
      %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
VISITING:
      %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
VISITING:
      %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
VISITING:
      return %7 : $Bool                               // id: %8
**** Computing ARC Matching Sets for $s7partial1AC1fySbxlF ****

### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0
*** ARCCM on function: $s7partial1AC1fySbxlF ***
*** FSO on function: $s7partial1AC1fySbxlF ***
Constructing Projection Tree For : $*T
Constructing Projection Tree For : $A
*** RLE on function: $s7partial1ACfd ***
*** FSO on function: $s7partial1ACfd ***
Constructing Projection Tree For : $A
*** RLE on function: $s7partial1ACfD ***
*** FSO on function: $s7partial1ACfD ***
Constructing Projection Tree For : $A
### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0
***** CSE on function: $s7partial1BC1fySbxlF *****
SILCSE VISITING:   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int1, 0           // user: %3
 ->   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SILCSE VISITING:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SILCSE Adding to value table:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
 ->   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SILCSE VISITING:   return %3 : $Bool                               // id: %4

*** RLE on function: $s7partial1BC1fySbxlF ***
// B.f<A>(_:)
sil hidden @$s7partial1BC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed B) -> Bool {
bb0(%0 : $*T, %1 : $B):
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1BC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Bool                               // id: %4
Marking as live:
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $B
Invalidating caller: $s7partial1BC1fySbxlF
***** CodeMotion on function: $s7partial1BC1fySbxlF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a756d10
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BC1fySbxlF ***
***** Processing $s7partial1BC1fySbxlF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
VISITING:
      %2 = integer_literal $Builtin.Int1, 0           // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = integer_literal $Builtin.Int1, 0           // user: %3
VISITING:
      %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
VISITING:
      return %3 : $Bool                               // id: %4
**** Computing ARC Matching Sets for $s7partial1BC1fySbxlF ****

### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0
*** ARCCM on function: $s7partial1BC1fySbxlF ***
*** FSO on function: $s7partial1BC1fySbxlF ***
Constructing Projection Tree For : $*T
Constructing Projection Tree For : $B
*** RLE on function: $s7partial1BCfd ***
*** FSO on function: $s7partial1BCfd ***
Constructing Projection Tree For : $B
*** RLE on function: $s7partial1BCfD ***
*** FSO on function: $s7partial1BCfD ***
Constructing Projection Tree For : $B
### Run SimplifyCFG on $s7partial1BCACycfC
	discovered a new reachable node bb0
***** CSE on function: $s7partial1BCACycfC *****
SILCSE VISITING:   %1 = alloc_ref $B                               // user: %2

SILCSE VISITING:   return %1 : $B                                  // id: %2

*** RLE on function: $s7partial1BCACycfC ***
// B.__allocating_init()
sil hidden [exact_self_class] @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B {
bb0(%0 : $@thick B.Type):
  %1 = alloc_ref $B                               // user: %2
  return %1 : $B                                  // id: %2
} // end sil function '$s7partial1BCACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $B                                  // id: %2
Marking as live:
  %1 = alloc_ref $B                               // user: %2
Removing dead argument:
%0 = argument of bb0 : $@thick B.Type
Invalidating caller: $s7partial1BCACycfC
  invalidate $s7partial1BCACycfC
  invalidate $s7partial1BCACycfC
***** CodeMotion on function: $s7partial1BCACycfC *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94f790
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BCACycfC ***
***** Processing $s7partial1BCACycfC *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %1 = alloc_ref $B                               // user: %2
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %1 = alloc_ref $B                               // user: %2
VISITING:
      return %1 : $B                                  // id: %2
**** Computing ARC Matching Sets for $s7partial1BCACycfC ****

### Run SimplifyCFG on $s7partial1BCACycfC
	discovered a new reachable node bb0
*** ARCCM on function: $s7partial1BCACycfC ***
*** FSO on function: $s7partial1BCACycfC ***
Constructing Projection Tree For : $@thick B.Type
### Run SimplifyCFG on $s7partial1BCACycfc
	discovered a new reachable node bb0
***** CSE on function: $s7partial1BCACycfc *****
SILCSE VISITING:   return %0 : $B                                  // id: %1

*** RLE on function: $s7partial1BCACycfc ***
*** FSO on function: $s7partial1BCACycfc ***
Constructing Projection Tree For : $B
*** RLE on function: $s7partial8makeAorBAA1ACyF ***
*** FSO on function: $s7partial8makeAorBAA1ACyF ***
### Run SimplifyCFG on $s7partial1gSbyF
	discovered a new reachable node bb0
***** CSE on function: $s7partial1gSbyF *****
SILCSE VISITING:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

SILCSE Adding to value table:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
 ->   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

SILCSE VISITING:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6

SILCSE VISITING:   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
 ->   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SILCSE VISITING:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SILCSE Adding to value table:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
 ->   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SILCSE VISITING:   %4 = alloc_stack $UInt16                        // users: %5, %9, %7

SILCSE VISITING:   store %3 to %4 : $*UInt16                       // id: %5

SILCSE VISITING:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7

SILCSE Adding to value table:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
 ->   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7

SILCSE VISITING:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10

SILCSE VISITING:   strong_release %1 : $A                          // id: %8

SILCSE VISITING:   dealloc_stack %4 : $*UInt16                     // id: %9

SILCSE VISITING:   return %7 : $Bool                               // id: %10

*** RLE on function: $s7partial1gSbyF ***
***** CodeMotion on function: $s7partial1gSbyF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94f790
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1gSbyF ***
Release Root #1   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
Release   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
  at interference   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
Invalidating caller: $s7partial1gSbyF
    callee: $s7partial8makeAorBAA1ACyF
  invalidate $s7partial1gSbyF
***** Processing $s7partial1gSbyF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      dealloc_stack %4 : $*UInt16                     // id: %9
VISITING:
      strong_release %1 : $A                          // id: %8
    REF COUNT DECREMENT! Known Safe: no
VISITING:
      %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
ALIAS ANALYSIS:
    V1:   %4 = alloc_stack $UInt16                        // users: %5, %9, %7
    V2:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
        After Cast Stripping V1:  %4 = alloc_stack $UInt16                        // users: %5, %9, %7
        After Cast Stripping V2:  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
        Underlying V1:  %4 = alloc_stack $UInt16                        // users: %5, %9, %7
        Underlying V2:  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
recompute escape analysis with UpdateID 5
  >> build graph for $s7partial1gSbyF
  << finished graph for $s7partial1gSbyF
iteration 0
  merge  $s7partial8makeAorBAA1ACyF into $s7partial1gSbyF
  create summary graph for $s7partial1gSbyF
    Found Potential Guaranteed Use:
          %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING:
      %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
VISITING:
      store %3 to %4 : $*UInt16                       // id: %5
VISITING:
      %4 = alloc_stack $UInt16                        // users: %5, %9, %7
VISITING:
      %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
VISITING:
      %2 = integer_literal $Builtin.Int16, 9          // user: %3
VISITING:
      %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING:
      // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
VISITING:
      %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING ENTRANCE APPLY:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
    Initializing state.
VISITING:
      %2 = integer_literal $Builtin.Int16, 9          // user: %3
VISITING:
      %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
VISITING:
      %4 = alloc_stack $UInt16                        // users: %5, %9, %7
VISITING:
      store %3 to %4 : $*UInt16                       // id: %5
VISITING:
      %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
VISITING:
      %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
    Found Potential Guaranteed Use:
          %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING:
      strong_release %1 : $A                          // id: %8
    REF COUNT DECREMENT!
VISITING:
      dealloc_stack %4 : $*UInt16                     // id: %9
VISITING:
      return %7 : $Bool                               // id: %10
**** Computing ARC Matching Sets for $s7partial1gSbyF ****

### Run SimplifyCFG on $s7partial1gSbyF
	discovered a new reachable node bb0
***** CodeMotion on function: $s7partial1gSbyF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a756e60
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1gSbyF ***
*** ARCCM on function: $s7partial1gSbyF ***
Release Root #1   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
Release   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
  at interference   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
Invalidating caller: $s7partial1gSbyF
  invalidate $s7partial1gSbyF
***** Processing $s7partial1gSbyF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      dealloc_stack %4 : $*UInt16                     // id: %9
VISITING:
      strong_release %1 : $A                          // id: %8
    REF COUNT DECREMENT! Known Safe: no
VISITING:
      %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
ALIAS ANALYSIS:
    V1:   %4 = alloc_stack $UInt16                        // users: %5, %9, %7
    V2:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
        After Cast Stripping V1:  %4 = alloc_stack $UInt16                        // users: %5, %9, %7
        After Cast Stripping V2:  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
        Underlying V1:  %4 = alloc_stack $UInt16                        // users: %5, %9, %7
        Underlying V2:  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
recompute escape analysis with UpdateID 6
  >> build graph for $s7partial1gSbyF
  << finished graph for $s7partial1gSbyF
iteration 0
  merge  $s7partial8makeAorBAA1ACyF into $s7partial1gSbyF
  create summary graph for $s7partial1gSbyF
    Found Potential Guaranteed Use:
          %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING:
      %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
VISITING:
      store %3 to %4 : $*UInt16                       // id: %5
VISITING:
      %4 = alloc_stack $UInt16                        // users: %5, %9, %7
VISITING:
      %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
VISITING:
      %2 = integer_literal $Builtin.Int16, 9          // user: %3
VISITING:
      %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING:
      // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
VISITING:
      %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING ENTRANCE APPLY:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
    Initializing state.
VISITING:
      %2 = integer_literal $Builtin.Int16, 9          // user: %3
VISITING:
      %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
VISITING:
      %4 = alloc_stack $UInt16                        // users: %5, %9, %7
VISITING:
      store %3 to %4 : $*UInt16                       // id: %5
VISITING:
      %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7
VISITING:
      %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
    Found Potential Guaranteed Use:
          %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6
VISITING:
      strong_release %1 : $A                          // id: %8
    REF COUNT DECREMENT!
VISITING:
      dealloc_stack %4 : $*UInt16                     // id: %9
VISITING:
      return %7 : $Bool                               // id: %10
**** Computing ARC Matching Sets for $s7partial1gSbyF ****

*** FSO on function: $s7partial1gSbyF ***
*** Optimizing the module (ClosureSpecialize) *** 
Running DeadFuncElimination
running dead function elimination
running function elimination
  anchor function: main
  anchor function: $s7partial1ACACycfC
  anchor function: $s7partial1ACACycfc
  anchor function: $s7partial1AC1fySbxlF
  anchor function: $s7partial1ACfd
  anchor function: $s7partial1ACfD
  anchor function: $s7partial1BC1fySbxlF
  anchor function: $s7partial1BCfd
  anchor function: $s7partial1BCfD
  anchor function: $s7partial1BCACycfC
  anchor function: $s7partial1BCACycfc
  anchor function: $s7partial8makeAorBAA1ACyF
  anchor function: $s7partial1gSbyF
    scan function $s7partial1gSbyF
    scan function $s7partial8makeAorBAA1ACyF
    scan function $s7partial1BCACycfc
    scan function $s7partial1BCfd
    scan function $s7partial1ACfd
    scan function $s7partial1ACACycfc
    scan function main
    scan function $s7partial1BCfD
    scan function $s7partial1ACfD
    scan function $s7partial1BC1fySbxlF
    scan function $s7partial1AC1fySbxlF
    scan function $s7partial1BCACycfC
    scan function $s7partial1ACACycfC
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
*** DSE on function: main ***


SILCOMBINE ITERATION #0 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

*** ConstPropagation processing: 
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
*** DSE on function: $s7partial1ACACycfC ***
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
    Found destructor!
    Analyzing destructor.
        Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
            SAFE! Instruction has no side effects.
        Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %2
            SAFE! Instruction has no side effects.
        Visiting:   dealloc_ref %0 : $A                             // id: %3
            SAFE! dealloc_ref on self.
        Visiting:   %4 = tuple ()                                   // user: %5
            SAFE! Instruction has no side effects.
        Visiting:   return %4 : $()                                 // id: %5
            SAFE! Instruction has no side effects.
    Analyzing Use Graph.        Visiting:   %1 = alloc_ref $A                               // users: %3, %2
        Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2
        Visiting:   return %1 : $A                                  // id: %3
        Found instruction we can't zap...
    Found a use that cannot be zapped...


SILCOMBINE ITERATION #0 on $s7partial1ACACycfC
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %1 = alloc_ref $A                               // users: %3, %2

SC: Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2

SC: Visiting:   return %1 : $A                                  // id: %3

*** ConstPropagation processing: 
*** DSE on function: $s7partial1ACACycfc ***
*** DSE on function: $s7partial1AC1fySbxlF ***


SILCOMBINE ITERATION #0 on $s7partial1AC1fySbxlF
SC: ADDING: 7 instrs to worklist
SC: Visiting:   %2 = metatype $@thick T.Type                    // user: %3

SC: Visiting:   %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6

SC: Visiting:   %4 = metatype $@thick A.Type                    // user: %5

SC: Visiting:   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6

SC: Visiting:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7

SC: Visiting:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8

SC: Visiting:   return %7 : $Bool                               // id: %8

*** ConstPropagation processing: 
Visiting:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
    User:   return %7 : $Bool                               // id: %8
*** DSE on function: $s7partial1ACfd ***
*** DSE on function: $s7partial1ACfD ***
*** DSE on function: $s7partial1BC1fySbxlF ***


SILCOMBINE ITERATION #0 on $s7partial1BC1fySbxlF
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SC: Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4

*** ConstPropagation processing: 
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
    User:   return %3 : $Bool                               // id: %4
Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3
    User:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
    User:   return %3 : $Bool                               // id: %4
*** DSE on function: $s7partial1BCfd ***
*** DSE on function: $s7partial1BCfD ***
*** DSE on function: $s7partial1BCACycfC ***
B.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
    Found destructor!
    Analyzing destructor.
        Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
            SAFE! Instruction has no side effects.
        Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %2
            SAFE! Instruction has no side effects.
        Visiting:   dealloc_ref %0 : $B                             // id: %3
            SAFE! dealloc_ref on self.
        Visiting:   %4 = tuple ()                                   // user: %5
            SAFE! Instruction has no side effects.
        Visiting:   return %4 : $()                                 // id: %5
            SAFE! Instruction has no side effects.
    Analyzing Use Graph.        Visiting:   %1 = alloc_ref $B                               // user: %2
        Visiting:   return %1 : $B                                  // id: %2
        Found instruction we can't zap...
    Found a use that cannot be zapped...


SILCOMBINE ITERATION #0 on $s7partial1BCACycfC
SC: ADDING: 2 instrs to worklist
SC: Visiting:   %1 = alloc_ref $B                               // user: %2

SC: Visiting:   return %1 : $B                                  // id: %2

*** ConstPropagation processing: 
*** DSE on function: $s7partial1BCACycfc ***
*** DSE on function: $s7partial8makeAorBAA1ACyF ***
*** DSE on function: $s7partial1gSbyF ***
GET MEMORY BEHAVIOR FOR:
      strong_release %1 : $A                          // id: %8
      %4 = alloc_stack $UInt16                        // users: %5, %9, %7
    Analyzing Use Graph.        Visiting:   %4 = alloc_stack $UInt16                        // users: %5, %9, %7
        Visiting:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
        Found instruction we can't zap...
    Found a use that cannot be zapped...
### Run SimplifyCFG on $s7partial1gSbyF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1gSbyF
SC: ADDING: 11 instrs to worklist
SC: Visiting:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

SC: Visiting:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %8, %7, %6

SC: Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SC: Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SC: Visiting:   %4 = alloc_stack $UInt16                        // users: %5, %9, %7

SC: Visiting:   store %3 to %4 : $*UInt16                       // id: %5

SC: Visiting:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %7

SC: Visiting:   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10

SC: Visiting:   strong_release %1 : $A                          // id: %8

SC: Visiting:   dealloc_stack %4 : $*UInt16                     // id: %9

SC: Visiting:   return %7 : $Bool                               // id: %10

*** ConstPropagation processing: 
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    User:   store %3 to %4 : $*UInt16                       // id: %5
Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
    User:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    User:   store %3 to %4 : $*UInt16                       // id: %5
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
Optimizing callsites that take closure argument in main
** StackPromotion in main **
** StackPromotion **
Optimizing callsites that take closure argument in $s7partial1ACACycfC
** StackPromotion in $s7partial1ACACycfC **
recompute escape analysis with UpdateID 7
  >> build graph for $s7partial1ACACycfC
  << finished graph for $s7partial1ACACycfC
iteration 0
  create summary graph for $s7partial1ACACycfC
** StackPromotion **
Optimizing callsites that take closure argument in $s7partial1ACACycfc
Optimizing callsites that take closure argument in $s7partial1AC1fySbxlF
** StackPromotion in $s7partial1AC1fySbxlF **
** StackPromotion **
Optimizing callsites that take closure argument in $s7partial1ACfd
Optimizing callsites that take closure argument in $s7partial1ACfD
Optimizing callsites that take closure argument in $s7partial1BC1fySbxlF
** StackPromotion in $s7partial1BC1fySbxlF **
** StackPromotion **
Optimizing callsites that take closure argument in $s7partial1BCfd
Optimizing callsites that take closure argument in $s7partial1BCfD
Optimizing callsites that take closure argument in $s7partial1BCACycfC
** StackPromotion in $s7partial1BCACycfC **
recompute escape analysis with UpdateID 8
  >> build graph for $s7partial1BCACycfC
  << finished graph for $s7partial1BCACycfC
iteration 0
  create summary graph for $s7partial1BCACycfC
** StackPromotion **
Optimizing callsites that take closure argument in $s7partial1BCACycfc
Optimizing callsites that take closure argument in $s7partial8makeAorBAA1ACyF
Optimizing callsites that take closure argument in $s7partial1gSbyF
** StackPromotion in $s7partial1gSbyF **
Class A is a superclass. Inserting polymorphic speculative call.
    Trying to devirtualize :   %7 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %10
    Trying to devirtualize :   %12 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %14
        SUCCESS: $s7partial1AC1fySbxlF
Inserting a speculative call for class A and subclass B
    Trying to devirtualize :   %16 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %18
    Trying to devirtualize :   %20 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %22
        SUCCESS: $s7partial1BC1fySbxlF
Process imports in function: $s7partial1gSbyF
Invalidating caller: $s7partial1gSbyF
    callee: $s7partial8makeAorBAA1ACyF
  invalidate $s7partial1gSbyF
### Run SimplifyCFG on $s7partial1gSbyF
jump to trampoline from bb6 to bb1
merge bb5 with bb4
*** ConstPropagation processing: 
Visiting:   %22 = apply %20<UInt16>(%4, %21) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // users: %18, %24
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5
Invalidating caller: $s7partial1gSbyF
  invalidate $s7partial1gSbyF
** StackPromotion **


SILCOMBINE ITERATION #0 on $s7partial1gSbyF
SC: ADDING: 23 instrs to worklist
SC: Visiting:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

SC: Visiting:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %19, %24, %23, %16, %13, %7, %6

SC: Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SC: Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SC: Visiting:   %4 = alloc_stack $UInt16                        // users: %20, %23, %13, %5, %9

SC: Visiting:   store %3 to %4 : $*UInt16                       // id: %5

SC: Visiting:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %23

SC: Visiting:   checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %7

SC: Visiting:   checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %16

SC: Visiting:   %23 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %25

SC: Visiting:   strong_release %1 : $A                          // id: %24

SC: Visiting:   br bb1(%23 : $Bool)                             // id: %25

SC: Visiting:   dealloc_stack %4 : $*UInt16                     // id: %9

SC: Visiting:   return %8 : $Bool                               // id: %10

SC: Visiting:   // function_ref B.f<A>(_:)
  %18 = function_ref @$s7partial1BC1fySbxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // user: %20

SC: Visiting:   %19 = unchecked_ref_cast %1 : $A to $B          // user: %20

SC: Visiting:   %20 = apply %18<UInt16>(%4, %19) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // user: %22

SC: Visiting:   strong_release %17 : $B                         // id: %21

SC: Visiting:   br bb1(%20 : $Bool)                             // id: %22

SC: Visiting:   // function_ref A.f<A>(_:)
  %12 = function_ref @$s7partial1AC1fySbxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %13

SC: Visiting:   %13 = apply %12<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %15

SC: Visiting:   strong_release %11 : $A                         // id: %14

SC: Visiting:   br bb1(%13 : $Bool)                             // id: %15

### Run SimplifyCFG on $s7partial1gSbyF
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5
*** Optimizing the module (LowLevel) *** 
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
B.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
** ReleaseDevirtualizer **
Copy Forwarding in Func main
***** LowerAggregate on function: main *****
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   return %3 : $Int32                              // id: %4
***** SROA on function: main *****
** Mem2Reg on function: main **
	discovered a new reachable node bb0
***** Devirtualizer on function:main *****
***** GenericSpecializer on function:main *****
### Run SimplifyCFG on main
	discovered a new reachable node bb0
***** CSE on function: main *****
SILCSE VISITING:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
 ->   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE VISITING:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE Adding to value table:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
 ->   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE VISITING:   return %3 : $Int32                              // id: %4

*** RLE on function: main ***
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main
***** CodeMotion on function: main *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94de00
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: main ***
***** Processing main *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
VISITING:
      %2 = integer_literal $Builtin.Int32, 0          // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = integer_literal $Builtin.Int32, 0          // user: %3
VISITING:
      %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
VISITING:
      return %3 : $Int32                              // id: %4
**** Computing ARC Matching Sets for main ****

### Run SimplifyCFG on main
	discovered a new reachable node bb0
Running on function main
***** CodeMotion on function: main *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a757560
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: main ***
*** DSE on function: main ***
*** FSO on function: main ***
Constructing Projection Tree For : $Int32
Constructing Projection Tree For : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1ACACycfC
***** LowerAggregate on function: $s7partial1ACACycfC *****
Visiting:   %1 = alloc_ref $A                               // users: %3, %2
Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2
Visiting:   return %1 : $A                                  // id: %3
***** SROA on function: $s7partial1ACACycfC *****
** Mem2Reg on function: $s7partial1ACACycfC **
	discovered a new reachable node bb0
***** Devirtualizer on function:$s7partial1ACACycfC *****
***** GenericSpecializer on function:$s7partial1ACACycfC *****
### Run SimplifyCFG on $s7partial1ACACycfC
	discovered a new reachable node bb0
***** CSE on function: $s7partial1ACACycfC *****
SILCSE VISITING:   %1 = alloc_ref $A                               // users: %3, %2

SILCSE VISITING:   debug_value %1 : $A, let, name "self", argno 1  // id: %2

SILCSE VISITING:   return %1 : $A                                  // id: %3

*** RLE on function: $s7partial1ACACycfC ***
// A.__allocating_init()
sil hidden [exact_self_class] @$s7partial1ACACycfC : $@convention(method) (@thick A.Type) -> @owned A {
bb0(%0 : $@thick A.Type):
  %1 = alloc_ref $A                               // users: %3, %2
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
  return %1 : $A                                  // id: %3
} // end sil function '$s7partial1ACACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $A                                  // id: %3
Marking as live:
  %1 = alloc_ref $A                               // users: %3, %2
Marking as live:
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
Removing dead argument:
%0 = argument of bb0 : $@thick A.Type
Invalidating caller: $s7partial1ACACycfC
  invalidate $s7partial1ACACycfC
***** CodeMotion on function: $s7partial1ACACycfC *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a757560
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1ACACycfC ***
***** Processing $s7partial1ACACycfC *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      debug_value %1 : $A, let, name "self", argno 1  // id: %2
VISITING:
      %1 = alloc_ref $A                               // users: %3, %2
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %1 = alloc_ref $A                               // users: %3, %2
VISITING:
      debug_value %1 : $A, let, name "self", argno 1  // id: %2
VISITING:
      return %1 : $A                                  // id: %3
**** Computing ARC Matching Sets for $s7partial1ACACycfC ****

### Run SimplifyCFG on $s7partial1ACACycfC
	discovered a new reachable node bb0
Running on function $s7partial1ACACycfC
***** CodeMotion on function: $s7partial1ACACycfC *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94de00
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1ACACycfC ***
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
    Found destructor!
    Analyzing destructor.
        Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %1
            SAFE! Instruction has no side effects.
        Visiting:   debug_value %0 : $A, let, name "self", argno 1  // id: %2
            SAFE! Instruction has no side effects.
        Visiting:   dealloc_ref %0 : $A                             // id: %3
            SAFE! dealloc_ref on self.
        Visiting:   %4 = tuple ()                                   // user: %5
            SAFE! Instruction has no side effects.
        Visiting:   return %4 : $()                                 // id: %5
            SAFE! Instruction has no side effects.
    Analyzing Use Graph.        Visiting:   %1 = alloc_ref $A                               // users: %3, %2
        Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2
        Visiting:   return %1 : $A                                  // id: %3
        Found instruction we can't zap...
    Found a use that cannot be zapped...
*** DSE on function: $s7partial1ACACycfC ***
*** FSO on function: $s7partial1ACACycfC ***
Constructing Projection Tree For : $@thick A.Type
  function has no caller -> abort
** ReleaseDevirtualizer **
Running on function $s7partial1ACACycfc
***** CodeMotion on function: $s7partial1ACACycfc *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94de00
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** FSO on function: $s7partial1ACACycfc ***
Constructing Projection Tree For : $A
  function has no caller -> abort
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1AC1fySbxlF
***** LowerAggregate on function: $s7partial1AC1fySbxlF *****
Visiting:   %2 = metatype $@thick T.Type                    // user: %3
Visiting:   %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
Visiting:   %4 = metatype $@thick A.Type                    // user: %5
Visiting:   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
Visiting:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
Visiting:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
Visiting:   return %7 : $Bool                               // id: %8
***** SROA on function: $s7partial1AC1fySbxlF *****
** Mem2Reg on function: $s7partial1AC1fySbxlF **
	discovered a new reachable node bb0
***** Devirtualizer on function:$s7partial1AC1fySbxlF *****
***** GenericSpecializer on function:$s7partial1AC1fySbxlF *****
### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0
***** CSE on function: $s7partial1AC1fySbxlF *****
SILCSE VISITING:   %2 = metatype $@thick T.Type                    // user: %3

SILCSE Adding to value table:   %2 = metatype $@thick T.Type                    // user: %3
 ->   %2 = metatype $@thick T.Type                    // user: %3

SILCSE VISITING:   %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6

SILCSE VISITING:   %4 = metatype $@thick A.Type                    // user: %5

SILCSE Adding to value table:   %4 = metatype $@thick A.Type                    // user: %5
 ->   %4 = metatype $@thick A.Type                    // user: %5

SILCSE VISITING:   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6

SILCSE VISITING:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7

SILCSE Adding to value table:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
 ->   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7

SILCSE VISITING:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8

SILCSE Adding to value table:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
 ->   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8

SILCSE VISITING:   return %7 : $Bool                               // id: %8

*** RLE on function: $s7partial1AC1fySbxlF ***
// A.f<A>(_:)
sil hidden @$s7partial1AC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed A) -> Bool {
bb0(%0 : $*T, %1 : $A):
  %2 = metatype $@thick T.Type                    // user: %3
  %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
  %4 = metatype $@thick A.Type                    // user: %5
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$s7partial1AC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %7 : $Bool                               // id: %8
Marking as live:
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
Marking as live:
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
Marking as live:
  %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
Marking as live:
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
Marking as live:
  %4 = metatype $@thick A.Type                    // user: %5
Marking as live:
  %2 = metatype $@thick T.Type                    // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $A
Invalidating caller: $s7partial1AC1fySbxlF
***** CodeMotion on function: $s7partial1AC1fySbxlF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94de00
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1AC1fySbxlF ***
***** Processing $s7partial1AC1fySbxlF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
VISITING:
      %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
VISITING:
      %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
VISITING:
      %4 = metatype $@thick A.Type                    // user: %5
VISITING:
      %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
VISITING:
      %2 = metatype $@thick T.Type                    // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = metatype $@thick T.Type                    // user: %3
VISITING:
      %3 = init_existential_metatype %2 : $@thick T.Type, $@thick Any.Type // user: %6
VISITING:
      %4 = metatype $@thick A.Type                    // user: %5
VISITING:
      %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
VISITING:
      %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
VISITING:
      %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
VISITING:
      return %7 : $Bool                               // id: %8
**** Computing ARC Matching Sets for $s7partial1AC1fySbxlF ****

### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0
Running on function $s7partial1AC1fySbxlF
***** CodeMotion on function: $s7partial1AC1fySbxlF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a757560
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1AC1fySbxlF ***
*** DSE on function: $s7partial1AC1fySbxlF ***
*** FSO on function: $s7partial1AC1fySbxlF ***
Constructing Projection Tree For : $*T
Constructing Projection Tree For : $A
  remove dead arguments
  -> create specialized function $s7partial1AC1fySbxlFTf4dd_n
CallerAnalysis: Creating caller info for: $s7partial1AC1fySbxlFTf4dd_n
PMVerifierAnalysis. Add|Mod: $s7partial1AC1fySbxlFTf4dd_n
Invalidating caller: $s7partial1AC1fySbxlF
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1AC1fySbxlFTf4dd_n
***** LowerAggregate on function: $s7partial1AC1fySbxlFTf4dd_n *****
Visiting:   %0 = metatype $@thick T.Type                    // user: %1
Visiting:   %1 = init_existential_metatype %0 : $@thick T.Type, $@thick Any.Type // user: %4
Visiting:   %2 = metatype $@thick A.Type                    // user: %3
Visiting:   %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4
Visiting:   %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5
Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
Visiting:   return %5 : $Bool                               // id: %6
***** SROA on function: $s7partial1AC1fySbxlFTf4dd_n *****
** Mem2Reg on function: $s7partial1AC1fySbxlFTf4dd_n **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
    User:   return %5 : $Bool                               // id: %6
### Run SimplifyCFG on $s7partial1AC1fySbxlFTf4dd_n
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1AC1fySbxlFTf4dd_n
SC: ADDING: 7 instrs to worklist
SC: Visiting:   %0 = metatype $@thick T.Type                    // user: %1

SC: Visiting:   %1 = init_existential_metatype %0 : $@thick T.Type, $@thick Any.Type // user: %4

SC: Visiting:   %2 = metatype $@thick A.Type                    // user: %3

SC: Visiting:   %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4

SC: Visiting:   %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5

SC: Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6

SC: Visiting:   return %5 : $Bool                               // id: %6

***** Devirtualizer on function:$s7partial1AC1fySbxlFTf4dd_n *****
***** GenericSpecializer on function:$s7partial1AC1fySbxlFTf4dd_n *****
### Run SimplifyCFG on $s7partial1AC1fySbxlFTf4dd_n
	discovered a new reachable node bb0
***** CSE on function: $s7partial1AC1fySbxlFTf4dd_n *****
SILCSE VISITING:   %0 = metatype $@thick T.Type                    // user: %1

SILCSE Adding to value table:   %0 = metatype $@thick T.Type                    // user: %1
 ->   %0 = metatype $@thick T.Type                    // user: %1

SILCSE VISITING:   %1 = init_existential_metatype %0 : $@thick T.Type, $@thick Any.Type // user: %4

SILCSE VISITING:   %2 = metatype $@thick A.Type                    // user: %3

SILCSE Adding to value table:   %2 = metatype $@thick A.Type                    // user: %3
 ->   %2 = metatype $@thick A.Type                    // user: %3

SILCSE VISITING:   %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4

SILCSE VISITING:   %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5

SILCSE Adding to value table:   %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5
 ->   %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5

SILCSE VISITING:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6

SILCSE Adding to value table:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
 ->   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6

SILCSE VISITING:   return %5 : $Bool                               // id: %6

*** RLE on function: $s7partial1AC1fySbxlFTf4dd_n ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// specialized A.f<A>(_:)
sil shared @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <T> () -> Bool {
bb0:
  %0 = metatype $@thick T.Type                    // user: %1
  %1 = init_existential_metatype %0 : $@thick T.Type, $@thick Any.Type // user: %4
  %2 = metatype $@thick A.Type                    // user: %3
  %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4
  %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5
  %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
  return %5 : $Bool                               // id: %6
} // end sil function '$s7partial1AC1fySbxlFTf4dd_n'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %5 : $Bool                               // id: %6
Marking as live:
  %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
Marking as live:
  %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5
Marking as live:
  %1 = init_existential_metatype %0 : $@thick T.Type, $@thick Any.Type // user: %4
Marking as live:
  %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4
Marking as live:
  %2 = metatype $@thick A.Type                    // user: %3
Marking as live:
  %0 = metatype $@thick T.Type                    // user: %1
***** CodeMotion on function: $s7partial1AC1fySbxlFTf4dd_n *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a757560
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1AC1fySbxlFTf4dd_n ***
***** Processing $s7partial1AC1fySbxlFTf4dd_n *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
VISITING:
      %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5
VISITING:
      %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4
VISITING:
      %2 = metatype $@thick A.Type                    // user: %3
VISITING:
      %1 = init_existential_metatype %0 : $@thick T.Type, $@thick Any.Type // user: %4
VISITING:
      %0 = metatype $@thick T.Type                    // user: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %0 = metatype $@thick T.Type                    // user: %1
VISITING:
      %1 = init_existential_metatype %0 : $@thick T.Type, $@thick Any.Type // user: %4
VISITING:
      %2 = metatype $@thick A.Type                    // user: %3
VISITING:
      %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4
VISITING:
      %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5
VISITING:
      %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
VISITING:
      return %5 : $Bool                               // id: %6
**** Computing ARC Matching Sets for $s7partial1AC1fySbxlFTf4dd_n ****

Running on function $s7partial1AC1fySbxlFTf4dd_n
***** CodeMotion on function: $s7partial1AC1fySbxlFTf4dd_n *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94e080
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1AC1fySbxlFTf4dd_n ***
*** DSE on function: $s7partial1AC1fySbxlFTf4dd_n ***
*** FSO on function: $s7partial1AC1fySbxlFTf4dd_n ***
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1AC1fySbxlF
***** LowerAggregate on function: $s7partial1AC1fySbxlF *****
Visiting:   // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3
Visiting:   %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
Visiting:   return %3 : $Bool                               // id: %4
***** SROA on function: $s7partial1AC1fySbxlF *****
** Mem2Reg on function: $s7partial1AC1fySbxlF **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s7partial1AC1fySbxlFTf4dd_n -> abort
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1AC1fySbxlF
SC: ADDING: 3 instrs to worklist
SC: Visiting:   // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3

SC: Visiting:   %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4

***** Devirtualizer on function:$s7partial1AC1fySbxlF *****
    Trying to devirtualize:   %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
***** GenericSpecializer on function:$s7partial1AC1fySbxlF *****

----------------------------------------------------------------------------
// A.f<A>(_:)
sil hidden [signature_optimized_thunk] [always_inline] @$s7partial1AC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed A) -> Bool {
bb0(%0 : $*T, %1 : $A):
  // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3
  %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1AC1fySbxlF'


specialize: function signature specialization <Arg[0] = Dead, Arg[1] = Dead> of partial.A.f<A>(A) -> Swift.Bool


*** ApplyInst in function $s7partial1AC1fySbxlF:
     // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3
->   %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
     return %3 : $Bool                            // id: %4
    Partial specialization is not supported.
### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0
***** CSE on function: $s7partial1AC1fySbxlF *****
SILCSE VISITING:   // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3

SILCSE Adding to value table:   // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3
 ->   // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3

SILCSE VISITING:   %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4

recompute function-effect analysis with UpdateID 7
  >> analyze $s7partial1AC1fySbxlFTf4dd_n
  << finished $s7partial1AC1fySbxlFTf4dd_n
new iteration
  update callers of $s7partial1AC1fySbxlFTf4dd_n
SILCSE Adding to value table:   %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
 ->   %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4

SILCSE VISITING:   return %3 : $Bool                               // id: %4

*** RLE on function: $s7partial1AC1fySbxlF ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// A.f<A>(_:)
sil hidden [signature_optimized_thunk] [always_inline] @$s7partial1AC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed A) -> Bool {
bb0(%0 : $*T, %1 : $A):
  // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3
  %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1AC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
Marking as live:
  return %3 : $Bool                               // id: %4
Marking as live:
  // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $A
Invalidating caller: $s7partial1AC1fySbxlF
    callee: $s7partial1AC1fySbxlFTf4dd_n
***** CodeMotion on function: $s7partial1AC1fySbxlF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94e0d0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1AC1fySbxlF ***
***** Processing $s7partial1AC1fySbxlF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
VISITING:
      // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3
VISITING:
      %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
VISITING:
      return %3 : $Bool                               // id: %4
**** Computing ARC Matching Sets for $s7partial1AC1fySbxlF ****

### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0
Running on function $s7partial1AC1fySbxlF
***** CodeMotion on function: $s7partial1AC1fySbxlF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94e2b0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1AC1fySbxlF ***
*** DSE on function: $s7partial1AC1fySbxlF ***
*** FSO on function: $s7partial1AC1fySbxlF ***
  cannot specialize function -> abort
** ReleaseDevirtualizer **
Running on function $s7partial1ACfd
***** CodeMotion on function: $s7partial1ACfd *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a757760
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** FSO on function: $s7partial1ACfd ***
Constructing Projection Tree For : $A
  function has no caller -> abort
** ReleaseDevirtualizer **
Running on function $s7partial1ACfD
***** CodeMotion on function: $s7partial1ACfD *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a757760
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** FSO on function: $s7partial1ACfD ***
Constructing Projection Tree For : $A
  function has no caller -> abort
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1BC1fySbxlF
***** LowerAggregate on function: $s7partial1BC1fySbxlF *****
Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Visiting:   return %3 : $Bool                               // id: %4
***** SROA on function: $s7partial1BC1fySbxlF *****
** Mem2Reg on function: $s7partial1BC1fySbxlF **
	discovered a new reachable node bb0
***** Devirtualizer on function:$s7partial1BC1fySbxlF *****
***** GenericSpecializer on function:$s7partial1BC1fySbxlF *****
### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0
***** CSE on function: $s7partial1BC1fySbxlF *****
SILCSE VISITING:   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int1, 0           // user: %3
 ->   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SILCSE VISITING:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SILCSE Adding to value table:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
 ->   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SILCSE VISITING:   return %3 : $Bool                               // id: %4

*** RLE on function: $s7partial1BC1fySbxlF ***
// B.f<A>(_:)
sil hidden @$s7partial1BC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed B) -> Bool {
bb0(%0 : $*T, %1 : $B):
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1BC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Bool                               // id: %4
Marking as live:
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $B
Invalidating caller: $s7partial1BC1fySbxlF
***** CodeMotion on function: $s7partial1BC1fySbxlF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94e1e0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BC1fySbxlF ***
***** Processing $s7partial1BC1fySbxlF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
VISITING:
      %2 = integer_literal $Builtin.Int1, 0           // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = integer_literal $Builtin.Int1, 0           // user: %3
VISITING:
      %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
VISITING:
      return %3 : $Bool                               // id: %4
**** Computing ARC Matching Sets for $s7partial1BC1fySbxlF ****

### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0
Running on function $s7partial1BC1fySbxlF
***** CodeMotion on function: $s7partial1BC1fySbxlF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a441530
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BC1fySbxlF ***
*** DSE on function: $s7partial1BC1fySbxlF ***
*** FSO on function: $s7partial1BC1fySbxlF ***
Constructing Projection Tree For : $*T
Constructing Projection Tree For : $B
  remove dead arguments
None of generic parameters are used by $s7partial1BC1fySbxlF
Interface params:
Interface results:
(struct_type decl=Swift.(file).Bool@/Users/kenta/swiftc/swift/stdlib/public/core/Bool.swift:64:15)
  -> create specialized function $s7partial1BC1fySbxlFTf4dd_n
None of generic parameters are used by $s7partial1BC1fySbxlF
Interface params:
Interface results:
(struct_type decl=Swift.(file).Bool@/Users/kenta/swiftc/swift/stdlib/public/core/Bool.swift:64:15)
CallerAnalysis: Creating caller info for: $s7partial1BC1fySbxlFTf4dd_n
PMVerifierAnalysis. Add|Mod: $s7partial1BC1fySbxlFTf4dd_n
Invalidating caller: $s7partial1BC1fySbxlF
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1BC1fySbxlFTf4dd_n
***** LowerAggregate on function: $s7partial1BC1fySbxlFTf4dd_n *****
Visiting:   %0 = integer_literal $Builtin.Int1, 0           // user: %1
Visiting:   %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2
Visiting:   return %1 : $Bool                               // id: %2
***** SROA on function: $s7partial1BC1fySbxlFTf4dd_n *****
** Mem2Reg on function: $s7partial1BC1fySbxlFTf4dd_n **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2
    User:   return %1 : $Bool                               // id: %2
Visiting:   %0 = integer_literal $Builtin.Int1, 0           // user: %1
    User:   %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2
Visiting:   %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2
    User:   return %1 : $Bool                               // id: %2
### Run SimplifyCFG on $s7partial1BC1fySbxlFTf4dd_n
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BC1fySbxlFTf4dd_n
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %0 = integer_literal $Builtin.Int1, 0           // user: %1

SC: Visiting:   %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2

SC: Visiting:   return %1 : $Bool                               // id: %2

***** Devirtualizer on function:$s7partial1BC1fySbxlFTf4dd_n *****
***** GenericSpecializer on function:$s7partial1BC1fySbxlFTf4dd_n *****
### Run SimplifyCFG on $s7partial1BC1fySbxlFTf4dd_n
	discovered a new reachable node bb0
***** CSE on function: $s7partial1BC1fySbxlFTf4dd_n *****
SILCSE VISITING:   %0 = integer_literal $Builtin.Int1, 0           // user: %1

SILCSE Adding to value table:   %0 = integer_literal $Builtin.Int1, 0           // user: %1
 ->   %0 = integer_literal $Builtin.Int1, 0           // user: %1

SILCSE VISITING:   %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2

SILCSE Adding to value table:   %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2
 ->   %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2

SILCSE VISITING:   return %1 : $Bool                               // id: %2

*** RLE on function: $s7partial1BC1fySbxlFTf4dd_n ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// specialized B.f<A>(_:)
sil shared @$s7partial1BC1fySbxlFTf4dd_n : $@convention(thin) () -> Bool {
bb0:
  %0 = integer_literal $Builtin.Int1, 0           // user: %1
  %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2
  return %1 : $Bool                               // id: %2
} // end sil function '$s7partial1BC1fySbxlFTf4dd_n'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $Bool                               // id: %2
Marking as live:
  %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2
Marking as live:
  %0 = integer_literal $Builtin.Int1, 0           // user: %1
***** CodeMotion on function: $s7partial1BC1fySbxlFTf4dd_n *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94e1e0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BC1fySbxlFTf4dd_n ***
***** Processing $s7partial1BC1fySbxlFTf4dd_n *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2
VISITING:
      %0 = integer_literal $Builtin.Int1, 0           // user: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %0 = integer_literal $Builtin.Int1, 0           // user: %1
VISITING:
      %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2
VISITING:
      return %1 : $Bool                               // id: %2
**** Computing ARC Matching Sets for $s7partial1BC1fySbxlFTf4dd_n ****

Running on function $s7partial1BC1fySbxlFTf4dd_n
***** CodeMotion on function: $s7partial1BC1fySbxlFTf4dd_n *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a7577d0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BC1fySbxlFTf4dd_n ***
*** DSE on function: $s7partial1BC1fySbxlFTf4dd_n ***
*** FSO on function: $s7partial1BC1fySbxlFTf4dd_n ***
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1BC1fySbxlF
***** LowerAggregate on function: $s7partial1BC1fySbxlF *****
Visiting:   // function_ref specialized B.f<A>(_:)
  %2 = function_ref @$s7partial1BC1fySbxlFTf4dd_n : $@convention(thin) () -> Bool // user: %3
Visiting:   %3 = apply %2() : $@convention(thin) () -> Bool // user: %4
Visiting:   return %3 : $Bool                               // id: %4
***** SROA on function: $s7partial1BC1fySbxlF *****
** Mem2Reg on function: $s7partial1BC1fySbxlF **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s7partial1BC1fySbxlFTf4dd_n -> abort
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BC1fySbxlF
SC: ADDING: 3 instrs to worklist
SC: Visiting:   // function_ref specialized B.f<A>(_:)
  %2 = function_ref @$s7partial1BC1fySbxlFTf4dd_n : $@convention(thin) () -> Bool // user: %3

SC: Visiting:   %3 = apply %2() : $@convention(thin) () -> Bool // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4

***** Devirtualizer on function:$s7partial1BC1fySbxlF *****
    Trying to devirtualize:   %3 = apply %2() : $@convention(thin) () -> Bool // user: %4
***** GenericSpecializer on function:$s7partial1BC1fySbxlF *****
recompute function-effect analysis with UpdateID 8
  >> analyze $s7partial1BC1fySbxlFTf4dd_n
  << finished $s7partial1BC1fySbxlFTf4dd_n
new iteration
  update callers of $s7partial1BC1fySbxlFTf4dd_n

Inline into caller: $s7partial1BC1fySbxlF
    pure-call decision $s7partial1BC1fySbxlFTf4dd_n
    inline [1->1] $s7partial1BC1fySbxlFTf4dd_n
Invalidating caller: $s7partial1BC1fySbxlF
    callee: $s7partial1BC1fySbxlFTf4dd_n
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1BC1fySbxlF
***** LowerAggregate on function: $s7partial1BC1fySbxlF *****
Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Visiting:   return %3 : $Bool                               // id: %4
***** SROA on function: $s7partial1BC1fySbxlF *****
** Mem2Reg on function: $s7partial1BC1fySbxlF **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
    User:   return %3 : $Bool                               // id: %4
Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3
    User:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
    User:   return %3 : $Bool                               // id: %4
### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BC1fySbxlF
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SC: Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4

***** Devirtualizer on function:$s7partial1BC1fySbxlF *****
***** GenericSpecializer on function:$s7partial1BC1fySbxlF *****
### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0
***** CSE on function: $s7partial1BC1fySbxlF *****
SILCSE VISITING:   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int1, 0           // user: %3
 ->   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SILCSE VISITING:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SILCSE Adding to value table:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
 ->   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SILCSE VISITING:   return %3 : $Bool                               // id: %4

*** RLE on function: $s7partial1BC1fySbxlF ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// B.f<A>(_:)
sil hidden [signature_optimized_thunk] [always_inline] @$s7partial1BC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed B) -> Bool {
bb0(%0 : $*T, %1 : $B):
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1BC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Bool                               // id: %4
Marking as live:
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $B
Invalidating caller: $s7partial1BC1fySbxlF
***** CodeMotion on function: $s7partial1BC1fySbxlF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a441530
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BC1fySbxlF ***
***** Processing $s7partial1BC1fySbxlF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
VISITING:
      %2 = integer_literal $Builtin.Int1, 0           // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = integer_literal $Builtin.Int1, 0           // user: %3
VISITING:
      %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
VISITING:
      return %3 : $Bool                               // id: %4
**** Computing ARC Matching Sets for $s7partial1BC1fySbxlF ****

### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0
Running on function $s7partial1BC1fySbxlF
***** CodeMotion on function: $s7partial1BC1fySbxlF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a441530
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BC1fySbxlF ***
*** DSE on function: $s7partial1BC1fySbxlF ***
*** FSO on function: $s7partial1BC1fySbxlF ***
  cannot specialize function -> abort
** ReleaseDevirtualizer **
Running on function $s7partial1BCfd
***** CodeMotion on function: $s7partial1BCfd *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a441530
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** FSO on function: $s7partial1BCfd ***
Constructing Projection Tree For : $B
  function has no caller -> abort
** ReleaseDevirtualizer **
Running on function $s7partial1BCfD
***** CodeMotion on function: $s7partial1BCfD *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a441530
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** FSO on function: $s7partial1BCfD ***
Constructing Projection Tree For : $B
  function has no caller -> abort
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1BCACycfC
***** LowerAggregate on function: $s7partial1BCACycfC *****
Visiting:   %1 = alloc_ref $B                               // user: %2
Visiting:   return %1 : $B                                  // id: %2
***** SROA on function: $s7partial1BCACycfC *****
** Mem2Reg on function: $s7partial1BCACycfC **
	discovered a new reachable node bb0
***** Devirtualizer on function:$s7partial1BCACycfC *****
***** GenericSpecializer on function:$s7partial1BCACycfC *****
### Run SimplifyCFG on $s7partial1BCACycfC
	discovered a new reachable node bb0
***** CSE on function: $s7partial1BCACycfC *****
SILCSE VISITING:   %1 = alloc_ref $B                               // user: %2

SILCSE VISITING:   return %1 : $B                                  // id: %2

*** RLE on function: $s7partial1BCACycfC ***
// B.__allocating_init()
sil hidden [exact_self_class] @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B {
bb0(%0 : $@thick B.Type):
  %1 = alloc_ref $B                               // user: %2
  return %1 : $B                                  // id: %2
} // end sil function '$s7partial1BCACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $B                                  // id: %2
Marking as live:
  %1 = alloc_ref $B                               // user: %2
Removing dead argument:
%0 = argument of bb0 : $@thick B.Type
Invalidating caller: $s7partial1BCACycfC
  invalidate $s7partial1BCACycfC
  invalidate $s7partial1BCACycfC
***** CodeMotion on function: $s7partial1BCACycfC *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6bb4e1f0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BCACycfC ***
***** Processing $s7partial1BCACycfC *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %1 = alloc_ref $B                               // user: %2
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %1 = alloc_ref $B                               // user: %2
VISITING:
      return %1 : $B                                  // id: %2
**** Computing ARC Matching Sets for $s7partial1BCACycfC ****

### Run SimplifyCFG on $s7partial1BCACycfC
	discovered a new reachable node bb0
Running on function $s7partial1BCACycfC
***** CodeMotion on function: $s7partial1BCACycfC *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6bb4d160
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BCACycfC ***
B.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
    Found destructor!
    Analyzing destructor.
        Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %1
            SAFE! Instruction has no side effects.
        Visiting:   debug_value %0 : $B, let, name "self", argno 1  // id: %2
            SAFE! Instruction has no side effects.
        Visiting:   dealloc_ref %0 : $B                             // id: %3
            SAFE! dealloc_ref on self.
        Visiting:   %4 = tuple ()                                   // user: %5
            SAFE! Instruction has no side effects.
        Visiting:   return %4 : $()                                 // id: %5
            SAFE! Instruction has no side effects.
    Analyzing Use Graph.        Visiting:   %1 = alloc_ref $B                               // user: %2
        Visiting:   return %1 : $B                                  // id: %2
        Found instruction we can't zap...
    Found a use that cannot be zapped...
*** DSE on function: $s7partial1BCACycfC ***
*** FSO on function: $s7partial1BCACycfC ***
Constructing Projection Tree For : $@thick B.Type
  function has no caller -> abort
** ReleaseDevirtualizer **
Running on function $s7partial1BCACycfc
***** CodeMotion on function: $s7partial1BCACycfc *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a441530
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** FSO on function: $s7partial1BCACycfc ***
Constructing Projection Tree For : $B
  function has no caller -> abort
** ReleaseDevirtualizer **
Running on function $s7partial8makeAorBAA1ACyF
***** CodeMotion on function: $s7partial8makeAorBAA1ACyF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a441530
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** FSO on function: $s7partial8makeAorBAA1ACyF ***
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1gSbyF
***** LowerAggregate on function: $s7partial1gSbyF *****
Visiting:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
Visiting:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %19, %24, %23, %16, %13, %7, %6
Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Visiting:   %4 = alloc_stack $UInt16                        // users: %20, %23, %13, %5, %9
Visiting:   store %3 to %4 : $*UInt16                       // id: %5
Visiting:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %23
Visiting:   checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %7
Visiting:   dealloc_stack %4 : $*UInt16                     // id: %9
Visiting:   return %8 : $Bool                               // id: %10
Visiting:   // function_ref A.f<A>(_:)
  %12 = function_ref @$s7partial1AC1fySbxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %13
Visiting:   %13 = apply %12<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %15
Visiting:   strong_release %11 : $A                         // id: %14
Visiting:   br bb1(%13 : $Bool)                             // id: %15
Visiting:   checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %16
Visiting:   // function_ref B.f<A>(_:)
  %18 = function_ref @$s7partial1BC1fySbxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // user: %20
Visiting:   %19 = unchecked_ref_cast %1 : $A to $B          // user: %20
Visiting:   %20 = apply %18<UInt16>(%4, %19) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // user: %22
Visiting:   strong_release %17 : $B                         // id: %21
Visiting:   br bb1(%20 : $Bool)                             // id: %22
Visiting:   %23 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %25
Visiting:   strong_release %1 : $A                          // id: %24
Visiting:   br bb1(%23 : $Bool)                             // id: %25
***** SROA on function: $s7partial1gSbyF *****
    Visiting use:   %20 = apply %18<UInt16>(%4, %19) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // user: %22
        Found unknown user, pointer escapes!
** Mem2Reg on function: $s7partial1gSbyF **
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5
*** Memory to register looking at:   %4 = alloc_stack $UInt16                        // users: %20, %23, %13, %5, %9
*** AllocStack is captured by:   %20 = apply %18<UInt16>(%4, %19) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // user: %22
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s7partial8makeAorBAA1ACyF -> abort
ExistentialSpecializer Pass: Bail! Due to canSpecializeCalleeFunction.
  %13 = apply %12<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %15
ExistentialSpecializer Pass: Bail! Due to canSpecializeCalleeFunction.
  %20 = apply %18<UInt16>(%4, %19) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // user: %22
ExistentialSpecializer Pass: Bail! Due to canSpecializeCalleeFunction.
  %23 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %25
*** ConstPropagation processing: 
Visiting:   checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %16
Visiting:   checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %7
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    User:   store %3 to %4 : $*UInt16                       // id: %5
Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
    User:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    User:   store %3 to %4 : $*UInt16                       // id: %5
***** Devirtualizer on function:$s7partial1gSbyF *****
    Trying to devirtualize:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %19, %24, %23, %16, %13, %7, %6
    Trying to devirtualize:   %13 = apply %12<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %15
    Trying to devirtualize:   %20 = apply %18<UInt16>(%4, %19) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // user: %22
    Trying to devirtualize:   %23 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %25
***** GenericSpecializer on function:$s7partial1gSbyF *****

----------------------------------------------------------------------------
// g()
sil hidden @$s7partial1gSbyF : $@convention(thin) () -> Bool {
bb0:
  // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %19, %24, %23, %16, %13, %7, %6
  %2 = integer_literal $Builtin.Int16, 9          // user: %3
  %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
  %4 = alloc_stack $UInt16                        // users: %20, %23, %13, %5, %9
  store %3 to %4 : $*UInt16                       // id: %5
  %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %23
  checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %7

// %8                                             // user: %10
bb1(%8 : $Bool):                                  // Preds: bb5 bb4 bb2
  dealloc_stack %4 : $*UInt16                     // id: %9
  return %8 : $Bool                               // id: %10

// %11                                            // user: %14
bb2(%11 : $A):                                    // Preds: bb0
  // function_ref A.f<A>(_:)
  %12 = function_ref @$s7partial1AC1fySbxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %13
  %13 = apply %12<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %15
  strong_release %11 : $A                         // id: %14
  br bb1(%13 : $Bool)                             // id: %15

bb3:                                              // Preds: bb0
  checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %16

// %17                                            // user: %21
bb4(%17 : $B):                                    // Preds: bb3
  // function_ref B.f<A>(_:)
  %18 = function_ref @$s7partial1BC1fySbxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // user: %20
  %19 = unchecked_ref_cast %1 : $A to $B          // user: %20
  %20 = apply %18<UInt16>(%4, %19) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // user: %22
  strong_release %17 : $B                         // id: %21
  br bb1(%20 : $Bool)                             // id: %22

bb5:                                              // Preds: bb3
  %23 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %25
  strong_release %1 : $A                          // id: %24
  br bb1(%23 : $Bool)                             // id: %25
} // end sil function '$s7partial1gSbyF'


specialize: partial.A.f<A>(A) -> Swift.Bool


*** ApplyInst in function $s7partial1gSbyF:
     %1 = apply %0() : $@convention(thin) () -> @owned A // users: %19, %24, %23, %16, %13, %7, %6
     %4 = alloc_stack $UInt16                     // users: %20, %23, %13, %5, %9
     // function_ref A.f<A>(_:)
  %12 = function_ref @$s7partial1AC1fySbxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %13
->   %13 = apply %12<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %15
     br bb1(%13 : $Bool)                          // id: %15



Checking for a specialization cycle:
Caller: $s7partial1gSbyF
Callee: $s7partial1AC1fySbxlF
Substitutions:
(substitution_map generic_signature=<τ_0_0>
  (substitution τ_0_0 -> UInt16))Stop the scan: Current caller is not a specialization
    Specialized function $s7partial1AC1fySbxlFs6UInt16V_Tg5
Could not find an existing specialization for: $s7partial1AC1fySbxlFs6UInt16V_Tg5
Creating a specialization: $s7partial1AC1fySbxlFs6UInt16V_Tg5
CallerAnalysis: Creating caller info for: $s7partial1AC1fySbxlFs6UInt16V_Tg5
PMVerifierAnalysis. Add|Mod: $s7partial1AC1fySbxlFs6UInt16V_Tg5
Created specialized function: $s7partial1AC1fySbxlFs6UInt16V_Tg5
Specialized function type: @convention(method) (UInt16, @guaranteed A) -> Bool
   success: generic specialization <Swift.UInt16> of partial.A.f<A>(A) -> Swift.Bool

----------------------------------------------------------------------------
// g()
sil hidden @$s7partial1gSbyF : $@convention(thin) () -> Bool {
bb0:
  // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %14, %20, %25, %24, %17, %7, %6
  %2 = integer_literal $Builtin.Int16, 9          // user: %3
  %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
  %4 = alloc_stack $UInt16                        // users: %13, %21, %24, %5, %9
  store %3 to %4 : $*UInt16                       // id: %5
  %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %24
  checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %7

// %8                                             // user: %10
bb1(%8 : $Bool):                                  // Preds: bb5 bb4 bb2
  dealloc_stack %4 : $*UInt16                     // id: %9
  return %8 : $Bool                               // id: %10

// %11                                            // user: %15
bb2(%11 : $A):                                    // Preds: bb0
  // function_ref specialized A.f<A>(_:)
  %12 = function_ref @$s7partial1AC1fySbxlFs6UInt16V_Tg5 : $@convention(method) (UInt16, @guaranteed A) -> Bool // user: %14
  %13 = load %4 : $*UInt16                        // user: %14
  %14 = apply %12(%13, %1) : $@convention(method) (UInt16, @guaranteed A) -> Bool // user: %16
  strong_release %11 : $A                         // id: %15
  br bb1(%14 : $Bool)                             // id: %16

bb3:                                              // Preds: bb0
  checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %17

// %18                                            // user: %22
bb4(%18 : $B):                                    // Preds: bb3
  // function_ref B.f<A>(_:)
  %19 = function_ref @$s7partial1BC1fySbxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // user: %21
  %20 = unchecked_ref_cast %1 : $A to $B          // user: %21
  %21 = apply %19<UInt16>(%4, %20) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // user: %23
  strong_release %18 : $B                         // id: %22
  br bb1(%21 : $Bool)                             // id: %23

bb5:                                              // Preds: bb3
  %24 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
  strong_release %1 : $A                          // id: %25
  br bb1(%24 : $Bool)                             // id: %26
} // end sil function '$s7partial1gSbyF'


specialize: partial.B.f<A>(A) -> Swift.Bool


*** ApplyInst in function $s7partial1gSbyF:
     %4 = alloc_stack $UInt16                     // users: %13, %21, %24, %5, %9
     // function_ref B.f<A>(_:)
  %19 = function_ref @$s7partial1BC1fySbxlF : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // user: %21
     %20 = unchecked_ref_cast %1 : $A to $B       // user: %21
->   %21 = apply %19<UInt16>(%4, %20) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool // user: %23
     br bb1(%21 : $Bool)                          // id: %23



Checking for a specialization cycle:
Caller: $s7partial1gSbyF
Callee: $s7partial1BC1fySbxlF
Substitutions:
(substitution_map generic_signature=<τ_0_0>
  (substitution τ_0_0 -> UInt16))Stop the scan: Current caller is not a specialization
    Specialized function $s7partial1BC1fySbxlFs6UInt16V_Tg5
Could not find an existing specialization for: $s7partial1BC1fySbxlFs6UInt16V_Tg5
Creating a specialization: $s7partial1BC1fySbxlFs6UInt16V_Tg5
CallerAnalysis: Creating caller info for: $s7partial1BC1fySbxlFs6UInt16V_Tg5
PMVerifierAnalysis. Add|Mod: $s7partial1BC1fySbxlFs6UInt16V_Tg5
Created specialized function: $s7partial1BC1fySbxlFs6UInt16V_Tg5
Specialized function type: @convention(method) (UInt16, @guaranteed B) -> Bool
   success: generic specialization <Swift.UInt16> of partial.B.f<A>(A) -> Swift.Bool
Invalidating caller: $s7partial1gSbyF
    callee: $s7partial1BC1fySbxlF
    callee: $s7partial1AC1fySbxlF
    callee: $s7partial8makeAorBAA1ACyF
  invalidate $s7partial1gSbyF
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1BC1fySbxlFs6UInt16V_Tg5
***** LowerAggregate on function: $s7partial1BC1fySbxlFs6UInt16V_Tg5 *****
Visiting:   %2 = alloc_stack $UInt16                        // users: %6, %3
Visiting:   store %0 to %2 : $*UInt16                       // id: %3
Visiting:   %4 = integer_literal $Builtin.Int1, 0           // user: %5
Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %7
Visiting:   dealloc_stack %2 : $*UInt16                     // id: %6
Visiting:   return %5 : $Bool                               // id: %7
***** SROA on function: $s7partial1BC1fySbxlFs6UInt16V_Tg5 *****
    Visiting use:   dealloc_stack %2 : $*UInt16                     // id: %6
    Visiting use:   store %0 to %2 : $*UInt16                       // id: %3
        Found a store into the projection.
** Mem2Reg on function: $s7partial1BC1fySbxlFs6UInt16V_Tg5 **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** Memory to register looking at:   %2 = alloc_stack $UInt16                        // users: %6, %3
*** Deleting store-only AllocStack:   %2 = alloc_stack $UInt16
Invalidating caller: $s7partial1BC1fySbxlFs6UInt16V_Tg5
*** ConstPropagation processing: 
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
    User:   return %3 : $Bool                               // id: %4
Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3
    User:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
    User:   return %3 : $Bool                               // id: %4
### Run SimplifyCFG on $s7partial1BC1fySbxlFs6UInt16V_Tg5
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1BC1fySbxlFs6UInt16V_Tg5
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SC: Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4

***** Devirtualizer on function:$s7partial1BC1fySbxlFs6UInt16V_Tg5 *****
***** GenericSpecializer on function:$s7partial1BC1fySbxlFs6UInt16V_Tg5 *****
** Mem2Reg on function: $s7partial1BC1fySbxlFs6UInt16V_Tg5 **
	discovered a new reachable node bb0
### Run SimplifyCFG on $s7partial1BC1fySbxlFs6UInt16V_Tg5
	discovered a new reachable node bb0
***** CSE on function: $s7partial1BC1fySbxlFs6UInt16V_Tg5 *****
SILCSE VISITING:   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int1, 0           // user: %3
 ->   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SILCSE VISITING:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SILCSE Adding to value table:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
 ->   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SILCSE VISITING:   return %3 : $Bool                               // id: %4

*** RLE on function: $s7partial1BC1fySbxlFs6UInt16V_Tg5 ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// specialized B.f<A>(_:)
sil shared [signature_optimized_thunk] [always_inline] @$s7partial1BC1fySbxlFs6UInt16V_Tg5 : $@convention(method) (UInt16, @guaranteed B) -> Bool {
bb0(%0 : $UInt16, %1 : $B):
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1BC1fySbxlFs6UInt16V_Tg5'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Bool                               // id: %4
Marking as live:
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
Removing dead argument:
%0 = argument of bb0 : $UInt16
Removing dead argument:
%1 = argument of bb0 : $B
Invalidating caller: $s7partial1BC1fySbxlFs6UInt16V_Tg5
***** CodeMotion on function: $s7partial1BC1fySbxlFs6UInt16V_Tg5 *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a7577d0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BC1fySbxlFs6UInt16V_Tg5 ***
***** Processing $s7partial1BC1fySbxlFs6UInt16V_Tg5 *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
VISITING:
      %2 = integer_literal $Builtin.Int1, 0           // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = integer_literal $Builtin.Int1, 0           // user: %3
VISITING:
      %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
VISITING:
      return %3 : $Bool                               // id: %4
**** Computing ARC Matching Sets for $s7partial1BC1fySbxlFs6UInt16V_Tg5 ****

### Run SimplifyCFG on $s7partial1BC1fySbxlFs6UInt16V_Tg5
	discovered a new reachable node bb0
Running on function $s7partial1BC1fySbxlFs6UInt16V_Tg5
***** CodeMotion on function: $s7partial1BC1fySbxlFs6UInt16V_Tg5 *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a7579b0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1BC1fySbxlFs6UInt16V_Tg5 ***
*** DSE on function: $s7partial1BC1fySbxlFs6UInt16V_Tg5 ***
*** FSO on function: $s7partial1BC1fySbxlFs6UInt16V_Tg5 ***
  cannot specialize function -> abort
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1AC1fySbxlFs6UInt16V_Tg5
***** LowerAggregate on function: $s7partial1AC1fySbxlFs6UInt16V_Tg5 *****
Visiting:   %2 = alloc_stack $UInt16                        // users: %6, %3
Visiting:   store %0 to %2 : $*UInt16                       // id: %3
Visiting:   // function_ref specialized A.f<A>(_:)
  %4 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %5
Visiting:   %5 = apply %4<UInt16>() : $@convention(thin) <τ_0_0> () -> Bool // user: %7
Visiting:   dealloc_stack %2 : $*UInt16                     // id: %6
Visiting:   return %5 : $Bool                               // id: %7
***** SROA on function: $s7partial1AC1fySbxlFs6UInt16V_Tg5 *****
    Visiting use:   dealloc_stack %2 : $*UInt16                     // id: %6
    Visiting use:   store %0 to %2 : $*UInt16                       // id: %3
        Found a store into the projection.
** Mem2Reg on function: $s7partial1AC1fySbxlFs6UInt16V_Tg5 **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** Memory to register looking at:   %2 = alloc_stack $UInt16                        // users: %6, %3
*** Deleting store-only AllocStack:   %2 = alloc_stack $UInt16
Invalidating caller: $s7partial1AC1fySbxlFs6UInt16V_Tg5
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s7partial1AC1fySbxlFTf4dd_n -> abort
*** ConstPropagation processing: 
### Run SimplifyCFG on $s7partial1AC1fySbxlFs6UInt16V_Tg5
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1AC1fySbxlFs6UInt16V_Tg5
SC: ADDING: 3 instrs to worklist
SC: Visiting:   // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3

SC: Visiting:   %3 = apply %2<UInt16>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4

***** Devirtualizer on function:$s7partial1AC1fySbxlFs6UInt16V_Tg5 *****
    Trying to devirtualize:   %3 = apply %2<UInt16>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
***** GenericSpecializer on function:$s7partial1AC1fySbxlFs6UInt16V_Tg5 *****

----------------------------------------------------------------------------
// specialized A.f<A>(_:)
sil shared [signature_optimized_thunk] [always_inline] @$s7partial1AC1fySbxlFs6UInt16V_Tg5 : $@convention(method) (UInt16, @guaranteed A) -> Bool {
bb0(%0 : $UInt16, %1 : $A):
  // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3
  %3 = apply %2<UInt16>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1AC1fySbxlFs6UInt16V_Tg5'


specialize: function signature specialization <Arg[0] = Dead, Arg[1] = Dead> of partial.A.f<A>(A) -> Swift.Bool


*** ApplyInst in function $s7partial1AC1fySbxlFs6UInt16V_Tg5:
     // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3
->   %3 = apply %2<UInt16>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
     return %3 : $Bool                            // id: %4



Checking for a specialization cycle:
Caller: $s7partial1AC1fySbxlFs6UInt16V_Tg5
Callee: $s7partial1AC1fySbxlFTf4dd_n
Substitutions:
(substitution_map generic_signature=<τ_0_0>
  (substitution τ_0_0 -> UInt16))Scan caller's specialization history
Current caller is a specialization:
Caller: $s7partial1gSbyF
Parent: $s7partial1AC1fySbxlF
Substitutions:
(struct_type decl=Swift.(file).UInt16@/Users/kenta/swiftc/build/Xcode-DebugAssert/swift-macosx-x86_64/stdlib/public/core/8/IntegerTypes.swift:2850:15)

Current caller is: $s7partial1gSbyF
Stop the scan: Current caller is not a specialization
    Specialized function $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
Could not find an existing specialization for: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
Creating a specialization: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
CallerAnalysis: Creating caller info for: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
PMVerifierAnalysis. Add|Mod: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
Created specialized function: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
Specialized function type: @convention(thin) () -> Bool
   success: generic specialization <Swift.UInt16> of function signature specialization <Arg[0] = Dead, Arg[1] = Dead> of partial.A.f<A>(A) -> Swift.Bool
Invalidating caller: $s7partial1AC1fySbxlFs6UInt16V_Tg5
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
***** LowerAggregate on function: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 *****
Visiting:   %0 = metatype $@thick UInt16.Type               // user: %1
Visiting:   %1 = init_existential_metatype %0 : $@thick UInt16.Type, $@thick Any.Type // user: %4
Visiting:   %2 = metatype $@thick A.Type                    // user: %3
Visiting:   %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4
Visiting:   %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5
Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
Visiting:   return %5 : $Bool                               // id: %6
***** SROA on function: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 *****
** Mem2Reg on function: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
    User:   return %5 : $Bool                               // id: %6
### Run SimplifyCFG on $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
SC: ADDING: 7 instrs to worklist
SC: Visiting:   %0 = metatype $@thick UInt16.Type               // user: %1

SC: Visiting:   %1 = init_existential_metatype %0 : $@thick UInt16.Type, $@thick Any.Type // user: %4

SC: Visiting:   %2 = metatype $@thick A.Type                    // user: %3

SC: Visiting:   %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4

SC: Visiting:   %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5

SC: Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6

SC: Visiting:   return %5 : $Bool                               // id: %6

***** Devirtualizer on function:$s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 *****
***** GenericSpecializer on function:$s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 *****
### Run SimplifyCFG on $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
	discovered a new reachable node bb0
***** CSE on function: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 *****
SILCSE VISITING:   %0 = metatype $@thick UInt16.Type               // user: %1

SILCSE Adding to value table:   %0 = metatype $@thick UInt16.Type               // user: %1
 ->   %0 = metatype $@thick UInt16.Type               // user: %1

SILCSE VISITING:   %1 = init_existential_metatype %0 : $@thick UInt16.Type, $@thick Any.Type // user: %4

SILCSE VISITING:   %2 = metatype $@thick A.Type                    // user: %3

SILCSE Adding to value table:   %2 = metatype $@thick A.Type                    // user: %3
 ->   %2 = metatype $@thick A.Type                    // user: %3

SILCSE VISITING:   %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4

SILCSE VISITING:   %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5

SILCSE Adding to value table:   %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5
 ->   %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5

SILCSE VISITING:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6

SILCSE Adding to value table:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
 ->   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6

SILCSE VISITING:   return %5 : $Bool                               // id: %6

*** RLE on function: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// specialized A.f<A>(_:)
sil shared @$s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 : $@convention(thin) () -> Bool {
bb0:
  %0 = metatype $@thick UInt16.Type               // user: %1
  %1 = init_existential_metatype %0 : $@thick UInt16.Type, $@thick Any.Type // user: %4
  %2 = metatype $@thick A.Type                    // user: %3
  %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4
  %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5
  %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
  return %5 : $Bool                               // id: %6
} // end sil function '$s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %5 : $Bool                               // id: %6
Marking as live:
  %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
Marking as live:
  %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5
Marking as live:
  %1 = init_existential_metatype %0 : $@thick UInt16.Type, $@thick Any.Type // user: %4
Marking as live:
  %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4
Marking as live:
  %2 = metatype $@thick A.Type                    // user: %3
Marking as live:
  %0 = metatype $@thick UInt16.Type               // user: %1
***** CodeMotion on function: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94e810
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 ***
***** Processing $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
VISITING:
      %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5
VISITING:
      %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4
VISITING:
      %2 = metatype $@thick A.Type                    // user: %3
VISITING:
      %1 = init_existential_metatype %0 : $@thick UInt16.Type, $@thick Any.Type // user: %4
VISITING:
      %0 = metatype $@thick UInt16.Type               // user: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %0 = metatype $@thick UInt16.Type               // user: %1
VISITING:
      %1 = init_existential_metatype %0 : $@thick UInt16.Type, $@thick Any.Type // user: %4
VISITING:
      %2 = metatype $@thick A.Type                    // user: %3
VISITING:
      %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4
VISITING:
      %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5
VISITING:
      %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
VISITING:
      return %5 : $Bool                               // id: %6
**** Computing ARC Matching Sets for $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 ****

Running on function $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
***** CodeMotion on function: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b94ea90
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 ***
*** DSE on function: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 ***
*** FSO on function: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5 ***
***** Devirtualizer on function:$s7partial1AC1fySbxlFs6UInt16V_Tg5 *****
    Trying to devirtualize:   %3 = apply %2() : $@convention(thin) () -> Bool // user: %4
	discovered a new reachable node bb0
recompute function-effect analysis with UpdateID 9
  >> analyze $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
  << finished $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
new iteration
  update callers of $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5

Inline into caller: $s7partial1AC1fySbxlFs6UInt16V_Tg5
    pure-call decision $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
    inline [1->1] $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
Invalidating caller: $s7partial1AC1fySbxlFs6UInt16V_Tg5
    callee: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1AC1fySbxlFs6UInt16V_Tg5
***** LowerAggregate on function: $s7partial1AC1fySbxlFs6UInt16V_Tg5 *****
Visiting:   %2 = metatype $@thick UInt16.Type               // user: %3
Visiting:   %3 = init_existential_metatype %2 : $@thick UInt16.Type, $@thick Any.Type // user: %6
Visiting:   %4 = metatype $@thick A.Type                    // user: %5
Visiting:   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
Visiting:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
Visiting:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
Visiting:   return %7 : $Bool                               // id: %8
***** SROA on function: $s7partial1AC1fySbxlFs6UInt16V_Tg5 *****
** Mem2Reg on function: $s7partial1AC1fySbxlFs6UInt16V_Tg5 **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
    User:   return %7 : $Bool                               // id: %8
### Run SimplifyCFG on $s7partial1AC1fySbxlFs6UInt16V_Tg5
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s7partial1AC1fySbxlFs6UInt16V_Tg5
SC: ADDING: 7 instrs to worklist
SC: Visiting:   %2 = metatype $@thick UInt16.Type               // user: %3

SC: Visiting:   %3 = init_existential_metatype %2 : $@thick UInt16.Type, $@thick Any.Type // user: %6

SC: Visiting:   %4 = metatype $@thick A.Type                    // user: %5

SC: Visiting:   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6

SC: Visiting:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7

SC: Visiting:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8

SC: Visiting:   return %7 : $Bool                               // id: %8

***** Devirtualizer on function:$s7partial1AC1fySbxlFs6UInt16V_Tg5 *****
***** GenericSpecializer on function:$s7partial1AC1fySbxlFs6UInt16V_Tg5 *****
### Run SimplifyCFG on $s7partial1AC1fySbxlFs6UInt16V_Tg5
	discovered a new reachable node bb0
***** CSE on function: $s7partial1AC1fySbxlFs6UInt16V_Tg5 *****
SILCSE VISITING:   %2 = metatype $@thick UInt16.Type               // user: %3

SILCSE Adding to value table:   %2 = metatype $@thick UInt16.Type               // user: %3
 ->   %2 = metatype $@thick UInt16.Type               // user: %3

SILCSE VISITING:   %3 = init_existential_metatype %2 : $@thick UInt16.Type, $@thick Any.Type // user: %6

SILCSE VISITING:   %4 = metatype $@thick A.Type                    // user: %5

SILCSE Adding to value table:   %4 = metatype $@thick A.Type                    // user: %5
 ->   %4 = metatype $@thick A.Type                    // user: %5

SILCSE VISITING:   %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6

SILCSE VISITING:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7

SILCSE Adding to value table:   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
 ->   %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7

SILCSE VISITING:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8

SILCSE Adding to value table:   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
 ->   %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8

SILCSE VISITING:   return %7 : $Bool                               // id: %8

*** RLE on function: $s7partial1AC1fySbxlFs6UInt16V_Tg5 ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// specialized A.f<A>(_:)
sil shared [signature_optimized_thunk] [always_inline] @$s7partial1AC1fySbxlFs6UInt16V_Tg5 : $@convention(method) (UInt16, @guaranteed A) -> Bool {
bb0(%0 : $UInt16, %1 : $A):
  %2 = metatype $@thick UInt16.Type               // user: %3
  %3 = init_existential_metatype %2 : $@thick UInt16.Type, $@thick Any.Type // user: %6
  %4 = metatype $@thick A.Type                    // user: %5
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
  return %7 : $Bool                               // id: %8
} // end sil function '$s7partial1AC1fySbxlFs6UInt16V_Tg5'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %7 : $Bool                               // id: %8
Marking as live:
  %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
Marking as live:
  %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
Marking as live:
  %3 = init_existential_metatype %2 : $@thick UInt16.Type, $@thick Any.Type // user: %6
Marking as live:
  %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
Marking as live:
  %4 = metatype $@thick A.Type                    // user: %5
Marking as live:
  %2 = metatype $@thick UInt16.Type               // user: %3
Removing dead argument:
%0 = argument of bb0 : $UInt16
Removing dead argument:
%1 = argument of bb0 : $A
Invalidating caller: $s7partial1AC1fySbxlFs6UInt16V_Tg5
***** CodeMotion on function: $s7partial1AC1fySbxlFs6UInt16V_Tg5 *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a757e70
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1AC1fySbxlFs6UInt16V_Tg5 ***
***** Processing $s7partial1AC1fySbxlFs6UInt16V_Tg5 *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
VISITING:
      %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
VISITING:
      %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
VISITING:
      %4 = metatype $@thick A.Type                    // user: %5
VISITING:
      %3 = init_existential_metatype %2 : $@thick UInt16.Type, $@thick Any.Type // user: %6
VISITING:
      %2 = metatype $@thick UInt16.Type               // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = metatype $@thick UInt16.Type               // user: %3
VISITING:
      %3 = init_existential_metatype %2 : $@thick UInt16.Type, $@thick Any.Type // user: %6
VISITING:
      %4 = metatype $@thick A.Type                    // user: %5
VISITING:
      %5 = init_existential_metatype %4 : $@thick A.Type, $@thick Any.Type // user: %6
VISITING:
      %6 = builtin "is_same_metatype"(%3 : $@thick Any.Type, %5 : $@thick Any.Type) : $Builtin.Int1 // user: %7
VISITING:
      %7 = struct $Bool (%6 : $Builtin.Int1)          // user: %8
VISITING:
      return %7 : $Bool                               // id: %8
**** Computing ARC Matching Sets for $s7partial1AC1fySbxlFs6UInt16V_Tg5 ****

### Run SimplifyCFG on $s7partial1AC1fySbxlFs6UInt16V_Tg5
	discovered a new reachable node bb0
Running on function $s7partial1AC1fySbxlFs6UInt16V_Tg5
***** CodeMotion on function: $s7partial1AC1fySbxlFs6UInt16V_Tg5 *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6a7580d0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s7partial1AC1fySbxlFs6UInt16V_Tg5 ***
*** DSE on function: $s7partial1AC1fySbxlFs6UInt16V_Tg5 ***
*** FSO on function: $s7partial1AC1fySbxlFs6UInt16V_Tg5 ***
  cannot specialize function -> abort
***** Devirtualizer on function:$s7partial1gSbyF *****
    Trying to devirtualize:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %14, %19, %26, %25, %17, %7, %6
    Trying to devirtualize:   %14 = apply %12(%13, %1) : $@convention(method) (UInt16, @guaranteed A) -> Bool // user: %16
    Trying to devirtualize:   %22 = apply %20(%21, %19) : $@convention(method) (UInt16, @guaranteed B) -> Bool // user: %24
    Trying to devirtualize:   %25 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %27
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5

Inline into caller: $s7partial1gSbyF
    inline [1->6] $s7partial1AC1fySbxlFs6UInt16V_Tg5
    inline [1->7] $s7partial1BC1fySbxlFs6UInt16V_Tg5
Invalidating caller: $s7partial1gSbyF
    callee: $s7partial1BC1fySbxlFs6UInt16V_Tg5
    callee: $s7partial1AC1fySbxlFs6UInt16V_Tg5
    callee: $s7partial8makeAorBAA1ACyF
  invalidate $s7partial1gSbyF
** ReleaseDevirtualizer **
Copy Forwarding in Func $s7partial1gSbyF
***** LowerAggregate on function: $s7partial1gSbyF *****
Visiting:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
Visiting:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %27, %26, %20, %7, %6
Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Visiting:   %4 = alloc_stack $UInt16                        // users: %26, %5, %9
Visiting:   store %3 to %4 : $*UInt16                       // id: %5
Visiting:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
Visiting:   checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %7
Visiting:   dealloc_stack %4 : $*UInt16                     // id: %9
Visiting:   return %8 : $Bool                               // id: %10
Visiting:   %12 = metatype $@thick UInt16.Type              // user: %13
Visiting:   %13 = init_existential_metatype %12 : $@thick UInt16.Type, $@thick Any.Type // user: %16
Visiting:   %14 = metatype $@thick A.Type                   // user: %15
Visiting:   %15 = init_existential_metatype %14 : $@thick A.Type, $@thick Any.Type // user: %16
Visiting:   %16 = builtin "is_same_metatype"(%13 : $@thick Any.Type, %15 : $@thick Any.Type) : $Builtin.Int1 // user: %17
Visiting:   %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %19
Visiting:   strong_release %11 : $A                         // id: %18
Visiting:   br bb1(%17 : $Bool)                             // id: %19
Visiting:   checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %20
Visiting:   %22 = integer_literal $Builtin.Int1, 0          // user: %23
Visiting:   %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %25
Visiting:   strong_release %21 : $B                         // id: %24
Visiting:   br bb1(%23 : $Bool)                             // id: %25
Visiting:   %26 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
Visiting:   strong_release %1 : $A                          // id: %27
Visiting:   br bb1(%26 : $Bool)                             // id: %28
***** SROA on function: $s7partial1gSbyF *****
    Visiting use:   %26 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
        Found unknown user, pointer escapes!
** Mem2Reg on function: $s7partial1gSbyF **
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5
*** Memory to register looking at:   %4 = alloc_stack $UInt16                        // users: %26, %5, %9
*** AllocStack is captured by:   %26 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s7partial8makeAorBAA1ACyF -> abort
ExistentialSpecializer Pass: Bail! Due to canSpecializeCalleeFunction.
  %26 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
*** ConstPropagation processing: 
Visiting:   %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %25
    User:   br bb1(%23 : $Bool)                             // id: %25
Visiting:   %22 = integer_literal $Builtin.Int1, 0          // user: %23
    User:   %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %25
Visiting:   %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %25
    User:   br bb1(%23 : $Bool)                             // id: %25
Visiting:   checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %20
Visiting:   %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %19
    User:   br bb1(%17 : $Bool)                             // id: %19
Visiting:   checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %7
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    User:   store %3 to %4 : $*UInt16                       // id: %5
Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
    User:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    User:   store %3 to %4 : $*UInt16                       // id: %5
### Run SimplifyCFG on $s7partial1gSbyF
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5


SILCOMBINE ITERATION #0 on $s7partial1gSbyF
SC: ADDING: 26 instrs to worklist
SC: Visiting:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

SC: Visiting:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %27, %26, %20, %7, %6

SC: Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SC: Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SC: Visiting:   %4 = alloc_stack $UInt16                        // users: %26, %5, %9

SC: Visiting:   store %3 to %4 : $*UInt16                       // id: %5

SC: Visiting:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26

SC: Visiting:   checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %7

SC: Visiting:   checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %20

SC: Visiting:   %26 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28

SC: Visiting:   strong_release %1 : $A                          // id: %27

SC: Visiting:   br bb1(%26 : $Bool)                             // id: %28

SC: Visiting:   dealloc_stack %4 : $*UInt16                     // id: %9

SC: Visiting:   return %8 : $Bool                               // id: %10

SC: Visiting:   %22 = integer_literal $Builtin.Int1, 0          // user: %23

SC: Visiting:   %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %25

SC: Visiting:   strong_release %21 : $B                         // id: %24

SC: Visiting:   br bb1(%23 : $Bool)                             // id: %25

SC: Visiting:   %12 = metatype $@thick UInt16.Type              // user: %13

SC: Visiting:   %13 = init_existential_metatype %12 : $@thick UInt16.Type, $@thick Any.Type // user: %16

SC: Visiting:   %14 = metatype $@thick A.Type                   // user: %15

SC: Visiting:   %15 = init_existential_metatype %14 : $@thick A.Type, $@thick Any.Type // user: %16

SC: Visiting:   %16 = builtin "is_same_metatype"(%13 : $@thick Any.Type, %15 : $@thick Any.Type) : $Builtin.Int1 // user: %17

SC: Visiting:   %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %19

SC: Visiting:   strong_release %11 : $A                         // id: %18

SC: Visiting:   br bb1(%17 : $Bool)                             // id: %19

***** Devirtualizer on function:$s7partial1gSbyF *****
    Trying to devirtualize:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %27, %26, %20, %7, %6
    Trying to devirtualize:   %26 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
***** GenericSpecializer on function:$s7partial1gSbyF *****
### Run SimplifyCFG on $s7partial1gSbyF
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5
***** CSE on function: $s7partial1gSbyF *****
SILCSE VISITING:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

SILCSE Adding to value table:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
 ->   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

SILCSE VISITING:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %27, %26, %20, %7, %6

SILCSE VISITING:   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
 ->   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SILCSE VISITING:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SILCSE Adding to value table:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
 ->   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SILCSE VISITING:   %4 = alloc_stack $UInt16                        // users: %26, %5, %9

SILCSE VISITING:   store %3 to %4 : $*UInt16                       // id: %5

SILCSE VISITING:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26

SILCSE Adding to value table:   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
 ->   %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26

SILCSE VISITING:   checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %7

SILCSE VISITING:   %12 = metatype $@thick UInt16.Type              // user: %13

SILCSE Adding to value table:   %12 = metatype $@thick UInt16.Type              // user: %13
 ->   %12 = metatype $@thick UInt16.Type              // user: %13

SILCSE VISITING:   %13 = init_existential_metatype %12 : $@thick UInt16.Type, $@thick Any.Type // user: %16

SILCSE VISITING:   %14 = metatype $@thick A.Type                   // user: %15

SILCSE Adding to value table:   %14 = metatype $@thick A.Type                   // user: %15
 ->   %14 = metatype $@thick A.Type                   // user: %15

SILCSE VISITING:   %15 = init_existential_metatype %14 : $@thick A.Type, $@thick Any.Type // user: %16

SILCSE VISITING:   %16 = builtin "is_same_metatype"(%13 : $@thick Any.Type, %15 : $@thick Any.Type) : $Builtin.Int1 // user: %17

SILCSE Adding to value table:   %16 = builtin "is_same_metatype"(%13 : $@thick Any.Type, %15 : $@thick Any.Type) : $Builtin.Int1 // user: %17
 ->   %16 = builtin "is_same_metatype"(%13 : $@thick Any.Type, %15 : $@thick Any.Type) : $Builtin.Int1 // user: %17

SILCSE VISITING:   %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %19

SILCSE Adding to value table:   %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %19
 ->   %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %19

SILCSE VISITING:   strong_release %11 : $A                         // id: %18

SILCSE VISITING:   br bb1(%17 : $Bool)                             // id: %19

SILCSE VISITING:   dealloc_stack %4 : $*UInt16                     // id: %9

SILCSE VISITING:   return %8 : $Bool                               // id: %10

SILCSE VISITING:   checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %20

SILCSE VISITING:   %22 = integer_literal $Builtin.Int1, 0          // user: %23

SILCSE Adding to value table:   %22 = integer_literal $Builtin.Int1, 0          // user: %23
 ->   %22 = integer_literal $Builtin.Int1, 0          // user: %23

SILCSE VISITING:   %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %25

SILCSE Adding to value table:   %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %25
 ->   %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %25

SILCSE VISITING:   strong_release %21 : $B                         // id: %24

SILCSE VISITING:   br bb1(%23 : $Bool)                             // id: %25

SILCSE VISITING:   %26 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28

SILCSE VISITING:   strong_release %1 : $A                          // id: %27

SILCSE VISITING:   br bb1(%26 : $Bool)                             // id: %28

*** RLE on function: $s7partial1gSbyF ***
		Looking for trivial roots
Found a new trivial root: bb1
Last visited node: bb5
		Looking for non-trivial roots
Total: 6, Num: 7
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb1
3: bb2
4: bb0
5: bb4
6: bb3
7: bb5
Found roots: bb1 
	discovered a new reachable node nullptr
	discovered a new reachable node bb1
	discovered a new reachable node bb2
	discovered a new reachable node bb0
	discovered a new reachable node bb4
	discovered a new reachable node bb3
	discovered a new reachable node bb5
// g()
sil hidden @$s7partial1gSbyF : $@convention(thin) () -> Bool {
bb0:
  // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %27, %26, %20, %7, %6
  %2 = integer_literal $Builtin.Int16, 9          // user: %3
  %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
  %4 = alloc_stack $UInt16                        // users: %26, %5, %9
  store %3 to %4 : $*UInt16                       // id: %5
  %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
  checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %7

// %8                                             // user: %10
bb1(%8 : $Bool):                                  // Preds: bb5 bb4 bb2
  dealloc_stack %4 : $*UInt16                     // id: %9
  return %8 : $Bool                               // id: %10

// %11                                            // user: %18
bb2(%11 : $A):                                    // Preds: bb0
  %12 = metatype $@thick UInt16.Type              // user: %13
  %13 = init_existential_metatype %12 : $@thick UInt16.Type, $@thick Any.Type // user: %16
  %14 = metatype $@thick A.Type                   // user: %15
  %15 = init_existential_metatype %14 : $@thick A.Type, $@thick Any.Type // user: %16
  %16 = builtin "is_same_metatype"(%13 : $@thick Any.Type, %15 : $@thick Any.Type) : $Builtin.Int1 // user: %17
  %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %19
  strong_release %11 : $A                         // id: %18
  br bb1(%17 : $Bool)                             // id: %19

bb3:                                              // Preds: bb0
  checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %20

// %21                                            // user: %24
bb4(%21 : $B):                                    // Preds: bb3
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %25
  strong_release %21 : $B                         // id: %24
  br bb1(%23 : $Bool)                             // id: %25

bb5:                                              // Preds: bb3
  %26 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
  strong_release %1 : $A                          // id: %27
  br bb1(%26 : $Bool)                             // id: %28
} // end sil function '$s7partial1gSbyF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb1 {4294967295,4294967295} [1]
      [3] bb2 {4294967295,4294967295} [2]
      [3] bb0 {4294967295,4294967295} [2]
      [3] bb4 {4294967295,4294967295} [2]
      [3] bb3 {4294967295,4294967295} [2]
      [3] bb5 {4294967295,4294967295} [2]
Roots: bb1 
Marking as live:
  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %27, %26, %20, %7, %6
Marking as live:
  store %3 to %4 : $*UInt16                       // id: %5
Marking as live:
  dealloc_stack %4 : $*UInt16                     // id: %9
Marking as live:
  return %8 : $Bool                               // id: %10
Marking as live:
  strong_release %11 : $A                         // id: %18
Marking as live:
  checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %7
Marking as live:
  strong_release %21 : $B                         // id: %24
Marking as live:
  checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %20
Marking as live:
  %26 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
Marking as live:
  strong_release %1 : $A                          // id: %27
Marking as live:
  %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
Marking as live:
  %4 = alloc_stack $UInt16                        // users: %26, %5, %9
Marking as live:
%21 = argument of bb4 : $B                        // user: %24
Marking as live:
%11 = argument of bb2 : $A                        // user: %18
Marking as live:
%8 = argument of bb1 : $Bool                      // user: %10
Marking as live:
  br bb1(%26 : $Bool)                             // id: %28
Marking as live:
  br bb1(%23 : $Bool)                             // id: %25
Marking as live:
  %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %25
Marking as live:
  br bb1(%17 : $Bool)                             // id: %19
Marking as live:
  %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %19
Marking as live:
  %16 = builtin "is_same_metatype"(%13 : $@thick Any.Type, %15 : $@thick Any.Type) : $Builtin.Int1 // user: %17
Marking as live:
  %13 = init_existential_metatype %12 : $@thick UInt16.Type, $@thick Any.Type // user: %16
Marking as live:
  %15 = init_existential_metatype %14 : $@thick A.Type, $@thick Any.Type // user: %16
Marking as live:
  %14 = metatype $@thick A.Type                   // user: %15
Marking as live:
  %12 = metatype $@thick UInt16.Type              // user: %13
Marking as live:
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
Marking as live:
  %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Marking as live:
  %2 = integer_literal $Builtin.Int16, 9          // user: %3
Marking as live:
  // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
***** CodeMotion on function: $s7partial1gSbyF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6c9ee600
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#1
    Predecessors (empty if no predecessors):
        BB#1; Ptr: 0x7f9e6c823488
    State Addr: 0x7f9e6c9ee830
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#2
    Predecessors (empty if no predecessors):
        BB#2; Ptr: 0x7f9e6b185930
    State Addr: 0x7f9e6c9eea60
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#3
    Predecessors (empty if no predecessors):
        BB#3; Ptr: 0x7f9e6b185930
    State Addr: 0x7f9e6c9eec90
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#4
    Predecessors (empty if no predecessors):
        BB#4; Ptr: 0x7f9e6c823488
    State Addr: 0x7f9e6c9eeec0
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#5
    Predecessors (empty if no predecessors):
        BB#5; Ptr: 0x7f9e6b185a58
        BB#5; Ptr: 0x7f9e6b185a10
        BB#5; Ptr: 0x7f9e6b1858e8
    State Addr: 0x7f9e6c9ef0f0
    Merging predecessors!
            Merging in rest of predecessors...
    Attempting to move releases into predecessors!
 Sinking values from predecessors.
Processing:   br bb1(%26 : $Bool)                             // id: %28
Continuing scan. Next inst:   strong_release %1 : $A                          // id: %27
Processing:   strong_release %1 : $A                          // id: %27
Continuing scan. Next inst:   strong_release %1 : $A                          // id: %24
Found an identical instruction.Continuing scan. Next inst:   strong_release %1 : $A                          // id: %18
Found an identical instruction.Moving:   strong_release %1 : $A                          // id: %27
Restarting scan. Next inst:   br bb1(%25 : $Bool)                             // id: %26
Processing:   br bb1(%25 : $Bool)                             // id: %26
Continuing scan. Next inst:   %25 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
Processing:   %25 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
Aborting on barrier:   %25 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
    Performing the dataflow!
Invalidating caller: $s7partial1gSbyF
  invalidate $s7partial1gSbyF
*** ARCCM on function: $s7partial1gSbyF ***
Release Root #1   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %25, %20, %7, %6
Release   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %25, %20, %7, %6
  at interference   %16 = init_existential_metatype %15 : $@thick A.Type, $@thick Any.Type // user: %17
Release   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %25, %20, %7, %6
  at interference   %25 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
Release partial merge. Insert at successor: bb1   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %25, %20, %7, %6
Invalidating caller: $s7partial1gSbyF
  invalidate $s7partial1gSbyF
***** Processing $s7partial1gSbyF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 5
Merging Successors!
>>>> Bottom Up!
VISITING:
      dealloc_stack %4 : $*UInt16                     // id: %9
Processing BB#: 4
Merging Successors!
>>>> Bottom Up!
VISITING:
      %18 = struct $Bool (%17 : $Builtin.Int1)        // user: %19
VISITING:
      %17 = builtin "is_same_metatype"(%13 : $@thick Any.Type, %15 : $@thick Any.Type) : $Builtin.Int1 // user: %18
VISITING:
      strong_release %1 : $A                          // id: %16
    REF COUNT DECREMENT! Known Safe: no
VISITING:
      %15 = init_existential_metatype %14 : $@thick A.Type, $@thick Any.Type // user: %17
    Found Potential Use:
          %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
VISITING:
      %14 = metatype $@thick A.Type                   // user: %15
VISITING:
      %13 = init_existential_metatype %12 : $@thick UInt16.Type, $@thick Any.Type // user: %17
VISITING:
      %12 = metatype $@thick UInt16.Type              // user: %13
Processing BB#: 3
Merging Successors!
>>>> Bottom Up!
VISITING:
      %24 = struct $Bool (%23 : $Builtin.Int1)        // user: %25
VISITING:
      %23 = integer_literal $Builtin.Int1, 0          // user: %24
VISITING:
      strong_release %1 : $A                          // id: %22
    REF COUNT DECREMENT! Known Safe: no
Processing BB#: 2
Merging Successors!
>>>> Bottom Up!
VISITING:
      strong_release %1 : $A                          // id: %27
    REF COUNT DECREMENT! Known Safe: no
VISITING:
      %26 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
ALIAS ANALYSIS:
    V1:   %4 = alloc_stack $UInt16                        // users: %26, %5, %9
    V2:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
        After Cast Stripping V1:  %4 = alloc_stack $UInt16                        // users: %26, %5, %9
        After Cast Stripping V2:  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
        Underlying V1:  %4 = alloc_stack $UInt16                        // users: %26, %5, %9
        Underlying V2:  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
recompute escape analysis with UpdateID 9
  >> build graph for $s7partial1gSbyF
  << finished graph for $s7partial1gSbyF
iteration 0
  merge  $s7partial8makeAorBAA1ACyF into $s7partial1gSbyF
  create summary graph for $s7partial1gSbyF
    Found Potential Guaranteed Use:
          %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
Processing BB#: 1
Merging Successors!
            Performing BottomUp Merge.
                Left: MightBeUsed; Right: MightBeDecremented; Result: MightBeDecremented
                V:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
                OtherV:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
>>>> Bottom Up!
Processing BB#: 0
Merging Successors!
            Performing BottomUp Merge.
                Left: MightBeUsed; Right: MightBeDecremented; Result: MightBeDecremented
                V:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
                OtherV:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
>>>> Bottom Up!
VISITING:
      %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
VISITING:
      store %3 to %4 : $*UInt16                       // id: %5
VISITING:
      %4 = alloc_stack $UInt16                        // users: %26, %5, %9
VISITING:
      %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
VISITING:
      %2 = integer_literal $Builtin.Int16, 9          // user: %3
VISITING:
      %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
VISITING:
      // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
VISITING:
      %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
VISITING ENTRANCE APPLY:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
    Initializing state.
VISITING:
      %2 = integer_literal $Builtin.Int16, 9          // user: %3
VISITING:
      %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
VISITING:
      %4 = alloc_stack $UInt16                        // users: %26, %5, %9
VISITING:
      store %3 to %4 : $*UInt16                       // id: %5
VISITING:
      %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
VISITING:
      checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %7
Processing BB#: 1
Merging Predecessors!
    Merging Pred: 0
>>>> Top Down!
VISITING:
      checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %20
Processing BB#: 2
Merging Predecessors!
    Merging Pred: 1
>>>> Top Down!
VISITING:
      %26 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
    Found Potential Guaranteed Use:
          %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
VISITING:
      strong_release %1 : $A                          // id: %27
    REF COUNT DECREMENT!
VISITING:
      br bb1(%26 : $Bool)                             // id: %28
Processing BB#: 3
Merging Predecessors!
    Merging Pred: 1
>>>> Top Down!
VISITING:
      strong_release %1 : $A                          // id: %22
    REF COUNT DECREMENT!
VISITING:
      %23 = integer_literal $Builtin.Int1, 0          // user: %24
VISITING:
      %24 = struct $Bool (%23 : $Builtin.Int1)        // user: %25
VISITING:
      br bb1(%24 : $Bool)                             // id: %25
Processing BB#: 4
Merging Predecessors!
    Merging Pred: 0
>>>> Top Down!
VISITING:
      %12 = metatype $@thick UInt16.Type              // user: %13
VISITING:
      %13 = init_existential_metatype %12 : $@thick UInt16.Type, $@thick Any.Type // user: %17
VISITING:
      %14 = metatype $@thick A.Type                   // user: %15
VISITING:
      %15 = init_existential_metatype %14 : $@thick A.Type, $@thick Any.Type // user: %17
VISITING:
      strong_release %1 : $A                          // id: %16
    REF COUNT DECREMENT!
VISITING:
      %17 = builtin "is_same_metatype"(%13 : $@thick Any.Type, %15 : $@thick Any.Type) : $Builtin.Int1 // user: %18
VISITING:
      %18 = struct $Bool (%17 : $Builtin.Int1)        // user: %19
VISITING:
      br bb1(%18 : $Bool)                             // id: %19
Processing BB#: 5
Merging Predecessors!
    Merging Pred: 2
    Merging Pred: 3
        Performing TopDown Merge.
            Left: MightBeUsed; Right: Incremented; Result: MightBeUsed
            V:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
            OtherV:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
    Merging Pred: 4
        Performing TopDown Merge.
            Left: MightBeUsed; Right: Incremented; Result: MightBeUsed
            V:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
            OtherV:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
>>>> Top Down!
VISITING:
      dealloc_stack %4 : $*UInt16                     // id: %9
VISITING:
      return %8 : $Bool                               // id: %10
**** Computing ARC Matching Sets for $s7partial1gSbyF ****

### Run SimplifyCFG on $s7partial1gSbyF
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5
Running on function $s7partial1gSbyF
***** CodeMotion on function: $s7partial1gSbyF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7f9e6b188e00
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#1
    Predecessors (empty if no predecessors):
        BB#1; Ptr: 0x7f9e6c823488
    State Addr: 0x7f9e6b189030
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#2
    Predecessors (empty if no predecessors):
        BB#2; Ptr: 0x7f9e6b185930
    State Addr: 0x7f9e6b189260
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#3
    Predecessors (empty if no predecessors):
        BB#3; Ptr: 0x7f9e6b185930
    State Addr: 0x7f9e6b189490
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#4
    Predecessors (empty if no predecessors):
        BB#4; Ptr: 0x7f9e6c823488
    State Addr: 0x7f9e6b1896c0
    Merging predecessors!
    Attempting to move releases into predecessors!
    Performing the dataflow!
Visiting BB RPO#5
    Predecessors (empty if no predecessors):
        BB#5; Ptr: 0x7f9e6b185a58
        BB#5; Ptr: 0x7f9e6b185a10
        BB#5; Ptr: 0x7f9e6b1858e8
    State Addr: 0x7f9e6b1898f0
    Merging predecessors!
            Merging in rest of predecessors...
    Attempting to move releases into predecessors!
 Sinking values from predecessors.
Processing:   br bb1(%26 : $Bool)                             // id: %28
Continuing scan. Next inst:   strong_release %1 : $A                          // id: %27
Processing:   strong_release %1 : $A                          // id: %27
Continuing scan. Next inst:   %24 = struct $Bool (%23 : $Builtin.Int1)        // user: %25
Continuing scan. Next inst:   %23 = integer_literal $Builtin.Int1, 0          // user: %24
Continuing scan. Next inst:   strong_release %1 : $A                          // id: %22
Found an identical instruction.Continuing scan. Next inst:   %18 = struct $Bool (%17 : $Builtin.Int1)        // user: %19
Continuing scan. Next inst:   %17 = builtin "is_same_metatype"(%13 : $@thick Any.Type, %15 : $@thick Any.Type) : $Builtin.Int1 // user: %18
Continuing scan. Next inst:   strong_release %1 : $A                          // id: %16
Found an identical instruction.Moving:   strong_release %1 : $A                          // id: %27
Restarting scan. Next inst:   br bb1(%25 : $Bool)                             // id: %26
Processing:   br bb1(%25 : $Bool)                             // id: %26
Continuing scan. Next inst:   %25 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
Processing:   %25 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
Aborting on barrier:   %25 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
    Performing the dataflow!
Invalidating caller: $s7partial1gSbyF
  invalidate $s7partial1gSbyF
*** ARCCM on function: $s7partial1gSbyF ***
*** ARCCM on function: $s7partial1gSbyF ***
Release Root #1   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %25, %20, %7, %6
Release   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %25, %20, %7, %6
  at interference   %16 = init_existential_metatype %15 : $@thick A.Type, $@thick Any.Type // user: %17
Release   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %25, %20, %7, %6
  at interference   %25 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
Release partial merge. Insert at successor: bb1   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %9, %25, %20, %7, %6
Invalidating caller: $s7partial1gSbyF
  invalidate $s7partial1gSbyF
***** Processing $s7partial1gSbyF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 5
Merging Successors!
>>>> Bottom Up!
VISITING:
      dealloc_stack %4 : $*UInt16                     // id: %9
Processing BB#: 4
Merging Successors!
>>>> Bottom Up!
VISITING:
      %18 = struct $Bool (%17 : $Builtin.Int1)        // user: %19
VISITING:
      %17 = builtin "is_same_metatype"(%13 : $@thick Any.Type, %15 : $@thick Any.Type) : $Builtin.Int1 // user: %18
VISITING:
      strong_release %1 : $A                          // id: %16
    REF COUNT DECREMENT! Known Safe: no
VISITING:
      %15 = init_existential_metatype %14 : $@thick A.Type, $@thick Any.Type // user: %17
    Found Potential Use:
          %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
VISITING:
      %14 = metatype $@thick A.Type                   // user: %15
VISITING:
      %13 = init_existential_metatype %12 : $@thick UInt16.Type, $@thick Any.Type // user: %17
VISITING:
      %12 = metatype $@thick UInt16.Type              // user: %13
Processing BB#: 3
Merging Successors!
>>>> Bottom Up!
VISITING:
      %24 = struct $Bool (%23 : $Builtin.Int1)        // user: %25
VISITING:
      %23 = integer_literal $Builtin.Int1, 0          // user: %24
VISITING:
      strong_release %1 : $A                          // id: %22
    REF COUNT DECREMENT! Known Safe: no
Processing BB#: 2
Merging Successors!
>>>> Bottom Up!
VISITING:
      strong_release %1 : $A                          // id: %27
    REF COUNT DECREMENT! Known Safe: no
VISITING:
      %26 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
ALIAS ANALYSIS:
    V1:   %4 = alloc_stack $UInt16                        // users: %26, %5, %9
    V2:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
        After Cast Stripping V1:  %4 = alloc_stack $UInt16                        // users: %26, %5, %9
        After Cast Stripping V2:  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
        Underlying V1:  %4 = alloc_stack $UInt16                        // users: %26, %5, %9
        Underlying V2:  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
recompute escape analysis with UpdateID 10
  >> build graph for $s7partial1gSbyF
  << finished graph for $s7partial1gSbyF
iteration 0
  merge  $s7partial8makeAorBAA1ACyF into $s7partial1gSbyF
  create summary graph for $s7partial1gSbyF
    Found Potential Guaranteed Use:
          %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
Processing BB#: 1
Merging Successors!
            Performing BottomUp Merge.
                Left: MightBeUsed; Right: MightBeDecremented; Result: MightBeDecremented
                V:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
                OtherV:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
>>>> Bottom Up!
Processing BB#: 0
Merging Successors!
            Performing BottomUp Merge.
                Left: MightBeUsed; Right: MightBeDecremented; Result: MightBeDecremented
                V:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
                OtherV:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
>>>> Bottom Up!
VISITING:
      %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
VISITING:
      store %3 to %4 : $*UInt16                       // id: %5
VISITING:
      %4 = alloc_stack $UInt16                        // users: %26, %5, %9
VISITING:
      %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
VISITING:
      %2 = integer_literal $Builtin.Int16, 9          // user: %3
VISITING:
      %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
VISITING:
      // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
VISITING:
      %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
VISITING ENTRANCE APPLY:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
    Initializing state.
VISITING:
      %2 = integer_literal $Builtin.Int16, 9          // user: %3
VISITING:
      %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
VISITING:
      %4 = alloc_stack $UInt16                        // users: %26, %5, %9
VISITING:
      store %3 to %4 : $*UInt16                       // id: %5
VISITING:
      %6 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
VISITING:
      checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %7
Processing BB#: 1
Merging Predecessors!
    Merging Pred: 0
>>>> Top Down!
VISITING:
      checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %20
Processing BB#: 2
Merging Predecessors!
    Merging Pred: 1
>>>> Top Down!
VISITING:
      %26 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
    Found Potential Guaranteed Use:
          %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
VISITING:
      strong_release %1 : $A                          // id: %27
    REF COUNT DECREMENT!
VISITING:
      br bb1(%26 : $Bool)                             // id: %28
Processing BB#: 3
Merging Predecessors!
    Merging Pred: 1
>>>> Top Down!
VISITING:
      strong_release %1 : $A                          // id: %22
    REF COUNT DECREMENT!
VISITING:
      %23 = integer_literal $Builtin.Int1, 0          // user: %24
VISITING:
      %24 = struct $Bool (%23 : $Builtin.Int1)        // user: %25
VISITING:
      br bb1(%24 : $Bool)                             // id: %25
Processing BB#: 4
Merging Predecessors!
    Merging Pred: 0
>>>> Top Down!
VISITING:
      %12 = metatype $@thick UInt16.Type              // user: %13
VISITING:
      %13 = init_existential_metatype %12 : $@thick UInt16.Type, $@thick Any.Type // user: %17
VISITING:
      %14 = metatype $@thick A.Type                   // user: %15
VISITING:
      %15 = init_existential_metatype %14 : $@thick A.Type, $@thick Any.Type // user: %17
VISITING:
      strong_release %1 : $A                          // id: %16
    REF COUNT DECREMENT!
VISITING:
      %17 = builtin "is_same_metatype"(%13 : $@thick Any.Type, %15 : $@thick Any.Type) : $Builtin.Int1 // user: %18
VISITING:
      %18 = struct $Bool (%17 : $Builtin.Int1)        // user: %19
VISITING:
      br bb1(%18 : $Bool)                             // id: %19
Processing BB#: 5
Merging Predecessors!
    Merging Pred: 2
    Merging Pred: 3
        Performing TopDown Merge.
            Left: MightBeUsed; Right: Incremented; Result: MightBeUsed
            V:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
            OtherV:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
    Merging Pred: 4
        Performing TopDown Merge.
            Left: MightBeUsed; Right: Incremented; Result: MightBeUsed
            V:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
            OtherV:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %22, %27, %16, %26, %20, %7, %6
>>>> Top Down!
VISITING:
      dealloc_stack %4 : $*UInt16                     // id: %9
VISITING:
      return %8 : $Bool                               // id: %10
**** Computing ARC Matching Sets for $s7partial1gSbyF ****

    Analyzing Use Graph.        Visiting:   %4 = alloc_stack $UInt16                        // users: %26, %5, %9
        Visiting:   dealloc_stack %4 : $*UInt16                     // id: %9
        Visiting:   store %3 to %4 : $*UInt16                       // id: %5
        Visiting:   %26 = apply %6<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
        Found instruction we can't zap...
    Found a use that cannot be zapped...
*** DSE on function: $s7partial1gSbyF ***
GET MEMORY BEHAVIOR FOR:
      strong_release %1 : $A                          // id: %16
      %4 = alloc_stack $UInt16                        // users: %26, %5, %9
GET MEMORY BEHAVIOR FOR:
      strong_release %1 : $A                          // id: %22
      %4 = alloc_stack $UInt16                        // users: %26, %5, %9
GET MEMORY BEHAVIOR FOR:
      strong_release %1 : $A                          // id: %27
      %4 = alloc_stack $UInt16                        // users: %26, %5, %9
*** FSO on function: $s7partial1gSbyF ***
*** Optimizing the module (LateLoopOpt) *** 
Running DeadFuncElimination
running dead function elimination
running function elimination
  anchor function: main
  anchor function: $s7partial1ACACycfC
  anchor function: $s7partial1ACACycfc
  anchor function: $s7partial1AC1fySbxlF
  anchor function: $s7partial1ACfd
  anchor function: $s7partial1ACfD
  anchor function: $s7partial1BC1fySbxlF
  anchor function: $s7partial1BCfd
  anchor function: $s7partial1BCfD
  anchor function: $s7partial1BCACycfC
  anchor function: $s7partial1BCACycfc
  anchor function: $s7partial8makeAorBAA1ACyF
  anchor function: $s7partial1gSbyF
    scan function $s7partial1gSbyF
    scan function $s7partial8makeAorBAA1ACyF
    scan function $s7partial1BCACycfc
    scan function $s7partial1BCfd
    scan function $s7partial1ACfd
    scan function $s7partial1ACACycfc
    scan function main
    scan function $s7partial1BCfD
    scan function $s7partial1ACfD
    scan function $s7partial1BC1fySbxlF
    scan function $s7partial1AC1fySbxlF
    scan function $s7partial1AC1fySbxlFTf4dd_n
    scan function $s7partial1BCACycfC
    scan function $s7partial1ACACycfC
  erase dead function $s7partial1BC1fySbxlFTf4dd_n
Invalidating caller: $s7partial1BC1fySbxlFTf4dd_n
  invalidate $s7partial1BC1fySbxlFTf4dd_n
PMVerifierAnalysis. Delete: $s7partial1BC1fySbxlFTf4dd_n
  erase dead function $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
Invalidating caller: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
  invalidate $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
PMVerifierAnalysis. Delete: $s7partial1AC1fySbxlFTf4dd_ns6UInt16V_Tg5
  erase dead function $s7partial1BC1fySbxlFs6UInt16V_Tg5
Invalidating caller: $s7partial1BC1fySbxlFs6UInt16V_Tg5
PMVerifierAnalysis. Delete: $s7partial1BC1fySbxlFs6UInt16V_Tg5
  erase dead function $s7partial1AC1fySbxlFs6UInt16V_Tg5
Invalidating caller: $s7partial1AC1fySbxlFs6UInt16V_Tg5
PMVerifierAnalysis. Delete: $s7partial1AC1fySbxlFs6UInt16V_Tg5
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
Running AccessEnforcementReleaseSinking on main
Running local AccessEnforcementOpts on main
Skipping AccessConflictAndMergeAnalysis...
No loops in main
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main


SILCOMBINE ITERATION #0 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

### Run SimplifyCFG on main
	discovered a new reachable node bb0
*** ARCCM on function: main ***
Running AccessEnforcementReleaseSinking on main
Running local AccessEnforcementOpts on main
Skipping AccessConflictAndMergeAnalysis...
Running AccessEnforcementReleaseSinking on $s7partial1ACACycfC
Running local AccessEnforcementOpts on $s7partial1ACACycfC
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1ACACycfC
// A.__allocating_init()
sil hidden [exact_self_class] @$s7partial1ACACycfC : $@convention(method) (@thick A.Type) -> @owned A {
bb0(%0 : $@thick A.Type):
  %1 = alloc_ref $A                               // users: %3, %2
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
  return %1 : $A                                  // id: %3
} // end sil function '$s7partial1ACACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $A                                  // id: %3
Marking as live:
  %1 = alloc_ref $A                               // users: %3, %2
Marking as live:
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
Removing dead argument:
%0 = argument of bb0 : $@thick A.Type
Invalidating caller: $s7partial1ACACycfC
  invalidate $s7partial1ACACycfC


SILCOMBINE ITERATION #0 on $s7partial1ACACycfC
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %1 = alloc_ref $A                               // users: %3, %2

SC: Visiting:   debug_value %1 : $A, let, name "self", argno 1  // id: %2

SC: Visiting:   return %1 : $A                                  // id: %3

### Run SimplifyCFG on $s7partial1ACACycfC
	discovered a new reachable node bb0
*** ARCCM on function: $s7partial1ACACycfC ***
Running AccessEnforcementReleaseSinking on $s7partial1ACACycfC
Running local AccessEnforcementOpts on $s7partial1ACACycfC
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1ACACycfc
*** ARCCM on function: $s7partial1ACACycfc ***
Running AccessEnforcementReleaseSinking on $s7partial1AC1fySbxlFTf4dd_n
Running local AccessEnforcementOpts on $s7partial1AC1fySbxlFTf4dd_n
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1AC1fySbxlFTf4dd_n
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1AC1fySbxlFTf4dd_n
*** ARCCM on function: $s7partial1AC1fySbxlFTf4dd_n ***
Running AccessEnforcementReleaseSinking on $s7partial1AC1fySbxlF
Found a barrier   %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
, clearing last seen end_access
Running local AccessEnforcementOpts on $s7partial1AC1fySbxlF
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1AC1fySbxlF
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1AC1fySbxlF
// A.f<A>(_:)
sil hidden [signature_optimized_thunk] [always_inline] @$s7partial1AC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed A) -> Bool {
bb0(%0 : $*T, %1 : $A):
  // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3
  %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1AC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
Marking as live:
  return %3 : $Bool                               // id: %4
Marking as live:
  // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $A
Invalidating caller: $s7partial1AC1fySbxlF
    callee: $s7partial1AC1fySbxlFTf4dd_n


SILCOMBINE ITERATION #0 on $s7partial1AC1fySbxlF
SC: ADDING: 3 instrs to worklist
SC: Visiting:   // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3

SC: Visiting:   %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4

### Run SimplifyCFG on $s7partial1AC1fySbxlF
	discovered a new reachable node bb0
*** ARCCM on function: $s7partial1AC1fySbxlF ***
Running AccessEnforcementReleaseSinking on $s7partial1AC1fySbxlF
Found a barrier   %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
, clearing last seen end_access
Running local AccessEnforcementOpts on $s7partial1AC1fySbxlF
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1ACfd
*** ARCCM on function: $s7partial1ACfd ***
No loops in $s7partial1ACfD
*** ARCCM on function: $s7partial1ACfD ***
Running AccessEnforcementReleaseSinking on $s7partial1BC1fySbxlF
Running local AccessEnforcementOpts on $s7partial1BC1fySbxlF
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1BC1fySbxlF
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1BC1fySbxlF
// B.f<A>(_:)
sil hidden [signature_optimized_thunk] [always_inline] @$s7partial1BC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed B) -> Bool {
bb0(%0 : $*T, %1 : $B):
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1BC1fySbxlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Bool                               // id: %4
Marking as live:
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
Removing dead argument:
%0 = argument of bb0 : $*T
Removing dead argument:
%1 = argument of bb0 : $B
Invalidating caller: $s7partial1BC1fySbxlF


SILCOMBINE ITERATION #0 on $s7partial1BC1fySbxlF
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int1, 0           // user: %3

SC: Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4

### Run SimplifyCFG on $s7partial1BC1fySbxlF
	discovered a new reachable node bb0
*** ARCCM on function: $s7partial1BC1fySbxlF ***
Running AccessEnforcementReleaseSinking on $s7partial1BC1fySbxlF
Running local AccessEnforcementOpts on $s7partial1BC1fySbxlF
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1BCfd
*** ARCCM on function: $s7partial1BCfd ***
No loops in $s7partial1BCfD
*** ARCCM on function: $s7partial1BCfD ***
Running AccessEnforcementReleaseSinking on $s7partial1BCACycfC
Running local AccessEnforcementOpts on $s7partial1BCACycfC
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1BCACycfC
// B.__allocating_init()
sil hidden [exact_self_class] @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B {
bb0(%0 : $@thick B.Type):
  %1 = alloc_ref $B                               // user: %2
  return %1 : $B                                  // id: %2
} // end sil function '$s7partial1BCACycfC'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %1 : $B                                  // id: %2
Marking as live:
  %1 = alloc_ref $B                               // user: %2
Removing dead argument:
%0 = argument of bb0 : $@thick B.Type
Invalidating caller: $s7partial1BCACycfC
  invalidate $s7partial1BCACycfC
  invalidate $s7partial1BCACycfC


SILCOMBINE ITERATION #0 on $s7partial1BCACycfC
SC: ADDING: 2 instrs to worklist
SC: Visiting:   %1 = alloc_ref $B                               // user: %2

SC: Visiting:   return %1 : $B                                  // id: %2

### Run SimplifyCFG on $s7partial1BCACycfC
	discovered a new reachable node bb0
*** ARCCM on function: $s7partial1BCACycfC ***
Running AccessEnforcementReleaseSinking on $s7partial1BCACycfC
Running local AccessEnforcementOpts on $s7partial1BCACycfC
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1BCACycfc
*** ARCCM on function: $s7partial1BCACycfc ***
No loops in $s7partial8makeAorBAA1ACyF
*** ARCCM on function: $s7partial8makeAorBAA1ACyF ***
Invalidating caller: $s7partial1gSbyF
    callee: $s7partial8makeAorBAA1ACyF
  invalidate $s7partial1gSbyF
Running AccessEnforcementReleaseSinking on $s7partial1gSbyF
Found a barrier   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %21, %27, %15, %26, %19, %6, %25
, clearing last seen end_access
Found a barrier   dealloc_stack %4 : $*UInt16                     // id: %8
, clearing last seen end_access
Found a sinkable instruction   strong_release %1 : $A                          // id: %15

Cannot be sunk: no open barrier-less end_access found
Found a sinkable instruction   strong_release %1 : $A                          // id: %21

Cannot be sunk: no open barrier-less end_access found
Found a sinkable instruction   strong_release %1 : $A                          // id: %27

Cannot be sunk: no open barrier-less end_access found
Found a barrier   %26 = apply %25<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
, clearing last seen end_access
Running local AccessEnforcementOpts on $s7partial1gSbyF
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s7partial1gSbyF
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
    Succ: bb2 RPONum: 4
    Succ: bb3 RPONum: 1
Checking Preds for Back Edges

Visiting BB: bb3 RPO: 1
    Succ: bb4 RPONum: 3
    Succ: bb5 RPONum: 2
Checking Preds for Back Edges

Visiting BB: bb5 RPO: 2
    Succ: bb1 RPONum: 5
Checking Preds for Back Edges

Visiting BB: bb4 RPO: 3
    Succ: bb1 RPONum: 5
Checking Preds for Back Edges

Visiting BB: bb2 RPO: 4
    Succ: bb1 RPONum: 5
Checking Preds for Back Edges

Visiting BB: bb1 RPO: 5
Checking Preds for Back Edges

Initializing Loop Region 6
Skipping AccessConflictAndMergeAnalysis...
No loops in $s7partial1gSbyF
### Run SimplifyCFG on $s7partial1gSbyF
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5
// g()
sil hidden @$s7partial1gSbyF : $@convention(thin) () -> Bool {
bb0:
  // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %21, %27, %15, %26, %19, %6, %25
  %2 = integer_literal $Builtin.Int16, 9          // user: %3
  %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
  %4 = alloc_stack $UInt16                        // users: %26, %5, %8
  store %3 to %4 : $*UInt16                       // id: %5
  checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %6

// %7                                             // user: %9
bb1(%7 : $Bool):                                  // Preds: bb5 bb4 bb2
  dealloc_stack %4 : $*UInt16                     // id: %8
  return %7 : $Bool                               // id: %9

bb2(%10 : $A):                                    // Preds: bb0
  %11 = metatype $@thick UInt16.Type              // user: %12
  %12 = init_existential_metatype %11 : $@thick UInt16.Type, $@thick Any.Type // user: %16
  %13 = metatype $@thick A.Type                   // user: %14
  %14 = init_existential_metatype %13 : $@thick A.Type, $@thick Any.Type // user: %16
  strong_release %1 : $A                          // id: %15
  %16 = builtin "is_same_metatype"(%12 : $@thick Any.Type, %14 : $@thick Any.Type) : $Builtin.Int1 // user: %17
  %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %18
  br bb1(%17 : $Bool)                             // id: %18

bb3:                                              // Preds: bb0
  checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %19

bb4(%20 : $B):                                    // Preds: bb3
  strong_release %1 : $A                          // id: %21
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %24
  br bb1(%23 : $Bool)                             // id: %24

bb5:                                              // Preds: bb3
  %25 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
  %26 = apply %25<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
  strong_release %1 : $A                          // id: %27
  br bb1(%26 : $Bool)                             // id: %28
} // end sil function '$s7partial1gSbyF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb1 {4294967295,4294967295} [1]
      [3] bb2 {4294967295,4294967295} [2]
      [3] bb0 {4294967295,4294967295} [2]
      [3] bb4 {4294967295,4294967295} [2]
      [3] bb3 {4294967295,4294967295} [2]
      [3] bb5 {4294967295,4294967295} [2]
Roots: bb1 
Marking as live:
  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %21, %27, %15, %26, %19, %6, %25
Marking as live:
  store %3 to %4 : $*UInt16                       // id: %5
Marking as live:
  dealloc_stack %4 : $*UInt16                     // id: %8
Marking as live:
  return %7 : $Bool                               // id: %9
Marking as live:
  strong_release %1 : $A                          // id: %15
Marking as live:
  checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %6
Marking as live:
  strong_release %1 : $A                          // id: %21
Marking as live:
  checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %19
Marking as live:
  %26 = apply %25<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
Marking as live:
  strong_release %1 : $A                          // id: %27
Marking as live:
  %25 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
Marking as live:
  %4 = alloc_stack $UInt16                        // users: %26, %5, %8
Marking as live:
%7 = argument of bb1 : $Bool                      // user: %9
Marking as live:
  br bb1(%26 : $Bool)                             // id: %28
Marking as live:
  br bb1(%23 : $Bool)                             // id: %24
Marking as live:
  %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %24
Marking as live:
  br bb1(%17 : $Bool)                             // id: %18
Marking as live:
  %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %18
Marking as live:
  %16 = builtin "is_same_metatype"(%12 : $@thick Any.Type, %14 : $@thick Any.Type) : $Builtin.Int1 // user: %17
Marking as live:
  %12 = init_existential_metatype %11 : $@thick UInt16.Type, $@thick Any.Type // user: %16
Marking as live:
  %14 = init_existential_metatype %13 : $@thick A.Type, $@thick Any.Type // user: %16
Marking as live:
  %13 = metatype $@thick A.Type                   // user: %14
Marking as live:
  %11 = metatype $@thick UInt16.Type              // user: %12
Marking as live:
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
Marking as live:
  %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Marking as live:
  %2 = integer_literal $Builtin.Int16, 9          // user: %3
Marking as live:
  // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
Removing dead argument:
%10 = argument of bb2 : $A
Removing dead argument:
%20 = argument of bb4 : $B
Invalidating caller: $s7partial1gSbyF
  invalidate $s7partial1gSbyF


SILCOMBINE ITERATION #0 on $s7partial1gSbyF
SC: ADDING: 26 instrs to worklist
SC: Visiting:   // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1

SC: Visiting:   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %21, %27, %15, %26, %19, %6, %25

SC: Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SC: Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SC: Visiting:   %4 = alloc_stack $UInt16                        // users: %26, %5, %8

SC: Visiting:   store %3 to %4 : $*UInt16                       // id: %5

SC: Visiting:   checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %6

SC: Visiting:   checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %19

SC: Visiting:   %25 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26

SC: Visiting:   %26 = apply %25<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28

SC: Visiting:   strong_release %1 : $A                          // id: %27

SC: Visiting:   br bb1(%26 : $Bool)                             // id: %28

SC: Visiting:   dealloc_stack %4 : $*UInt16                     // id: %8

SC: Visiting:   return %7 : $Bool                               // id: %9

SC: Visiting:   strong_release %1 : $A                          // id: %21

SC: Visiting:   %22 = integer_literal $Builtin.Int1, 0          // user: %23

SC: Visiting:   %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %24

SC: Visiting:   br bb1(%23 : $Bool)                             // id: %24

SC: Visiting:   %11 = metatype $@thick UInt16.Type              // user: %12

SC: Visiting:   %12 = init_existential_metatype %11 : $@thick UInt16.Type, $@thick Any.Type // user: %16

SC: Visiting:   %13 = metatype $@thick A.Type                   // user: %14

SC: Visiting:   %14 = init_existential_metatype %13 : $@thick A.Type, $@thick Any.Type // user: %16

SC: Visiting:   strong_release %1 : $A                          // id: %15

SC: Visiting:   %16 = builtin "is_same_metatype"(%12 : $@thick Any.Type, %14 : $@thick Any.Type) : $Builtin.Int1 // user: %17

SC: Visiting:   %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %18

SC: Visiting:   br bb1(%17 : $Bool)                             // id: %18

### Run SimplifyCFG on $s7partial1gSbyF
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5
*** ARCCM on function: $s7partial1gSbyF ***
Release Root #1   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %21, %27, %15, %26, %19, %6, %25
Release   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %21, %27, %15, %26, %19, %6, %25
  at interference   %14 = init_existential_metatype %13 : $@thick A.Type, $@thick Any.Type // user: %16
Release   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %21, %27, %15, %26, %19, %6, %25
  at interference   %26 = apply %25<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
Release partial merge. Insert at successor: bb1   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %21, %27, %15, %26, %19, %6, %25
Invalidating caller: $s7partial1gSbyF
  invalidate $s7partial1gSbyF
Running AccessEnforcementReleaseSinking on $s7partial1gSbyF
Found a barrier   %1 = apply %0() : $@convention(thin) () -> @owned A // users: %21, %27, %15, %26, %19, %6, %25
, clearing last seen end_access
Found a barrier   dealloc_stack %4 : $*UInt16                     // id: %8
, clearing last seen end_access
Found a sinkable instruction   strong_release %1 : $A                          // id: %15

Cannot be sunk: no open barrier-less end_access found
Found a sinkable instruction   strong_release %1 : $A                          // id: %21

Cannot be sunk: no open barrier-less end_access found
Found a sinkable instruction   strong_release %1 : $A                          // id: %27

Cannot be sunk: no open barrier-less end_access found
Found a barrier   %26 = apply %25<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
, clearing last seen end_access
Running local AccessEnforcementOpts on $s7partial1gSbyF
Skipping AccessConflictAndMergeAnalysis...
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
No loops in main
No loops in $s7partial1ACACycfC
No loops in $s7partial1AC1fySbxlF
No loops in $s7partial1BC1fySbxlF
No loops in $s7partial1BCACycfC
No loops in $s7partial1gSbyF
*** Optimizing the module (SIL Debug Info Generator) *** 
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
  return %3 : $Int32                              // id: %4
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick A.Type
Input types for SIL function type @convention(method) (@thick A.Type) -> @owned A:
$@thick A.Type
  return %1 : $A                                  // id: %3
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> @owned A:
$A
  return %0 : $A                                  // id: %2
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$A
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool:
$*τ_0_0
$A
  return %3 : $Bool                               // id: %4
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@guaranteed A) -> @owned Builtin.NativeObject:
$A
  return %2 : $Builtin.NativeObject               // id: %3
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> ():
$A
  return %4 : $()                                 // id: %5
function return type: $()
return inst type: $()
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$B
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool:
$*τ_0_0
$B
  return %3 : $Bool                               // id: %4
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@guaranteed B) -> @owned Builtin.NativeObject:
$B
  return %2 : $Builtin.NativeObject               // id: %3
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> ():
$B
  return %4 : $()                                 // id: %5
function return type: $()
return inst type: $()
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick B.Type
Input types for SIL function type @convention(method) (@thick B.Type) -> @owned B:
$@thick B.Type
  return %1 : $B                                  // id: %2
function return type: $B
return inst type: $B
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> @owned B:
$B
  return %0 : $B                                  // id: %1
function return type: $B
return inst type: $B
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> @owned A:
  return %1 : $A                                  // id: %2
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> Bool:
  return %7 : $Bool                               // id: %9
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) <τ_0_0> () -> Bool:
  return %5 : $Bool                               // id: %6
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** Checking witness tables for duplicates ***
*** Checking default witness tables for duplicates ***
*** Checking property descriptors ***
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
  return %3 : $Int32                              // id: %4
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick A.Type
Input types for SIL function type @convention(method) (@thick A.Type) -> @owned A:
$@thick A.Type
  return %1 : $A                                  // id: %3
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> @owned A:
$A
  return %0 : $A                                  // id: %2
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$A
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool:
$*τ_0_0
$A
  return %3 : $Bool                               // id: %4
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@guaranteed A) -> @owned Builtin.NativeObject:
$A
  return %2 : $Builtin.NativeObject               // id: %3
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
	discovered a new reachable node bb0
Argument types for entry point BB:
$A
Input types for SIL function type @convention(method) (@owned A) -> ():
$A
  return %4 : $()                                 // id: %5
function return type: $()
return inst type: $()
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
$B
Input types for SIL function type @convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed B) -> Bool:
$*τ_0_0
$B
  return %3 : $Bool                               // id: %4
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@guaranteed B) -> @owned Builtin.NativeObject:
$B
  return %2 : $Builtin.NativeObject               // id: %3
function return type: $Builtin.NativeObject
return inst type: $Builtin.NativeObject
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> ():
$B
  return %4 : $()                                 // id: %5
function return type: $()
return inst type: $()
	discovered a new reachable node bb0
Argument types for entry point BB:
$@thick B.Type
Input types for SIL function type @convention(method) (@thick B.Type) -> @owned B:
$@thick B.Type
  return %1 : $B                                  // id: %2
function return type: $B
return inst type: $B
	discovered a new reachable node bb0
Argument types for entry point BB:
$B
Input types for SIL function type @convention(method) (@owned B) -> @owned B:
$B
  return %0 : $B                                  // id: %1
function return type: $B
return inst type: $B
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> @owned A:
  return %1 : $A                                  // id: %2
function return type: $A
return inst type: $A
	discovered a new reachable node bb0
	discovered a new reachable node bb2
	discovered a new reachable node bb1
	discovered a new reachable node bb3
	discovered a new reachable node bb4
	discovered a new reachable node bb5
Argument types for entry point BB:
Input types for SIL function type @convention(thin) () -> Bool:
  return %7 : $Bool                               // id: %9
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
Input types for SIL function type @convention(thin) <τ_0_0> () -> Bool:
  return %5 : $Bool                               // id: %6
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** Checking witness tables for duplicates ***
*** Checking default witness tables for duplicates ***
*** Checking property descriptors ***
CallerAnalysis: Creating caller info for: main
CallerAnalysis: Creating caller info for: $s7partial1ACACycfC
CallerAnalysis: Creating caller info for: $s7partial1ACACycfc
CallerAnalysis: Creating caller info for: $s7partial1AC1fySbxlF
CallerAnalysis: Creating caller info for: $s7partial1ACfd
CallerAnalysis: Creating caller info for: $s7partial1ACfD
CallerAnalysis: Creating caller info for: $s7partial1BC1fySbxlF
CallerAnalysis: Creating caller info for: $s7partial1BCfd
CallerAnalysis: Creating caller info for: $s7partial1BCfD
CallerAnalysis: Creating caller info for: $s7partial1BCACycfC
CallerAnalysis: Creating caller info for: $s7partial1BCACycfc
CallerAnalysis: Creating caller info for: $s7partial8makeAorBAA1ACyF
CallerAnalysis: Creating caller info for: $s7partial1gSbyF
CallerAnalysis: Creating caller info for: $s7partial1AC1fySbxlFTf4dd_n
PMVerifierAnalysis. Add: main
PMVerifierAnalysis. Add: $s7partial1ACACycfC
PMVerifierAnalysis. Add: $s7partial1ACACycfc
PMVerifierAnalysis. Add: $s7partial1AC1fySbxlF
PMVerifierAnalysis. Add: $s7partial1ACfd
PMVerifierAnalysis. Add: $s7partial1ACfD
PMVerifierAnalysis. Add: $s7partial1BC1fySbxlF
PMVerifierAnalysis. Add: $s7partial1BCfd
PMVerifierAnalysis. Add: $s7partial1BCfD
PMVerifierAnalysis. Add: $s7partial1BCACycfC
PMVerifierAnalysis. Add: $s7partial1BCACycfc
PMVerifierAnalysis. Add: $s7partial8makeAorBAA1ACyF
PMVerifierAnalysis. Add: $s7partial1gSbyF
PMVerifierAnalysis. Add: $s7partial1AC1fySbxlFTf4dd_n
*** Optimizing the module (Address Lowering) *** 
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
CallerAnalysis: Creating caller info for: main
CallerAnalysis: Creating caller info for: $s7partial1ACACycfC
CallerAnalysis: Creating caller info for: $s7partial1ACACycfc
CallerAnalysis: Creating caller info for: $s7partial1AC1fySbxlF
CallerAnalysis: Creating caller info for: $s7partial1ACfd
CallerAnalysis: Creating caller info for: $s7partial1ACfD
CallerAnalysis: Creating caller info for: $s7partial1BC1fySbxlF
CallerAnalysis: Creating caller info for: $s7partial1BCfd
CallerAnalysis: Creating caller info for: $s7partial1BCfD
CallerAnalysis: Creating caller info for: $s7partial1BCACycfC
CallerAnalysis: Creating caller info for: $s7partial1BCACycfc
CallerAnalysis: Creating caller info for: $s7partial8makeAorBAA1ACyF
CallerAnalysis: Creating caller info for: $s7partial1gSbyF
CallerAnalysis: Creating caller info for: $s7partial1AC1fySbxlFTf4dd_n
PMVerifierAnalysis. Add: main
PMVerifierAnalysis. Add: $s7partial1ACACycfC
PMVerifierAnalysis. Add: $s7partial1ACACycfc
PMVerifierAnalysis. Add: $s7partial1AC1fySbxlF
PMVerifierAnalysis. Add: $s7partial1ACfd
PMVerifierAnalysis. Add: $s7partial1ACfD
PMVerifierAnalysis. Add: $s7partial1BC1fySbxlF
PMVerifierAnalysis. Add: $s7partial1BCfd
PMVerifierAnalysis. Add: $s7partial1BCfD
PMVerifierAnalysis. Add: $s7partial1BCACycfC
PMVerifierAnalysis. Add: $s7partial1BCACycfc
PMVerifierAnalysis. Add: $s7partial8makeAorBAA1ACyF
PMVerifierAnalysis. Add: $s7partial1gSbyF
PMVerifierAnalysis. Add: $s7partial1AC1fySbxlFTf4dd_n
*** Optimizing the module (IRGen Preparation) *** 
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
Not hoisting   %4 = alloc_stack $UInt16                        // users: %26, %5, %8

REWRITING: main// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

Invalidating caller: main

REWRITING: $s7partial1ACACycfC// A.__allocating_init()
sil hidden [exact_self_class] @$s7partial1ACACycfC : $@convention(method) (@thick A.Type) -> @owned A {
bb0(%0 : $@thick A.Type):
  %1 = alloc_ref $A                               // users: %3, %2
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
  return %1 : $A                                  // id: %3
} // end sil function '$s7partial1ACACycfC'

Invalidating caller: $s7partial1ACACycfC

REWRITING: $s7partial1ACACycfc// A.init()
sil hidden @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A {
// %0                                             // users: %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  return %0 : $A                                  // id: %2
} // end sil function '$s7partial1ACACycfc'

Invalidating caller: $s7partial1ACACycfc

REWRITING: $s7partial1AC1fySbxlF// A.f<A>(_:)
sil hidden [signature_optimized_thunk] [always_inline] @$s7partial1AC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed A) -> Bool {
bb0(%0 : $*T, %1 : $A):
  // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3
  %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1AC1fySbxlF'

Invalidating caller: $s7partial1AC1fySbxlF

REWRITING: $s7partial1ACfd// A.deinit
sil hidden @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject {
// %0                                             // users: %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function '$s7partial1ACfd'

Invalidating caller: $s7partial1ACfd

REWRITING: $s7partial1ACfD// A.__deallocating_deinit
sil hidden @$s7partial1ACfD : $@convention(method) (@owned A) -> () {
// %0                                             // users: %3, %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  debug_value %0 : $A, let, name "self", argno 1  // id: %2
  dealloc_ref %0 : $A                             // id: %3
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function '$s7partial1ACfD'

Invalidating caller: $s7partial1ACfD

REWRITING: $s7partial1BC1fySbxlF// B.f<A>(_:)
sil hidden [signature_optimized_thunk] [always_inline] @$s7partial1BC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed B) -> Bool {
bb0(%0 : $*T, %1 : $B):
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1BC1fySbxlF'

Invalidating caller: $s7partial1BC1fySbxlF

REWRITING: $s7partial1BCfd// B.deinit
sil hidden @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject {
// %0                                             // users: %2, %1
bb0(%0 : $B):
  debug_value %0 : $B, let, name "self", argno 1  // id: %1
  %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function '$s7partial1BCfd'

Invalidating caller: $s7partial1BCfd

REWRITING: $s7partial1BCfD// B.__deallocating_deinit
sil hidden @$s7partial1BCfD : $@convention(method) (@owned B) -> () {
// %0                                             // users: %3, %2, %1
bb0(%0 : $B):
  debug_value %0 : $B, let, name "self", argno 1  // id: %1
  debug_value %0 : $B, let, name "self", argno 1  // id: %2
  dealloc_ref %0 : $B                             // id: %3
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function '$s7partial1BCfD'

Invalidating caller: $s7partial1BCfD

REWRITING: $s7partial1BCACycfC// B.__allocating_init()
sil hidden [exact_self_class] @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B {
bb0(%0 : $@thick B.Type):
  %1 = alloc_ref $B                               // user: %2
  return %1 : $B                                  // id: %2
} // end sil function '$s7partial1BCACycfC'

Invalidating caller: $s7partial1BCACycfC

REWRITING: $s7partial1BCACycfc// B.init()
sil hidden @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B {
// %0                                             // user: %1
bb0(%0 : $B):
  return %0 : $B                                  // id: %1
} // end sil function '$s7partial1BCACycfc'

Invalidating caller: $s7partial1BCACycfc

REWRITING: $s7partial8makeAorBAA1ACyF// makeAorB()
sil hidden [noinline] @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A {
bb0:
  %0 = alloc_ref $B                               // user: %1
  %1 = upcast %0 : $B to $A                       // user: %2
  return %1 : $A                                  // id: %2
} // end sil function '$s7partial8makeAorBAA1ACyF'

Invalidating caller: $s7partial8makeAorBAA1ACyF

REWRITING: $s7partial1gSbyF// g()
sil hidden @$s7partial1gSbyF : $@convention(thin) () -> Bool {
bb0:
  // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %21, %27, %15, %26, %19, %6, %25
  %2 = integer_literal $Builtin.Int16, 9          // user: %3
  %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
  %4 = alloc_stack $UInt16                        // users: %26, %5, %8
  store %3 to %4 : $*UInt16                       // id: %5
  checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %6

// %7                                             // user: %9
bb1(%7 : $Bool):                                  // Preds: bb5 bb4 bb2
  dealloc_stack %4 : $*UInt16                     // id: %8
  return %7 : $Bool                               // id: %9

bb2(%10 : $A):                                    // Preds: bb0
  %11 = metatype $@thick UInt16.Type              // user: %12
  %12 = init_existential_metatype %11 : $@thick UInt16.Type, $@thick Any.Type // user: %16
  %13 = metatype $@thick A.Type                   // user: %14
  %14 = init_existential_metatype %13 : $@thick A.Type, $@thick Any.Type // user: %16
  strong_release %1 : $A                          // id: %15
  %16 = builtin "is_same_metatype"(%12 : $@thick Any.Type, %14 : $@thick Any.Type) : $Builtin.Int1 // user: %17
  %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %18
  br bb1(%17 : $Bool)                             // id: %18

bb3:                                              // Preds: bb0
  checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %19

bb4(%20 : $B):                                    // Preds: bb3
  strong_release %1 : $A                          // id: %21
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %24
  br bb1(%23 : $Bool)                             // id: %24

bb5:                                              // Preds: bb3
  %25 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
  %26 = apply %25<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
  strong_release %1 : $A                          // id: %27
  br bb1(%26 : $Bool)                             // id: %28
} // end sil function '$s7partial1gSbyF'

Invalidating caller: $s7partial1gSbyF

REWRITING: $s7partial1AC1fySbxlFTf4dd_n// specialized A.f<A>(_:)
sil shared @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <T> () -> Bool {
bb0:
  %0 = metatype $@thick T.Type                    // user: %1
  %1 = init_existential_metatype %0 : $@thick T.Type, $@thick Any.Type // user: %4
  %2 = metatype $@thick A.Type                    // user: %3
  %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4
  %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5
  %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
  return %5 : $Bool                               // id: %6
} // end sil function '$s7partial1AC1fySbxlFTf4dd_n'

Invalidating caller: $s7partial1AC1fySbxlFTf4dd_n
emitting SIL function: @main
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'


define i32 @main(i32, i8**) #0 {
  %3 = alloca i1
  %4 = bitcast i8** %1 to i8*
  ret i32 0
}
emitting SIL function: @$s7partial1ACACycfC
// A.__allocating_init()
sil hidden [exact_self_class] @$s7partial1ACACycfC : $@convention(method) (@thick A.Type) -> @owned A {
bb0(%0 : $@thick A.Type):
  %1 = alloc_ref $A                               // users: %3, %2
  debug_value %1 : $A, let, name "self", argno 1  // id: %2
  return %1 : $A                                  // id: %3
} // end sil function '$s7partial1ACACycfC'


define hidden swiftcc %T7partial1AC* @"$s7partial1ACACycfC"(%swift.type* swiftself) #0 {
  %2 = alloca i1
  %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1
  %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*
  ret %T7partial1AC* %4
}
emitting SIL function: @$s7partial1ACACycfc
// A.init()
sil hidden @$s7partial1ACACycfc : $@convention(method) (@owned A) -> @owned A {
// %0                                             // users: %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  return %0 : $A                                  // id: %2
} // end sil function '$s7partial1ACACycfc'


define hidden swiftcc %T7partial1AC* @"$s7partial1ACACycfc"(%T7partial1AC* swiftself) #0 {
  %2 = alloca i1
  ret %T7partial1AC* %0
}
emitting SIL function: @$s7partial1AC1fySbxlF
// A.f<A>(_:)
sil hidden [signature_optimized_thunk] [always_inline] @$s7partial1AC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed A) -> Bool {
bb0(%0 : $*T, %1 : $A):
  // function_ref specialized A.f<A>(_:)
  %2 = function_ref @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <τ_0_0> () -> Bool // user: %3
  %3 = apply %2<T>() : $@convention(thin) <τ_0_0> () -> Bool // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1AC1fySbxlF'


define hidden swiftcc i1 @"$s7partial1AC1fySbxlF"(%swift.opaque* noalias nocapture, %swift.type*, %T7partial1AC* swiftself) #0 {
  %4 = alloca i1
  %5 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #3
  ret i1 %5
}
emitting SIL function: @$s7partial1ACfd
// A.deinit
sil hidden @$s7partial1ACfd : $@convention(method) (@guaranteed A) -> @owned Builtin.NativeObject {
// %0                                             // users: %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  %2 = unchecked_ref_cast %0 : $A to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function '$s7partial1ACfd'


define hidden swiftcc %swift.refcounted* @"$s7partial1ACfd"(%T7partial1AC* swiftself) #0 {
  %2 = alloca i1
  %3 = bitcast %T7partial1AC* %0 to %swift.refcounted*
  ret %swift.refcounted* %3
}
emitting SIL function: @$s7partial1ACfD
// A.__deallocating_deinit
sil hidden @$s7partial1ACfD : $@convention(method) (@owned A) -> () {
// %0                                             // users: %3, %2, %1
bb0(%0 : $A):
  debug_value %0 : $A, let, name "self", argno 1  // id: %1
  debug_value %0 : $A, let, name "self", argno 1  // id: %2
  dealloc_ref %0 : $A                             // id: %3
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function '$s7partial1ACfD'


define hidden swiftcc void @"$s7partial1ACfD"(%T7partial1AC* swiftself) #0 {
  %2 = alloca i1
  %3 = bitcast %T7partial1AC* %0 to %swift.refcounted*
  call void @swift_deallocClassInstance(%swift.refcounted* %3, i64 16, i64 7)
  ret void
}
emitting SIL function: @$s7partial1BC1fySbxlF
// B.f<A>(_:)
sil hidden [signature_optimized_thunk] [always_inline] @$s7partial1BC1fySbxlF : $@convention(method) <T> (@in_guaranteed T, @guaranteed B) -> Bool {
bb0(%0 : $*T, %1 : $B):
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s7partial1BC1fySbxlF'


define hidden swiftcc i1 @"$s7partial1BC1fySbxlF"(%swift.opaque* noalias nocapture, %swift.type*, %T7partial1BC* swiftself) #0 {
  %4 = alloca i1
  ret i1 false
}
emitting SIL function: @$s7partial1BCfd
// B.deinit
sil hidden @$s7partial1BCfd : $@convention(method) (@guaranteed B) -> @owned Builtin.NativeObject {
// %0                                             // users: %2, %1
bb0(%0 : $B):
  debug_value %0 : $B, let, name "self", argno 1  // id: %1
  %2 = unchecked_ref_cast %0 : $B to $Builtin.NativeObject // user: %3
  return %2 : $Builtin.NativeObject               // id: %3
} // end sil function '$s7partial1BCfd'


define hidden swiftcc %swift.refcounted* @"$s7partial1BCfd"(%T7partial1BC* swiftself) #0 {
  %2 = alloca i1
  %3 = bitcast %T7partial1BC* %0 to %swift.refcounted*
  ret %swift.refcounted* %3
}
emitting SIL function: @$s7partial1BCfD
// B.__deallocating_deinit
sil hidden @$s7partial1BCfD : $@convention(method) (@owned B) -> () {
// %0                                             // users: %3, %2, %1
bb0(%0 : $B):
  debug_value %0 : $B, let, name "self", argno 1  // id: %1
  debug_value %0 : $B, let, name "self", argno 1  // id: %2
  dealloc_ref %0 : $B                             // id: %3
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function '$s7partial1BCfD'


define hidden swiftcc void @"$s7partial1BCfD"(%T7partial1BC* swiftself) #0 {
  %2 = alloca i1
  %3 = bitcast %T7partial1BC* %0 to %swift.refcounted*
  call void @swift_deallocClassInstance(%swift.refcounted* %3, i64 16, i64 7)
  ret void
}
emitting SIL function: @$s7partial1BCACycfC
// B.__allocating_init()
sil hidden [exact_self_class] @$s7partial1BCACycfC : $@convention(method) (@thick B.Type) -> @owned B {
bb0(%0 : $@thick B.Type):
  %1 = alloc_ref $B                               // user: %2
  return %1 : $B                                  // id: %2
} // end sil function '$s7partial1BCACycfC'


define hidden swiftcc %T7partial1BC* @"$s7partial1BCACycfC"(%swift.type* swiftself) #0 {
  %2 = alloca i1
  %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1
  %4 = bitcast %swift.refcounted* %3 to %T7partial1BC*
  ret %T7partial1BC* %4
}
emitting SIL function: @$s7partial1BCACycfc
// B.init()
sil hidden @$s7partial1BCACycfc : $@convention(method) (@owned B) -> @owned B {
// %0                                             // user: %1
bb0(%0 : $B):
  return %0 : $B                                  // id: %1
} // end sil function '$s7partial1BCACycfc'


define hidden swiftcc %T7partial1BC* @"$s7partial1BCACycfc"(%T7partial1BC* swiftself) #0 {
  %2 = alloca i1
  ret %T7partial1BC* %0
}
emitting SIL function: @$s7partial8makeAorBAA1ACyF
// makeAorB()
sil hidden [noinline] @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A {
bb0:
  %0 = alloc_ref $B                               // user: %1
  %1 = upcast %0 : $B to $A                       // user: %2
  return %1 : $A                                  // id: %2
} // end sil function '$s7partial8makeAorBAA1ACyF'


; Function Attrs: noinline
define hidden swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() #3 {
  %1 = alloca i1
  %2 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 0) #4
  %3 = extractvalue %swift.metadata_response %2, 0
  %4 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %3, i64 16, i64 7) #1
  %5 = bitcast %swift.refcounted* %4 to %T7partial1BC*
  %6 = bitcast %T7partial1BC* %5 to %T7partial1AC*
  ret %T7partial1AC* %6
}
emitting SIL function: @$s7partial1gSbyF
// g()
sil hidden @$s7partial1gSbyF : $@convention(thin) () -> Bool {
bb0:
  // function_ref makeAorB()
  %0 = function_ref @$s7partial8makeAorBAA1ACyF : $@convention(thin) () -> @owned A // user: %1
  %1 = apply %0() : $@convention(thin) () -> @owned A // users: %21, %27, %15, %26, %19, %6, %25
  %2 = integer_literal $Builtin.Int16, 9          // user: %3
  %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
  %4 = alloc_stack $UInt16                        // users: %26, %5, %8
  store %3 to %4 : $*UInt16                       // id: %5
  checked_cast_br [exact] %1 : $A to A, bb2, bb3  // id: %6

// %7                                             // user: %9
bb1(%7 : $Bool):                                  // Preds: bb5 bb4 bb2
  dealloc_stack %4 : $*UInt16                     // id: %8
  return %7 : $Bool                               // id: %9

bb2(%10 : $A):                                    // Preds: bb0
  %11 = metatype $@thick UInt16.Type              // user: %12
  %12 = init_existential_metatype %11 : $@thick UInt16.Type, $@thick Any.Type // user: %16
  %13 = metatype $@thick A.Type                   // user: %14
  %14 = init_existential_metatype %13 : $@thick A.Type, $@thick Any.Type // user: %16
  strong_release %1 : $A                          // id: %15
  %16 = builtin "is_same_metatype"(%12 : $@thick Any.Type, %14 : $@thick Any.Type) : $Builtin.Int1 // user: %17
  %17 = struct $Bool (%16 : $Builtin.Int1)        // user: %18
  br bb1(%17 : $Bool)                             // id: %18

bb3:                                              // Preds: bb0
  checked_cast_br [exact] %1 : $A to B, bb4, bb5  // id: %19

bb4(%20 : $B):                                    // Preds: bb3
  strong_release %1 : $A                          // id: %21
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = struct $Bool (%22 : $Builtin.Int1)        // user: %24
  br bb1(%23 : $Bool)                             // id: %24

bb5:                                              // Preds: bb3
  %25 = class_method %1 : $A, #A.f!1 : <T> (A) -> (T) -> Bool, $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %26
  %26 = apply %25<UInt16>(%4, %1) : $@convention(method) <τ_0_0> (@in_guaranteed τ_0_0, @guaranteed A) -> Bool // user: %28
  strong_release %1 : $A                          // id: %27
  br bb1(%26 : $Bool)                             // id: %28
} // end sil function '$s7partial1gSbyF'


define hidden swiftcc i1 @"$s7partial1gSbyF"() #0 {
  %1 = alloca %Ts6UInt16V, align 2
  %2 = alloca i1
  %3 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
  %4 = bitcast %Ts6UInt16V* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %4)
  %5 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i32 0, i32 0
  store i16 9, i16* %5, align 2
  %6 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %3, i32 0, i32 0, i32 0
  %7 = load %swift.type*, %swift.type** %6, align 8
  %8 = icmp eq %swift.type* %7, @"$s7partial1ACN"
  br i1 %8, label %12, label %18

9:                                                ; preds = %12, %23, %25
  %10 = phi i1 [ %32, %25 ], [ false, %23 ], [ %17, %12 ]
  %11 = bitcast %Ts6UInt16V* %1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %11)
  ret i1 %10

12:                                               ; preds = %0
  %13 = phi %T7partial1AC* [ %3, %0 ]
  %14 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #5
  %15 = extractvalue %swift.metadata_response %14, 0
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %3) #1
  %16 = bitcast %swift.type* %15 to i8*
  %17 = icmp eq i8* bitcast (%swift.type* @"$ss6UInt16VN" to i8*), %16
  br label %9

18:                                               ; preds = %0
  %19 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %3, i32 0, i32 0, i32 0
  %20 = load %swift.type*, %swift.type** %19, align 8
  %21 = icmp eq %swift.type* %20, @"$s7partial1BCN"
  %22 = bitcast %T7partial1AC* %3 to %T7partial1BC*
  br i1 %21, label %23, label %25

23:                                               ; preds = %18
  %24 = phi %T7partial1BC* [ %22, %18 ]
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %3) #1
  br label %9

25:                                               ; preds = %18
  %26 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %3, i32 0, i32 0, i32 0
  %27 = load %swift.type*, %swift.type** %26, align 8
  %28 = bitcast %swift.type* %27 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
  %29 = getelementptr inbounds i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %28, i64 11
  %30 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %29, align 8, !invariant.load !1
  %31 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
  %32 = call swiftcc i1 %30(%swift.opaque* noalias nocapture %31, %swift.type* @"$ss6UInt16VN", %T7partial1AC* swiftself %3)
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %3) #1
  br label %9
}
A.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
B.lookupDirect(deinit), hasLazyMembers()=0, useNamedLazyMemberLoading=0
emitting SIL function: @$s7partial1AC1fySbxlFTf4dd_n
// specialized A.f<A>(_:)
sil shared @$s7partial1AC1fySbxlFTf4dd_n : $@convention(thin) <T> () -> Bool {
bb0:
  %0 = metatype $@thick T.Type                    // user: %1
  %1 = init_existential_metatype %0 : $@thick T.Type, $@thick Any.Type // user: %4
  %2 = metatype $@thick A.Type                    // user: %3
  %3 = init_existential_metatype %2 : $@thick A.Type, $@thick Any.Type // user: %4
  %4 = builtin "is_same_metatype"(%1 : $@thick Any.Type, %3 : $@thick Any.Type) : $Builtin.Int1 // user: %5
  %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
  return %5 : $Bool                               // id: %6
} // end sil function '$s7partial1AC1fySbxlFTf4dd_n'


define linkonce_odr hidden swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type*) #0 {
  %2 = alloca i1
  %3 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6
  %4 = extractvalue %swift.metadata_response %3, 0
  %5 = bitcast %swift.type* %0 to i8*
  %6 = bitcast %swift.type* %4 to i8*
  %7 = icmp eq i8* %5, %6
  ret i1 %7
}
/var/folders/wx/hy85gppn459ddtp912yz2ps40000gn/T/partial-8c85ef.o: MD5=17b3ac3c230e8f6084e9e40a0ee3aebb
	discovered a new reachable node %2

Features:+sse2,+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87
CPU:penryn

Subtarget features: SSELevel 5, 3DNowLevel 1, 64bit 1
G_ADD (opcode 35): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SUB (opcode 36): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_MUL (opcode 37): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SDIV (opcode 38): 1 type index
.. the first uncovered type index: 1, OK
G_UDIV (opcode 39): 1 type index
.. opcode 39 is aliased to 38
.. opcode 38 is aliased to 0
.. the first uncovered type index: 1, OK
G_SREM (opcode 40): 1 type index
.. opcode 40 is aliased to 38
.. opcode 38 is aliased to 0
.. the first uncovered type index: 1, OK
G_UREM (opcode 41): 1 type index
.. opcode 41 is aliased to 38
.. opcode 38 is aliased to 0
.. the first uncovered type index: 1, OK
G_AND (opcode 42): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_OR (opcode 43): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_XOR (opcode 44): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_IMPLICIT_DEF (opcode 45): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_PHI (opcode 46): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FRAME_INDEX (opcode 47): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_GLOBAL_VALUE (opcode 48): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_EXTRACT (opcode 49): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UNMERGE_VALUES (opcode 50): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_INSERT (opcode 51): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_MERGE_VALUES (opcode 52): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BUILD_VECTOR (opcode 53): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BUILD_VECTOR_TRUNC (opcode 54): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CONCAT_VECTORS (opcode 55): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_PTRTOINT (opcode 56): 2 type indices
.. the first uncovered type index: 2, OK
G_INTTOPTR (opcode 57): 2 type indices
.. the first uncovered type index: 2, OK
G_BITCAST (opcode 58): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_INTRINSIC_TRUNC (opcode 59): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_INTRINSIC_ROUND (opcode 60): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_LOAD (opcode 61): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SEXTLOAD (opcode 62): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ZEXTLOAD (opcode 63): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_STORE (opcode 64): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMIC_CMPXCHG_WITH_SUCCESS (opcode 65): 3 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMIC_CMPXCHG (opcode 66): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_XCHG (opcode 67): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_ADD (opcode 68): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_SUB (opcode 69): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_AND (opcode 70): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_NAND (opcode 71): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_OR (opcode 72): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_XOR (opcode 73): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_MAX (opcode 74): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_MIN (opcode 75): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UMAX (opcode 76): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UMIN (opcode 77): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BRCOND (opcode 78): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_BRINDIRECT (opcode 79): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_INTRINSIC (opcode 80): 0 type indices
.. type index coverage check SKIPPED: no rules defined
G_INTRINSIC_W_SIDE_EFFECTS (opcode 81): 0 type indices
.. type index coverage check SKIPPED: no rules defined
G_ANYEXT (opcode 82): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_TRUNC (opcode 83): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CONSTANT (opcode 84): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FCONSTANT (opcode 85): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_VASTART (opcode 86): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_VAARG (opcode 87): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SEXT (opcode 88): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ZEXT (opcode 89): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SHL (opcode 90): 2 type indices
.. the first uncovered type index: 2, OK
G_LSHR (opcode 91): 2 type indices
.. opcode 91 is aliased to 90
.. opcode 90 is aliased to 0
.. the first uncovered type index: 2, OK
G_ASHR (opcode 92): 2 type indices
.. opcode 92 is aliased to 90
.. opcode 90 is aliased to 0
.. the first uncovered type index: 2, OK
G_ICMP (opcode 93): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FCMP (opcode 94): 2 type indices
.. the first uncovered type index: 2, OK
G_SELECT (opcode 95): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UADDO (opcode 96): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UADDE (opcode 97): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_USUBO (opcode 98): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_USUBE (opcode 99): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SADDO (opcode 100): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SADDE (opcode 101): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SSUBO (opcode 102): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SSUBE (opcode 103): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UMULO (opcode 104): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SMULO (opcode 105): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UMULH (opcode 106): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SMULH (opcode 107): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FADD (opcode 108): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FSUB (opcode 109): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FMUL (opcode 110): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FMA (opcode 111): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FDIV (opcode 112): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FREM (opcode 113): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FPOW (opcode 114): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FEXP (opcode 115): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FEXP2 (opcode 116): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FLOG (opcode 117): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FLOG2 (opcode 118): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FLOG10 (opcode 119): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FNEG (opcode 120): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FPEXT (opcode 121): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FPTRUNC (opcode 122): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FPTOSI (opcode 123): 2 type indices
.. the first uncovered type index: 2, OK
G_FPTOUI (opcode 124): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SITOFP (opcode 125): 2 type indices
.. the first uncovered type index: 2, OK
G_UITOFP (opcode 126): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FABS (opcode 127): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FCOPYSIGN (opcode 128): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FCANONICALIZE (opcode 129): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_GEP (opcode 130): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_PTR_MASK (opcode 131): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SMIN (opcode 132): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SMAX (opcode 133): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_UMIN (opcode 134): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_UMAX (opcode 135): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_BR (opcode 136): 0 type indices
.. type index coverage check SKIPPED: no rules defined
G_BRJT (opcode 137): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_INSERT_VECTOR_ELT (opcode 138): 3 type indices
.. type index coverage check SKIPPED: no rules defined
G_EXTRACT_VECTOR_ELT (opcode 139): 3 type indices
.. type index coverage check SKIPPED: no rules defined
G_SHUFFLE_VECTOR (opcode 140): 3 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTTZ (opcode 141): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTTZ_ZERO_UNDEF (opcode 142): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTLZ (opcode 143): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTLZ_ZERO_UNDEF (opcode 144): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTPOP (opcode 145): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BSWAP (opcode 146): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FCEIL (opcode 147): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FCOS (opcode 148): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FSIN (opcode 149): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FSQRT (opcode 150): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FFLOOR (opcode 151): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FRINT (opcode 152): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FNEARBYINT (opcode 153): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_ADDRSPACE_CAST (opcode 154): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BLOCK_ADDR (opcode 155): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_JUMP_TABLE (opcode 156): 1 type index
.. type index coverage check SKIPPED: no rules defined
	discovered a new reachable node %2
SROA function: main
EarlyCSE DCE:   %3 = bitcast i8** %1 to i8*
	discovered a new reachable node %1
	discovered a new reachable node %1
SROA function: $s7partial1ACACycfC
	discovered a new reachable node %1
	discovered a new reachable node %1
SROA function: $s7partial1ACACycfc
	discovered a new reachable node %3
	discovered a new reachable node %3
SROA function: $s7partial1AC1fySbxlF
	discovered a new reachable node %1
	discovered a new reachable node %1
SROA function: $s7partial1ACfd
	discovered a new reachable node %1
	discovered a new reachable node %1
SROA function: $s7partial1ACfD
	discovered a new reachable node %3
	discovered a new reachable node %3
SROA function: $s7partial1BC1fySbxlF
	discovered a new reachable node %1
	discovered a new reachable node %1
SROA function: $s7partial1BCfd
	discovered a new reachable node %1
	discovered a new reachable node %1
SROA function: $s7partial1BCfD
	discovered a new reachable node %1
	discovered a new reachable node %1
SROA function: $s7partial1BCACycfC
	discovered a new reachable node %1
	discovered a new reachable node %1
SROA function: $s7partial1BCACycfc
	discovered a new reachable node %0
	discovered a new reachable node %0
SROA function: $s7partial8makeAorBAA1ACyF
	discovered a new reachable node %0
	discovered a new reachable node %11
	discovered a new reachable node %8
	discovered a new reachable node %17
	discovered a new reachable node %22
	discovered a new reachable node %24
	discovered a new reachable node %0
	discovered a new reachable node %11
	discovered a new reachable node %8
	discovered a new reachable node %17
	discovered a new reachable node %22
	discovered a new reachable node %24
SROA function: $s7partial1gSbyF
SROA alloca:   %1 = alloca %Ts6UInt16V, align 2
  Rewriting FCA loads and stores...
Can't analyze slices for alloca:   %1 = alloca %Ts6UInt16V, align 2
  A pointer to this alloca escaped by:
    %31 = call swiftcc i1 %29(%swift.opaque* noalias nocapture %30, %swift.type* @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
EarlyCSE CVP: Add conditional value for '' as i1 true in 
EarlyCSE DCE:   %12 = phi %T7partial1AC* [ %2, %0 ]
EarlyCSE CSE:   %10 = bitcast %Ts6UInt16V* %1 to i8*  to:   %3 = bitcast %Ts6UInt16V* %1 to i8*
EarlyCSE CVP: Add conditional value for '' as i1 false in 
EarlyCSE CSE:   %16 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0, i32 0  to:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0, i32 0
EarlyCSE CSE LOAD:   %16 = load %swift.type*, %swift.type** %5, align 8  to:   %6 = load %swift.type*, %swift.type** %5, align 8
EarlyCSE CVP: Add conditional value for '' as i1 true in 
EarlyCSE DCE:   %19 = phi %T7partial1BC* [ %17, %15 ]
EarlyCSE CVP: Add conditional value for '' as i1 false in 
EarlyCSE CSE:   %20 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0, i32 0  to:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0, i32 0
EarlyCSE CSE LOAD:   %20 = load %swift.type*, %swift.type** %5, align 8  to:   %6 = load %swift.type*, %swift.type** %5, align 8
	discovered a new reachable node %1
	discovered a new reachable node %1
SROA function: $s7partial1AC1fySbxlFTf4dd_n
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
SROA function: $s7partial1BCMa
EarlyCSE CVP: Add conditional value for '' as i1 true in 
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
SROA function: $s7partial1ACMa
EarlyCSE CVP: Add conditional value for '' as i1 true in 
	discovered a new reachable node %2
Marking Block Executable: 
markOverdefined: i32 %0
markOverdefined: i8** %1
	discovered a new reachable node %1
Marking Block Executable: 
markOverdefined: %swift.type* %0
	discovered a new reachable node %1
Marking Block Executable: 
markOverdefined: %T7partial1AC* %0
	discovered a new reachable node %3
Marking Block Executable: 
markOverdefined: %swift.opaque* %0
markOverdefined: %swift.type* %1
markOverdefined: %T7partial1AC* %2
	discovered a new reachable node %1
Marking Block Executable: 
markOverdefined: %T7partial1AC* %0
	discovered a new reachable node %1
Marking Block Executable: 
markOverdefined: %T7partial1AC* %0
	discovered a new reachable node %3
Marking Block Executable: 
markOverdefined: %swift.opaque* %0
markOverdefined: %swift.type* %1
markOverdefined: %T7partial1BC* %2
	discovered a new reachable node %1
Marking Block Executable: 
markOverdefined: %T7partial1BC* %0
	discovered a new reachable node %1
Marking Block Executable: 
markOverdefined: %T7partial1BC* %0
	discovered a new reachable node %1
Marking Block Executable: 
markOverdefined: %swift.type* %0
	discovered a new reachable node %1
Marking Block Executable: 
markOverdefined: %T7partial1BC* %0
	discovered a new reachable node %0
Marking Block Executable: 
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %18
	discovered a new reachable node %19
Visiting   %6 = load %swift.type*, %swift.type** %5, align 8
Rename Stack is empty
Current DFS numbers are (0,11)
Rename Stack is empty
Current DFS numbers are (1,2)
Rename Stack Top DFS numbers are (1,2)
Current DFS numbers are (5,10)
Rename Stack Top DFS numbers are (5,10)
Current DFS numbers are (5,10)
Found replacement   %8 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %6) for   %6 = load %swift.type*, %swift.type** %5, align 8 in   %17 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %swift.type*)
Rename Stack Top DFS numbers are (5,10)
Current DFS numbers are (6,7)
Rename Stack Top DFS numbers are (6,7)
Current DFS numbers are (8,9)
Rename Stack Top DFS numbers are (8,9)
Current DFS numbers are (8,9)
Found replacement   %19 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %8) for   %6 = load %swift.type*, %swift.type** %5, align 8 in   %22 = bitcast %swift.type* %6 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
Visiting   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %swift.type*)
Rename Stack is empty
Current DFS numbers are (0,11)
Rename Stack is empty
Current DFS numbers are (1,2)
Rename Stack Top DFS numbers are (1,2)
Current DFS numbers are (5,10)
Visiting   %17 = icmp eq %swift.type* %8, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %swift.type*)
Rename Stack is empty
Current DFS numbers are (5,10)
Rename Stack is empty
Current DFS numbers are (6,7)
Rename Stack Top DFS numbers are (6,7)
Current DFS numbers are (8,9)
Marking Block Executable: 
	discovered a new reachable node %1
Marking Block Executable: 
markOverdefined: %swift.type* %0
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
Visiting   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
Rename Stack is empty
Current DFS numbers are (0,5)
Rename Stack is empty
Current DFS numbers are (0,5)
Rename Stack Top DFS numbers are (0,5)
Current DFS numbers are (0,5)
Found replacement   %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2) for   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8 in   %9 = phi %swift.type* [ %2, %1 ], [ %7, %5 ]
Rename Stack Top DFS numbers are (0,5)
Current DFS numbers are (1,2)
Visiting   %3 = icmp eq %swift.type* %2, null
Rename Stack is empty
Current DFS numbers are (0,5)
Rename Stack is empty
Current DFS numbers are (0,5)
Rename Stack Top DFS numbers are (0,5)
Current DFS numbers are (1,2)
Marking Block Executable: 
markOverdefined: i64 %0
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
Visiting   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
Rename Stack is empty
Current DFS numbers are (0,5)
Rename Stack is empty
Current DFS numbers are (0,5)
Rename Stack Top DFS numbers are (0,5)
Current DFS numbers are (0,5)
Found replacement   %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2) for   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8 in   %9 = phi %swift.type* [ %2, %1 ], [ %7, %5 ]
Rename Stack Top DFS numbers are (0,5)
Current DFS numbers are (1,2)
Visiting   %3 = icmp eq %swift.type* %2, null
Rename Stack is empty
Current DFS numbers are (0,5)
Rename Stack is empty
Current DFS numbers are (0,5)
Rename Stack Top DFS numbers are (0,5)
Current DFS numbers are (1,2)
Marking Block Executable: 
markOverdefined: i64 %0

Popped off OI-WL: i64 %0

Popped off OI-WL: i64 %0

Popped off OI-WL: %swift.type* %0
markOverdefined:   %4 = bitcast %swift.type* %0 to i8*

Popped off OI-WL:   %4 = bitcast %swift.type* %0 to i8*

Popped off OI-WL: %T7partial1BC* %0
markOverdefined: Function '$s7partial1BCACycfc'

Popped off OI-WL: 
define hidden swiftcc %T7partial1BC* @"$s7partial1BCACycfc"(%T7partial1BC* swiftself) #0 {
  ret %T7partial1BC* %0
}


Popped off OI-WL: %swift.type* %0
markOverdefined:   %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1

Popped off OI-WL:   %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1
markOverdefined:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*

Popped off OI-WL:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
markOverdefined: Function '$s7partial1BCACycfC'

Popped off OI-WL: 
define hidden swiftcc %T7partial1BC* @"$s7partial1BCACycfC"(%swift.type* swiftself) #0 {
  %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1
  %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
  ret %T7partial1BC* %3
}


Popped off OI-WL: %T7partial1BC* %0
markOverdefined:   %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*

Popped off OI-WL:   %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*

Popped off OI-WL: %T7partial1BC* %0
markOverdefined:   %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*

Popped off OI-WL:   %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*
markOverdefined: Function '$s7partial1BCfd'

Popped off OI-WL: 
define hidden swiftcc %swift.refcounted* @"$s7partial1BCfd"(%T7partial1BC* swiftself) #0 {
  %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*
  ret %swift.refcounted* %2
}


Popped off OI-WL: %T7partial1BC* %2

Popped off OI-WL: %swift.type* %1

Popped off OI-WL: %swift.opaque* %0

Popped off OI-WL: %T7partial1AC* %0
markOverdefined:   %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*

Popped off OI-WL:   %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*

Popped off OI-WL: %T7partial1AC* %0
markOverdefined:   %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*

Popped off OI-WL:   %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*
markOverdefined: Function '$s7partial1ACfd'

Popped off OI-WL: 
define hidden swiftcc %swift.refcounted* @"$s7partial1ACfd"(%T7partial1AC* swiftself) #0 {
  %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*
  ret %swift.refcounted* %2
}


Popped off OI-WL: %T7partial1AC* %2

Popped off OI-WL: %swift.type* %1
markOverdefined:   %4 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7

Popped off OI-WL:   %4 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
markOverdefined: Function '$s7partial1AC1fySbxlF'

Popped off OI-WL: 
define hidden swiftcc i1 @"$s7partial1AC1fySbxlF"(%swift.opaque* noalias nocapture, %swift.type*, %T7partial1AC* swiftself) #0 {
  %4 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
  ret i1 %4
}


Popped off OI-WL: %swift.opaque* %0

Popped off OI-WL: %T7partial1AC* %0
markOverdefined: Function '$s7partial1ACACycfc'

Popped off OI-WL: 
define hidden swiftcc %T7partial1AC* @"$s7partial1ACACycfc"(%T7partial1AC* swiftself) #0 {
  ret %T7partial1AC* %0
}


Popped off OI-WL: %swift.type* %0
markOverdefined:   %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1

Popped off OI-WL:   %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1
markOverdefined:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*

Popped off OI-WL:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
markOverdefined: Function '$s7partial1ACACycfC'

Popped off OI-WL: 
define hidden swiftcc %T7partial1AC* @"$s7partial1ACACycfC"(%swift.type* swiftself) #0 {
  %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1
  %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
  ret %T7partial1AC* %3
}


Popped off OI-WL: i8** %1

Popped off OI-WL: i32 %0

Popped off BBWL: 
  %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
  %3 = icmp eq %swift.type* %2, null
  %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)
  br i1 %3, label %5, label %8

markConstant: %swift.type* null:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
markConstant: i1 true:   %3 = icmp eq %swift.type* %2, null
markConstant: %swift.type* null:   %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)
Marking Block Executable: 

Popped off BBWL: 
5:                                                ; preds = %1
  %6 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %objc_class*))
  %7 = bitcast %objc_class* %6 to %swift.type*
  store atomic %swift.type* %7, %swift.type** @"$s7partial1ACML" release, align 8
  br label %8

markOverdefined:   %6 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %objc_class*))
markOverdefined:   %7 = bitcast %objc_class* %6 to %swift.type*
markOverdefined: @"$s7partial1ACML" = internal global %swift.type* null, align 8
Marking Block Executable: 

Popped off BBWL: 
8:                                                ; preds = %5, %1
  %9 = phi %swift.type* [ %4, %1 ], [ %7, %5 ]
  %10 = insertvalue %swift.metadata_response undef, %swift.type* %9, 0
  %11 = insertvalue %swift.metadata_response %10, i64 0, 1
  ret %swift.metadata_response %11

markOverdefined:   %9 = phi %swift.type* [ %4, %1 ], [ %7, %5 ]
markOverdefined:   %10 = insertvalue %swift.metadata_response undef, %swift.type* %9, 0
markOverdefined:   %11 = insertvalue %swift.metadata_response %10, i64 0, 1
markConstant: i64 0:   %11 = insertvalue %swift.metadata_response %10, i64 0, 1
markOverdefined: Function '$s7partial1ACMa'
markConstant: i64 0: 
; Function Attrs: noinline nounwind readnone
define hidden swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64) #4 {
  %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
  %3 = icmp eq %swift.type* %2, null
  %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)
  br i1 %3, label %5, label %8

5:                                                ; preds = %1
  %6 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %objc_class*))
  %7 = bitcast %objc_class* %6 to %swift.type*
  store atomic %swift.type* %7, %swift.type** @"$s7partial1ACML" release, align 8
  br label %8

8:                                                ; preds = %5, %1
  %9 = phi %swift.type* [ %4, %1 ], [ %7, %5 ]
  %10 = insertvalue %swift.metadata_response undef, %swift.type* %9, 0
  %11 = insertvalue %swift.metadata_response %10, i64 0, 1
  ret %swift.metadata_response %11
}


Popped off BBWL: 
  %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
  %3 = icmp eq %swift.type* %2, null
  %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)
  br i1 %3, label %5, label %8

markConstant: %swift.type* null:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
markConstant: i1 true:   %3 = icmp eq %swift.type* %2, null
markConstant: %swift.type* null:   %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)
Marking Block Executable: 

Popped off BBWL: 
5:                                                ; preds = %1
  %6 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %objc_class*))
  %7 = bitcast %objc_class* %6 to %swift.type*
  store atomic %swift.type* %7, %swift.type** @"$s7partial1BCML" release, align 8
  br label %8

markOverdefined:   %6 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %objc_class*))
markOverdefined:   %7 = bitcast %objc_class* %6 to %swift.type*
markOverdefined: @"$s7partial1BCML" = internal global %swift.type* null, align 8
Marking Block Executable: 

Popped off BBWL: 
8:                                                ; preds = %5, %1
  %9 = phi %swift.type* [ %4, %1 ], [ %7, %5 ]
  %10 = insertvalue %swift.metadata_response undef, %swift.type* %9, 0
  %11 = insertvalue %swift.metadata_response %10, i64 0, 1
  ret %swift.metadata_response %11

markOverdefined:   %9 = phi %swift.type* [ %4, %1 ], [ %7, %5 ]
markOverdefined:   %10 = insertvalue %swift.metadata_response undef, %swift.type* %9, 0
markOverdefined:   %11 = insertvalue %swift.metadata_response %10, i64 0, 1
markConstant: i64 0:   %11 = insertvalue %swift.metadata_response %10, i64 0, 1
markOverdefined: Function '$s7partial1BCMa'
markConstant: i64 0: 
; Function Attrs: noinline nounwind readnone
define hidden swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64) #4 {
  %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
  %3 = icmp eq %swift.type* %2, null
  %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)
  br i1 %3, label %5, label %8

5:                                                ; preds = %1
  %6 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %objc_class*))
  %7 = bitcast %objc_class* %6 to %swift.type*
  store atomic %swift.type* %7, %swift.type** @"$s7partial1BCML" release, align 8
  br label %8

8:                                                ; preds = %5, %1
  %9 = phi %swift.type* [ %4, %1 ], [ %7, %5 ]
  %10 = insertvalue %swift.metadata_response undef, %swift.type* %9, 0
  %11 = insertvalue %swift.metadata_response %10, i64 0, 1
  ret %swift.metadata_response %11
}


Popped off BBWL: 
  %2 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6
  %3 = extractvalue %swift.metadata_response %2, 0
  %4 = bitcast %swift.type* %0 to i8*
  %5 = bitcast %swift.type* %3 to i8*
  %6 = icmp eq i8* %4, %5
  ret i1 %6

markOverdefined:   %2 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6
markConstant: i64 0:   %2 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6
markOverdefined:   %3 = extractvalue %swift.metadata_response %2, 0
markOverdefined:   %5 = bitcast %swift.type* %3 to i8*
markOverdefined:   %6 = icmp eq i8* %4, %5

Popped off BBWL: 
  %1 = alloca %Ts6UInt16V, align 2
  %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
  %3 = bitcast %Ts6UInt16V* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %3)
  %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i32 0, i32 0
  store i16 9, i16* %4, align 2
  %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0, i32 0
  %6 = load %swift.type*, %swift.type** %5, align 8
  %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %swift.type*)
  %8 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %6)
  br i1 %7, label %11, label %16

SCCP: Don't know how to handle:   %1 = alloca %Ts6UInt16V, align 2
markOverdefined:   %1 = alloca %Ts6UInt16V, align 2
markOverdefined:   %3 = bitcast %Ts6UInt16V* %1 to i8*
markOverdefined:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i32 0, i32 0

Popped off BBWL: 
  %1 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 0) #6
  %2 = extractvalue %swift.metadata_response %1, 0
  %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #1
  %4 = bitcast %swift.refcounted* %3 to %T7partial1BC*
  %5 = bitcast %T7partial1BC* %4 to %T7partial1AC*
  ret %T7partial1AC* %5

markOverdefined:   %1 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 0) #6
markConstant: i64 0:   %1 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 0) #6
markOverdefined:   %2 = extractvalue %swift.metadata_response %1, 0
markOverdefined:   %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #1
markOverdefined:   %4 = bitcast %swift.refcounted* %3 to %T7partial1BC*
markOverdefined:   %5 = bitcast %T7partial1BC* %4 to %T7partial1AC*
markOverdefined: Function '$s7partial8makeAorBAA1ACyF'

Popped off BBWL: 
  ret %T7partial1BC* %0


Popped off BBWL: 
  %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1
  %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
  ret %T7partial1BC* %3


Popped off BBWL: 
  %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*
  call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
  ret void


Popped off BBWL: 
  %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*
  ret %swift.refcounted* %2


Popped off BBWL: 
  ret i1 false

markConstant: i1 false: 
define hidden swiftcc i1 @"$s7partial1BC1fySbxlF"(%swift.opaque* noalias nocapture, %swift.type*, %T7partial1BC* swiftself) #0 {
  ret i1 false
}


Popped off BBWL: 
  %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*
  call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
  ret void


Popped off BBWL: 
  %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*
  ret %swift.refcounted* %2


Popped off BBWL: 
  %4 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
  ret i1 %4


Popped off BBWL: 
  ret %T7partial1AC* %0


Popped off BBWL: 
  %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1
  %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
  ret %T7partial1AC* %3


Popped off BBWL: 
  ret i32 0

markConstant: i32 0: 
define i32 @main(i32, i8**) #0 {
  ret i32 0
}


Popped off OI-WL: 
; Function Attrs: noinline
define hidden swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() #3 {
  %1 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 0) #6
  %2 = extractvalue %swift.metadata_response %1, 0
  %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #1
  %4 = bitcast %swift.refcounted* %3 to %T7partial1BC*
  %5 = bitcast %T7partial1BC* %4 to %T7partial1AC*
  ret %T7partial1AC* %5
}

markOverdefined:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()

Popped off OI-WL:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
markOverdefined:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0, i32 0

Popped off OI-WL:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0, i32 0
markOverdefined:   %6 = load %swift.type*, %swift.type** %5, align 8

Popped off OI-WL:   %6 = load %swift.type*, %swift.type** %5, align 8
markOverdefined:   %8 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %6)
markOverdefined:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %swift.type*)

Popped off OI-WL:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %swift.type*)
Marking Block Executable: 
Marking Block Executable: 

Popped off OI-WL:   %8 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %6)
markOverdefined:   %19 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %8)
markOverdefined:   %17 = icmp eq %swift.type* %8, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %swift.type*)

Popped off OI-WL:   %17 = icmp eq %swift.type* %8, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %swift.type*)
Marking Block Executable: 
Marking Block Executable: 

Popped off OI-WL:   %19 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %8)
markOverdefined:   %22 = bitcast %swift.type* %19 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**

Popped off OI-WL:   %22 = bitcast %swift.type* %19 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
markOverdefined:   %23 = getelementptr inbounds i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %22, i64 11

Popped off OI-WL:   %23 = getelementptr inbounds i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %22, i64 11
markOverdefined:   %24 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %23, align 8, !invariant.load !21

Popped off OI-WL:   %24 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %23, align 8, !invariant.load !21
markOverdefined:   %26 = call swiftcc i1 %24(%swift.opaque* noalias nocapture %25, %swift.type* @"$ss6UInt16VN", %T7partial1AC* swiftself %2)

Popped off OI-WL:   %26 = call swiftcc i1 %24(%swift.opaque* noalias nocapture %25, %swift.type* @"$ss6UInt16VN", %T7partial1AC* swiftself %2)

Popped off OI-WL:   %5 = bitcast %T7partial1BC* %4 to %T7partial1AC*

Popped off OI-WL:   %4 = bitcast %swift.refcounted* %3 to %T7partial1BC*

Popped off OI-WL:   %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #1

Popped off OI-WL:   %2 = extractvalue %swift.metadata_response %1, 0

Popped off OI-WL:   %1 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 0) #6

Popped off OI-WL:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i32 0, i32 0

Popped off OI-WL:   %3 = bitcast %Ts6UInt16V* %1 to i8*

Popped off OI-WL:   %1 = alloca %Ts6UInt16V, align 2
markOverdefined:   %25 = bitcast %Ts6UInt16V* %1 to %swift.opaque*

Popped off OI-WL:   %25 = bitcast %Ts6UInt16V* %1 to %swift.opaque*

Popped off OI-WL:   %6 = icmp eq i8* %4, %5

Popped off OI-WL:   %5 = bitcast %swift.type* %3 to i8*

Popped off OI-WL:   %3 = extractvalue %swift.metadata_response %2, 0

Popped off OI-WL:   %2 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6

Popped off OI-WL: 
; Function Attrs: noinline nounwind readnone
define hidden swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64) #4 {
  %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
  %3 = icmp eq %swift.type* %2, null
  %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)
  br i1 %3, label %5, label %8

5:                                                ; preds = %1
  %6 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %objc_class*))
  %7 = bitcast %objc_class* %6 to %swift.type*
  store atomic %swift.type* %7, %swift.type** @"$s7partial1BCML" release, align 8
  br label %8

8:                                                ; preds = %5, %1
  %9 = phi %swift.type* [ %4, %1 ], [ %7, %5 ]
  %10 = insertvalue %swift.metadata_response undef, %swift.type* %9, 0
  %11 = insertvalue %swift.metadata_response %10, i64 0, 1
  ret %swift.metadata_response %11
}


Popped off OI-WL:   %11 = insertvalue %swift.metadata_response %10, i64 0, 1

Popped off OI-WL:   %10 = insertvalue %swift.metadata_response undef, %swift.type* %9, 0

Popped off OI-WL:   %9 = phi %swift.type* [ %4, %1 ], [ %7, %5 ]

Popped off OI-WL: @"$s7partial1BCML" = internal global %swift.type* null, align 8
markOverdefined:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8

Popped off OI-WL:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
markOverdefined:   %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)
markOverdefined:   %3 = icmp eq %swift.type* %2, null

Popped off OI-WL:   %3 = icmp eq %swift.type* %2, null
Marking Edge Executable:  -> 

Popped off OI-WL:   %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)

Popped off OI-WL:   %7 = bitcast %objc_class* %6 to %swift.type*

Popped off OI-WL:   %6 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %objc_class*))

Popped off OI-WL: 
; Function Attrs: noinline nounwind readnone
define hidden swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64) #4 {
  %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
  %3 = icmp eq %swift.type* %2, null
  %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)
  br i1 %3, label %5, label %8

5:                                                ; preds = %1
  %6 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %objc_class*))
  %7 = bitcast %objc_class* %6 to %swift.type*
  store atomic %swift.type* %7, %swift.type** @"$s7partial1ACML" release, align 8
  br label %8

8:                                                ; preds = %5, %1
  %9 = phi %swift.type* [ %4, %1 ], [ %7, %5 ]
  %10 = insertvalue %swift.metadata_response undef, %swift.type* %9, 0
  %11 = insertvalue %swift.metadata_response %10, i64 0, 1
  ret %swift.metadata_response %11
}

markOverdefined:   %12 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6
markConstant: i64 0:   %12 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6

Popped off OI-WL:   %12 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6
markOverdefined:   %13 = extractvalue %swift.metadata_response %12, 0

Popped off OI-WL:   %13 = extractvalue %swift.metadata_response %12, 0
markOverdefined:   %14 = bitcast %swift.type* %13 to i8*

Popped off OI-WL:   %14 = bitcast %swift.type* %13 to i8*
markOverdefined:   %15 = icmp eq i8* bitcast (%swift.type* @"$ss6UInt16VN" to i8*), %14

Popped off OI-WL:   %15 = icmp eq i8* bitcast (%swift.type* @"$ss6UInt16VN" to i8*), %14

Popped off OI-WL:   %11 = insertvalue %swift.metadata_response %10, i64 0, 1

Popped off OI-WL:   %10 = insertvalue %swift.metadata_response undef, %swift.type* %9, 0

Popped off OI-WL:   %9 = phi %swift.type* [ %4, %1 ], [ %7, %5 ]

Popped off OI-WL: @"$s7partial1ACML" = internal global %swift.type* null, align 8
markOverdefined:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8

Popped off OI-WL:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
markOverdefined:   %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)
markOverdefined:   %3 = icmp eq %swift.type* %2, null

Popped off OI-WL:   %3 = icmp eq %swift.type* %2, null
Marking Edge Executable:  -> 

Popped off OI-WL:   %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)

Popped off OI-WL:   %7 = bitcast %objc_class* %6 to %swift.type*

Popped off OI-WL:   %6 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %objc_class*))

Popped off I-WL:   %12 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6

Popped off I-WL: 
define i32 @main(i32, i8**) #0 {
  ret i32 0
}


Popped off I-WL: 
define hidden swiftcc i1 @"$s7partial1BC1fySbxlF"(%swift.opaque* noalias nocapture, %swift.type*, %T7partial1BC* swiftself) #0 {
  ret i1 false
}


Popped off I-WL:   %1 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 0) #6

Popped off I-WL:   %2 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6

Popped off I-WL: 
; Function Attrs: noinline nounwind readnone
define hidden swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64) #4 {
  %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
  %3 = icmp eq %swift.type* %2, null
  %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)
  br i1 %3, label %5, label %8

5:                                                ; preds = %1
  %6 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %objc_class*))
  %7 = bitcast %objc_class* %6 to %swift.type*
  store atomic %swift.type* %7, %swift.type** @"$s7partial1BCML" release, align 8
  br label %8

8:                                                ; preds = %5, %1
  %9 = phi %swift.type* [ %4, %1 ], [ %7, %5 ]
  %10 = insertvalue %swift.metadata_response undef, %swift.type* %9, 0
  %11 = insertvalue %swift.metadata_response %10, i64 0, 1
  ret %swift.metadata_response %11
}


Popped off I-WL:   %11 = insertvalue %swift.metadata_response %10, i64 0, 1

Popped off I-WL:   %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)

Popped off I-WL:   %3 = icmp eq %swift.type* %2, null

Popped off I-WL:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8

Popped off I-WL: 
; Function Attrs: noinline nounwind readnone
define hidden swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64) #4 {
  %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
  %3 = icmp eq %swift.type* %2, null
  %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)
  br i1 %3, label %5, label %8

5:                                                ; preds = %1
  %6 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %objc_class*))
  %7 = bitcast %objc_class* %6 to %swift.type*
  store atomic %swift.type* %7, %swift.type** @"$s7partial1ACML" release, align 8
  br label %8

8:                                                ; preds = %5, %1
  %9 = phi %swift.type* [ %4, %1 ], [ %7, %5 ]
  %10 = insertvalue %swift.metadata_response undef, %swift.type* %9, 0
  %11 = insertvalue %swift.metadata_response %10, i64 0, 1
  ret %swift.metadata_response %11
}


Popped off I-WL:   %11 = insertvalue %swift.metadata_response %10, i64 0, 1

Popped off I-WL:   %4 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %2)

Popped off I-WL:   %3 = icmp eq %swift.type* %2, null

Popped off I-WL:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8

Popped off BBWL: 
21:                                               ; preds = %16
  %22 = bitcast %swift.type* %19 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
  %23 = getelementptr inbounds i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %22, i64 11
  %24 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %23, align 8, !invariant.load !21
  %25 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
  %26 = call swiftcc i1 %24(%swift.opaque* noalias nocapture %25, %swift.type* @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
  br label %9

Marking Block Executable: 

Popped off BBWL: 
9:                                                ; preds = %11, %20, %21
  %10 = phi i1 [ %26, %21 ], [ false, %20 ], [ %15, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %3)
  ret i1 %10

markOverdefined:   %10 = phi i1 [ %26, %21 ], [ false, %20 ], [ %15, %11 ]
markOverdefined: Function '$s7partial1gSbyF'

Popped off BBWL: 
20:                                               ; preds = %16
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
  br label %9

Marking Edge Executable:  -> 

Popped off BBWL: 
16:                                               ; preds = %0
  %17 = icmp eq %swift.type* %8, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %swift.type*)
  %18 = bitcast %T7partial1AC* %2 to %T7partial1BC*
  %19 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %8)
  br i1 %17, label %20, label %21

markOverdefined:   %18 = bitcast %T7partial1AC* %2 to %T7partial1BC*

Popped off BBWL: 
11:                                               ; preds = %0
  %12 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6
  %13 = extractvalue %swift.metadata_response %12, 0
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
  %14 = bitcast %swift.type* %13 to i8*
  %15 = icmp eq i8* bitcast (%swift.type* @"$ss6UInt16VN" to i8*), %14
  br label %9

Marking Edge Executable:  -> 

Popped off OI-WL:   %18 = bitcast %T7partial1AC* %2 to %T7partial1BC*

Popped off OI-WL: 
define hidden swiftcc i1 @"$s7partial1gSbyF"() #0 {
  %1 = alloca %Ts6UInt16V, align 2
  %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
  %3 = bitcast %Ts6UInt16V* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %3)
  %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i32 0, i32 0
  store i16 9, i16* %4, align 2
  %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0, i32 0
  %6 = load %swift.type*, %swift.type** %5, align 8
  %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %swift.type*)
  %8 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %6)
  br i1 %7, label %11, label %16

9:                                                ; preds = %11, %20, %21
  %10 = phi i1 [ %26, %21 ], [ false, %20 ], [ %15, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %3)
  ret i1 %10

11:                                               ; preds = %0
  %12 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6
  %13 = extractvalue %swift.metadata_response %12, 0
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
  %14 = bitcast %swift.type* %13 to i8*
  %15 = icmp eq i8* bitcast (%swift.type* @"$ss6UInt16VN" to i8*), %14
  br label %9

16:                                               ; preds = %0
  %17 = icmp eq %swift.type* %8, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %swift.type*)
  %18 = bitcast %T7partial1AC* %2 to %T7partial1BC*
  %19 = call %swift.type* @llvm.ssa.copy.140318378271888(%swift.type* %8)
  br i1 %17, label %20, label %21

20:                                               ; preds = %16
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
  br label %9

21:                                               ; preds = %16
  %22 = bitcast %swift.type* %19 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
  %23 = getelementptr inbounds i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %22, i64 11
  %24 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %23, align 8, !invariant.load !21
  %25 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
  %26 = call swiftcc i1 %24(%swift.opaque* noalias nocapture %25, %swift.type* @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
  br label %9
}


Popped off OI-WL:   %10 = phi i1 [ %26, %21 ], [ false, %20 ], [ %15, %11 ]
RESOLVING UNDEFS
Marking Block Executable: 
Marking Block Executable: 
Marking Block Executable: 
Marking Block Executable: 
Marking Block Executable: 
Marking Block Executable: 
Marking Block Executable: 
Marking Block Executable: 
Marking Block Executable: 
Marking Block Executable: 
Marking Block Executable: 
Marking Block Executable: 
Marking Block Executable: 
Marking Block Executable: 
Marking Block Executable: 
Marking Block Executable: 

Popped off BBWL: 
  %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
  %3 = icmp eq %swift.type* %2, null
  br i1 %3, label %4, label %7
Marking Edge Executable:  -> 
Marking Block Executable: 
Marking Edge Executable:  -> 
Marking Block Executable: 

Popped off BBWL: 
7:                                                ; preds = %4, %1
  %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
  %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
  %10 = insertvalue %swift.metadata_response %9, i64 0, 1
  ret %swift.metadata_response %10

Popped off BBWL: 
4:                                                ; preds = %1
  %5 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %objc_class*))
  %6 = bitcast %objc_class* %5 to %swift.type*
  store atomic %swift.type* %6, %swift.type** @"$s7partial1ACML" release, align 8
  br label %7
Marking Edge Executable:  -> 

Popped off BBWL: 
  %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
  %3 = icmp eq %swift.type* %2, null
  br i1 %3, label %4, label %7
Marking Edge Executable:  -> 
Marking Block Executable: 
Marking Edge Executable:  -> 
Marking Block Executable: 

Popped off BBWL: 
7:                                                ; preds = %4, %1
  %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
  %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
  %10 = insertvalue %swift.metadata_response %9, i64 0, 1
  ret %swift.metadata_response %10

Popped off BBWL: 
4:                                                ; preds = %1
  %5 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %objc_class*))
  %6 = bitcast %objc_class* %5 to %swift.type*
  store atomic %swift.type* %6, %swift.type** @"$s7partial1BCML" release, align 8
  br label %7
Marking Edge Executable:  -> 

Popped off BBWL: 
  %2 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6
  %3 = extractvalue %swift.metadata_response %2, 0
  %4 = bitcast %swift.type* %0 to i8*
  %5 = bitcast %swift.type* %3 to i8*
  %6 = icmp eq i8* %4, %5
  ret i1 %6

Popped off BBWL: 
  %1 = alloca %Ts6UInt16V, align 2
  %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
  %3 = bitcast %Ts6UInt16V* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %3)
  %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i32 0, i32 0
  store i16 9, i16* %4, align 2
  %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0, i32 0
  %6 = load %swift.type*, %swift.type** %5, align 8
  %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %swift.type*)
  br i1 %7, label %10, label %15
Marking Edge Executable:  -> 
Marking Block Executable: 
Marking Edge Executable:  -> 
Marking Block Executable: 

Popped off BBWL: 
15:                                               ; preds = %0
  %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %swift.type*)
  %17 = bitcast %T7partial1AC* %2 to %T7partial1BC*
  br i1 %16, label %18, label %19
Marking Edge Executable:  -> 
Marking Block Executable: 
Marking Edge Executable:  -> 
Marking Block Executable: 

Popped off BBWL: 
19:                                               ; preds = %15
  %20 = bitcast %swift.type* %6 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
  %21 = getelementptr inbounds i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %20, i64 11
  %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
  %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
  %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture %23, %swift.type* @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
  br label %8
Marking Edge Executable:  -> 
Marking Block Executable: 

Popped off BBWL: 
8:                                                ; preds = %10, %18, %19
  %9 = phi i1 [ %24, %19 ], [ false, %18 ], [ %14, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %3)
  ret i1 %9

Popped off BBWL: 
18:                                               ; preds = %15
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
  br label %8
Marking Edge Executable:  -> 

Popped off BBWL: 
10:                                               ; preds = %0
  %11 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6
  %12 = extractvalue %swift.metadata_response %11, 0
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
  %13 = bitcast %swift.type* %12 to i8*
  %14 = icmp eq i8* bitcast (%swift.type* @"$ss6UInt16VN" to i8*), %13
  br label %8
Marking Edge Executable:  -> 

Popped off BBWL: 
  %1 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 0) #6
  %2 = extractvalue %swift.metadata_response %1, 0
  %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #1
  %4 = bitcast %swift.refcounted* %3 to %T7partial1BC*
  %5 = bitcast %T7partial1BC* %4 to %T7partial1AC*
  ret %T7partial1AC* %5

Popped off BBWL: 
  ret %T7partial1BC* %0

Popped off BBWL: 
  %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1
  %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
  ret %T7partial1BC* %3

Popped off BBWL: 
  %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*
  call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
  ret void

Popped off BBWL: 
  %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*
  ret %swift.refcounted* %2

Popped off BBWL: 
  ret i1 false

Popped off BBWL: 
  %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*
  call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
  ret void

Popped off BBWL: 
  %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*
  ret %swift.refcounted* %2

Popped off BBWL: 
  %4 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #6
  ret i1 %4

Popped off BBWL: 
  ret %T7partial1AC* %0

Popped off BBWL: 
  %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1
  %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
  ret %T7partial1AC* %3

Popped off BBWL: 
  ret i32 0

Popped off V-WL: 
define i32 @main(i32, i8**) #0 {
  ret i32 0
}


Popped off V-WL: 
define hidden swiftcc %T7partial1AC* @"$s7partial1ACACycfC"(%swift.type* swiftself) #0 {
  %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1
  %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
  ret %T7partial1AC* %3
}


Popped off V-WL:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*

Popped off V-WL:   %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1

Popped off V-WL: 
define hidden swiftcc %T7partial1AC* @"$s7partial1ACACycfc"(%T7partial1AC* swiftself) #0 {
  ret %T7partial1AC* %0
}


Popped off V-WL: 
define hidden swiftcc i1 @"$s7partial1AC1fySbxlF"(%swift.opaque* noalias nocapture, %swift.type*, %T7partial1AC* swiftself) #0 {
  %4 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #6
  ret i1 %4
}


Popped off V-WL:   %4 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #6

Popped off V-WL: 
define hidden swiftcc %swift.refcounted* @"$s7partial1ACfd"(%T7partial1AC* swiftself) #0 {
  %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*
  ret %swift.refcounted* %2
}


Popped off V-WL:   %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*

Popped off V-WL:   %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*

Popped off V-WL: 
define hidden swiftcc i1 @"$s7partial1BC1fySbxlF"(%swift.opaque* noalias nocapture, %swift.type*, %T7partial1BC* swiftself) #0 {
  ret i1 false
}


Popped off V-WL: 
define hidden swiftcc %swift.refcounted* @"$s7partial1BCfd"(%T7partial1BC* swiftself) #0 {
  %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*
  ret %swift.refcounted* %2
}


Popped off V-WL:   %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*

Popped off V-WL:   %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*

Popped off V-WL: 
define hidden swiftcc %T7partial1BC* @"$s7partial1BCACycfC"(%swift.type* swiftself) #0 {
  %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1
  %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
  ret %T7partial1BC* %3
}


Popped off V-WL:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*

Popped off V-WL:   %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1

Popped off V-WL: 
define hidden swiftcc %T7partial1BC* @"$s7partial1BCACycfc"(%T7partial1BC* swiftself) #0 {
  ret %T7partial1BC* %0
}


Popped off V-WL: 
; Function Attrs: noinline
define hidden swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() #3 {
  %1 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 0) #6
  %2 = extractvalue %swift.metadata_response %1, 0
  %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #1
  %4 = bitcast %swift.refcounted* %3 to %T7partial1BC*
  %5 = bitcast %T7partial1BC* %4 to %T7partial1AC*
  ret %T7partial1AC* %5
}


Popped off V-WL:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()

Popped off V-WL:   %5 = bitcast %T7partial1BC* %4 to %T7partial1AC*

Popped off V-WL:   %4 = bitcast %swift.refcounted* %3 to %T7partial1BC*

Popped off V-WL:   %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #1

Popped off V-WL:   %2 = extractvalue %swift.metadata_response %1, 0

Popped off V-WL:   %1 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 0) #6

Popped off V-WL:   %14 = icmp eq i8* bitcast (%swift.type* @"$ss6UInt16VN" to i8*), %13

Popped off V-WL:   %13 = bitcast %swift.type* %12 to i8*

Popped off V-WL:   %12 = extractvalue %swift.metadata_response %11, 0

Popped off V-WL:   %11 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6

Popped off V-WL: 
define hidden swiftcc i1 @"$s7partial1gSbyF"() #0 {
  %1 = alloca %Ts6UInt16V, align 2
  %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
  %3 = bitcast %Ts6UInt16V* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %3)
  %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i32 0, i32 0
  store i16 9, i16* %4, align 2
  %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0, i32 0
  %6 = load %swift.type*, %swift.type** %5, align 8
  %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %swift.type*)
  br i1 %7, label %10, label %15

8:                                                ; preds = %10, %18, %19
  %9 = phi i1 [ %24, %19 ], [ false, %18 ], [ %14, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %3)
  ret i1 %9

10:                                               ; preds = %0
  %11 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6
  %12 = extractvalue %swift.metadata_response %11, 0
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
  %13 = bitcast %swift.type* %12 to i8*
  %14 = icmp eq i8* bitcast (%swift.type* @"$ss6UInt16VN" to i8*), %13
  br label %8

15:                                               ; preds = %0
  %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %swift.type*)
  %17 = bitcast %T7partial1AC* %2 to %T7partial1BC*
  br i1 %16, label %18, label %19

18:                                               ; preds = %15
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
  br label %8

19:                                               ; preds = %15
  %20 = bitcast %swift.type* %6 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
  %21 = getelementptr inbounds i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %20, i64 11
  %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
  %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
  %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture %23, %swift.type* @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
  br label %8
}


Popped off V-WL:   %9 = phi i1 [ %24, %19 ], [ false, %18 ], [ %14, %10 ]

Popped off V-WL:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture %23, %swift.type* @"$ss6UInt16VN", %T7partial1AC* swiftself %2)

Popped off V-WL:   %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*

Popped off V-WL:   %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21

Popped off V-WL:   %21 = getelementptr inbounds i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %20, i64 11

Popped off V-WL:   %20 = bitcast %swift.type* %6 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**

Popped off V-WL:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %swift.type*)

Popped off V-WL:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %swift.type*)

Popped off V-WL:   %6 = load %swift.type*, %swift.type** %5, align 8

Popped off V-WL:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0, i32 0

Popped off V-WL:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i32 0, i32 0

Popped off V-WL:   %3 = bitcast %Ts6UInt16V* %1 to i8*

Popped off V-WL:   %1 = alloca %Ts6UInt16V, align 2

Popped off V-WL:   %6 = icmp eq i8* %4, %5

Popped off V-WL:   %5 = bitcast %swift.type* %3 to i8*

Popped off V-WL:   %4 = bitcast %swift.type* %0 to i8*

Popped off V-WL:   %3 = extractvalue %swift.metadata_response %2, 0

Popped off V-WL:   %2 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 0) #6

Popped off V-WL:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]

Popped off V-WL: @"$s7partial1BCML" = internal global %swift.type* null, align 8

Popped off V-WL:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8

Popped off V-WL:   %6 = bitcast %objc_class* %5 to %swift.type*

Popped off V-WL:   %5 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %objc_class*))

Popped off V-WL: 
; Function Attrs: noinline nounwind readnone
define hidden swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64) #4 {
  %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
  %3 = icmp eq %swift.type* %2, null
  br i1 %3, label %4, label %7

4:                                                ; preds = %1
  %5 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %objc_class*))
  %6 = bitcast %objc_class* %5 to %swift.type*
  store atomic %swift.type* %6, %swift.type** @"$s7partial1BCML" release, align 8
  br label %7

7:                                                ; preds = %4, %1
  %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
  %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
  %10 = insertvalue %swift.metadata_response %9, i64 0, 1
  ret %swift.metadata_response %10
}


Popped off V-WL:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1

Popped off V-WL:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0

Popped off V-WL:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]

Popped off V-WL:   %3 = icmp eq %swift.type* %2, null

Popped off V-WL:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8

Popped off V-WL:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]

Popped off V-WL: @"$s7partial1ACML" = internal global %swift.type* null, align 8

Popped off V-WL:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8

Popped off V-WL:   %6 = bitcast %objc_class* %5 to %swift.type*

Popped off V-WL:   %5 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %objc_class*))

Popped off V-WL: 
; Function Attrs: noinline nounwind readnone
define hidden swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64) #4 {
  %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
  %3 = icmp eq %swift.type* %2, null
  br i1 %3, label %4, label %7

4:                                                ; preds = %1
  %5 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %objc_class*))
  %6 = bitcast %objc_class* %5 to %swift.type*
  store atomic %swift.type* %6, %swift.type** @"$s7partial1ACML" release, align 8
  br label %7

7:                                                ; preds = %4, %1
  %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
  %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
  %10 = insertvalue %swift.metadata_response %9, i64 0, 1
  ret %swift.metadata_response %10
}


Popped off V-WL:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1

Popped off V-WL:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0

Popped off V-WL:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]

Popped off V-WL:   %3 = icmp eq %swift.type* %2, null

Popped off V-WL:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
GLOBAL DEAD: 
; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

	discovered a new reachable node %2
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %3
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %3
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %0
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %18
	discovered a new reachable node %19
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
DeadArgumentEliminationPass - Deleting dead varargs
DeadArgumentEliminationPass - Determining liveness
DeadArgumentEliminationPass - Intrinsically live fn: main
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial1ACACycfC
DeadArgumentEliminationPass - Intrinsically live fn: swift_allocObject
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial1ACACycfc
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial1AC1fySbxlF
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial1ACfd
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial1ACfD
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial1BC1fySbxlF
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial1BCfd
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial1BCfD
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial1BCACycfC
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial1BCACycfc
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial8makeAorBAA1ACyF
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial1gSbyF
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial1AC1fySbxlFTf4dd_n
DeadArgumentEliminationPass - Intrinsically live fn: swift_deallocClassInstance
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial1BCMa
DeadArgumentEliminationPass - Intrinsically live fn: llvm.lifetime.start.p0i8
DeadArgumentEliminationPass - Intrinsically live fn: swift_release
DeadArgumentEliminationPass - Intrinsically live fn: llvm.lifetime.end.p0i8
DeadArgumentEliminationPass - Intrinsically live fn: $s7partial1ACMa
DeadArgumentEliminationPass - Intrinsically live fn: swift_getInitializedObjCClass
	discovered a new reachable node %2


INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %3
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1AC* %0
	discovered a new reachable node %3


INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlF
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %4 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #5
IC: Visiting:   ret i1 %4
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*
IC: Old =   %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*
    New =   <badref> = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i32 0, i32 0
IC: ADD:   <badref> = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i32 0, i32 0
IC: ERASE   %3 = bitcast %T7partial1AC* %0 to %swift.refcounted*
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i32 0, i32 0
IC: Mod =   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i32 0, i32 0
    New =   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: ADD:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2


INSTCOMBINE ITERATION #2 on $s7partial1ACfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*
IC: Old =   %2 = bitcast %T7partial1AC* %0 to %swift.refcounted*
    New =   <badref> = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i32 0, i32 0
IC: ADD:   <badref> = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i32 0, i32 0
IC: ERASE   %3 = bitcast %T7partial1AC* %0 to %swift.refcounted*
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i32 0, i32 0
IC: Mod =   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i32 0, i32 0
    New =   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: ADD:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void


INSTCOMBINE ITERATION #2 on $s7partial1ACfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void
	discovered a new reachable node %3


INSTCOMBINE ITERATION #1 on $s7partial1BC1fySbxlF
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i1 false
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*
IC: Old =   %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*
    New =   <badref> = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i32 0, i32 0
IC: ADD:   <badref> = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i32 0, i32 0
IC: ERASE   %3 = bitcast %T7partial1BC* %0 to %swift.refcounted*
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i32 0, i32 0
IC: Mod =   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i32 0, i32 0
    New =   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: ADD:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2


INSTCOMBINE ITERATION #2 on $s7partial1BCfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*
IC: Old =   %2 = bitcast %T7partial1BC* %0 to %swift.refcounted*
    New =   <badref> = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i32 0, i32 0
IC: ADD:   <badref> = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i32 0, i32 0
IC: ERASE   %3 = bitcast %T7partial1BC* %0 to %swift.refcounted*
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i32 0, i32 0
IC: Mod =   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i32 0, i32 0
    New =   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: ADD:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void


INSTCOMBINE ITERATION #2 on $s7partial1BCfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #1
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
IC: Visiting:   ret %T7partial1BC* %3
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1BC* %0
	discovered a new reachable node %0


INSTCOMBINE ITERATION #1 on $s7partial8makeAorBAA1ACyF
IC: ADDING: 6 instrs to worklist
IC: Visiting:   %1 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #5
IC: Visiting:   %2 = extractvalue %swift.metadata_response %1, 0
IC: Visiting:   %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #1
IC: Visiting:   %4 = bitcast %swift.refcounted* %3 to %T7partial1BC*
IC: Visiting:   %5 = bitcast %T7partial1BC* %4 to %T7partial1AC*
IC: Old =   %5 = bitcast %T7partial1BC* %4 to %T7partial1AC*
    New =   <badref> = bitcast %swift.refcounted* %3 to %T7partial1AC*
IC: ADD:   <badref> = bitcast %swift.refcounted* %3 to %T7partial1AC*
IC: ERASE   %6 = bitcast %T7partial1BC* %4 to %T7partial1AC*
IC: ADD:   %4 = bitcast %swift.refcounted* %3 to %T7partial1BC*
IC: DCE:   %4 = bitcast %swift.refcounted* %3 to %T7partial1BC*
IC: ERASE   %4 = bitcast %swift.refcounted* %3 to %T7partial1BC*
IC: ADD:   %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #1
IC: Visiting:   %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #1
IC: Visiting:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %4


INSTCOMBINE ITERATION #2 on $s7partial8makeAorBAA1ACyF
IC: ADDING: 5 instrs to worklist
IC: Visiting:   %1 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #5
IC: Visiting:   %2 = extractvalue %swift.metadata_response %1, 0
IC: Visiting:   %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #1
IC: Visiting:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %4
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %18
	discovered a new reachable node %19


INSTCOMBINE ITERATION #1 on $s7partial1gSbyF
IC: ConstFold operand of:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %swift.type*)
    Old = %swift.type* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %swift.type*)
    New = %swift.type* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)
IC: ConstFold operand of:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %swift.type*)
    Old = %swift.type* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %swift.type*)
    New = %swift.type* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)
IC: DCE:   %17 = bitcast %T7partial1AC* %2 to %T7partial1BC*
IC: ADDING: 30 instrs to worklist
IC: Visiting:   %1 = alloca %Ts6UInt16V, align 2
IC: Visiting:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %3 = bitcast %Ts6UInt16V* %1 to i8*
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 2, i8* %3)
IC: Mod =   call void @llvm.lifetime.start.p0i8(i64 2, i8* %3)
    New =   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
IC: ADD:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i32 0, i32 0
IC: Mod =   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i32 0, i32 0
    New =   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
IC: ADD:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
IC: Visiting:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
IC: Visiting:   store i16 9, i16* %4, align 2
IC: Visiting:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0, i32 0
IC: Mod =   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0, i32 0
    New =   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
IC: ADD:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
IC: Visiting:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
IC: Visiting:   %6 = load %swift.type*, %swift.type** %5, align 8
IC: Visiting:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %7, label %10, label %15
IC: Visiting:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %16, label %17, label %18
IC: Visiting:   %19 = bitcast %swift.type* %6 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: Visiting:   %20 = getelementptr inbounds i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %19, i64 11
IC: ADD:   %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
IC: Old =   %21 = getelementptr inbounds i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %19, i64 11
    New =   <badref> = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: ADD:   <badref> = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: ERASE   %22 = getelementptr inbounds i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %19, i64 11
IC: ADD:   %19 = bitcast %swift.type* %6 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: DCE:   %19 = bitcast %swift.type* %6 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: ERASE   %19 = bitcast %swift.type* %6 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: ADD:   %6 = load %swift.type*, %swift.type** %5, align 8
IC: Visiting:   %6 = load %swift.type*, %swift.type** %5, align 8
IC: Visiting:   %20 = bitcast %swift.type* %19 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: Visiting:   %19 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
IC: Visiting:   %21 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %20, align 8, !invariant.load !21
IC: Visiting:   %22 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
IC: Visiting:   %23 = call swiftcc i1 %21(%swift.opaque* noalias nocapture %22, %swift.type* @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
IC: Mod =   %23 = call swiftcc i1 %21(%swift.opaque* noalias nocapture %22, %swift.type* @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
    New =   %23 = call swiftcc i1 %21(%swift.opaque* noalias nocapture nonnull %22, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
IC: ADD:   %23 = call swiftcc i1 %21(%swift.opaque* noalias nocapture nonnull %22, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
IC: Visiting:   %23 = call swiftcc i1 %21(%swift.opaque* noalias nocapture nonnull %22, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
IC: Visiting:   call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
IC: ADD:   %24 = bitcast %T7partial1AC* %2 to %swift.refcounted*
IC: ADD:   call void @swift_release(%swift.refcounted* %24)
IC: ERASE   call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
IC: ADD:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   call void @swift_release(%swift.refcounted* %24) #1
IC: Visiting:   %24 = bitcast %T7partial1AC* %2 to %swift.refcounted*
IC: Old =   %24 = bitcast %T7partial1AC* %2 to %swift.refcounted*
    New =   <badref> = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0
IC: ADD:   call void @swift_release(%swift.refcounted* <badref>) #1
IC: ADD:   <badref> = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0
IC: ERASE   %25 = bitcast %T7partial1AC* %2 to %swift.refcounted*
IC: ADD:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %24 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0
IC: Mod =   %24 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0
    New =   %24 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: ADD:   %24 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   %24 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   call void @swift_release(%swift.refcounted* %24) #1
IC: Visiting:   br label %8
IC: Visiting:   %9 = phi i1 [ %23, %18 ], [ false, %17 ], [ %14, %10 ]
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 2, i8* %3)
IC: Mod =   call void @llvm.lifetime.end.p0i8(i64 2, i8* %3)
    New =   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
IC: ADD:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   ret i1 %9
IC: Visiting:   call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
IC: ADD:   %18 = bitcast %T7partial1AC* %2 to %swift.refcounted*
IC: ADD:   call void @swift_release(%swift.refcounted* %18)
IC: ERASE   call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
IC: ADD:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   call void @swift_release(%swift.refcounted* %18) #1
IC: Visiting:   %18 = bitcast %T7partial1AC* %2 to %swift.refcounted*
IC: Old =   %18 = bitcast %T7partial1AC* %2 to %swift.refcounted*
    New =   <badref> = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0
IC: ADD:   call void @swift_release(%swift.refcounted* <badref>) #1
IC: ADD:   <badref> = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0
IC: ERASE   %19 = bitcast %T7partial1AC* %2 to %swift.refcounted*
IC: ADD:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0
IC: Mod =   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0
    New =   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: ADD:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   call void @swift_release(%swift.refcounted* %18) #1
IC: Visiting:   br label %8
IC: Visiting:   %11 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #5
IC: Visiting:   %12 = extractvalue %swift.metadata_response %11, 0
IC: Visiting:   call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
IC: ADD:   %13 = bitcast %T7partial1AC* %2 to %swift.refcounted*
IC: ADD:   call void @swift_release(%swift.refcounted* %13)
IC: ERASE   call void bitcast (void (%swift.refcounted*)* @swift_release to void (%T7partial1AC*)*)(%T7partial1AC* %2) #1
IC: ADD:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   call void @swift_release(%swift.refcounted* %13) #1
IC: Visiting:   %13 = bitcast %T7partial1AC* %2 to %swift.refcounted*
IC: Old =   %13 = bitcast %T7partial1AC* %2 to %swift.refcounted*
    New =   <badref> = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0
IC: ADD:   call void @swift_release(%swift.refcounted* <badref>) #1
IC: ADD:   <badref> = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0
IC: ERASE   %14 = bitcast %T7partial1AC* %2 to %swift.refcounted*
IC: ADD:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0
IC: Mod =   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i32 0, i32 0
    New =   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: ADD:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   call void @swift_release(%swift.refcounted* %13) #1
IC: Visiting:   %14 = bitcast %swift.type* %12 to i8*
IC: Visiting:   %15 = icmp eq i8* bitcast (%swift.type* @"$ss6UInt16VN" to i8*), %14
IC: Old =   %15 = icmp eq i8* %14, bitcast (%swift.type* @"$ss6UInt16VN" to i8*)
    New =   <badref> = icmp eq %swift.type* %12, @"$ss6UInt16VN"
IC: ADD:   %9 = phi i1 [ %25, %20 ], [ false, %18 ], [ <badref>, %10 ]
IC: ADD:   <badref> = icmp eq %swift.type* %12, @"$ss6UInt16VN"
IC: ERASE   %16 = icmp eq i8* %14, bitcast (%swift.type* @"$ss6UInt16VN" to i8*)
IC: ADD:   %14 = bitcast %swift.type* %12 to i8*
IC: DCE:   %14 = bitcast %swift.type* %12 to i8*
IC: ERASE   %14 = bitcast %swift.type* %12 to i8*
IC: ADD:   %12 = extractvalue %swift.metadata_response %11, 0
IC: Visiting:   %12 = extractvalue %swift.metadata_response %11, 0
IC: Visiting:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN"
IC: Visiting:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ]
IC: Visiting:   br label %8


INSTCOMBINE ITERATION #2 on $s7partial1gSbyF
IC: ADDING: 32 instrs to worklist
IC: Visiting:   %1 = alloca %Ts6UInt16V, align 2
IC: Visiting:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %3 = bitcast %Ts6UInt16V* %1 to i8*
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
IC: Visiting:   store i16 9, i16* %4, align 2
IC: Visiting:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
IC: Visiting:   %6 = load %swift.type*, %swift.type** %5, align 8
IC: Visiting:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %7, label %10, label %15
IC: Visiting:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %16, label %17, label %19
IC: Visiting:   %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
IC: Visiting:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: Visiting:   %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
IC: Visiting:   %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
IC: Visiting:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
IC: Visiting:   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   call void @swift_release(%swift.refcounted* %25) #1
IC: Visiting:   br label %8
IC: Visiting:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ]
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   ret i1 %9
IC: Visiting:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   call void @swift_release(%swift.refcounted* %18) #1
IC: Visiting:   br label %8
IC: Visiting:   %11 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #5
IC: Visiting:   %12 = extractvalue %swift.metadata_response %11, 0
IC: Visiting:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   call void @swift_release(%swift.refcounted* %13) #1
IC: Visiting:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN"
IC: Visiting:   br label %8
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlFTf4dd_n
IC: ADDING: 6 instrs to worklist
IC: Visiting:   %2 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #5
IC: Visiting:   %3 = extractvalue %swift.metadata_response %2, 0
IC: Visiting:   %4 = bitcast %swift.type* %0 to i8*
IC: Visiting:   %5 = bitcast %swift.type* %3 to i8*
IC: Visiting:   %6 = icmp eq i8* %4, %5
IC: Old =   %6 = icmp eq i8* %4, %5
    New =   <badref> = icmp eq %swift.type* %0, %3
IC: ADD:   <badref> = icmp eq %swift.type* %0, %3
IC: ERASE   %7 = icmp eq i8* %4, %5
IC: ADD:   %4 = bitcast %swift.type* %0 to i8*
IC: ADD:   %5 = bitcast %swift.type* %3 to i8*
IC: DCE:   %5 = bitcast %swift.type* %3 to i8*
IC: ERASE   %5 = bitcast %swift.type* %3 to i8*
IC: ADD:   %3 = extractvalue %swift.metadata_response %2, 0
IC: Visiting:   %3 = extractvalue %swift.metadata_response %2, 0
IC: DCE:   %4 = bitcast %swift.type* %0 to i8*
IC: ERASE   %4 = bitcast %swift.type* %0 to i8*
IC: Visiting:   %4 = icmp eq %swift.type* %0, %3
IC: Mod =   %4 = icmp eq %swift.type* %0, %3
    New =   %4 = icmp eq %swift.type* %3, %0
IC: ADD:   %4 = icmp eq %swift.type* %3, %0
IC: Visiting:   %4 = icmp eq %swift.type* %3, %0
IC: Visiting:   ret i1 %4


INSTCOMBINE ITERATION #2 on $s7partial1AC1fySbxlFTf4dd_n
IC: ADDING: 4 instrs to worklist
IC: Visiting:   %2 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #5
IC: Visiting:   %3 = extractvalue %swift.metadata_response %2, 0
IC: Visiting:   %4 = icmp eq %swift.type* %3, %0
IC: Visiting:   ret i1 %4
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7


INSTCOMBINE ITERATION #1 on $s7partial1BCMa
IC: ConstFold operand of:   %5 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %objc_class*))
    Old = %objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i32 0, i32 2) to %objc_class*)
    New = %objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*)
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1BCML" release, align 8
IC: Visiting:   br label %7
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7


INSTCOMBINE ITERATION #1 on $s7partial1ACMa
IC: ConstFold operand of:   %5 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %objc_class*))
    Old = %objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %objc_class*)
    New = %objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*)
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1ACML" release, align 8
IC: Visiting:   br label %7
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: 'main'<<0x7f9e6b946a20>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: main: 0 call sites.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: 'main'<<0x7f9e6b946a20>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %2
SROA function: main
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function 'main'
	discovered a new reachable node %2


INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0
Calculated Rank[] = 3
Calculated Rank[] = 4
	discovered a new reachable node %2
	discovered a new reachable node %2


INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0
Instruction Merger
GVN iteration: 0
SCCP on function 'main'
Marking Block Executable: 
markOverdefined: i32 %0
markOverdefined: i8** %1

Popped off OI-WL: i8** %1

Popped off OI-WL: i32 %0

Popped off BBWL: 
  ret i32 0

RESOLVING UNDEFs
DemandedBits: Root:   ret i32 0


INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0
Jump threading on function 'main'
		Looking for trivial roots
Found a new trivial root: %2
Last visited node: %2
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %2
Found roots: %2 
	discovered a new reachable node nullptr
	discovered a new reachable node %2
mark live:   ret i32 0
mark block live: 
post-dom root child is a return: 
work live:   ret i32 0
final dead terminator blocks: 
	discovered a new reachable node %2


INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0
Inliner visiting SCC: INDIRECTNODE: 0 call sites.
Inliner visiting SCC: swift_allocObject: 0 call sites.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1ACACycfC'<<0x7f9e6b944e30>>  #uses=1
  CS<0x7f9e6a443de0> calls function 'swift_allocObject'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: $s7partial1ACACycfC: 0 call sites.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1ACACycfC'<<0x7f9e6b944e30>>  #uses=1
  CS<0x7f9e6a443de0> calls function 'swift_allocObject'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %1
SROA function: $s7partial1ACACycfC
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial1ACACycfC'
LVI Getting value %swift.type* %0 at ''
  Result = overdefined
LVI Getting block end value   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC* at ''
PUSH:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC* in 
 compute BB '' - unknown inst def found.
POP   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC* in  = overdefined
  Result = overdefined
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %3
Marked as tail call candidate:   %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
Calculated Rank[] = 3
	discovered a new reachable node %1
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %3
Instruction Merger
GVN iteration: 0
SCCP on function '$s7partial1ACACycfC'
Marking Block Executable: 
markOverdefined: %swift.type* %0

Popped off OI-WL: %swift.type* %0
markOverdefined:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2

Popped off OI-WL:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
markOverdefined:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*

Popped off OI-WL:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*

Popped off BBWL: 
  %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
  %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
  ret %T7partial1AC* %3

RESOLVING UNDEFs
DemandedBits: Root:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
DemandedBits: Root:   ret %T7partial1AC* %3
DemandedBits: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
DemandedBits: Visiting:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2


INSTCOMBINE ITERATION #1 on $s7partial1ACACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %3
Jump threading on function '$s7partial1ACACycfC'
LVI Getting value %swift.type* %0 at ''
  Result = overdefined
LVI Getting block end value   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC* at ''
PUSH:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC* in 
 compute BB '' - unknown inst def found.
POP   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC* in  = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %1
Last visited node: %1
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %1
Found roots: %1 
	discovered a new reachable node nullptr
	discovered a new reachable node %1
mark live:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
mark block live: 
mark live:   ret %T7partial1AC* %3
post-dom root child is a return: 
work live:   ret %T7partial1AC* %3
mark live:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
work live:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
work live:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
final dead terminator blocks: 
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %3
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1ACACycfC'<<0x7f9e6b944e30>>  #uses=1
  CS<0x7f9e6a443de0> calls function 'swift_allocObject'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1ACACycfc'<<0x7f9e6b944f70>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: $s7partial1ACACycfc: 0 call sites.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1ACACycfc'<<0x7f9e6b944f70>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %1
SROA function: $s7partial1ACACycfc
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial1ACACycfc'
LVI Getting block end value %T7partial1AC* %0 at ''
PUSH: %T7partial1AC* %0 in 
POP %T7partial1AC* %0 in  = overdefined
  Result = overdefined
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1AC* %0
Calculated Rank[] = 3
	discovered a new reachable node %1
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1AC* %0
Instruction Merger
GVN iteration: 0
SCCP on function '$s7partial1ACACycfc'
Marking Block Executable: 
markOverdefined: %T7partial1AC* %0

Popped off OI-WL: %T7partial1AC* %0

Popped off BBWL: 
  ret %T7partial1AC* %0

RESOLVING UNDEFs
DemandedBits: Root:   ret %T7partial1AC* %0


INSTCOMBINE ITERATION #1 on $s7partial1ACACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1AC* %0
Jump threading on function '$s7partial1ACACycfc'
LVI Getting block end value %T7partial1AC* %0 at ''
PUSH: %T7partial1AC* %0 in 
POP %T7partial1AC* %0 in  = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %1
Last visited node: %1
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %1
Found roots: %1 
	discovered a new reachable node nullptr
	discovered a new reachable node %1
mark live:   ret %T7partial1AC* %0
mark block live: 
post-dom root child is a return: 
work live:   ret %T7partial1AC* %0
final dead terminator blocks: 
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1AC* %0
Inliner visiting SCC: swift_getInitializedObjCClass: 0 call sites.
Inliner visiting SCC: $s7partial1ACMa: 0 call sites.
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
SROA function: $s7partial1ACMa
EarlyCSE CVP: Add conditional value for '' as i1 true in 
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial1ACMa'
LVI Getting value   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8 at ''
  Result = overdefined
LVI Getting block end value   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8 at ''
PUSH:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8 in 
 compute BB '' - unknown inst def found.
POP   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8 in  = overdefined
  Result = overdefined
LVI Getting edge value   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8 from '' to ''
  Result = notconstant<%swift.type* null>
LVI Getting edge value   %6 = bitcast %objc_class* %5 to %swift.type* from '' to ''
PUSH:   %6 = bitcast %objc_class* %5 to %swift.type* in 
 compute BB '' - unknown inst def found.
POP   %6 = bitcast %objc_class* %5 to %swift.type* in  = overdefined
  Result = overdefined
LVI Getting block end value   %10 = insertvalue %swift.metadata_response %9, i64 0, 1 at ''
PUSH:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1 in 
 compute BB '' - unknown inst def found.
POP   %10 = insertvalue %swift.metadata_response %9, i64 0, 1 in  = overdefined
  Result = overdefined
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7


INSTCOMBINE ITERATION #1 on $s7partial1ACMa
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1ACML" release, align 8
IC: Visiting:   br label %7
Marked as tail call candidate:   %5 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
Calculated Rank[] = 3
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7


INSTCOMBINE ITERATION #1 on $s7partial1ACMa
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1ACML" release, align 8
IC: Visiting:   br label %7
Instruction Merger
GVN iteration: 0
GVN: load %swift.type* %2 has unknown dependence
SCCP on function '$s7partial1ACMa'
Marking Block Executable: 
markOverdefined: i64 %0

Popped off OI-WL: i64 %0

Popped off BBWL: 
  %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
  %3 = icmp eq %swift.type* %2, null
  br i1 %3, label %4, label %7

markOverdefined:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
markOverdefined:   %3 = icmp eq %swift.type* %2, null
Marking Block Executable: 
Marking Block Executable: 

Popped off BBWL: 
7:                                                ; preds = %4, %1
  %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
  %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
  %10 = insertvalue %swift.metadata_response %9, i64 0, 1
  ret %swift.metadata_response %10

markOverdefined:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
markOverdefined:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
markOverdefined:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
markConstant: i64 0:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1

Popped off BBWL: 
4:                                                ; preds = %1
  %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
  %6 = bitcast %objc_class* %5 to %swift.type*
  store atomic %swift.type* %6, %swift.type** @"$s7partial1ACML" release, align 8
  br label %7

markOverdefined:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
markOverdefined:   %6 = bitcast %objc_class* %5 to %swift.type*
Marking Edge Executable:  -> 

Popped off OI-WL:   %6 = bitcast %objc_class* %5 to %swift.type*

Popped off OI-WL:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))

Popped off OI-WL:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1

Popped off OI-WL:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0

Popped off OI-WL:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]

Popped off OI-WL:   %3 = icmp eq %swift.type* %2, null

Popped off OI-WL:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8

Popped off I-WL:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
RESOLVING UNDEFs
DemandedBits: Root:   br i1 %3, label %4, label %7
DemandedBits: Root:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
DemandedBits: Root:   store atomic %swift.type* %6, %swift.type** @"$s7partial1ACML" release, align 8
DemandedBits: Root:   br label %7
DemandedBits: Root:   ret %swift.metadata_response %10
DemandedBits: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
DemandedBits: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
DemandedBits: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
DemandedBits: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
DemandedBits: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
DemandedBits: Visiting:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
DemandedBits: Visiting:   %3 = icmp eq %swift.type* %2, null Alive Out: 0x1


INSTCOMBINE ITERATION #1 on $s7partial1ACMa
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1ACML" release, align 8
IC: Visiting:   br label %7
Jump threading on function '$s7partial1ACMa'
LVI Getting value   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8 at ''
  Result = overdefined
LVI Getting block end value   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8 at ''
PUSH:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8 in 
 compute BB '' - unknown inst def found.
POP   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8 in  = overdefined
  Result = overdefined
LVI Getting edge value   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8 from '' to ''
  Result = notconstant<%swift.type* null>
LVI Getting edge value   %6 = bitcast %objc_class* %5 to %swift.type* from '' to ''
PUSH:   %6 = bitcast %objc_class* %5 to %swift.type* in 
 compute BB '' - unknown inst def found.
POP   %6 = bitcast %objc_class* %5 to %swift.type* in  = overdefined
  Result = overdefined
LVI Getting block end value   %10 = insertvalue %swift.metadata_response %9, i64 0, 1 at ''
PUSH:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1 in 
 compute BB '' - unknown inst def found.
POP   %10 = insertvalue %swift.metadata_response %9, i64 0, 1 in  = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %7
Last visited node: %4
		Looking for non-trivial roots
Total: 3, Num: 4
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %7
3: %1
4: %4
Found roots: %7 
	discovered a new reachable node nullptr
	discovered a new reachable node %7
	discovered a new reachable node %1
	discovered a new reachable node %4
mark live:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
mark block live: 
mark live:   br label %7
mark live:   store atomic %swift.type* %6, %swift.type** @"$s7partial1ACML" release, align 8
mark live:   ret %swift.metadata_response %10
mark block live: 
post-dom root child is a return: 
work live:   ret %swift.metadata_response %10
mark live:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
work live:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
mark live:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
work live:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
mark live:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
work live:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
mark live:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
mark live:   %6 = bitcast %objc_class* %5 to %swift.type*
work live:   %6 = bitcast %objc_class* %5 to %swift.type*
work live:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
work live:   store atomic %swift.type* %6, %swift.type** @"$s7partial1ACML" release, align 8
work live:   br label %7
work live:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
new live blocks:
	
	
	
dead terminator blocks:
	
live control in: 
mark live:   br i1 %3, label %4, label %7
work live:   br i1 %3, label %4, label %7
mark live:   %3 = icmp eq %swift.type* %2, null
work live:   %3 = icmp eq %swift.type* %2, null
final dead terminator blocks: 
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7


INSTCOMBINE ITERATION #1 on $s7partial1ACMa
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1ACML" release, align 8
IC: Visiting:   br label %7
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1ACMa'<<0x7f9e6b908e40>>  #uses=3
  CS<0x7f9e6bb4f280> calls function 'swift_getInitializedObjCClass'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: $s7partial1AC1fySbxlFTf4dd_n: 1 call sites.
    NOT Inlining (cost=never): noinline function attribute, Call:   %2 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
	discovered a new reachable node %1
SROA function: $s7partial1AC1fySbxlFTf4dd_n
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial1AC1fySbxlFTf4dd_n'
LVI Getting block end value   %4 = icmp eq %swift.type* %3, %0 at ''
PUSH:   %4 = icmp eq %swift.type* %3, %0 in 
 compute BB '' - unknown inst def found.
POP   %4 = icmp eq %swift.type* %3, %0 in  = overdefined
  Result = overdefined
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlFTf4dd_n
IC: ADDING: 4 instrs to worklist
IC: Visiting:   %2 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
IC: Visiting:   %3 = extractvalue %swift.metadata_response %2, 0
IC: Visiting:   %4 = icmp eq %swift.type* %3, %0
IC: Visiting:   ret i1 %4
Marked as tail call candidate:   %2 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
Calculated Rank[] = 3
	discovered a new reachable node %1
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlFTf4dd_n
IC: ADDING: 4 instrs to worklist
IC: Visiting:   %2 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
IC: Visiting:   %3 = extractvalue %swift.metadata_response %2, 0
IC: Visiting:   %4 = icmp eq %swift.type* %3, %0
IC: Visiting:   ret i1 %4
Instruction Merger
GVN iteration: 0
SCCP on function '$s7partial1AC1fySbxlFTf4dd_n'
Marking Block Executable: 
markOverdefined: %swift.type* %0

Popped off OI-WL: %swift.type* %0

Popped off BBWL: 
  %2 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
  %3 = extractvalue %swift.metadata_response %2, 0
  %4 = icmp eq %swift.type* %3, %0
  ret i1 %4

markOverdefined:   %2 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
markOverdefined:   %2 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
markOverdefined:   %3 = extractvalue %swift.metadata_response %2, 0
markOverdefined:   %4 = icmp eq %swift.type* %3, %0

Popped off OI-WL:   %4 = icmp eq %swift.type* %3, %0

Popped off OI-WL:   %3 = extractvalue %swift.metadata_response %2, 0

Popped off OI-WL:   %2 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7

Popped off OI-WL:   %2 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
RESOLVING UNDEFs
DemandedBits: Root:   ret i1 %4
DemandedBits: Visiting:   %4 = icmp eq %swift.type* %3, %0 Alive Out: 0x1
DemandedBits: Visiting:   %3 = extractvalue %swift.metadata_response %2, 0
DemandedBits: Visiting:   %2 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7


INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlFTf4dd_n
IC: ADDING: 4 instrs to worklist
IC: Visiting:   %2 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
IC: Visiting:   %3 = extractvalue %swift.metadata_response %2, 0
IC: Visiting:   %4 = icmp eq %swift.type* %3, %0
IC: Visiting:   ret i1 %4
Jump threading on function '$s7partial1AC1fySbxlFTf4dd_n'
LVI Getting block end value   %4 = icmp eq %swift.type* %3, %0 at ''
PUSH:   %4 = icmp eq %swift.type* %3, %0 in 
 compute BB '' - unknown inst def found.
POP   %4 = icmp eq %swift.type* %3, %0 in  = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %1
Last visited node: %1
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %1
Found roots: %1 
	discovered a new reachable node nullptr
	discovered a new reachable node %1
mark live:   ret i1 %4
mark block live: 
post-dom root child is a return: 
work live:   ret i1 %4
mark live:   %4 = icmp eq %swift.type* %3, %0
work live:   %4 = icmp eq %swift.type* %3, %0
mark live:   %3 = extractvalue %swift.metadata_response %2, 0
work live:   %3 = extractvalue %swift.metadata_response %2, 0
mark live:   %2 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
work live:   %2 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
final dead terminator blocks: 
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlFTf4dd_n
IC: ADDING: 4 instrs to worklist
IC: Visiting:   %2 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
IC: Visiting:   %3 = extractvalue %swift.metadata_response %2, 0
IC: Visiting:   %4 = icmp eq %swift.type* %3, %0
IC: Visiting:   ret i1 %4
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1AC1fySbxlFTf4dd_n'<<0x7f9e6b9088a0>>  #uses=2
  CS<0x7f9e6b94b7e0> calls function '$s7partial1ACMa'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: $s7partial1AC1fySbxlF: 1 call sites.
    NOT Inlining (cost=never): noinline call site attribute, Call:   %4 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1AC1fySbxlF'<<0x7f9e6b908770>>  #uses=1
  CS<0x7f9e6bb4c3a0> calls function '$s7partial1AC1fySbxlFTf4dd_n'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %3
SROA function: $s7partial1AC1fySbxlF
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial1AC1fySbxlF'
LVI Getting value %swift.type* %1 at ''
  Result = overdefined
LVI Getting block end value   %4 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7 at ''
PUSH:   %4 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7 in 
 compute BB '' - unknown inst def found.
POP   %4 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7 in  = overdefined
  Result = overdefined
	discovered a new reachable node %3


INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlF
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %4 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
IC: Visiting:   ret i1 %4
Marked as tail call candidate:   %4 = call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
Calculated Rank[] = 3
Calculated Rank[] = 4
Calculated Rank[] = 5
	discovered a new reachable node %3
	discovered a new reachable node %3


INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlF
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
IC: Visiting:   ret i1 %4
Instruction Merger
GVN iteration: 0
SCCP on function '$s7partial1AC1fySbxlF'
Marking Block Executable: 
markOverdefined: %swift.opaque* %0
markOverdefined: %swift.type* %1
markOverdefined: %T7partial1AC* %2

Popped off OI-WL: %T7partial1AC* %2

Popped off OI-WL: %swift.type* %1
markOverdefined:   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7

Popped off OI-WL:   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7

Popped off OI-WL: %swift.opaque* %0

Popped off BBWL: 
  %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
  ret i1 %4

RESOLVING UNDEFs
DemandedBits: Root:   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
DemandedBits: Root:   ret i1 %4
DemandedBits: Visiting:   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7 Alive Out: 0x1


INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlF
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
IC: Visiting:   ret i1 %4
Jump threading on function '$s7partial1AC1fySbxlF'
LVI Getting value %swift.type* %1 at ''
  Result = overdefined
LVI Getting block end value   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7 at ''
PUSH:   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7 in 
 compute BB '' - unknown inst def found.
POP   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7 in  = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %3
Last visited node: %3
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %3
Found roots: %3 
	discovered a new reachable node nullptr
	discovered a new reachable node %3
mark live:   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
mark block live: 
mark live:   ret i1 %4
post-dom root child is a return: 
work live:   ret i1 %4
work live:   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
final dead terminator blocks: 
	discovered a new reachable node %3


INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlF
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
IC: Visiting:   ret i1 %4
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1AC1fySbxlF'<<0x7f9e6b908770>>  #uses=1
  CS<0x7f9e6bb4c3a0> calls function '$s7partial1AC1fySbxlFTf4dd_n'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1ACfd'<<0x7f9e6b908900>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: $s7partial1ACfd: 0 call sites.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1ACfd'<<0x7f9e6b908900>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %1
SROA function: $s7partial1ACfd
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial1ACfd'
LVI Getting block end value   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0 at ''
PUSH:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0 in 
 compute BB '' - unknown inst def found.
POP   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0 in  = overdefined
  Result = overdefined
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2
Calculated Rank[] = 3
	discovered a new reachable node %1
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2
Instruction Merger
GVN iteration: 0
SCCP on function '$s7partial1ACfd'
Marking Block Executable: 
markOverdefined: %T7partial1AC* %0

Popped off OI-WL: %T7partial1AC* %0
markOverdefined:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0

Popped off OI-WL:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0

Popped off BBWL: 
  %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
  ret %swift.refcounted* %2

RESOLVING UNDEFs
DemandedBits: Root:   ret %swift.refcounted* %2
DemandedBits: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0


INSTCOMBINE ITERATION #1 on $s7partial1ACfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2
Jump threading on function '$s7partial1ACfd'
LVI Getting block end value   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0 at ''
PUSH:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0 in 
 compute BB '' - unknown inst def found.
POP   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0 in  = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %1
Last visited node: %1
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %1
Found roots: %1 
	discovered a new reachable node nullptr
	discovered a new reachable node %1
mark live:   ret %swift.refcounted* %2
mark block live: 
post-dom root child is a return: 
work live:   ret %swift.refcounted* %2
mark live:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
work live:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
final dead terminator blocks: 
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2
Inliner visiting SCC: swift_deallocClassInstance: 0 call sites.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1ACfD'<<0x7f9e6b908960>>  #uses=1
  CS<0x7f9e6a4445a0> calls function 'swift_deallocClassInstance'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: $s7partial1ACfD: 0 call sites.
	discovered a new reachable node %1
SROA function: $s7partial1ACfD
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial1ACfD'
LVI Getting value   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0 at ''
  Result = overdefined
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void
Marked as tail call candidate:   call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
Calculated Rank[] = 3
	discovered a new reachable node %1
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void
Instruction Merger
GVN iteration: 0
SCCP on function '$s7partial1ACfD'
Marking Block Executable: 
markOverdefined: %T7partial1AC* %0

Popped off OI-WL: %T7partial1AC* %0
markOverdefined:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0

Popped off OI-WL:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0

Popped off BBWL: 
  %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
  tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
  ret void

RESOLVING UNDEFs
DemandedBits: Root:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
DemandedBits: Root:   ret void
DemandedBits: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0


INSTCOMBINE ITERATION #1 on $s7partial1ACfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void
Jump threading on function '$s7partial1ACfD'
LVI Getting value   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0 at ''
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %1
Last visited node: %1
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %1
Found roots: %1 
	discovered a new reachable node nullptr
	discovered a new reachable node %1
mark live:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
mark block live: 
mark live:   ret void
post-dom root child is a return: 
work live:   ret void
work live:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
mark live:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
work live:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
final dead terminator blocks: 
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1ACfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1ACfD'<<0x7f9e6b908960>>  #uses=1
  CS<0x7f9e6a4445a0> calls function 'swift_deallocClassInstance'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1BC1fySbxlF'<<0x7f9e6b908a20>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: $s7partial1BC1fySbxlF: 0 call sites.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1BC1fySbxlF'<<0x7f9e6b908a20>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %3
SROA function: $s7partial1BC1fySbxlF
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial1BC1fySbxlF'
	discovered a new reachable node %3


INSTCOMBINE ITERATION #1 on $s7partial1BC1fySbxlF
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i1 false
Calculated Rank[] = 3
Calculated Rank[] = 4
Calculated Rank[] = 5
	discovered a new reachable node %3
	discovered a new reachable node %3


INSTCOMBINE ITERATION #1 on $s7partial1BC1fySbxlF
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i1 false
Instruction Merger
GVN iteration: 0
SCCP on function '$s7partial1BC1fySbxlF'
Marking Block Executable: 
markOverdefined: %swift.opaque* %0
markOverdefined: %swift.type* %1
markOverdefined: %T7partial1BC* %2

Popped off OI-WL: %T7partial1BC* %2

Popped off OI-WL: %swift.type* %1

Popped off OI-WL: %swift.opaque* %0

Popped off BBWL: 
  ret i1 false

RESOLVING UNDEFs
DemandedBits: Root:   ret i1 false


INSTCOMBINE ITERATION #1 on $s7partial1BC1fySbxlF
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i1 false
Jump threading on function '$s7partial1BC1fySbxlF'
		Looking for trivial roots
Found a new trivial root: %3
Last visited node: %3
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %3
Found roots: %3 
	discovered a new reachable node nullptr
	discovered a new reachable node %3
mark live:   ret i1 false
mark block live: 
post-dom root child is a return: 
work live:   ret i1 false
final dead terminator blocks: 
	discovered a new reachable node %3


INSTCOMBINE ITERATION #1 on $s7partial1BC1fySbxlF
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i1 false
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1BCfd'<<0x7f9e6b908a80>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: $s7partial1BCfd: 0 call sites.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1BCfd'<<0x7f9e6b908a80>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %1
SROA function: $s7partial1BCfd
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial1BCfd'
LVI Getting block end value   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0 at ''
PUSH:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0 in 
 compute BB '' - unknown inst def found.
POP   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0 in  = overdefined
  Result = overdefined
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2
Calculated Rank[] = 3
	discovered a new reachable node %1
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2
Instruction Merger
GVN iteration: 0
SCCP on function '$s7partial1BCfd'
Marking Block Executable: 
markOverdefined: %T7partial1BC* %0

Popped off OI-WL: %T7partial1BC* %0
markOverdefined:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0

Popped off OI-WL:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0

Popped off BBWL: 
  %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
  ret %swift.refcounted* %2

RESOLVING UNDEFs
DemandedBits: Root:   ret %swift.refcounted* %2
DemandedBits: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0


INSTCOMBINE ITERATION #1 on $s7partial1BCfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2
Jump threading on function '$s7partial1BCfd'
LVI Getting block end value   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0 at ''
PUSH:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0 in 
 compute BB '' - unknown inst def found.
POP   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0 in  = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %1
Last visited node: %1
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %1
Found roots: %1 
	discovered a new reachable node nullptr
	discovered a new reachable node %1
mark live:   ret %swift.refcounted* %2
mark block live: 
post-dom root child is a return: 
work live:   ret %swift.refcounted* %2
mark live:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
work live:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
final dead terminator blocks: 
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1BCfD'<<0x7f9e6b9087d0>>  #uses=1
  CS<0x7f9e6a75a7a0> calls function 'swift_deallocClassInstance'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: $s7partial1BCfD: 0 call sites.
	discovered a new reachable node %1
SROA function: $s7partial1BCfD
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial1BCfD'
LVI Getting value   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0 at ''
  Result = overdefined
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void
Marked as tail call candidate:   call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
Calculated Rank[] = 3
	discovered a new reachable node %1
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void
Instruction Merger
GVN iteration: 0
SCCP on function '$s7partial1BCfD'
Marking Block Executable: 
markOverdefined: %T7partial1BC* %0

Popped off OI-WL: %T7partial1BC* %0
markOverdefined:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0

Popped off OI-WL:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0

Popped off BBWL: 
  %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
  tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
  ret void

RESOLVING UNDEFs
DemandedBits: Root:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
DemandedBits: Root:   ret void
DemandedBits: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0


INSTCOMBINE ITERATION #1 on $s7partial1BCfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void
Jump threading on function '$s7partial1BCfD'
LVI Getting value   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0 at ''
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %1
Last visited node: %1
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %1
Found roots: %1 
	discovered a new reachable node nullptr
	discovered a new reachable node %1
mark live:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
mark block live: 
mark live:   ret void
post-dom root child is a return: 
work live:   ret void
work live:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
mark live:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
work live:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
final dead terminator blocks: 
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1BCfD'<<0x7f9e6b9087d0>>  #uses=1
  CS<0x7f9e6a75a7a0> calls function 'swift_deallocClassInstance'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1BCACycfC'<<0x7f9e6b908830>>  #uses=1
  CS<0x7f9e6a75a9c0> calls function 'swift_allocObject'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: $s7partial1BCACycfC: 0 call sites.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1BCACycfC'<<0x7f9e6b908830>>  #uses=1
  CS<0x7f9e6a75a9c0> calls function 'swift_allocObject'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %1
SROA function: $s7partial1BCACycfC
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial1BCACycfC'
LVI Getting value %swift.type* %0 at ''
  Result = overdefined
LVI Getting block end value   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC* at ''
PUSH:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC* in 
 compute BB '' - unknown inst def found.
POP   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC* in  = overdefined
  Result = overdefined
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
IC: Visiting:   ret %T7partial1BC* %3
Marked as tail call candidate:   %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
Calculated Rank[] = 3
	discovered a new reachable node %1
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
IC: Visiting:   ret %T7partial1BC* %3
Instruction Merger
GVN iteration: 0
SCCP on function '$s7partial1BCACycfC'
Marking Block Executable: 
markOverdefined: %swift.type* %0

Popped off OI-WL: %swift.type* %0
markOverdefined:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2

Popped off OI-WL:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
markOverdefined:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*

Popped off OI-WL:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*

Popped off BBWL: 
  %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
  %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
  ret %T7partial1BC* %3

RESOLVING UNDEFs
DemandedBits: Root:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
DemandedBits: Root:   ret %T7partial1BC* %3
DemandedBits: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
DemandedBits: Visiting:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2


INSTCOMBINE ITERATION #1 on $s7partial1BCACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
IC: Visiting:   ret %T7partial1BC* %3
Jump threading on function '$s7partial1BCACycfC'
LVI Getting value %swift.type* %0 at ''
  Result = overdefined
LVI Getting block end value   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC* at ''
PUSH:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC* in 
 compute BB '' - unknown inst def found.
POP   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC* in  = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %1
Last visited node: %1
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %1
Found roots: %1 
	discovered a new reachable node nullptr
	discovered a new reachable node %1
mark live:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
mark block live: 
mark live:   ret %T7partial1BC* %3
post-dom root child is a return: 
work live:   ret %T7partial1BC* %3
mark live:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
work live:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
work live:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
final dead terminator blocks: 
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
IC: Visiting:   ret %T7partial1BC* %3
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1BCACycfC'<<0x7f9e6b908830>>  #uses=1
  CS<0x7f9e6a75a9c0> calls function 'swift_allocObject'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1BCACycfc'<<0x7f9e6b908ce0>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: $s7partial1BCACycfc: 0 call sites.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1BCACycfc'<<0x7f9e6b908ce0>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %1
SROA function: $s7partial1BCACycfc
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial1BCACycfc'
LVI Getting block end value %T7partial1BC* %0 at ''
PUSH: %T7partial1BC* %0 in 
POP %T7partial1BC* %0 in  = overdefined
  Result = overdefined
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1BC* %0
Calculated Rank[] = 3
	discovered a new reachable node %1
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1BC* %0
Instruction Merger
GVN iteration: 0
SCCP on function '$s7partial1BCACycfc'
Marking Block Executable: 
markOverdefined: %T7partial1BC* %0

Popped off OI-WL: %T7partial1BC* %0

Popped off BBWL: 
  ret %T7partial1BC* %0

RESOLVING UNDEFs
DemandedBits: Root:   ret %T7partial1BC* %0


INSTCOMBINE ITERATION #1 on $s7partial1BCACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1BC* %0
Jump threading on function '$s7partial1BCACycfc'
LVI Getting block end value %T7partial1BC* %0 at ''
PUSH: %T7partial1BC* %0 in 
POP %T7partial1BC* %0 in  = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %1
Last visited node: %1
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %1
Found roots: %1 
	discovered a new reachable node nullptr
	discovered a new reachable node %1
mark live:   ret %T7partial1BC* %0
mark block live: 
post-dom root child is a return: 
work live:   ret %T7partial1BC* %0
final dead terminator blocks: 
	discovered a new reachable node %1


INSTCOMBINE ITERATION #1 on $s7partial1BCACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1BC* %0
Inliner visiting SCC: $s7partial1BCMa: 0 call sites.
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
SROA function: $s7partial1BCMa
EarlyCSE CVP: Add conditional value for '' as i1 true in 
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial1BCMa'
LVI Getting value   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8 at ''
  Result = overdefined
LVI Getting block end value   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8 at ''
PUSH:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8 in 
 compute BB '' - unknown inst def found.
POP   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8 in  = overdefined
  Result = overdefined
LVI Getting edge value   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8 from '' to ''
  Result = notconstant<%swift.type* null>
LVI Getting edge value   %6 = bitcast %objc_class* %5 to %swift.type* from '' to ''
PUSH:   %6 = bitcast %objc_class* %5 to %swift.type* in 
 compute BB '' - unknown inst def found.
POP   %6 = bitcast %objc_class* %5 to %swift.type* in  = overdefined
  Result = overdefined
LVI Getting block end value   %10 = insertvalue %swift.metadata_response %9, i64 0, 1 at ''
PUSH:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1 in 
 compute BB '' - unknown inst def found.
POP   %10 = insertvalue %swift.metadata_response %9, i64 0, 1 in  = overdefined
  Result = overdefined
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7


INSTCOMBINE ITERATION #1 on $s7partial1BCMa
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1BCML" release, align 8
IC: Visiting:   br label %7
Marked as tail call candidate:   %5 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
Calculated Rank[] = 3
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7


INSTCOMBINE ITERATION #1 on $s7partial1BCMa
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1BCML" release, align 8
IC: Visiting:   br label %7
Instruction Merger
GVN iteration: 0
GVN: load %swift.type* %2 has unknown dependence
SCCP on function '$s7partial1BCMa'
Marking Block Executable: 
markOverdefined: i64 %0

Popped off OI-WL: i64 %0

Popped off BBWL: 
  %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
  %3 = icmp eq %swift.type* %2, null
  br i1 %3, label %4, label %7

markOverdefined:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
markOverdefined:   %3 = icmp eq %swift.type* %2, null
Marking Block Executable: 
Marking Block Executable: 

Popped off BBWL: 
7:                                                ; preds = %4, %1
  %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
  %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
  %10 = insertvalue %swift.metadata_response %9, i64 0, 1
  ret %swift.metadata_response %10

markOverdefined:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
markOverdefined:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
markOverdefined:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
markConstant: i64 0:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1

Popped off BBWL: 
4:                                                ; preds = %1
  %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
  %6 = bitcast %objc_class* %5 to %swift.type*
  store atomic %swift.type* %6, %swift.type** @"$s7partial1BCML" release, align 8
  br label %7

markOverdefined:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
markOverdefined:   %6 = bitcast %objc_class* %5 to %swift.type*
Marking Edge Executable:  -> 

Popped off OI-WL:   %6 = bitcast %objc_class* %5 to %swift.type*

Popped off OI-WL:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))

Popped off OI-WL:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1

Popped off OI-WL:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0

Popped off OI-WL:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]

Popped off OI-WL:   %3 = icmp eq %swift.type* %2, null

Popped off OI-WL:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8

Popped off I-WL:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
RESOLVING UNDEFs
DemandedBits: Root:   br i1 %3, label %4, label %7
DemandedBits: Root:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
DemandedBits: Root:   store atomic %swift.type* %6, %swift.type** @"$s7partial1BCML" release, align 8
DemandedBits: Root:   br label %7
DemandedBits: Root:   ret %swift.metadata_response %10
DemandedBits: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
DemandedBits: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
DemandedBits: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
DemandedBits: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
DemandedBits: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
DemandedBits: Visiting:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
DemandedBits: Visiting:   %3 = icmp eq %swift.type* %2, null Alive Out: 0x1


INSTCOMBINE ITERATION #1 on $s7partial1BCMa
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1BCML" release, align 8
IC: Visiting:   br label %7
Jump threading on function '$s7partial1BCMa'
LVI Getting value   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8 at ''
  Result = overdefined
LVI Getting block end value   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8 at ''
PUSH:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8 in 
 compute BB '' - unknown inst def found.
POP   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8 in  = overdefined
  Result = overdefined
LVI Getting edge value   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8 from '' to ''
  Result = notconstant<%swift.type* null>
LVI Getting edge value   %6 = bitcast %objc_class* %5 to %swift.type* from '' to ''
PUSH:   %6 = bitcast %objc_class* %5 to %swift.type* in 
 compute BB '' - unknown inst def found.
POP   %6 = bitcast %objc_class* %5 to %swift.type* in  = overdefined
  Result = overdefined
LVI Getting block end value   %10 = insertvalue %swift.metadata_response %9, i64 0, 1 at ''
PUSH:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1 in 
 compute BB '' - unknown inst def found.
POP   %10 = insertvalue %swift.metadata_response %9, i64 0, 1 in  = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %7
Last visited node: %4
		Looking for non-trivial roots
Total: 3, Num: 4
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %7
3: %1
4: %4
Found roots: %7 
	discovered a new reachable node nullptr
	discovered a new reachable node %7
	discovered a new reachable node %1
	discovered a new reachable node %4
mark live:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
mark block live: 
mark live:   br label %7
mark live:   store atomic %swift.type* %6, %swift.type** @"$s7partial1BCML" release, align 8
mark live:   ret %swift.metadata_response %10
mark block live: 
post-dom root child is a return: 
work live:   ret %swift.metadata_response %10
mark live:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
work live:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
mark live:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
work live:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
mark live:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
work live:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
mark live:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
mark live:   %6 = bitcast %objc_class* %5 to %swift.type*
work live:   %6 = bitcast %objc_class* %5 to %swift.type*
work live:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
work live:   store atomic %swift.type* %6, %swift.type** @"$s7partial1BCML" release, align 8
work live:   br label %7
work live:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
new live blocks:
	
	
	
dead terminator blocks:
	
live control in: 
mark live:   br i1 %3, label %4, label %7
work live:   br i1 %3, label %4, label %7
mark live:   %3 = icmp eq %swift.type* %2, null
work live:   %3 = icmp eq %swift.type* %2, null
final dead terminator blocks: 
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7


INSTCOMBINE ITERATION #1 on $s7partial1BCMa
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1BCML" release, align 8
IC: Visiting:   br label %7
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1BCMa'<<0x7f9e6b908da0>>  #uses=2
  CS<0x7f9e6bb51b30> calls function 'swift_getInitializedObjCClass'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial8makeAorBAA1ACyF'<<0x7f9e6b908d40>>  #uses=2
  CS<0x7f9e6a75ad20> calls function '$s7partial1BCMa'
  CS<0x7f9e6a75b0b0> calls function 'swift_allocObject'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: $s7partial8makeAorBAA1ACyF: 1 call sites.
    NOT Inlining (cost=never): noinline function attribute, Call:   %1 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial8makeAorBAA1ACyF'<<0x7f9e6b908d40>>  #uses=2
  CS<0x7f9e6a75ad20> calls function '$s7partial1BCMa'
  CS<0x7f9e6a75b0b0> calls function 'swift_allocObject'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %0
SROA function: $s7partial8makeAorBAA1ACyF
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial8makeAorBAA1ACyF'
LVI Getting value   %2 = extractvalue %swift.metadata_response %1, 0 at ''
  Result = overdefined
LVI Getting block end value   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC* at ''
PUSH:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC* in 
 compute BB '' - unknown inst def found.
POP   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC* in  = overdefined
  Result = overdefined
	discovered a new reachable node %0


INSTCOMBINE ITERATION #1 on $s7partial8makeAorBAA1ACyF
IC: ADDING: 5 instrs to worklist
IC: Visiting:   %1 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
IC: Visiting:   %2 = extractvalue %swift.metadata_response %1, 0
IC: Visiting:   %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2
IC: Visiting:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %4
Marked as tail call candidate:   %1 = call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
Marked as tail call candidate:   %3 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2
	discovered a new reachable node %0
	discovered a new reachable node %0


INSTCOMBINE ITERATION #1 on $s7partial8makeAorBAA1ACyF
IC: ADDING: 5 instrs to worklist
IC: Visiting:   %1 = tail call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
IC: Visiting:   %2 = extractvalue %swift.metadata_response %1, 0
IC: Visiting:   %3 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2
IC: Visiting:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %4
Instruction Merger
GVN iteration: 0
SCCP on function '$s7partial8makeAorBAA1ACyF'
Marking Block Executable: 

Popped off BBWL: 
  %1 = tail call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
  %2 = extractvalue %swift.metadata_response %1, 0
  %3 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2
  %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*
  ret %T7partial1AC* %4

markOverdefined:   %1 = tail call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
markOverdefined:   %1 = tail call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
markOverdefined:   %2 = extractvalue %swift.metadata_response %1, 0
markOverdefined:   %3 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2
markOverdefined:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*

Popped off OI-WL:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*

Popped off OI-WL:   %3 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2

Popped off OI-WL:   %2 = extractvalue %swift.metadata_response %1, 0

Popped off OI-WL:   %1 = tail call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7

Popped off OI-WL:   %1 = tail call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
RESOLVING UNDEFs
DemandedBits: Root:   %3 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2
DemandedBits: Root:   ret %T7partial1AC* %4
DemandedBits: Visiting:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*
DemandedBits: Visiting:   %3 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2
DemandedBits: Visiting:   %2 = extractvalue %swift.metadata_response %1, 0
DemandedBits: Visiting:   %1 = tail call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7


INSTCOMBINE ITERATION #1 on $s7partial8makeAorBAA1ACyF
IC: ADDING: 5 instrs to worklist
IC: Visiting:   %1 = tail call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
IC: Visiting:   %2 = extractvalue %swift.metadata_response %1, 0
IC: Visiting:   %3 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2
IC: Visiting:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %4
Jump threading on function '$s7partial8makeAorBAA1ACyF'
LVI Getting value   %2 = extractvalue %swift.metadata_response %1, 0 at ''
  Result = overdefined
LVI Getting block end value   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC* at ''
PUSH:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC* in 
 compute BB '' - unknown inst def found.
POP   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC* in  = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %0
Last visited node: %0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %0
Found roots: %0 
	discovered a new reachable node nullptr
	discovered a new reachable node %0
mark live:   %3 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2
mark block live: 
mark live:   ret %T7partial1AC* %4
post-dom root child is a return: 
work live:   ret %T7partial1AC* %4
mark live:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*
work live:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*
work live:   %3 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2
mark live:   %2 = extractvalue %swift.metadata_response %1, 0
work live:   %2 = extractvalue %swift.metadata_response %1, 0
mark live:   %1 = tail call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
work live:   %1 = tail call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
final dead terminator blocks: 
	discovered a new reachable node %0


INSTCOMBINE ITERATION #1 on $s7partial8makeAorBAA1ACyF
IC: ADDING: 5 instrs to worklist
IC: Visiting:   %1 = tail call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
IC: Visiting:   %2 = extractvalue %swift.metadata_response %1, 0
IC: Visiting:   %3 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2
IC: Visiting:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %4
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial8makeAorBAA1ACyF'<<0x7f9e6b908d40>>  #uses=2
  CS<0x7f9e6a75ad20> calls function '$s7partial1BCMa'
  CS<0x7f9e6a75b0b0> calls function 'swift_allocObject'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: swift_release: 0 call sites.
Inliner visiting SCC: $s7partial1gSbyF: 3 call sites.
    NOT Inlining (cost=never): noinline function attribute, Call:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
    NOT Inlining (cost=never): noinline function attribute, Call:   %11 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19
SROA function: $s7partial1gSbyF
SROA alloca:   %1 = alloca %Ts6UInt16V, align 2
  Rewriting FCA loads and stores...
Can't analyze slices for alloca:   %1 = alloca %Ts6UInt16V, align 2
  A pointer to this alloca escaped by:
    %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
EarlyCSE CVP: Add conditional value for '' as i1 true in 
EarlyCSE CVP: Add conditional value for '' as i1 false in 
EarlyCSE CVP: Add conditional value for '' as i1 true in 
EarlyCSE CVP: Add conditional value for '' as i1 false in 
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '$s7partial1gSbyF'
LVI Getting value   %6 = load %swift.type*, %swift.type** %5, align 8 at ''
  Result = overdefined
LVI Getting block end value   %6 = load %swift.type*, %swift.type** %5, align 8 at ''
PUSH:   %6 = load %swift.type*, %swift.type** %5, align 8 in 
 compute BB '' - unknown inst def found.
POP   %6 = load %swift.type*, %swift.type** %5, align 8 in  = overdefined
  Result = overdefined
LVI Getting value   %6 = load %swift.type*, %swift.type** %5, align 8 at ''
  Result = overdefined
LVI Getting edge value   %6 = load %swift.type*, %swift.type** %5, align 8 from '' to ''
  Result = notconstant<%swift.type* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)>
LVI Getting edge value   %6 = load %swift.type*, %swift.type** %5, align 8 from '' to ''
  Result = notconstant<%swift.type* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)>
LVI Getting block end value   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0 at ''
PUSH:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0 in 
 compute BB '' - unknown inst def found.
POP   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0 in  = overdefined
  Result = overdefined
LVI Getting value   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0 at ''
  Result = overdefined
LVI Getting edge value   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2) from '' to ''
PUSH:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2) in 
 compute BB '' - unknown inst def found.
POP   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2) in  = overdefined
  Result = overdefined
LVI Getting edge value   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN" from '' to ''
PUSH:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN" in 
 compute BB '' - unknown inst def found.
POP   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN" in  = overdefined
  Result = overdefined
LVI Getting block end value   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ] at ''
PUSH:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ] in 
 compute BB '' - overdefined because of pred (local).
POP   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ] in  = overdefined
  Result = overdefined
LVI Getting value   %6 = load %swift.type*, %swift.type** %5, align 8 at ''
  Result = overdefined
LVI Getting edge value   %6 = load %swift.type*, %swift.type** %5, align 8 from '' to ''
  Result = notconstant<%swift.type* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)>
LVI Getting value   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0 at ''
  Result = overdefined
LVI Getting block end value   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** at ''
PUSH:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** in 
POP   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** in  = notconstant<i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** null>
  Result = notconstant<i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** null>
LVI Getting value   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() at ''
  Result = overdefined
LVI Getting edge value   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() from '' to ''
PUSH:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() in 
PUSH:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() in 
 compute BB '' - unknown inst def found.
POP   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() in  = overdefined
 compute BB '' - overdefined because of pred (non local).
POP   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() in  = overdefined
  Result = overdefined
LVI Getting value   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0 at ''
  Result = overdefined
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19


INSTCOMBINE ITERATION #1 on $s7partial1gSbyF
IC: ADDING: 32 instrs to worklist
IC: Visiting:   %1 = alloca %Ts6UInt16V, align 2
IC: Visiting:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %3 = bitcast %Ts6UInt16V* %1 to i8*
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
IC: Visiting:   store i16 9, i16* %4, align 2
IC: Visiting:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
IC: Visiting:   %6 = load %swift.type*, %swift.type** %5, align 8
IC: Visiting:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %7, label %10, label %15
IC: Visiting:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %16, label %17, label %19
IC: Visiting:   %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
IC: Visiting:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: Visiting:   %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
IC: Visiting:   %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
IC: Visiting:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
IC: Visiting:   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   call void @swift_release(%swift.refcounted* %25) #2
IC: Visiting:   br label %8
IC: Visiting:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ]
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   ret i1 %9
IC: Visiting:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   call void @swift_release(%swift.refcounted* %18) #2
IC: Visiting:   br label %8
IC: Visiting:   %11 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
IC: Visiting:   %12 = extractvalue %swift.metadata_response %11, 0
IC: Visiting:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   call void @swift_release(%swift.refcounted* %13) #2
IC: Visiting:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN"
IC: Visiting:   br label %8
Marked as tail call candidate:   %2 = call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
Marked as tail call candidate:   call void @swift_release(%swift.refcounted* %25) #2
Marked as tail call candidate:   call void @swift_release(%swift.refcounted* %18) #2
Marked as tail call candidate:   %11 = call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
Marked as tail call candidate:   call void @swift_release(%swift.refcounted* %13) #2
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19


INSTCOMBINE ITERATION #1 on $s7partial1gSbyF
IC: ADDING: 32 instrs to worklist
IC: Visiting:   %1 = alloca %Ts6UInt16V, align 2
IC: Visiting:   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %3 = bitcast %Ts6UInt16V* %1 to i8*
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
IC: Visiting:   store i16 9, i16* %4, align 2
IC: Visiting:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
IC: Visiting:   %6 = load %swift.type*, %swift.type** %5, align 8
IC: Visiting:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %7, label %10, label %15
IC: Visiting:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %16, label %17, label %19
IC: Visiting:   %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
IC: Visiting:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: Visiting:   %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
IC: Visiting:   %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
IC: Visiting:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
IC: Visiting:   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %25) #2
IC: Visiting:   br label %8
IC: Visiting:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ]
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   ret i1 %9
IC: Visiting:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %18) #2
IC: Visiting:   br label %8
IC: Visiting:   %11 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
IC: Visiting:   %12 = extractvalue %swift.metadata_response %11, 0
IC: Visiting:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %13) #2
IC: Visiting:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN"
IC: Visiting:   br label %8
Instruction Merger
GVN iteration: 0
GVN: load %swift.type* %6 has unknown def   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
GVN: non-local load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* %22 has unknown dependencies
SCCP on function '$s7partial1gSbyF'
Marking Block Executable: 

Popped off BBWL: 
  %1 = alloca %Ts6UInt16V, align 2
  %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
  %3 = bitcast %Ts6UInt16V* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
  %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
  store i16 9, i16* %4, align 2
  %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
  %6 = load %swift.type*, %swift.type** %5, align 8
  %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)
  br i1 %7, label %10, label %15

SCCP: Don't know how to handle:   %1 = alloca %Ts6UInt16V, align 2
markOverdefined:   %1 = alloca %Ts6UInt16V, align 2
markOverdefined:   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
markOverdefined:   %3 = bitcast %Ts6UInt16V* %1 to i8*
markOverdefined:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
markOverdefined:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
markOverdefined:   %6 = load %swift.type*, %swift.type** %5, align 8
markOverdefined:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)
Marking Block Executable: 
Marking Block Executable: 

Popped off BBWL: 
15:                                               ; preds = %0
  %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)
  br i1 %16, label %17, label %19

markOverdefined:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)
Marking Block Executable: 
Marking Block Executable: 

Popped off BBWL: 
19:                                               ; preds = %15
  %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
  %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
  %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
  %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
  %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
  %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
  tail call void @swift_release(%swift.refcounted* %25) #2
  br label %8

markOverdefined:   %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
markOverdefined:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
markOverdefined:   %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
markOverdefined:   %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
markOverdefined:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
markOverdefined:   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
Marking Block Executable: 

Popped off BBWL: 
8:                                                ; preds = %10, %17, %19
  %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
  ret i1 %9

markOverdefined:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ]

Popped off BBWL: 
17:                                               ; preds = %15
  %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
  tail call void @swift_release(%swift.refcounted* %18) #2
  br label %8

markOverdefined:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
Marking Edge Executable:  -> 

Popped off BBWL: 
10:                                               ; preds = %0
  %11 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
  %12 = extractvalue %swift.metadata_response %11, 0
  %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
  tail call void @swift_release(%swift.refcounted* %13) #2
  %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN"
  br label %8

markOverdefined:   %11 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
markOverdefined:   %11 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
markOverdefined:   %12 = extractvalue %swift.metadata_response %11, 0
markOverdefined:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
markOverdefined:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN"
Marking Edge Executable:  -> 

Popped off OI-WL:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN"

Popped off OI-WL:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0

Popped off OI-WL:   %12 = extractvalue %swift.metadata_response %11, 0

Popped off OI-WL:   %11 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7

Popped off OI-WL:   %11 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7

Popped off OI-WL:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0

Popped off OI-WL:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ]

Popped off OI-WL:   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0

Popped off OI-WL:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)

Popped off OI-WL:   %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*

Popped off OI-WL:   %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21

Popped off OI-WL:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**

Popped off OI-WL:   %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11

Popped off OI-WL:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)

Popped off OI-WL:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)

Popped off OI-WL:   %6 = load %swift.type*, %swift.type** %5, align 8

Popped off OI-WL:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0

Popped off OI-WL:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0

Popped off OI-WL:   %3 = bitcast %Ts6UInt16V* %1 to i8*

Popped off OI-WL:   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()

Popped off OI-WL:   %1 = alloca %Ts6UInt16V, align 2
RESOLVING UNDEFs
DemandedBits: Root:   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
DemandedBits: Root:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
DemandedBits: Root:   store i16 9, i16* %4, align 2
DemandedBits: Root:   br i1 %7, label %10, label %15
DemandedBits: Root:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
DemandedBits: Root:   ret i1 %9
DemandedBits: Root:   tail call void @swift_release(%swift.refcounted* %13) #2
DemandedBits: Root:   br label %8
DemandedBits: Root:   br i1 %16, label %17, label %19
DemandedBits: Root:   tail call void @swift_release(%swift.refcounted* %18) #2
DemandedBits: Root:   br label %8
DemandedBits: Root:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
DemandedBits: Root:   tail call void @swift_release(%swift.refcounted* %25) #2
DemandedBits: Root:   br label %8
DemandedBits: Visiting:   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
DemandedBits: Visiting:   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
DemandedBits: Visiting:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2) Alive Out: 0x0
DemandedBits: Visiting:   %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
DemandedBits: Visiting:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
DemandedBits: Visiting:   %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
DemandedBits: Visiting:   %6 = load %swift.type*, %swift.type** %5, align 8
DemandedBits: Visiting:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
DemandedBits: Visiting:   %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
DemandedBits: Visiting:   %1 = alloca %Ts6UInt16V, align 2
DemandedBits: Visiting:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
DemandedBits: Visiting:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*) Alive Out: 0x1
DemandedBits: Visiting:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
DemandedBits: Visiting:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ] Alive Out: 0x1
DemandedBits: Visiting:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN" Alive Out: 0x1
DemandedBits: Visiting:   %12 = extractvalue %swift.metadata_response %11, 0
DemandedBits: Visiting:   %11 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
DemandedBits: Visiting:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2) Alive Out: 0x1
DemandedBits: Visiting:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*) Alive Out: 0x1
DemandedBits: Visiting:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
DemandedBits: Visiting:   %3 = bitcast %Ts6UInt16V* %1 to i8*


INSTCOMBINE ITERATION #1 on $s7partial1gSbyF
IC: ADDING: 32 instrs to worklist
IC: Visiting:   %1 = alloca %Ts6UInt16V, align 2
IC: Visiting:   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %3 = bitcast %Ts6UInt16V* %1 to i8*
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
IC: Visiting:   store i16 9, i16* %4, align 2
IC: Visiting:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
IC: Visiting:   %6 = load %swift.type*, %swift.type** %5, align 8
IC: Visiting:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %7, label %10, label %15
IC: Visiting:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %16, label %17, label %19
IC: Visiting:   %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
IC: Visiting:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: Visiting:   %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
IC: Visiting:   %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
IC: Visiting:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
IC: Visiting:   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %25) #2
IC: Visiting:   br label %8
IC: Visiting:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ]
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   ret i1 %9
IC: Visiting:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %18) #2
IC: Visiting:   br label %8
IC: Visiting:   %11 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
IC: Visiting:   %12 = extractvalue %swift.metadata_response %11, 0
IC: Visiting:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %13) #2
IC: Visiting:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN"
IC: Visiting:   br label %8
Jump threading on function '$s7partial1gSbyF'
LVI Getting value   %6 = load %swift.type*, %swift.type** %5, align 8 at ''
  Result = overdefined
LVI Getting block end value   %6 = load %swift.type*, %swift.type** %5, align 8 at ''
PUSH:   %6 = load %swift.type*, %swift.type** %5, align 8 in 
 compute BB '' - unknown inst def found.
POP   %6 = load %swift.type*, %swift.type** %5, align 8 in  = overdefined
  Result = overdefined
LVI Getting value   %6 = load %swift.type*, %swift.type** %5, align 8 at ''
  Result = overdefined
LVI Getting edge value   %6 = load %swift.type*, %swift.type** %5, align 8 from '' to ''
  Result = notconstant<%swift.type* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)>
LVI Getting edge value   %6 = load %swift.type*, %swift.type** %5, align 8 from '' to ''
  Result = notconstant<%swift.type* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)>
LVI Getting block end value   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0 at ''
PUSH:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0 in 
 compute BB '' - unknown inst def found.
POP   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0 in  = overdefined
  Result = overdefined
LVI Getting value   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0 at ''
  Result = overdefined
LVI Getting edge value   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2) from '' to ''
PUSH:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2) in 
 compute BB '' - unknown inst def found.
POP   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2) in  = overdefined
  Result = overdefined
LVI Getting edge value   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN" from '' to ''
PUSH:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN" in 
 compute BB '' - unknown inst def found.
POP   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN" in  = overdefined
  Result = overdefined
LVI Getting block end value   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ] at ''
PUSH:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ] in 
 compute BB '' - overdefined because of pred (local).
POP   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ] in  = overdefined
  Result = overdefined
LVI Getting value   %6 = load %swift.type*, %swift.type** %5, align 8 at ''
  Result = overdefined
LVI Getting edge value   %6 = load %swift.type*, %swift.type** %5, align 8 from '' to ''
  Result = notconstant<%swift.type* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)>
LVI Getting value   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0 at ''
  Result = overdefined
LVI Getting block end value   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** at ''
PUSH:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** in 
POP   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** in  = notconstant<i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** null>
  Result = notconstant<i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** null>
LVI Getting value   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() at ''
  Result = overdefined
LVI Getting edge value   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() from '' to ''
PUSH:   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() in 
PUSH:   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() in 
 compute BB '' - unknown inst def found.
POP   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() in  = overdefined
 compute BB '' - overdefined because of pred (non local).
POP   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"() in  = overdefined
  Result = overdefined
LVI Getting value   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0 at ''
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %8
Last visited node: %10
		Looking for non-trivial roots
Total: 6, Num: 7
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %8
3: %19
4: %15
5: %0
6: %17
7: %10
Found roots: %8 
	discovered a new reachable node nullptr
	discovered a new reachable node %8
	discovered a new reachable node %19
	discovered a new reachable node %15
	discovered a new reachable node %0
	discovered a new reachable node %17
	discovered a new reachable node %10
mark live:   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
mark block live: 
mark live:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
mark live:   store i16 9, i16* %4, align 2
mark live:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
mark block live: 
mark live:   ret i1 %9
mark live:   tail call void @swift_release(%swift.refcounted* %13) #2
mark block live: 
mark live:   br label %8
mark live:   tail call void @swift_release(%swift.refcounted* %18) #2
mark block live: 
mark live:   br label %8
mark live:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
mark block live: 
mark live:   br label %8
mark live:   tail call void @swift_release(%swift.refcounted* %25) #2
post-dom root child is a return: 
work live:   tail call void @swift_release(%swift.refcounted* %25) #2
mark live:   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
work live:   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
work live:   br label %8
work live:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
mark live:   %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
mark live:   %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
work live:   %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
mark live:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
work live:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
mark live:   %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
work live:   %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
mark live:   %6 = load %swift.type*, %swift.type** %5, align 8
work live:   %6 = load %swift.type*, %swift.type** %5, align 8
mark live:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
work live:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
work live:   %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
mark live:   %1 = alloca %Ts6UInt16V, align 2
work live:   %1 = alloca %Ts6UInt16V, align 2
work live:   br label %8
work live:   tail call void @swift_release(%swift.refcounted* %18) #2
mark live:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
work live:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
work live:   br label %8
work live:   tail call void @swift_release(%swift.refcounted* %13) #2
mark live:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
work live:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
work live:   ret i1 %9
mark live:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ]
work live:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ]
mark live:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN"
work live:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN"
mark live:   %12 = extractvalue %swift.metadata_response %11, 0
work live:   %12 = extractvalue %swift.metadata_response %11, 0
mark live:   %11 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
work live:   %11 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
work live:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
mark live:   %3 = bitcast %Ts6UInt16V* %1 to i8*
work live:   %3 = bitcast %Ts6UInt16V* %1 to i8*
work live:   store i16 9, i16* %4, align 2
mark live:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
work live:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
work live:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
work live:   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
new live blocks:
	
	
	
	
	
dead terminator blocks:
	
	
live control in: 
mark live:   br i1 %7, label %10, label %15
mark block live: 
live control in: 
mark live:   br i1 %16, label %17, label %19
work live:   br i1 %16, label %17, label %19
mark live:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)
work live:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)
work live:   br i1 %7, label %10, label %15
mark live:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)
work live:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)
final dead terminator blocks: 
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19


INSTCOMBINE ITERATION #1 on $s7partial1gSbyF
IC: ADDING: 32 instrs to worklist
IC: Visiting:   %1 = alloca %Ts6UInt16V, align 2
IC: Visiting:   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %3 = bitcast %Ts6UInt16V* %1 to i8*
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
IC: Visiting:   store i16 9, i16* %4, align 2
IC: Visiting:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
IC: Visiting:   %6 = load %swift.type*, %swift.type** %5, align 8
IC: Visiting:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %7, label %10, label %15
IC: Visiting:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %16, label %17, label %19
IC: Visiting:   %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
IC: Visiting:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: Visiting:   %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
IC: Visiting:   %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
IC: Visiting:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
IC: Visiting:   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %25) #2
IC: Visiting:   br label %8
IC: Visiting:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ]
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   ret i1 %9
IC: Visiting:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %18) #2
IC: Visiting:   br label %8
IC: Visiting:   %11 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
IC: Visiting:   %12 = extractvalue %swift.metadata_response %11, 0
IC: Visiting:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %13) #2
IC: Visiting:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN"
IC: Visiting:   br label %8
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '$s7partial1gSbyF'<<0x7f9e6b944ef0>>  #uses=1
  CS<0x7f9e6a444ea8> calls function '$s7partial8makeAorBAA1ACyF'
  CS<0x7f9e6a446bb0> calls function '$s7partial1ACMa'
  CS<0x7f9e6a70e550> calls function 'swift_release'
  CS<0x7f9e6a70e230> calls function 'swift_release'
  CS<0x7f9e6a445f50> calls external node
  CS<0x7f9e6a74d8c0> calls function 'swift_release'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: llvm.lifetime.start.p0i8: 0 call sites.
Inliner visiting SCC: llvm.lifetime.end.p0i8: 0 call sites.
Inliner visiting SCC: INDIRECTNODE: 0 call sites.
F2I: Looking at function main
	discovered a new reachable node %2
---- Branch Probability Info : main ----

Computing probabilities for 

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - : float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0
	discovered a new reachable node %2
SLP: Analyzing blocks in main.


INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0


INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0
F2I: Looking at function $s7partial1ACACycfC
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACACycfC ----

Computing probabilities for 

block-frequency: $s7partial1ACACycfC
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfC
 - : float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on $s7partial1ACACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %3
	discovered a new reachable node %1
SLP: Analyzing blocks in $s7partial1ACACycfC.


INSTCOMBINE ITERATION #1 on $s7partial1ACACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %3


INSTCOMBINE ITERATION #1 on $s7partial1ACACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %3
F2I: Looking at function $s7partial1ACACycfc
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACACycfc ----

Computing probabilities for 

block-frequency: $s7partial1ACACycfc
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfc
 - : float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on $s7partial1ACACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1AC* %0
	discovered a new reachable node %1
SLP: Analyzing blocks in $s7partial1ACACycfc.


INSTCOMBINE ITERATION #1 on $s7partial1ACACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1AC* %0


INSTCOMBINE ITERATION #1 on $s7partial1ACACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1AC* %0
F2I: Looking at function $s7partial1AC1fySbxlF
	discovered a new reachable node %3
---- Branch Probability Info : $s7partial1AC1fySbxlF ----

Computing probabilities for 

block-frequency: $s7partial1AC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlF
 - : float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlF
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
IC: Visiting:   ret i1 %4
	discovered a new reachable node %3
SLP: Analyzing blocks in $s7partial1AC1fySbxlF.


INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlF
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
IC: Visiting:   ret i1 %4


INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlF
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %4 = tail call swiftcc i1 @"$s7partial1AC1fySbxlFTf4dd_n"(%swift.type* %1) #7
IC: Visiting:   ret i1 %4
F2I: Looking at function $s7partial1ACfd
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACfd ----

Computing probabilities for 

block-frequency: $s7partial1ACfd
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfd
 - : float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on $s7partial1ACfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2
	discovered a new reachable node %1
SLP: Analyzing blocks in $s7partial1ACfd.


INSTCOMBINE ITERATION #1 on $s7partial1ACfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2


INSTCOMBINE ITERATION #1 on $s7partial1ACfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2
F2I: Looking at function $s7partial1ACfD
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACfD ----

Computing probabilities for 

block-frequency: $s7partial1ACfD
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfD
 - : float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on $s7partial1ACfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void
	discovered a new reachable node %1
SLP: Analyzing blocks in $s7partial1ACfD.


INSTCOMBINE ITERATION #1 on $s7partial1ACfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void


INSTCOMBINE ITERATION #1 on $s7partial1ACfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %0, i64 0, i32 0
IC: Visiting:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void
F2I: Looking at function $s7partial1BC1fySbxlF
	discovered a new reachable node %3
---- Branch Probability Info : $s7partial1BC1fySbxlF ----

Computing probabilities for 

block-frequency: $s7partial1BC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BC1fySbxlF
 - : float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on $s7partial1BC1fySbxlF
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i1 false
	discovered a new reachable node %3
SLP: Analyzing blocks in $s7partial1BC1fySbxlF.


INSTCOMBINE ITERATION #1 on $s7partial1BC1fySbxlF
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i1 false


INSTCOMBINE ITERATION #1 on $s7partial1BC1fySbxlF
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i1 false
F2I: Looking at function $s7partial1BCfd
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCfd ----

Computing probabilities for 

block-frequency: $s7partial1BCfd
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfd
 - : float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on $s7partial1BCfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2
	discovered a new reachable node %1
SLP: Analyzing blocks in $s7partial1BCfd.


INSTCOMBINE ITERATION #1 on $s7partial1BCfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2


INSTCOMBINE ITERATION #1 on $s7partial1BCfd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   ret %swift.refcounted* %2
F2I: Looking at function $s7partial1BCfD
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCfD ----

Computing probabilities for 

block-frequency: $s7partial1BCfD
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfD
 - : float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on $s7partial1BCfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void
	discovered a new reachable node %1
SLP: Analyzing blocks in $s7partial1BCfD.


INSTCOMBINE ITERATION #1 on $s7partial1BCfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void


INSTCOMBINE ITERATION #1 on $s7partial1BCfD
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = getelementptr inbounds %T7partial1BC, %T7partial1BC* %0, i64 0, i32 0
IC: Visiting:   tail call void @swift_deallocClassInstance(%swift.refcounted* %2, i64 16, i64 7)
IC: Visiting:   ret void
F2I: Looking at function $s7partial1BCACycfC
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCACycfC ----

Computing probabilities for 

block-frequency: $s7partial1BCACycfC
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfC
 - : float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on $s7partial1BCACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
IC: Visiting:   ret %T7partial1BC* %3
	discovered a new reachable node %1
SLP: Analyzing blocks in $s7partial1BCACycfC.


INSTCOMBINE ITERATION #1 on $s7partial1BCACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
IC: Visiting:   ret %T7partial1BC* %3


INSTCOMBINE ITERATION #1 on $s7partial1BCACycfC
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %2 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %0, i64 16, i64 7) #2
IC: Visiting:   %3 = bitcast %swift.refcounted* %2 to %T7partial1BC*
IC: Visiting:   ret %T7partial1BC* %3
F2I: Looking at function $s7partial1BCACycfc
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCACycfc ----

Computing probabilities for 

block-frequency: $s7partial1BCACycfc
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfc
 - : float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on $s7partial1BCACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1BC* %0
	discovered a new reachable node %1
SLP: Analyzing blocks in $s7partial1BCACycfc.


INSTCOMBINE ITERATION #1 on $s7partial1BCACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1BC* %0


INSTCOMBINE ITERATION #1 on $s7partial1BCACycfc
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret %T7partial1BC* %0
F2I: Looking at function $s7partial8makeAorBAA1ACyF
	discovered a new reachable node %0
---- Branch Probability Info : $s7partial8makeAorBAA1ACyF ----

Computing probabilities for 

block-frequency: $s7partial8makeAorBAA1ACyF
===========================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial8makeAorBAA1ACyF
 - : float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on $s7partial8makeAorBAA1ACyF
IC: ADDING: 5 instrs to worklist
IC: Visiting:   %1 = tail call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
IC: Visiting:   %2 = extractvalue %swift.metadata_response %1, 0
IC: Visiting:   %3 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2
IC: Visiting:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %4
	discovered a new reachable node %0
SLP: Analyzing blocks in $s7partial8makeAorBAA1ACyF.


INSTCOMBINE ITERATION #1 on $s7partial8makeAorBAA1ACyF
IC: ADDING: 5 instrs to worklist
IC: Visiting:   %1 = tail call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
IC: Visiting:   %2 = extractvalue %swift.metadata_response %1, 0
IC: Visiting:   %3 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2
IC: Visiting:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %4


INSTCOMBINE ITERATION #1 on $s7partial8makeAorBAA1ACyF
IC: ADDING: 5 instrs to worklist
IC: Visiting:   %1 = tail call swiftcc %swift.metadata_response @"$s7partial1BCMa"(i64 undef) #7
IC: Visiting:   %2 = extractvalue %swift.metadata_response %1, 0
IC: Visiting:   %3 = tail call noalias %swift.refcounted* @swift_allocObject(%swift.type* %2, i64 16, i64 7) #2
IC: Visiting:   %4 = bitcast %swift.refcounted* %3 to %T7partial1AC*
IC: Visiting:   ret %T7partial1AC* %4
F2I: Looking at function $s7partial1gSbyF
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19
---- Branch Probability Info : $s7partial1gSbyF ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%

block-frequency: $s7partial1gSbyF
=================================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
 - 3: 
 - 4: 
 - 5: 
loop-detection
compute-mass-in-function
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to 
  => assign 6000000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  9fffffffffffffff
  => assign 63ffffffffffffff (3c00000000000000) to 
  => assign 3c00000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  63ffffffffffffff
  => assign 63ffffffffffffff (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  3c00000000000000
  => assign 3c00000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  6000000000000000
  => assign 6000000000000000 (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 0.234375, max = 1.0, factor = 34.13333333
 - : float = 1.0, scaled = 34.13333333, int = 34
 - : float = 0.625, scaled = 21.33333333, int = 21
 - : float = 0.390625, scaled = 13.33333333, int = 13
 - : float = 0.234375, scaled = 8.0, int = 8
 - : float = 0.375, scaled = 12.8, int = 12
 - : float = 1.0, scaled = 34.13333333, int = 34
block-frequency-info: $s7partial1gSbyF
 - : float = 1.0, int = 34
 - : float = 1.0, int = 34
 - : float = 0.375, int = 12
 - : float = 0.625, int = 21
 - : float = 0.23438, int = 8
 - : float = 0.39063, int = 13



INSTCOMBINE ITERATION #1 on $s7partial1gSbyF
IC: ADDING: 32 instrs to worklist
IC: Visiting:   %1 = alloca %Ts6UInt16V, align 2
IC: Visiting:   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %3 = bitcast %Ts6UInt16V* %1 to i8*
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
IC: Visiting:   store i16 9, i16* %4, align 2
IC: Visiting:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
IC: Visiting:   %6 = load %swift.type*, %swift.type** %5, align 8
IC: Visiting:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %7, label %10, label %15
IC: Visiting:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %16, label %17, label %19
IC: Visiting:   %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
IC: Visiting:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: Visiting:   %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
IC: Visiting:   %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
IC: Visiting:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
IC: Visiting:   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %25) #2
IC: Visiting:   br label %8
IC: Visiting:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ]
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   ret i1 %9
IC: Visiting:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %18) #2
IC: Visiting:   br label %8
IC: Visiting:   %11 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
IC: Visiting:   %12 = extractvalue %swift.metadata_response %11, 0
IC: Visiting:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %13) #2
IC: Visiting:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN"
IC: Visiting:   br label %8
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19
SLP: Analyzing blocks in $s7partial1gSbyF.
SLP: Trying to vectorize starting at PHIs (1)
SLP: Trying to vectorize a list of length = 2.
SLP: Trying to vectorize a list of length = 2.
SLP: Found stores for 1 underlying objects.
SLP: Trying to vectorize a list of length = 2.


INSTCOMBINE ITERATION #1 on $s7partial1gSbyF
IC: ADDING: 32 instrs to worklist
IC: Visiting:   %1 = alloca %Ts6UInt16V, align 2
IC: Visiting:   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %3 = bitcast %Ts6UInt16V* %1 to i8*
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
IC: Visiting:   store i16 9, i16* %4, align 2
IC: Visiting:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
IC: Visiting:   %6 = load %swift.type*, %swift.type** %5, align 8
IC: Visiting:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %7, label %10, label %15
IC: Visiting:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %16, label %17, label %19
IC: Visiting:   %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
IC: Visiting:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: Visiting:   %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
IC: Visiting:   %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
IC: Visiting:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
IC: Visiting:   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %25) #2
IC: Visiting:   br label %8
IC: Visiting:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ]
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   ret i1 %9
IC: Visiting:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %18) #2
IC: Visiting:   br label %8
IC: Visiting:   %11 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
IC: Visiting:   %12 = extractvalue %swift.metadata_response %11, 0
IC: Visiting:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %13) #2
IC: Visiting:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN"
IC: Visiting:   br label %8


INSTCOMBINE ITERATION #1 on $s7partial1gSbyF
IC: ADDING: 32 instrs to worklist
IC: Visiting:   %1 = alloca %Ts6UInt16V, align 2
IC: Visiting:   %2 = tail call swiftcc %T7partial1AC* @"$s7partial8makeAorBAA1ACyF"()
IC: Visiting:   %3 = bitcast %Ts6UInt16V* %1 to i8*
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   %4 = getelementptr inbounds %Ts6UInt16V, %Ts6UInt16V* %1, i64 0, i32 0
IC: Visiting:   store i16 9, i16* %4, align 2
IC: Visiting:   %5 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0, i32 0
IC: Visiting:   %6 = load %swift.type*, %swift.type** %5, align 8
IC: Visiting:   %7 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %7, label %10, label %15
IC: Visiting:   %16 = icmp eq %swift.type* %6, bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %swift.type*)
IC: Visiting:   br i1 %16, label %17, label %19
IC: Visiting:   %20 = getelementptr inbounds %swift.type, %swift.type* %6, i64 11
IC: Visiting:   %21 = bitcast %swift.type* %20 to i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)**
IC: Visiting:   %22 = load i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)** %21, align 8, !invariant.load !21
IC: Visiting:   %23 = bitcast %Ts6UInt16V* %1 to %swift.opaque*
IC: Visiting:   %24 = call swiftcc i1 %22(%swift.opaque* noalias nocapture nonnull %23, %swift.type* nonnull @"$ss6UInt16VN", %T7partial1AC* swiftself %2)
IC: Visiting:   %25 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %25) #2
IC: Visiting:   br label %8
IC: Visiting:   %9 = phi i1 [ %24, %19 ], [ false, %17 ], [ %14, %10 ]
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %3)
IC: Visiting:   ret i1 %9
IC: Visiting:   %18 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %18) #2
IC: Visiting:   br label %8
IC: Visiting:   %11 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
IC: Visiting:   %12 = extractvalue %swift.metadata_response %11, 0
IC: Visiting:   %13 = getelementptr inbounds %T7partial1AC, %T7partial1AC* %2, i64 0, i32 0
IC: Visiting:   tail call void @swift_release(%swift.refcounted* %13) #2
IC: Visiting:   %14 = icmp eq %swift.type* %12, @"$ss6UInt16VN"
IC: Visiting:   br label %8
F2I: Looking at function $s7partial1AC1fySbxlFTf4dd_n
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1AC1fySbxlFTf4dd_n ----

Computing probabilities for 

block-frequency: $s7partial1AC1fySbxlFTf4dd_n
=============================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlFTf4dd_n
 - : float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlFTf4dd_n
IC: ADDING: 4 instrs to worklist
IC: Visiting:   %2 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
IC: Visiting:   %3 = extractvalue %swift.metadata_response %2, 0
IC: Visiting:   %4 = icmp eq %swift.type* %3, %0
IC: Visiting:   ret i1 %4
	discovered a new reachable node %1
SLP: Analyzing blocks in $s7partial1AC1fySbxlFTf4dd_n.
SLP: Trying to vectorize a list of length = 2.


INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlFTf4dd_n
IC: ADDING: 4 instrs to worklist
IC: Visiting:   %2 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
IC: Visiting:   %3 = extractvalue %swift.metadata_response %2, 0
IC: Visiting:   %4 = icmp eq %swift.type* %3, %0
IC: Visiting:   ret i1 %4


INSTCOMBINE ITERATION #1 on $s7partial1AC1fySbxlFTf4dd_n
IC: ADDING: 4 instrs to worklist
IC: Visiting:   %2 = tail call swiftcc %swift.metadata_response @"$s7partial1ACMa"(i64 undef) #7
IC: Visiting:   %3 = extractvalue %swift.metadata_response %2, 0
IC: Visiting:   %4 = icmp eq %swift.type* %3, %0
IC: Visiting:   ret i1 %4
F2I: Looking at function $s7partial1BCMa
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
---- Branch Probability Info : $s7partial1BCMa ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%

block-frequency: $s7partial1BCMa
================================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
loop-detection
compute-mass-in-function
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  ffffffffffffffff
  => assign 5fffffffffffffff (a000000000000000) to 
  => assign a000000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  5fffffffffffffff
  => assign 5fffffffffffffff (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 0.375, max = 1.0, factor = 21.33333333
 - : float = 1.0, scaled = 21.33333333, int = 21
 - : float = 0.375, scaled = 8.0, int = 8
 - : float = 1.0, scaled = 21.33333333, int = 21
block-frequency-info: $s7partial1BCMa
 - : float = 1.0, int = 21
 - : float = 0.375, int = 8
 - : float = 1.0, int = 21



INSTCOMBINE ITERATION #1 on $s7partial1BCMa
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1BCML" release, align 8
IC: Visiting:   br label %7
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
SLP: Analyzing blocks in $s7partial1BCMa.
SLP: Trying to vectorize starting at PHIs (1)
SLP: Trying to vectorize a list of length = 2.


INSTCOMBINE ITERATION #1 on $s7partial1BCMa
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1BCML" release, align 8
IC: Visiting:   br label %7


INSTCOMBINE ITERATION #1 on $s7partial1BCMa
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1BCML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>, <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1BCML" release, align 8
IC: Visiting:   br label %7
F2I: Looking at function $s7partial1ACMa
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
---- Branch Probability Info : $s7partial1ACMa ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%

block-frequency: $s7partial1ACMa
================================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
loop-detection
compute-mass-in-function
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  ffffffffffffffff
  => assign 5fffffffffffffff (a000000000000000) to 
  => assign a000000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  5fffffffffffffff
  => assign 5fffffffffffffff (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 0.375, max = 1.0, factor = 21.33333333
 - : float = 1.0, scaled = 21.33333333, int = 21
 - : float = 0.375, scaled = 8.0, int = 8
 - : float = 1.0, scaled = 21.33333333, int = 21
block-frequency-info: $s7partial1ACMa
 - : float = 1.0, int = 21
 - : float = 0.375, int = 8
 - : float = 1.0, int = 21



INSTCOMBINE ITERATION #1 on $s7partial1ACMa
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1ACML" release, align 8
IC: Visiting:   br label %7
	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
SLP: Analyzing blocks in $s7partial1ACMa.
SLP: Trying to vectorize starting at PHIs (1)
SLP: Trying to vectorize a list of length = 2.


INSTCOMBINE ITERATION #1 on $s7partial1ACMa
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1ACML" release, align 8
IC: Visiting:   br label %7


INSTCOMBINE ITERATION #1 on $s7partial1ACMa
IC: ADDING: 11 instrs to worklist
IC: Visiting:   %2 = load %swift.type*, %swift.type** @"$s7partial1ACML", align 8
IC: Visiting:   %3 = icmp eq %swift.type* %2, null
IC: Visiting:   br i1 %3, label %4, label %7
IC: Visiting:   %8 = phi %swift.type* [ %2, %1 ], [ %6, %4 ]
IC: Visiting:   %9 = insertvalue %swift.metadata_response undef, %swift.type* %8, 0
IC: Visiting:   %10 = insertvalue %swift.metadata_response %9, i64 0, 1
IC: Visiting:   ret %swift.metadata_response %10
IC: Visiting:   %5 = tail call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i64 0, i32 2) to %objc_class*))
IC: Visiting:   %6 = bitcast %objc_class* %5 to %swift.type*
IC: Visiting:   store atomic %swift.type* %6, %swift.type** @"$s7partial1ACML" release, align 8
IC: Visiting:   br label %7
Cmap[[15 x i8] c"_TtC7partial1A\00"] = 
Cmap[[8 x i8] c"partial\00"] = 
Cmap[[2 x i8] c"A\00"] = 
Cmap[[15 x i8] c"_TtC7partial1B\00"] = 
Cmap[[2 x i8] c"B\00"] = 
size of module: 22
size of worklist: 10
Inserting as unique: $s7partial1ACACycfC
  $s7partial1ACACycfC == $s7partial1BCACycfC
writeThunk: $s7partial1BCACycfC
Inserting as unique: $s7partial1ACACycfc
  $s7partial1ACACycfc == $s7partial1BCACycfc
canCreateThunkFor: $s7partial1ACACycfc is too small to bother creating a thunk for
Inserting as unique: $s7partial1ACfd
  $s7partial1ACfd == $s7partial1BCfd
canCreateThunkFor: $s7partial1ACfd is too small to bother creating a thunk for
Inserting as unique: $s7partial1BCMa
Inserting as unique: $s7partial1ACMa
Inserting as unique: $s7partial1ACfD
  $s7partial1ACfD == $s7partial1BCfD
writeThunk: $s7partial1BCfD
size of FnTree: 6
	discovered a new reachable node %2
---- Branch Probability Info : main ----

Computing probabilities for 

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - : float = 1.0, int = 8


block-frequency: main
=====================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - : float = 1.0, int = 8

	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACACycfC ----

Computing probabilities for 

block-frequency: $s7partial1ACACycfC
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfC
 - : float = 1.0, int = 8


block-frequency: $s7partial1ACACycfC
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfC
 - : float = 1.0, int = 8

	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACACycfc ----

Computing probabilities for 

block-frequency: $s7partial1ACACycfc
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfc
 - : float = 1.0, int = 8


block-frequency: $s7partial1ACACycfc
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfc
 - : float = 1.0, int = 8

	discovered a new reachable node %3
---- Branch Probability Info : $s7partial1AC1fySbxlF ----

Computing probabilities for 

block-frequency: $s7partial1AC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlF
 - : float = 1.0, int = 8


block-frequency: $s7partial1AC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlF
 - : float = 1.0, int = 8

	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACfd ----

Computing probabilities for 

block-frequency: $s7partial1ACfd
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfd
 - : float = 1.0, int = 8


block-frequency: $s7partial1ACfd
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfd
 - : float = 1.0, int = 8

	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACfD ----

Computing probabilities for 

block-frequency: $s7partial1ACfD
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfD
 - : float = 1.0, int = 8


block-frequency: $s7partial1ACfD
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfD
 - : float = 1.0, int = 8

	discovered a new reachable node %3
---- Branch Probability Info : $s7partial1BC1fySbxlF ----

Computing probabilities for 

block-frequency: $s7partial1BC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BC1fySbxlF
 - : float = 1.0, int = 8


block-frequency: $s7partial1BC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BC1fySbxlF
 - : float = 1.0, int = 8

	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCfd ----

Computing probabilities for 

block-frequency: $s7partial1BCfd
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfd
 - : float = 1.0, int = 8


block-frequency: $s7partial1BCfd
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfd
 - : float = 1.0, int = 8

	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCACycfc ----

Computing probabilities for 

block-frequency: $s7partial1BCACycfc
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfc
 - : float = 1.0, int = 8


block-frequency: $s7partial1BCACycfc
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfc
 - : float = 1.0, int = 8

	discovered a new reachable node %0
---- Branch Probability Info : $s7partial8makeAorBAA1ACyF ----

Computing probabilities for 

block-frequency: $s7partial8makeAorBAA1ACyF
===========================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial8makeAorBAA1ACyF
 - : float = 1.0, int = 8


block-frequency: $s7partial8makeAorBAA1ACyF
===========================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial8makeAorBAA1ACyF
 - : float = 1.0, int = 8

	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19
---- Branch Probability Info : $s7partial1gSbyF ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%

block-frequency: $s7partial1gSbyF
=================================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
 - 3: 
 - 4: 
 - 5: 
loop-detection
compute-mass-in-function
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to 
  => assign 6000000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  9fffffffffffffff
  => assign 63ffffffffffffff (3c00000000000000) to 
  => assign 3c00000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  63ffffffffffffff
  => assign 63ffffffffffffff (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  3c00000000000000
  => assign 3c00000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  6000000000000000
  => assign 6000000000000000 (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 0.234375, max = 1.0, factor = 34.13333333
 - : float = 1.0, scaled = 34.13333333, int = 34
 - : float = 0.625, scaled = 21.33333333, int = 21
 - : float = 0.390625, scaled = 13.33333333, int = 13
 - : float = 0.234375, scaled = 8.0, int = 8
 - : float = 0.375, scaled = 12.8, int = 12
 - : float = 1.0, scaled = 34.13333333, int = 34
block-frequency-info: $s7partial1gSbyF
 - : float = 1.0, int = 34
 - : float = 1.0, int = 34
 - : float = 0.375, int = 12
 - : float = 0.625, int = 21
 - : float = 0.23438, int = 8
 - : float = 0.39063, int = 13


block-frequency: $s7partial1gSbyF
=================================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
 - 3: 
 - 4: 
 - 5: 
loop-detection
compute-mass-in-function
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to 
  => assign 6000000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  9fffffffffffffff
  => assign 63ffffffffffffff (3c00000000000000) to 
  => assign 3c00000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  63ffffffffffffff
  => assign 63ffffffffffffff (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  3c00000000000000
  => assign 3c00000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  6000000000000000
  => assign 6000000000000000 (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 0.234375, max = 1.0, factor = 34.13333333
 - : float = 1.0, scaled = 34.13333333, int = 34
 - : float = 0.625, scaled = 21.33333333, int = 21
 - : float = 0.390625, scaled = 13.33333333, int = 13
 - : float = 0.234375, scaled = 8.0, int = 8
 - : float = 0.375, scaled = 12.8, int = 12
 - : float = 1.0, scaled = 34.13333333, int = 34
block-frequency-info: $s7partial1gSbyF
 - : float = 1.0, int = 34
 - : float = 1.0, int = 34
 - : float = 0.375, int = 12
 - : float = 0.625, int = 21
 - : float = 0.23438, int = 8
 - : float = 0.39063, int = 13

	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1AC1fySbxlFTf4dd_n ----

Computing probabilities for 

block-frequency: $s7partial1AC1fySbxlFTf4dd_n
=============================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlFTf4dd_n
 - : float = 1.0, int = 8


block-frequency: $s7partial1AC1fySbxlFTf4dd_n
=============================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlFTf4dd_n
 - : float = 1.0, int = 8

	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
---- Branch Probability Info : $s7partial1BCMa ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%

block-frequency: $s7partial1BCMa
================================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
loop-detection
compute-mass-in-function
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  ffffffffffffffff
  => assign 5fffffffffffffff (a000000000000000) to 
  => assign a000000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  5fffffffffffffff
  => assign 5fffffffffffffff (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 0.375, max = 1.0, factor = 21.33333333
 - : float = 1.0, scaled = 21.33333333, int = 21
 - : float = 0.375, scaled = 8.0, int = 8
 - : float = 1.0, scaled = 21.33333333, int = 21
block-frequency-info: $s7partial1BCMa
 - : float = 1.0, int = 21
 - : float = 0.375, int = 8
 - : float = 1.0, int = 21


block-frequency: $s7partial1BCMa
================================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
loop-detection
compute-mass-in-function
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  ffffffffffffffff
  => assign 5fffffffffffffff (a000000000000000) to 
  => assign a000000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  5fffffffffffffff
  => assign 5fffffffffffffff (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 0.375, max = 1.0, factor = 21.33333333
 - : float = 1.0, scaled = 21.33333333, int = 21
 - : float = 0.375, scaled = 8.0, int = 8
 - : float = 1.0, scaled = 21.33333333, int = 21
block-frequency-info: $s7partial1BCMa
 - : float = 1.0, int = 21
 - : float = 0.375, int = 8
 - : float = 1.0, int = 21

	discovered a new reachable node %1
	discovered a new reachable node %4
	discovered a new reachable node %7
---- Branch Probability Info : $s7partial1ACMa ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%

block-frequency: $s7partial1ACMa
================================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
loop-detection
compute-mass-in-function
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  ffffffffffffffff
  => assign 5fffffffffffffff (a000000000000000) to 
  => assign a000000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  5fffffffffffffff
  => assign 5fffffffffffffff (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 0.375, max = 1.0, factor = 21.33333333
 - : float = 1.0, scaled = 21.33333333, int = 21
 - : float = 0.375, scaled = 8.0, int = 8
 - : float = 1.0, scaled = 21.33333333, int = 21
block-frequency-info: $s7partial1ACMa
 - : float = 1.0, int = 21
 - : float = 0.375, int = 8
 - : float = 1.0, int = 21


block-frequency: $s7partial1ACMa
================================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
loop-detection
compute-mass-in-function
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  ffffffffffffffff
  => assign 5fffffffffffffff (a000000000000000) to 
  => assign a000000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  5fffffffffffffff
  => assign 5fffffffffffffff (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 0.375, max = 1.0, factor = 21.33333333
 - : float = 1.0, scaled = 21.33333333, int = 21
 - : float = 0.375, scaled = 8.0, int = 8
 - : float = 1.0, scaled = 21.33333333, int = 21
block-frequency-info: $s7partial1ACMa
 - : float = 1.0, int = 21
 - : float = 0.375, int = 8
 - : float = 1.0, int = 21

	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCACycfC ----

Computing probabilities for 

block-frequency: $s7partial1BCACycfC
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfC
 - : float = 1.0, int = 8


block-frequency: $s7partial1BCACycfC
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfC
 - : float = 1.0, int = 8

	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCfD ----

Computing probabilities for 

block-frequency: $s7partial1BCfD
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfD
 - : float = 1.0, int = 8


block-frequency: $s7partial1BCfD
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfD
 - : float = 1.0, int = 8

======
build tree: worklist-size=2
  new in tree: $s7partial1BCMa
  add to existing: $s7partial1ACMa
merge functions: tree-size=1
    remove from tree: $s7partial1BCMa
    remove from tree: $s7partial1ACMa
  Merge into $s7partial1BCMaTm
    writeThunk: $s7partial1BCMa
    writeThunk: $s7partial1ACMa
	discovered a new reachable node %2
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %3
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %3
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %0
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %3
	discovered a new reachable node %6
	discovered a new reachable node %9
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %2
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %3
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %3
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %0
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %3
	discovered a new reachable node %6
	discovered a new reachable node %9
	discovered a new reachable node %1
	discovered a new reachable node %1
	discovered a new reachable node %2
	discovered a new reachable node %2
MergeICmpsLegacyPass: main
	discovered a new reachable node %2
---- Branch Probability Info : main ----

Computing probabilities for 

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: main
********** End Constant Hoisting **********
	discovered a new reachable node %2
*** Interleaved Access Pass: main
	discovered a new reachable node %2
---- Branch Probability Info : main ----

Computing probabilities for 

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - : float = 1.0, int = 8

	discovered a new reachable node %1
	discovered a new reachable node %1
MergeICmpsLegacyPass: $s7partial1ACACycfC
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACACycfC ----

Computing probabilities for 

block-frequency: $s7partial1ACACycfC
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfC
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: $s7partial1ACACycfC
********** End Constant Hoisting **********
	discovered a new reachable node %1
*** Interleaved Access Pass: $s7partial1ACACycfC
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACACycfC ----

Computing probabilities for 

block-frequency: $s7partial1ACACycfC
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfC
 - : float = 1.0, int = 8

	discovered a new reachable node %1
	discovered a new reachable node %1
MergeICmpsLegacyPass: $s7partial1ACACycfc
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACACycfc ----

Computing probabilities for 

block-frequency: $s7partial1ACACycfc
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfc
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: $s7partial1ACACycfc
********** End Constant Hoisting **********
	discovered a new reachable node %1
*** Interleaved Access Pass: $s7partial1ACACycfc
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACACycfc ----

Computing probabilities for 

block-frequency: $s7partial1ACACycfc
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfc
 - : float = 1.0, int = 8

	discovered a new reachable node %3
	discovered a new reachable node %3
MergeICmpsLegacyPass: $s7partial1AC1fySbxlF
	discovered a new reachable node %3
---- Branch Probability Info : $s7partial1AC1fySbxlF ----

Computing probabilities for 

block-frequency: $s7partial1AC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlF
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: $s7partial1AC1fySbxlF
********** End Constant Hoisting **********
	discovered a new reachable node %3
*** Interleaved Access Pass: $s7partial1AC1fySbxlF
	discovered a new reachable node %3
---- Branch Probability Info : $s7partial1AC1fySbxlF ----

Computing probabilities for 

block-frequency: $s7partial1AC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlF
 - : float = 1.0, int = 8

	discovered a new reachable node %1
	discovered a new reachable node %1
MergeICmpsLegacyPass: $s7partial1ACfd
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACfd ----

Computing probabilities for 

block-frequency: $s7partial1ACfd
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfd
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: $s7partial1ACfd
********** End Constant Hoisting **********
	discovered a new reachable node %1
*** Interleaved Access Pass: $s7partial1ACfd
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACfd ----

Computing probabilities for 

block-frequency: $s7partial1ACfd
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfd
 - : float = 1.0, int = 8

	discovered a new reachable node %1
	discovered a new reachable node %1
MergeICmpsLegacyPass: $s7partial1ACfD
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACfD ----

Computing probabilities for 

block-frequency: $s7partial1ACfD
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfD
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: $s7partial1ACfD
********** End Constant Hoisting **********
	discovered a new reachable node %1
*** Interleaved Access Pass: $s7partial1ACfD
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACfD ----

Computing probabilities for 

block-frequency: $s7partial1ACfD
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfD
 - : float = 1.0, int = 8

	discovered a new reachable node %3
	discovered a new reachable node %3
MergeICmpsLegacyPass: $s7partial1BC1fySbxlF
	discovered a new reachable node %3
---- Branch Probability Info : $s7partial1BC1fySbxlF ----

Computing probabilities for 

block-frequency: $s7partial1BC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BC1fySbxlF
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: $s7partial1BC1fySbxlF
********** End Constant Hoisting **********
	discovered a new reachable node %3
*** Interleaved Access Pass: $s7partial1BC1fySbxlF
	discovered a new reachable node %3
---- Branch Probability Info : $s7partial1BC1fySbxlF ----

Computing probabilities for 

block-frequency: $s7partial1BC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BC1fySbxlF
 - : float = 1.0, int = 8

	discovered a new reachable node %1
	discovered a new reachable node %1
MergeICmpsLegacyPass: $s7partial1BCfd
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCfd ----

Computing probabilities for 

block-frequency: $s7partial1BCfd
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfd
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: $s7partial1BCfd
********** End Constant Hoisting **********
	discovered a new reachable node %1
*** Interleaved Access Pass: $s7partial1BCfd
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCfd ----

Computing probabilities for 

block-frequency: $s7partial1BCfd
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfd
 - : float = 1.0, int = 8

	discovered a new reachable node %1
	discovered a new reachable node %1
MergeICmpsLegacyPass: $s7partial1BCACycfc
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCACycfc ----

Computing probabilities for 

block-frequency: $s7partial1BCACycfc
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfc
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: $s7partial1BCACycfc
********** End Constant Hoisting **********
	discovered a new reachable node %1
*** Interleaved Access Pass: $s7partial1BCACycfc
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCACycfc ----

Computing probabilities for 

block-frequency: $s7partial1BCACycfc
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfc
 - : float = 1.0, int = 8

	discovered a new reachable node %0
	discovered a new reachable node %0
MergeICmpsLegacyPass: $s7partial8makeAorBAA1ACyF
	discovered a new reachable node %0
---- Branch Probability Info : $s7partial8makeAorBAA1ACyF ----

Computing probabilities for 

block-frequency: $s7partial8makeAorBAA1ACyF
===========================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial8makeAorBAA1ACyF
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: $s7partial8makeAorBAA1ACyF
********** End Constant Hoisting **********
	discovered a new reachable node %0
*** Interleaved Access Pass: $s7partial8makeAorBAA1ACyF
	discovered a new reachable node %0
---- Branch Probability Info : $s7partial8makeAorBAA1ACyF ----

Computing probabilities for 

block-frequency: $s7partial8makeAorBAA1ACyF
===========================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial8makeAorBAA1ACyF
 - : float = 1.0, int = 8

	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19
MergeICmpsLegacyPass: $s7partial1gSbyF
processPhi()
skip: non-constant value not from cmp or not from last block.
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19
---- Branch Probability Info : $s7partial1gSbyF ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%

block-frequency: $s7partial1gSbyF
=================================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
 - 3: 
 - 4: 
 - 5: 
loop-detection
compute-mass-in-function
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to 
  => assign 6000000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  9fffffffffffffff
  => assign 63ffffffffffffff (3c00000000000000) to 
  => assign 3c00000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  63ffffffffffffff
  => assign 63ffffffffffffff (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  3c00000000000000
  => assign 3c00000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  6000000000000000
  => assign 6000000000000000 (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 0.234375, max = 1.0, factor = 34.13333333
 - : float = 1.0, scaled = 34.13333333, int = 34
 - : float = 0.625, scaled = 21.33333333, int = 21
 - : float = 0.390625, scaled = 13.33333333, int = 13
 - : float = 0.234375, scaled = 8.0, int = 8
 - : float = 0.375, scaled = 12.8, int = 12
 - : float = 1.0, scaled = 34.13333333, int = 34
block-frequency-info: $s7partial1gSbyF
 - : float = 1.0, int = 34
 - : float = 1.0, int = 34
 - : float = 0.375, int = 12
 - : float = 0.625, int = 21
 - : float = 0.23438, int = 8
 - : float = 0.39063, int = 13

********** Begin Constant Hoisting **********
********** Function: $s7partial1gSbyF
********** End Constant Hoisting **********
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19
*** Interleaved Access Pass: $s7partial1gSbyF
	discovered a new reachable node %0
	discovered a new reachable node %10
	discovered a new reachable node %8
	discovered a new reachable node %15
	discovered a new reachable node %17
	discovered a new reachable node %19
---- Branch Probability Info : $s7partial1gSbyF ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%

block-frequency: $s7partial1gSbyF
=================================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
 - 3: 
 - 4: 
 - 5: 
loop-detection
compute-mass-in-function
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to 
  => assign 6000000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  9fffffffffffffff
  => assign 63ffffffffffffff (3c00000000000000) to 
  => assign 3c00000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  63ffffffffffffff
  => assign 63ffffffffffffff (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  3c00000000000000
  => assign 3c00000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  6000000000000000
  => assign 6000000000000000 (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 0.234375, max = 1.0, factor = 34.13333333
 - : float = 1.0, scaled = 34.13333333, int = 34
 - : float = 0.625, scaled = 21.33333333, int = 21
 - : float = 0.390625, scaled = 13.33333333, int = 13
 - : float = 0.234375, scaled = 8.0, int = 8
 - : float = 0.375, scaled = 12.8, int = 12
 - : float = 1.0, scaled = 34.13333333, int = 34
block-frequency-info: $s7partial1gSbyF
 - : float = 1.0, int = 34
 - : float = 1.0, int = 34
 - : float = 0.375, int = 12
 - : float = 0.625, int = 21
 - : float = 0.23438, int = 8
 - : float = 0.39063, int = 13

CGP: Found      local addrmode: [inbounds Base:%1]
CGP: Found      local addrmode: [inbounds Base:%2]
CGP: Found      local addrmode: [inbounds 88 + Base:%6]
CGP: Found      local addrmode: [inbounds Base:%1]
CGP: Found      local addrmode: [inbounds Base:%2]
CGP: Found      local addrmode: [inbounds 88 + Base:%6]
	discovered a new reachable node %1
	discovered a new reachable node %1
MergeICmpsLegacyPass: $s7partial1AC1fySbxlFTf4dd_n
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1AC1fySbxlFTf4dd_n ----

Computing probabilities for 

block-frequency: $s7partial1AC1fySbxlFTf4dd_n
=============================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlFTf4dd_n
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: $s7partial1AC1fySbxlFTf4dd_n
********** End Constant Hoisting **********
	discovered a new reachable node %1
*** Interleaved Access Pass: $s7partial1AC1fySbxlFTf4dd_n
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1AC1fySbxlFTf4dd_n ----

Computing probabilities for 

block-frequency: $s7partial1AC1fySbxlFTf4dd_n
=============================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlFTf4dd_n
 - : float = 1.0, int = 8

	discovered a new reachable node %1
	discovered a new reachable node %1
MergeICmpsLegacyPass: $s7partial1BCMa
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCMa ----

Computing probabilities for 

block-frequency: $s7partial1BCMa
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCMa
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: $s7partial1BCMa
********** End Constant Hoisting **********
	discovered a new reachable node %1
*** Interleaved Access Pass: $s7partial1BCMa
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCMa ----

Computing probabilities for 

block-frequency: $s7partial1BCMa
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCMa
 - : float = 1.0, int = 8

	discovered a new reachable node %1
	discovered a new reachable node %1
MergeICmpsLegacyPass: $s7partial1ACMa
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACMa ----

Computing probabilities for 

block-frequency: $s7partial1ACMa
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACMa
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: $s7partial1ACMa
********** End Constant Hoisting **********
	discovered a new reachable node %1
*** Interleaved Access Pass: $s7partial1ACMa
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACMa ----

Computing probabilities for 

block-frequency: $s7partial1ACMa
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACMa
 - : float = 1.0, int = 8

	discovered a new reachable node %3
	discovered a new reachable node %6
	discovered a new reachable node %9
	discovered a new reachable node %3
	discovered a new reachable node %6
	discovered a new reachable node %9
MergeICmpsLegacyPass: $s7partial1BCMaTm
processPhi()
skip: non-constant value not from cmp or not from last block.
	discovered a new reachable node %3
	discovered a new reachable node %6
	discovered a new reachable node %9
---- Branch Probability Info : $s7partial1BCMaTm ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%

block-frequency: $s7partial1BCMaTm
==================================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
loop-detection
compute-mass-in-function
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  ffffffffffffffff
  => assign 5fffffffffffffff (a000000000000000) to 
  => assign a000000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  5fffffffffffffff
  => assign 5fffffffffffffff (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 0.375, max = 1.0, factor = 21.33333333
 - : float = 1.0, scaled = 21.33333333, int = 21
 - : float = 0.375, scaled = 8.0, int = 8
 - : float = 1.0, scaled = 21.33333333, int = 21
block-frequency-info: $s7partial1BCMaTm
 - : float = 1.0, int = 21
 - : float = 0.375, int = 8
 - : float = 1.0, int = 21

********** Begin Constant Hoisting **********
********** Function: $s7partial1BCMaTm
********** End Constant Hoisting **********
	discovered a new reachable node %3
	discovered a new reachable node %6
	discovered a new reachable node %9
*** Interleaved Access Pass: $s7partial1BCMaTm
	discovered a new reachable node %3
	discovered a new reachable node %6
	discovered a new reachable node %9
---- Branch Probability Info : $s7partial1BCMaTm ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%

block-frequency: $s7partial1BCMaTm
==================================
reverse-post-order-traversal
 - 0: 
 - 1: 
 - 2: 
loop-detection
compute-mass-in-function
 - node: 
  => [ local  ] weight = 805306368, succ = 
  => [ local  ] weight = 1342177280, succ = 
  => mass:  ffffffffffffffff
  => assign 5fffffffffffffff (a000000000000000) to 
  => assign a000000000000000 (0000000000000000) to 
 - node: 
  => [ local  ] weight = 2147483648, succ = 
  => mass:  5fffffffffffffff
  => assign 5fffffffffffffff (0000000000000000) to 
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 0.375, max = 1.0, factor = 21.33333333
 - : float = 1.0, scaled = 21.33333333, int = 21
 - : float = 0.375, scaled = 8.0, int = 8
 - : float = 1.0, scaled = 21.33333333, int = 21
block-frequency-info: $s7partial1BCMaTm
 - : float = 1.0, int = 21
 - : float = 0.375, int = 8
 - : float = 1.0, int = 21

CGP: Found      local addrmode: [inbounds Base:%1]
CGP: Found      local addrmode: [inbounds Base:%1]
	discovered a new reachable node %1
	discovered a new reachable node %1
MergeICmpsLegacyPass: $s7partial1BCACycfC
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCACycfC ----

Computing probabilities for 

block-frequency: $s7partial1BCACycfC
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfC
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: $s7partial1BCACycfC
********** End Constant Hoisting **********
	discovered a new reachable node %1
*** Interleaved Access Pass: $s7partial1BCACycfC
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCACycfC ----

Computing probabilities for 

block-frequency: $s7partial1BCACycfC
====================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfC
 - : float = 1.0, int = 8

	discovered a new reachable node %1
	discovered a new reachable node %1
MergeICmpsLegacyPass: $s7partial1BCfD
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCfD ----

Computing probabilities for 

block-frequency: $s7partial1BCfD
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfD
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: $s7partial1BCfD
********** End Constant Hoisting **********
	discovered a new reachable node %1
*** Interleaved Access Pass: $s7partial1BCfD
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCfD ----

Computing probabilities for 

block-frequency: $s7partial1BCfD
================================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfD
 - : float = 1.0, int = 8

	discovered a new reachable node %2
[SafeStack] Function: main
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %2
	discovered a new reachable node %2
---- Branch Probability Info : main ----

Computing probabilities for 



=== main
Creating new node: t2: i32,ch = CopyFromReg t0, Register:i32 %0
Creating new node: t4: i64,ch = CopyFromReg t0, Register:i64 %1
Creating constant: t5: i32 = Constant<0>
Creating constant: t6: i32 = TargetConstant<0>
Creating new node: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>
Creating new node: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1
Initial selection DAG: %bb.0 'main:'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
  t2: i32,ch = CopyFromReg t0, Register:i32 %0
  t4: i64,ch = CopyFromReg t0, Register:i64 %1
  t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>
  t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1



Combining: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1

Combining: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>

Combining: t7: i32 = Register $eax

Combining: t6: i32 = TargetConstant<0>

Combining: t5: i32 = Constant<0>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 'main:'
SelectionDAG has 6 nodes:
    t0: ch = EntryToken
  t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>
  t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1


Legalizing node: t7: i32 = Register $eax
Ignoring node results
Legally typed node: t7: i32 = Register $eax

Legalizing node: t6: i32 = TargetConstant<0>
Ignoring node results
Legally typed node: t6: i32 = TargetConstant<0>

Legalizing node: t5: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t5: i32 = Constant<0>

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t5: i32 = Constant<0>
Legal operand
Legally typed node: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>

Legalizing node: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1
Analyzing result type: ch
Legal result type
Analyzing operand: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>
Legal operand
Analyzing operand: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>
Legal operand
Legally typed node: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1

Legalizing node: t65535: ch = handlenode t9
Analyzing result type: ch
Legal result type
Analyzing operand: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1
Legal operand
Legally typed node: t65535: ch = handlenode t9

Type-legalized selection DAG: %bb.0 'main:'
SelectionDAG has 6 nodes:
    t0: ch = EntryToken
  t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>
  t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1



Legalizing: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1
Legal node: nothing to do

Legalizing: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>
Legal node: nothing to do

Legalizing: t7: i32 = Register $eax

Legalizing: t6: i32 = TargetConstant<0>

Legalizing: t5: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.0 'main:'
SelectionDAG has 6 nodes:
    t0: ch = EntryToken
  t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>
  t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1



Legalizing: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1
Legal node: nothing to do

Combining: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1

Legalizing: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>
Legal node: nothing to do

Combining: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>

Legalizing: t7: i32 = Register $eax

Combining: t7: i32 = Register $eax

Legalizing: t6: i32 = TargetConstant<0>

Combining: t6: i32 = TargetConstant<0>

Legalizing: t5: i32 = Constant<0>
Legal node: nothing to do

Combining: t5: i32 = Constant<0>

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 'main:'
SelectionDAG has 6 nodes:
    t0: ch = EntryToken
  t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>
  t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1
ISEL: Starting pattern match
  Morphed node: t9: ch = RET TargetConstant:i32<0>, Register:i32 $eax, t8, t8:1
ISEL: Match complete!

ISEL: Starting selection on root node: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>

ISEL: Starting selection on root node: t7: i32 = Register $eax

ISEL: Starting selection on root node: t6: i32 = TargetConstant<0>

ISEL: Starting selection on root node: t5: i32 = Constant<0>
ISEL: Starting pattern match
  Initial Opcode index to 125031
  TypeSwitch[i32] from 125035 to 125038
  Morphed node: t5: i32,i32 = MOV32r0
ISEL: Match complete!

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 'main:'
SelectionDAG has 6 nodes:
    t0: ch = EntryToken
  t8: ch,glue = CopyToReg t0, Register:i32 $eax, MOV32r0:i32,i32
  t9: ch = RET TargetConstant:i32<0>, Register:i32 $eax, t8, t8:1


********** List Scheduling %bb.0 '' **********
SU(0): t9: ch = RET TargetConstant:i32<0>, Register:i32 $eax, t8, t8:1

    t8: ch,glue = CopyToReg t0, Register:i32 $eax, MOV32r0:i32,i32

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
SU(1): t5: i32,i32 = MOV32r0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t9: ch = RET TargetConstant:i32<0>, Register:i32 $eax, t8, t8:1

    t8: ch,glue = CopyToReg t0, Register:i32 $eax, MOV32r0:i32,i32


*** Scheduling [0]: SU(0): t9: ch = RET TargetConstant:i32<0>, Register:i32 $eax, t8, t8:1

    t8: ch,glue = CopyToReg t0, Register:i32 $eax, MOV32r0:i32,i32


Examining Available:
Height 1: SU(1): t5: i32,i32 = MOV32r0


*** Scheduling [1]: SU(1): t5: i32,i32 = MOV32r0

*** Final schedule ***
SU(1): t5: i32,i32 = MOV32r0

SU(0): t9: ch = RET TargetConstant:i32<0>, Register:i32 $eax, t8, t8:1

    t8: ch,glue = CopyToReg t0, Register:i32 $eax, MOV32r0:i32,i32


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function main: IsSSA, TracksLiveness

bb.0 (%ir-block.2):
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

***** Machine Function before Domain Reassignment *****
# Machine code for function main: IsSSA, TracksLiveness

bb.0 (%ir-block.2):
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# Machine code for function main: IsSSA, TracksLiveness

0B	bb.0 (%ir-block.2):
16B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
32B	  $eax = COPY %2:gr32
48B	  RET 0, $eax

# End machine code for function main.

********** Stack Coloring **********
********** Function: main
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: main
Machine InstCombiner: main
Combining MBB 
********** X86 cmov Conversion : main**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: main ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: main
**** Analysing main
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : main **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : main **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: main
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: main
# Machine code for function main: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.2):
16B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
32B	  $eax = COPY killed %2:gr32
48B	  RET 0, killed $eax

# End machine code for function main.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%2 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.2):
16B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
32B	  $eax = COPY %2:gr32
48B	  RET 0, killed $eax

# End machine code for function main.

********** SIMPLE REGISTER COALESCING **********
********** Function: main
********** JOINING INTERVALS ***********
:
32B	$eax = COPY %2:gr32
	Considering merging %2 with $eax
	Can only merge into reserved registers.
Remat: $eax = MOV32r0 implicit-def dead $eflags
Shrink: %2 [16r,32r:0)  0@16r weight:0.000000e+00
All defs dead: 16r	dead %2:gr32 = MOV32r0 implicit-def dead $eflags
Shrunk: %2 [16r,16d:0)  0@16r weight:0.000000e+00
Deleting dead def 16r	dead %2:gr32 = MOV32r0 implicit-def dead $eflags
Trying to inflate 0 regs.
********** INTERVALS **********
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.2):
32B	  $eax = MOV32r0 implicit-def dead $eflags
48B	  RET 0, killed $eax

# End machine code for function main.

Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness

bb.0 (%ir-block.2):
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, killed $eax

# End machine code for function main.

AllocationOrder(GR32) = [ $eax $ecx $edx $esi $edi $r8d $r9d $r10d $r11d $ebx $r14d $r15d $r12d $r13d ]
AllocationOrder(GR16) = [ $ax $cx $dx $si $di $r8w $r9w $r10w $r11w $bx $r14w $r15w $r12w $r13w ]
AllocationOrder(GR8) = [ $al $cl $dl $sil $dil $r8b $r9b $r10b $r11b $bl $r14b $r15b $r12b $r13b ]
********** INTERVALS **********
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.2):
32B	  $eax = MOV32r0 implicit-def dead $eflags
48B	  RET 0, killed $eax

# End machine code for function main.


block-frequency: main
=====================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: main
********** Compute Spill Weights **********
********** Function: main
********** INTERVALS **********
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.2):
32B	  $eax = MOV32r0 implicit-def dead $eflags
48B	  RET 0, killed $eax

# End machine code for function main.

********** REWRITE VIRTUAL REGISTERS **********
********** Function: main
********** REGISTER MAP **********

0B	bb.0 (%ir-block.2):
32B	  $eax = MOV32r0 implicit-def dead $eflags
48B	  RET 0, killed $eax
> $eax = MOV32r0 implicit-def dead $eflags
> RET 0, killed $eax
********** Stack Slot Coloring **********
********** Function: main
MCP: CopyPropagateBlock 
******** Post-regalloc Machine LICM: main ********

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing main
Look into: 0 
Nothing to shrink-wrap
MCP: CopyPropagateBlock 
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: main
	discovered a new reachable node %bb.0

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$eax:	2	$eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
$eax:	2	$eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
$eax:	2	$eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: main **********
X86 Retpoline Thunks
	discovered a new reachable node %1
[SafeStack] Function: $s7partial1ACACycfC
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %1
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACACycfC ----

Computing probabilities for 



=== $s7partial1ACACycfC
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Creating constant: t4: i64 = Constant<16>
Creating constant: t5: i64 = Constant<7>
Creating new node: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Creating new node: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
Creating new node: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
Creating constant: t13: i32 = Constant<0>
Creating new node: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1
Initial selection DAG: %bb.0 '$s7partial1ACACycfC:'
SelectionDAG has 16 nodes:
  t0: ch = EntryToken
  t3: i64 = GlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
  t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
  t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1



Combining: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1

Combining: t14: Untyped = RegisterMask

Combining: t13: i32 = Constant<0>

Combining: t12: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1

Combining: t10: i64 = Register $rdx

Combining: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1

Combining: t8: i64 = Register $rsi

Combining: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

Combining: t6: i64 = Register $rdi

Combining: t5: i64 = Constant<7>

Combining: t4: i64 = Constant<16>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t1: i64 = Register %0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1ACACycfC:'
SelectionDAG has 15 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
  t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
  t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1


Legalizing node: t14: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t14: Untyped = RegisterMask

Legalizing node: t13: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t13: i32 = Constant<0>

Legalizing node: t12: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0
Analyzing result type: i64
Legal result type
Legally typed node: t12: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0

Legalizing node: t10: i64 = Register $rdx
Ignoring node results
Legally typed node: t10: i64 = Register $rdx

Legalizing node: t8: i64 = Register $rsi
Ignoring node results
Legally typed node: t8: i64 = Register $rsi

Legalizing node: t6: i64 = Register $rdi
Ignoring node results
Legally typed node: t6: i64 = Register $rdi

Legalizing node: t5: i64 = Constant<7>
Analyzing result type: i64
Legal result type
Legally typed node: t5: i64 = Constant<7>

Legalizing node: t4: i64 = Constant<16>
Analyzing result type: i64
Legal result type
Legally typed node: t4: i64 = Constant<16>

Legalizing node: t1: i64 = Register %0
Ignoring node results
Legally typed node: t1: i64 = Register %0

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing node: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Legally typed node: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

Legalizing node: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal operand
Analyzing operand: t4: i64 = Constant<16>
Legal operand
Analyzing operand: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal operand
Legally typed node: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1

Legalizing node: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
Legal operand
Analyzing operand: t5: i64 = Constant<7>
Legal operand
Analyzing operand: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
Legal operand
Legally typed node: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1

Legalizing node: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
Legal operand
Analyzing operand: t12: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0
Legal operand
Analyzing operand: t13: i32 = Constant<0>
Legal operand
Analyzing operand: t14: Untyped = RegisterMask
Legal operand
Analyzing operand: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
Legal operand
Legally typed node: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1

Legalizing node: t65535: ch = handlenode t15
Analyzing result type: ch
Legal result type
Analyzing operand: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1
Legal operand
Legally typed node: t65535: ch = handlenode t15

Type-legalized selection DAG: %bb.0 '$s7partial1ACACycfC:'
SelectionDAG has 15 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
  t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
  t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1



Legalizing: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1
Legal node: nothing to do

Legalizing: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
Legal node: nothing to do

Legalizing: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
Legal node: nothing to do

Legalizing: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Legalizing: t14: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t13: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t12: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0
Legal node: nothing to do

Legalizing: t10: i64 = Register $rdx

Legalizing: t8: i64 = Register $rsi

Legalizing: t6: i64 = Register $rdi

Legalizing: t5: i64 = Constant<7>
Legal node: nothing to do

Legalizing: t4: i64 = Constant<16>
Legal node: nothing to do

Legalizing: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1ACACycfC:'
SelectionDAG has 15 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
  t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
  t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1



Legalizing: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1
Legal node: nothing to do

Combining: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1

Legalizing: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
Legal node: nothing to do

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1

Legalizing: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
Legal node: nothing to do

Combining: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1

Legalizing: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal node: nothing to do

Combining: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing: t14: Untyped = RegisterMask
Legal node: nothing to do

Combining: t14: Untyped = RegisterMask

Legalizing: t13: i32 = Constant<0>
Legal node: nothing to do

Combining: t13: i32 = Constant<0>

Legalizing: t12: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0
Legal node: nothing to do

Combining: t12: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0

Legalizing: t10: i64 = Register $rdx

Combining: t10: i64 = Register $rdx

Legalizing: t8: i64 = Register $rsi

Combining: t8: i64 = Register $rsi

Legalizing: t6: i64 = Register $rdi

Combining: t6: i64 = Register $rdi

Legalizing: t5: i64 = Constant<7>
Legal node: nothing to do

Combining: t5: i64 = Constant<7>

Legalizing: t4: i64 = Constant<16>
Legal node: nothing to do

Combining: t4: i64 = Constant<16>

Legalizing: t1: i64 = Register %0

Combining: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1ACACycfC:'
SelectionDAG has 15 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
  t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
  t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1
ISEL: Starting pattern match
  Initial Opcode index to 40262
  Match failed at index 40267
  Continuing at 40335
  OpcodeSwitch from 40341 to 40345
  TypeSwitch[i64] from 40345 to 40369
Creating constant: t16: i32 = TargetConstant<0>
  Morphed node: t15: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11, t11:1
ISEL: Match complete!

ISEL: Starting selection on root node: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1

ISEL: Starting selection on root node: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1

ISEL: Starting selection on root node: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

ISEL: Starting selection on root node: t14: Untyped = RegisterMask

ISEL: Starting selection on root node: t12: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0

ISEL: Starting selection on root node: t10: i64 = Register $rdx

ISEL: Starting selection on root node: t8: i64 = Register $rsi

ISEL: Starting selection on root node: t6: i64 = Register $rdi

ISEL: Starting selection on root node: t5: i64 = Constant<7>
ISEL: Starting pattern match
  Initial Opcode index to 125031
  Skipped scope entry (due to false predicate) at index 125033, continuing at 125110
  Skipped scope entry (due to false predicate) at index 125111, continuing at 125148
  Skipped scope entry (due to false predicate) at index 125149, continuing at 125195
  TypeSwitch[i64] from 125197 to 125229
  Match failed at index 125233
  Continuing at 125244
Creating constant: t17: i64 = TargetConstant<7>
  Morphed node: t5: i64 = MOV32ri64 TargetConstant:i64<7>
ISEL: Match complete!

ISEL: Starting selection on root node: t4: i64 = Constant<16>
ISEL: Starting pattern match
  Initial Opcode index to 125031
  Skipped scope entry (due to false predicate) at index 125033, continuing at 125110
  Skipped scope entry (due to false predicate) at index 125111, continuing at 125148
  Skipped scope entry (due to false predicate) at index 125149, continuing at 125195
  TypeSwitch[i64] from 125197 to 125229
  Match failed at index 125233
  Continuing at 125244
Creating constant: t18: i64 = TargetConstant<16>
  Morphed node: t4: i64 = MOV32ri64 TargetConstant:i64<16>
ISEL: Match complete!

ISEL: Starting selection on root node: t1: i64 = Register %0

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1ACACycfC:'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
    t4: i64 = MOV32ri64 TargetConstant:i64<16>
  t9: ch,glue = CopyToReg t7, Register:i64 $rsi, t4, t7:1
    t5: i64 = MOV32ri64 TargetConstant:i64<7>
  t11: ch,glue = CopyToReg t9, Register:i64 $rdx, t5, t9:1
  t15: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11, t11:1


********** List Scheduling %bb.0 '' **********
SU(0): t15: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11, t11:1

    t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t9: ch,glue = CopyToReg t7, Register:i64 $rsi, t4, t7:1

    t11: ch,glue = CopyToReg t9, Register:i64 $rdx, t5, t9:1

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
    SU(2): Data Latency=1
    SU(3): Data Latency=1
SU(1): t5: i64 = MOV32ri64 TargetConstant:i64<7>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(2): t4: i64 = MOV32ri64 TargetConstant:i64<16>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t15: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11, t11:1

    t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t9: ch,glue = CopyToReg t7, Register:i64 $rsi, t4, t7:1

    t11: ch,glue = CopyToReg t9, Register:i64 $rdx, t5, t9:1


*** Scheduling [0]: SU(0): t15: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11, t11:1

    t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t9: ch,glue = CopyToReg t7, Register:i64 $rsi, t4, t7:1

    t11: ch,glue = CopyToReg t9, Register:i64 $rdx, t5, t9:1


Examining Available:
Height 1: SU(1): t5: i64 = MOV32ri64 TargetConstant:i64<7>

Height 1: SU(2): t4: i64 = MOV32ri64 TargetConstant:i64<16>

Height 1: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [1]: SU(1): t5: i64 = MOV32ri64 TargetConstant:i64<7>


Examining Available:
Height 1: SU(2): t4: i64 = MOV32ri64 TargetConstant:i64<16>

Height 1: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [2]: SU(2): t4: i64 = MOV32ri64 TargetConstant:i64<16>


Examining Available:
Height 1: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [3]: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

*** Final schedule ***
SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

SU(2): t4: i64 = MOV32ri64 TargetConstant:i64<16>

SU(1): t5: i64 = MOV32ri64 TargetConstant:i64<7>

SU(0): t15: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11, t11:1

    t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t9: ch,glue = CopyToReg t7, Register:i64 $rsi, t4, t7:1

    t11: ch,glue = CopyToReg t9, Register:i64 $rdx, t5, t9:1


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1ACACycfC: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  %1:gr64 = MOV32ri64 16
  %2:gr64 = MOV32ri64 7
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $rdx = COPY %2:gr64
  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial1ACACycfC.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1ACACycfC: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  %1:gr64 = MOV32ri64 16
  %2:gr64 = MOV32ri64 7
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $rdx = COPY %2:gr64
  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial1ACACycfC.

# Machine code for function $s7partial1ACACycfC: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  %1:gr64 = MOV32ri64 16
48B	  %2:gr64 = MOV32ri64 7
64B	  $rdi = COPY %0:gr64
80B	  $rsi = COPY %1:gr64
96B	  $rdx = COPY %2:gr64
112B	  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial1ACACycfC.

********** Stack Coloring **********
********** Function: $s7partial1ACACycfC
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1ACACycfC
Machine InstCombiner: $s7partial1ACACycfC
Combining MBB 
********** X86 cmov Conversion : $s7partial1ACACycfC**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: $s7partial1ACACycfC ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: $s7partial1ACACycfC
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfC
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1ACACycfC
Encountered load fold barrier on TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
**** Analysing $s7partial1ACACycfC
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1ACACycfC **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : $s7partial1ACACycfC **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1ACACycfC
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1ACACycfC
# Machine code for function $s7partial1ACACycfC: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY killed $r13
32B	  %1:gr64 = MOV32ri64 16
48B	  %2:gr64 = MOV32ri64 7
64B	  $rdi = COPY killed %0:gr64
80B	  $rsi = COPY killed %1:gr64
96B	  $rdx = COPY killed %2:gr64
112B	  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACACycfC.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 R13B#0 R13BH#0 R13WH#0
Created 3 new intervals.
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,64r:0)  0@16r weight:0.000000e+00
%1 [32r,80r:0)  0@32r weight:0.000000e+00
%2 [48r,96r:0)  0@48r weight:0.000000e+00
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACACycfC: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  %1:gr64 = MOV32ri64 16
48B	  %2:gr64 = MOV32ri64 7
64B	  $rdi = COPY %0:gr64
80B	  $rsi = COPY %1:gr64
96B	  $rdx = COPY %2:gr64
112B	  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACACycfC.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1ACACycfC
********** JOINING INTERVALS ***********
:
16B	%0:gr64 = COPY $r13
	Considering merging %0 with $r13
	Can only merge into reserved registers.
64B	$rdi = COPY %0:gr64
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
80B	$rsi = COPY %1:gr64
	Considering merging %1 with $rsi
	Can only merge into reserved registers.
Remat: $rsi = MOV32ri64 16
Shrink: %1 [32r,80r:0)  0@32r weight:0.000000e+00
All defs dead: 32r	dead %1:gr64 = MOV32ri64 16
Shrunk: %1 [32r,32d:0)  0@32r weight:0.000000e+00
Deleting dead def 32r	dead %1:gr64 = MOV32ri64 16
96B	$rdx = COPY %2:gr64
	Considering merging %2 with $rdx
	Can only merge into reserved registers.
Remat: $rdx = MOV32ri64 7
Shrink: %2 [48r,96r:0)  0@48r weight:0.000000e+00
All defs dead: 48r	dead %2:gr64 = MOV32ri64 7
Shrunk: %2 [48r,48d:0)  0@48r weight:0.000000e+00
Deleting dead def 48r	dead %2:gr64 = MOV32ri64 7
64B	$rdi = COPY %0:gr64
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,64r:0)  0@16r weight:0.000000e+00
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACACycfC: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
64B	  $rdi = COPY %0:gr64
80B	  $rsi = MOV32ri64 16
96B	  $rdx = MOV32ri64 7
112B	  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACACycfC.

Before MISched:
# Machine code for function $s7partial1ACACycfC: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $rdi = COPY %0:gr64
  $rsi = MOV32ri64 16
  $rdx = MOV32ri64 7
  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACACycfC.

********** MI Scheduling **********
$s7partial1ACACycfC:%bb.0 
  From: %0:gr64 = COPY $r13
    To: TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %0:gr64 = COPY $r13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(1):   $rdi = COPY %0:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $rsi = MOV32ri64 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $rdx = MOV32ri64 7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rdi = COPY %0:gr64
handleMove 64B -> 104B: $rdi = COPY %0:gr64
     DIL:	[104r,112r:0)  0@104r
        -->	[104r,112r:0)  0@104r
     DIH:	[104r,112r:0)  0@104r
        -->	[104r,112r:0)  0@104r
     HDI:	[104r,112r:0)  0@104r
        -->	[104r,112r:0)  0@104r
     %0:	[16r,64r:0)  0@16r
        -->	[16r,104r:0)  0@16r
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $rdx = MOV32ri64 7
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $rsi = MOV32ri64 16
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:gr64 = COPY $r13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %0:gr64 = COPY $r13
SU(2):   $rsi = MOV32ri64 16
SU(3):   $rdx = MOV32ri64 7
SU(1):   $rdi = COPY %0:gr64

********** INTERVALS **********
DIL [104r,112r:0)  0@104r
DIH [104r,112r:0)  0@104r
HDI [104r,112r:0)  0@104r
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,104r:0)  0@16r weight:0.000000e+00
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACACycfC: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
80B	  $rsi = MOV32ri64 16
96B	  $rdx = MOV32ri64 7
104B	  $rdi = COPY %0:gr64
112B	  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACACycfC.


block-frequency: $s7partial1ACACycfC
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfC
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1ACACycfC
********** Compute Spill Weights **********
********** Function: $s7partial1ACACycfC
********** INTERVALS **********
DIL [104r,112r:0)  0@104r
DIH [104r,112r:0)  0@104r
HDI [104r,112r:0)  0@104r
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,104r:0)  0@16r weight:4.139344e-03
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACACycfC: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
80B	  $rsi = MOV32ri64 16
96B	  $rdx = MOV32ri64 7
104B	  $rdi = COPY %0:gr64
112B	  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACACycfC.


selectOrSplit GR64:%0 [16r,104r:0)  0@16r weight:4.139344e-03 w=4.139344e-03
AllocationOrder(GR64) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r10 $r11 $rbx $r14 $r15 $r12 $r13 ]
hints: $rdi $r13
assigning %0 to $rdi: DIL [16r,104r:0)  0@16r DIH [16r,104r:0)  0@16r HDI [16r,104r:0)  0@16r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1ACACycfC
********** REGISTER MAP **********
[%0 -> $rdi] GR64

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
80B	  $rsi = MOV32ri64 16
96B	  $rdx = MOV32ri64 7
104B	  $rdi = COPY killed %0:gr64
112B	  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx
> renamable $rdi = COPY $r13
> $rsi = MOV32ri64 16
> $rdx = MOV32ri64 7
> $rdi = COPY killed renamable $rdi
Identity copy: $rdi = COPY killed renamable $rdi
  deleted.
> TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx
********** Stack Slot Coloring **********
********** Function: $s7partial1ACACycfC
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rdi = COPY $r13
MCP: Copy is used - not dead:   renamable $rdi = COPY $r13
MCP: Copy is used - not dead:   renamable $rdi = COPY $r13
MCP: Copy is used - not dead:   renamable $rdi = COPY $r13
******** Post-regalloc Machine LICM: $s7partial1ACACycfC ********

block-frequency: $s7partial1ACACycfC
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfC
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing $s7partial1ACACycfC
Look into: 0 
Use or define CSR(1) or FI(0): renamable $rdi = COPY $r13

No Shrink wrap candidate found
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rdi = COPY $r13
MCP: Copy is used - not dead:   renamable $rdi = COPY $r13
MCP: Copy is used - not dead:   renamable $rdi = COPY $r13
MCP: Copy is used - not dead:   renamable $rdi = COPY $r13
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1ACACycfC
real copy:   renamable $rdi = COPY $r13
replaced by: $rdi = MOV64rr $r13
	discovered a new reachable node %bb.0

block-frequency: $s7partial1ACACycfC
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfC
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rdi:	2	$rdi = MOV64rr $r13
$rdi:	2	$rdi = MOV64rr $r13
$rdi:	2	$rdi = MOV64rr $r13
$esi:	3	$esi = MOV32ri 16, implicit-def $rsi
$esi:	3	$esi = MOV32ri 16, implicit-def $rsi
$esi:	3	$esi = MOV32ri 16, implicit-def $rsi
$edx:	4	$edx = MOV32ri 7, implicit-def $rdx
$edx:	4	$edx = MOV32ri 7, implicit-def $rdx
$edx:	4	$edx = MOV32ri 7, implicit-def $rdx
$rbp:	5	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	5	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	5	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
%bb.0: entry
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1ACACycfC **********
X86 Retpoline Thunks
	discovered a new reachable node %1
[SafeStack] Function: $s7partial1ACACycfc
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %1
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACACycfc ----

Computing probabilities for 



=== $s7partial1ACACycfc
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Creating constant: t3: i32 = TargetConstant<0>
Creating new node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Creating new node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Initial selection DAG: %bb.0 '$s7partial1ACACycfc:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1



Combining: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1

Combining: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

Combining: t4: i64 = Register $rax

Combining: t3: i32 = TargetConstant<0>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t1: i64 = Register %0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1ACACycfc:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1


Legalizing node: t4: i64 = Register $rax
Ignoring node results
Legally typed node: t4: i64 = Register $rax

Legalizing node: t3: i32 = TargetConstant<0>
Ignoring node results
Legally typed node: t3: i32 = TargetConstant<0>

Legalizing node: t1: i64 = Register %0
Ignoring node results
Legally typed node: t1: i64 = Register %0

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Legally typed node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

Legalizing node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Analyzing result type: ch
Legal result type
Analyzing operand: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal operand
Analyzing operand: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal operand
Legally typed node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1

Legalizing node: t65535: ch = handlenode t6
Analyzing result type: ch
Legal result type
Analyzing operand: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Legal operand
Legally typed node: t65535: ch = handlenode t6

Type-legalized selection DAG: %bb.0 '$s7partial1ACACycfc:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1



Legalizing: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Legal node: nothing to do

Legalizing: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Legalizing: t4: i64 = Register $rax

Legalizing: t3: i32 = TargetConstant<0>

Legalizing: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1ACACycfc:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1



Legalizing: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Legal node: nothing to do

Combining: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1

Legalizing: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal node: nothing to do

Combining: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing: t4: i64 = Register $rax

Combining: t4: i64 = Register $rax

Legalizing: t3: i32 = TargetConstant<0>

Combining: t3: i32 = TargetConstant<0>

Legalizing: t1: i64 = Register %0

Combining: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1ACACycfc:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
ISEL: Starting pattern match
  Initial Opcode index to 130673
  Morphed node: t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1
ISEL: Match complete!

ISEL: Starting selection on root node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

ISEL: Starting selection on root node: t4: i64 = Register $rax

ISEL: Starting selection on root node: t3: i32 = TargetConstant<0>

ISEL: Starting selection on root node: t1: i64 = Register %0

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1ACACycfc:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1


********** List Scheduling %bb.0 '' **********
SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2


*** Scheduling [0]: SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2


Examining Available:
Height 1: SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [1]: SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

*** Final schedule ***
SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1ACACycfc: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $rax = COPY %0:gr64
  RET 0, $rax

# End machine code for function $s7partial1ACACycfc.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1ACACycfc: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $rax = COPY %0:gr64
  RET 0, $rax

# End machine code for function $s7partial1ACACycfc.

# Machine code for function $s7partial1ACACycfc: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, $rax

# End machine code for function $s7partial1ACACycfc.

********** Stack Coloring **********
********** Function: $s7partial1ACACycfc
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1ACACycfc
Machine InstCombiner: $s7partial1ACACycfc
Combining MBB 
********** X86 cmov Conversion : $s7partial1ACACycfc**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: $s7partial1ACACycfc ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: $s7partial1ACACycfc
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfc
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1ACACycfc
**** Analysing $s7partial1ACACycfc
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1ACACycfc **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : $s7partial1ACACycfc **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1ACACycfc
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1ACACycfc
# Machine code for function $s7partial1ACACycfc: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY killed $r13
32B	  $rax = COPY killed %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1ACACycfc.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 R13B#0 R13BH#0 R13WH#0
Created 3 new intervals.
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACACycfc: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1ACACycfc.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1ACACycfc
********** JOINING INTERVALS ***********
:
16B	%0:gr64 = COPY $r13
	Considering merging %0 with $r13
	Can only merge into reserved registers.
32B	$rax = COPY %0:gr64
	Considering merging %0 with $rax
	Can only merge into reserved registers.
32B	$rax = COPY %0:gr64
	Considering merging %0 with $rax
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACACycfc: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1ACACycfc.

Before MISched:
# Machine code for function $s7partial1ACACycfc: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $rax = COPY %0:gr64
  RET 0, killed $rax

# End machine code for function $s7partial1ACACycfc.

********** MI Scheduling **********
$s7partial1ACACycfc:%bb.0 
  From: %0:gr64 = COPY $r13
    To: RET 0, killed $rax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %0:gr64 = COPY $r13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(1):   $rax = COPY %0:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   RET 0, killed $rax
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rax = COPY %0:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:gr64 = COPY $r13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %0:gr64 = COPY $r13
SU(1):   $rax = COPY %0:gr64

********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACACycfc: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1ACACycfc.


block-frequency: $s7partial1ACACycfc
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfc
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1ACACycfc
********** Compute Spill Weights **********
********** Function: $s7partial1ACACycfc
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:INF
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACACycfc: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1ACACycfc.


selectOrSplit GR64:%0 [16r,32r:0)  0@16r weight:INF w=INF
hints: $rax $r13
assigning %0 to $rax: AH [16r,32r:0)  0@16r AL [16r,32r:0)  0@16r HAX [16r,32r:0)  0@16r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1ACACycfc
********** REGISTER MAP **********
[%0 -> $rax] GR64

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY killed %0:gr64
48B	  RET 0, $rax
> renamable $rax = COPY $r13
> $rax = COPY killed renamable $rax
Identity copy: $rax = COPY killed renamable $rax
  deleted.
> RET 0, $rax
********** Stack Slot Coloring **********
********** Function: $s7partial1ACACycfc
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
******** Post-regalloc Machine LICM: $s7partial1ACACycfc ********

block-frequency: $s7partial1ACACycfc
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfc
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing $s7partial1ACACycfc
Look into: 0 
Use or define CSR(1) or FI(0): renamable $rax = COPY $r13

No Shrink wrap candidate found
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1ACACycfc
real copy:   renamable $rax = COPY $r13
replaced by: $rax = MOV64rr $r13
	discovered a new reachable node %bb.0

block-frequency: $s7partial1ACACycfc
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACACycfc
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rax:	2	$rax = MOV64rr $r13
$rax:	2	$rax = MOV64rr $r13
$rax:	2	$rax = MOV64rr $r13
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1ACACycfc **********
X86 Retpoline Thunks
	discovered a new reachable node %3
[SafeStack] Function: $s7partial1AC1fySbxlF
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %3
	discovered a new reachable node %3
---- Branch Probability Info : $s7partial1AC1fySbxlF ----

Computing probabilities for 



=== $s7partial1AC1fySbxlF
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Creating new node: t4: i64,ch = CopyFromReg t0, Register:i64 %1
Creating new node: t6: i64,ch = CopyFromReg t0, Register:i64 %2
Creating new node: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4
Creating constant: t11: i32 = Constant<0>
Creating new node: t13: ch,glue = X86ISD::TC_RETURN t9, TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, Constant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9:1
Initial selection DAG: %bb.0 '$s7partial1AC1fySbxlF:'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
  t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t6: i64,ch = CopyFromReg t0, Register:i64 %2
  t7: i64 = GlobalAddress<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0
    t4: i64,ch = CopyFromReg t0, Register:i64 %1
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4
  t13: ch,glue = X86ISD::TC_RETURN t9, TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, Constant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9:1



Combining: t13: ch,glue = X86ISD::TC_RETURN t9, TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, Constant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9:1

Combining: t12: Untyped = RegisterMask

Combining: t11: i32 = Constant<0>

Combining: t10: i64 = TargetGlobalAddress<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0

Combining: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4

Combining: t8: i64 = Register $rdi

Combining: t4: i64,ch = CopyFromReg t0, Register:i64 %1

Combining: t3: i64 = Register %1

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1AC1fySbxlF:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %1
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4
  t13: ch,glue = X86ISD::TC_RETURN t9, TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, Constant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9:1


Legalizing node: t12: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t12: Untyped = RegisterMask

Legalizing node: t11: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t11: i32 = Constant<0>

Legalizing node: t10: i64 = TargetGlobalAddress<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t10: i64 = TargetGlobalAddress<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0

Legalizing node: t8: i64 = Register $rdi
Ignoring node results
Legally typed node: t8: i64 = Register $rdi

Legalizing node: t3: i64 = Register %1
Ignoring node results
Legally typed node: t3: i64 = Register %1

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t4: i64,ch = CopyFromReg t0, Register:i64 %1
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t4: i64,ch = CopyFromReg t0, Register:i64 %1

Legalizing node: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t4: i64,ch = CopyFromReg t0, Register:i64 %1
Legal operand
Legally typed node: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4

Legalizing node: t13: ch,glue = X86ISD::TC_RETURN t9, TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, Constant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4
Legal operand
Analyzing operand: t10: i64 = TargetGlobalAddress<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0
Legal operand
Analyzing operand: t11: i32 = Constant<0>
Legal operand
Analyzing operand: t12: Untyped = RegisterMask
Legal operand
Analyzing operand: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4
Legal operand
Legally typed node: t13: ch,glue = X86ISD::TC_RETURN t9, TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, Constant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9:1

Legalizing node: t65535: ch = handlenode t13
Analyzing result type: ch
Legal result type
Analyzing operand: t13: ch,glue = X86ISD::TC_RETURN t9, TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, Constant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9:1
Legal operand
Legally typed node: t65535: ch = handlenode t13

Type-legalized selection DAG: %bb.0 '$s7partial1AC1fySbxlF:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %1
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4
  t13: ch,glue = X86ISD::TC_RETURN t9, TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, Constant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9:1



Legalizing: t13: ch,glue = X86ISD::TC_RETURN t9, TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, Constant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9:1
Legal node: nothing to do

Legalizing: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4
Legal node: nothing to do

Legalizing: t4: i64,ch = CopyFromReg t0, Register:i64 %1
Legal node: nothing to do

Legalizing: t12: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t11: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t10: i64 = TargetGlobalAddress<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0
Legal node: nothing to do

Legalizing: t8: i64 = Register $rdi

Legalizing: t3: i64 = Register %1

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1AC1fySbxlF:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %1
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4
  t13: ch,glue = X86ISD::TC_RETURN t9, TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, Constant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9:1



Legalizing: t13: ch,glue = X86ISD::TC_RETURN t9, TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, Constant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9:1
Legal node: nothing to do

Combining: t13: ch,glue = X86ISD::TC_RETURN t9, TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, Constant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9:1

Legalizing: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4
Legal node: nothing to do

Combining: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4

Legalizing: t4: i64,ch = CopyFromReg t0, Register:i64 %1
Legal node: nothing to do

Combining: t4: i64,ch = CopyFromReg t0, Register:i64 %1

Legalizing: t12: Untyped = RegisterMask
Legal node: nothing to do

Combining: t12: Untyped = RegisterMask

Legalizing: t11: i32 = Constant<0>
Legal node: nothing to do

Combining: t11: i32 = Constant<0>

Legalizing: t10: i64 = TargetGlobalAddress<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0
Legal node: nothing to do

Combining: t10: i64 = TargetGlobalAddress<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0

Legalizing: t8: i64 = Register $rdi

Combining: t8: i64 = Register $rdi

Legalizing: t3: i64 = Register %1

Combining: t3: i64 = Register %1

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1AC1fySbxlF:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %1
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4
  t13: ch,glue = X86ISD::TC_RETURN t9, TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, Constant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t13: ch,glue = X86ISD::TC_RETURN t9, TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, Constant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9:1
ISEL: Starting pattern match
  Initial Opcode index to 40262
  Match failed at index 40267
  Continuing at 40335
  OpcodeSwitch from 40341 to 40345
  TypeSwitch[i64] from 40345 to 40369
Creating constant: t14: i32 = TargetConstant<0>
  Morphed node: t13: ch = TCRETURNdi64 TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, TargetConstant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9, t9:1
ISEL: Match complete!

ISEL: Starting selection on root node: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4

ISEL: Starting selection on root node: t4: i64,ch = CopyFromReg t0, Register:i64 %1

ISEL: Starting selection on root node: t12: Untyped = RegisterMask

ISEL: Starting selection on root node: t10: i64 = TargetGlobalAddress<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0

ISEL: Starting selection on root node: t8: i64 = Register $rdi

ISEL: Starting selection on root node: t3: i64 = Register %1

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1AC1fySbxlF:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %1
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4
  t13: ch = TCRETURNdi64 TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, TargetConstant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9, t9:1


********** List Scheduling %bb.0 '' **********
SU(0): t13: ch = TCRETURNdi64 TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, TargetConstant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9, t9:1

    t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
SU(1): t4: i64,ch = CopyFromReg t0, Register:i64 %1

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t13: ch = TCRETURNdi64 TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, TargetConstant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9, t9:1

    t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4


*** Scheduling [0]: SU(0): t13: ch = TCRETURNdi64 TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, TargetConstant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9, t9:1

    t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4


Examining Available:
Height 1: SU(1): t4: i64,ch = CopyFromReg t0, Register:i64 %1


*** Scheduling [1]: SU(1): t4: i64,ch = CopyFromReg t0, Register:i64 %1

*** Final schedule ***
SU(1): t4: i64,ch = CopyFromReg t0, Register:i64 %1

SU(0): t13: ch = TCRETURNdi64 TargetGlobalAddress:i64<i1 (%swift.type*)* @"$s7partial1AC1fySbxlFTf4dd_n"> 0, TargetConstant:i32<0>, Register:i64 $rdi, RegisterMask:Untyped, t9, t9:1

    t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t4


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1AC1fySbxlF: IsSSA, TracksLiveness
Function Live Ins: $rsi in %1

bb.0 (%ir-block.3):
  liveins: $rsi
  %1:gr64 = COPY $rsi
  $rdi = COPY %1:gr64
  TCRETURNdi64 @"$s7partial1AC1fySbxlFTf4dd_n", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

# End machine code for function $s7partial1AC1fySbxlF.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1AC1fySbxlF: IsSSA, TracksLiveness
Function Live Ins: $rsi in %1

bb.0 (%ir-block.3):
  liveins: $rsi
  %1:gr64 = COPY $rsi
  $rdi = COPY %1:gr64
  TCRETURNdi64 @"$s7partial1AC1fySbxlFTf4dd_n", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

# End machine code for function $s7partial1AC1fySbxlF.

# Machine code for function $s7partial1AC1fySbxlF: IsSSA, TracksLiveness
Function Live Ins: $rsi in %1

0B	bb.0 (%ir-block.3):
	  liveins: $rsi
16B	  %1:gr64 = COPY $rsi
32B	  $rdi = COPY %1:gr64
48B	  TCRETURNdi64 @"$s7partial1AC1fySbxlFTf4dd_n", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi

# End machine code for function $s7partial1AC1fySbxlF.

********** Stack Coloring **********
********** Function: $s7partial1AC1fySbxlF
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1AC1fySbxlF
Machine InstCombiner: $s7partial1AC1fySbxlF
Combining MBB 
********** X86 cmov Conversion : $s7partial1AC1fySbxlF**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: $s7partial1AC1fySbxlF ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: $s7partial1AC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlF
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1AC1fySbxlF
Encountered load fold barrier on TCRETURNdi64 @"$s7partial1AC1fySbxlFTf4dd_n", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
**** Analysing $s7partial1AC1fySbxlF
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1AC1fySbxlF **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : $s7partial1AC1fySbxlF **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1AC1fySbxlF
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1AC1fySbxlF
# Machine code for function $s7partial1AC1fySbxlF: NoPHIs, TracksLiveness
Function Live Ins: $rsi in %1

0B	bb.0 (%ir-block.3):
	  liveins: $rsi
16B	  %1:gr64 = COPY killed $rsi
32B	  $rdi = COPY killed %1:gr64
48B	  TCRETURNdi64 @"$s7partial1AC1fySbxlFTf4dd_n", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi

# End machine code for function $s7partial1AC1fySbxlF.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 SIL#0 SIH#0 HSI#0
Created 3 new intervals.
********** INTERVALS **********
SIL [0B,16r:0)  0@0B-phi
SIH [0B,16r:0)  0@0B-phi
HSI [0B,16r:0)  0@0B-phi
%1 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1AC1fySbxlF: NoPHIs, TracksLiveness
Function Live Ins: $rsi in %1

0B	bb.0 (%ir-block.3):
	  liveins: $rsi
16B	  %1:gr64 = COPY $rsi
32B	  $rdi = COPY %1:gr64
48B	  TCRETURNdi64 @"$s7partial1AC1fySbxlFTf4dd_n", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi

# End machine code for function $s7partial1AC1fySbxlF.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1AC1fySbxlF
********** JOINING INTERVALS ***********
:
16B	%1:gr64 = COPY $rsi
	Considering merging %1 with $rsi
	Can only merge into reserved registers.
32B	$rdi = COPY %1:gr64
	Considering merging %1 with $rdi
	Can only merge into reserved registers.
32B	$rdi = COPY %1:gr64
	Considering merging %1 with $rdi
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
SIL [0B,16r:0)  0@0B-phi
SIH [0B,16r:0)  0@0B-phi
HSI [0B,16r:0)  0@0B-phi
%1 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1AC1fySbxlF: NoPHIs, TracksLiveness
Function Live Ins: $rsi in %1

0B	bb.0 (%ir-block.3):
	  liveins: $rsi
16B	  %1:gr64 = COPY $rsi
32B	  $rdi = COPY %1:gr64
48B	  TCRETURNdi64 @"$s7partial1AC1fySbxlFTf4dd_n", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi

# End machine code for function $s7partial1AC1fySbxlF.

Before MISched:
# Machine code for function $s7partial1AC1fySbxlF: NoPHIs, TracksLiveness
Function Live Ins: $rsi in %1

bb.0 (%ir-block.3):
  liveins: $rsi
  %1:gr64 = COPY $rsi
  $rdi = COPY %1:gr64
  TCRETURNdi64 @"$s7partial1AC1fySbxlFTf4dd_n", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi

# End machine code for function $s7partial1AC1fySbxlF.

********** MI Scheduling **********
$s7partial1AC1fySbxlF:%bb.0 
  From: %1:gr64 = COPY $rsi
    To: TCRETURNdi64 @"$s7partial1AC1fySbxlFTf4dd_n", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   $rdi = COPY %1:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   TCRETURNdi64 @"$s7partial1AC1fySbxlFTf4dd_n", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rdi = COPY %1:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:gr64 = COPY $rsi
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gr64 = COPY $rsi
SU(1):   $rdi = COPY %1:gr64

********** INTERVALS **********
SIL [0B,16r:0)  0@0B-phi
SIH [0B,16r:0)  0@0B-phi
HSI [0B,16r:0)  0@0B-phi
%1 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1AC1fySbxlF: NoPHIs, TracksLiveness
Function Live Ins: $rsi in %1

0B	bb.0 (%ir-block.3):
	  liveins: $rsi
16B	  %1:gr64 = COPY $rsi
32B	  $rdi = COPY %1:gr64
48B	  TCRETURNdi64 @"$s7partial1AC1fySbxlFTf4dd_n", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi

# End machine code for function $s7partial1AC1fySbxlF.


block-frequency: $s7partial1AC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlF
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1AC1fySbxlF
********** Compute Spill Weights **********
********** Function: $s7partial1AC1fySbxlF
********** INTERVALS **********
SIL [0B,16r:0)  0@0B-phi
SIH [0B,16r:0)  0@0B-phi
HSI [0B,16r:0)  0@0B-phi
%1 [16r,32r:0)  0@16r weight:INF
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1AC1fySbxlF: NoPHIs, TracksLiveness
Function Live Ins: $rsi in %1

0B	bb.0 (%ir-block.3):
	  liveins: $rsi
16B	  %1:gr64 = COPY $rsi
32B	  $rdi = COPY %1:gr64
48B	  TCRETURNdi64 @"$s7partial1AC1fySbxlFTf4dd_n", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi

# End machine code for function $s7partial1AC1fySbxlF.


selectOrSplit GR64:%1 [16r,32r:0)  0@16r weight:INF w=INF
hints: $rdi $rsi
assigning %1 to $rdi: DIL [16r,32r:0)  0@16r DIH [16r,32r:0)  0@16r HDI [16r,32r:0)  0@16r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1AC1fySbxlF
********** REGISTER MAP **********
[%1 -> $rdi] GR64

0B	bb.0 (%ir-block.3):
	  liveins: $rsi
16B	  %1:gr64 = COPY $rsi
32B	  $rdi = COPY killed %1:gr64
48B	  TCRETURNdi64 @"$s7partial1AC1fySbxlFTf4dd_n", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
> renamable $rdi = COPY $rsi
> $rdi = COPY killed renamable $rdi
Identity copy: $rdi = COPY killed renamable $rdi
  deleted.
> TCRETURNdi64 @"$s7partial1AC1fySbxlFTf4dd_n", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi
********** Stack Slot Coloring **********
********** Function: $s7partial1AC1fySbxlF
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rdi = COPY $rsi
MCP: Copy is used - not dead:   renamable $rdi = COPY $rsi
MCP: Copy is used - not dead:   renamable $rdi = COPY $rsi
MCP: Copy is used - not dead:   renamable $rdi = COPY $rsi
******** Post-regalloc Machine LICM: $s7partial1AC1fySbxlF ********

block-frequency: $s7partial1AC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlF
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing $s7partial1AC1fySbxlF
Look into: 0 
Nothing to shrink-wrap
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rdi = COPY $rsi
MCP: Copy is used - not dead:   renamable $rdi = COPY $rsi
MCP: Copy is used - not dead:   renamable $rdi = COPY $rsi
MCP: Copy is used - not dead:   renamable $rdi = COPY $rsi
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1AC1fySbxlF
real copy:   renamable $rdi = COPY $rsi
replaced by: $rdi = MOV64rr $rsi
	discovered a new reachable node %bb.0

block-frequency: $s7partial1AC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlF
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	3	$rbp = frame-setup MOV64rr $rsp
$rbp:	3	$rbp = frame-setup MOV64rr $rsp
$rbp:	3	$rbp = frame-setup MOV64rr $rsp
$rdi:	5	$rdi = MOV64rr $rsi
$rdi:	5	$rdi = MOV64rr $rsi
$rdi:	5	$rdi = MOV64rr $rsi
$rbp:	6	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	6	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	6	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
%bb.0: entry
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1AC1fySbxlF **********
X86 Retpoline Thunks
	discovered a new reachable node %1
[SafeStack] Function: $s7partial1ACfd
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %1
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACfd ----

Computing probabilities for 



=== $s7partial1ACfd
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Creating constant: t3: i32 = TargetConstant<0>
Creating new node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Creating new node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Initial selection DAG: %bb.0 '$s7partial1ACfd:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1



Combining: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1

Combining: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

Combining: t4: i64 = Register $rax

Combining: t3: i32 = TargetConstant<0>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t1: i64 = Register %0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1ACfd:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1


Legalizing node: t4: i64 = Register $rax
Ignoring node results
Legally typed node: t4: i64 = Register $rax

Legalizing node: t3: i32 = TargetConstant<0>
Ignoring node results
Legally typed node: t3: i32 = TargetConstant<0>

Legalizing node: t1: i64 = Register %0
Ignoring node results
Legally typed node: t1: i64 = Register %0

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Legally typed node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

Legalizing node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Analyzing result type: ch
Legal result type
Analyzing operand: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal operand
Analyzing operand: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal operand
Legally typed node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1

Legalizing node: t65535: ch = handlenode t6
Analyzing result type: ch
Legal result type
Analyzing operand: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Legal operand
Legally typed node: t65535: ch = handlenode t6

Type-legalized selection DAG: %bb.0 '$s7partial1ACfd:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1



Legalizing: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Legal node: nothing to do

Legalizing: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Legalizing: t4: i64 = Register $rax

Legalizing: t3: i32 = TargetConstant<0>

Legalizing: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1ACfd:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1



Legalizing: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Legal node: nothing to do

Combining: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1

Legalizing: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal node: nothing to do

Combining: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing: t4: i64 = Register $rax

Combining: t4: i64 = Register $rax

Legalizing: t3: i32 = TargetConstant<0>

Combining: t3: i32 = TargetConstant<0>

Legalizing: t1: i64 = Register %0

Combining: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1ACfd:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
ISEL: Starting pattern match
  Initial Opcode index to 130673
  Morphed node: t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1
ISEL: Match complete!

ISEL: Starting selection on root node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

ISEL: Starting selection on root node: t4: i64 = Register $rax

ISEL: Starting selection on root node: t3: i32 = TargetConstant<0>

ISEL: Starting selection on root node: t1: i64 = Register %0

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1ACfd:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1


********** List Scheduling %bb.0 '' **********
SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2


*** Scheduling [0]: SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2


Examining Available:
Height 1: SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [1]: SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

*** Final schedule ***
SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1ACfd: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $rax = COPY %0:gr64
  RET 0, $rax

# End machine code for function $s7partial1ACfd.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1ACfd: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $rax = COPY %0:gr64
  RET 0, $rax

# End machine code for function $s7partial1ACfd.

# Machine code for function $s7partial1ACfd: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, $rax

# End machine code for function $s7partial1ACfd.

********** Stack Coloring **********
********** Function: $s7partial1ACfd
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1ACfd
Machine InstCombiner: $s7partial1ACfd
Combining MBB 
********** X86 cmov Conversion : $s7partial1ACfd**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: $s7partial1ACfd ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: $s7partial1ACfd
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfd
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1ACfd
**** Analysing $s7partial1ACfd
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1ACfd **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : $s7partial1ACfd **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1ACfd
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1ACfd
# Machine code for function $s7partial1ACfd: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY killed $r13
32B	  $rax = COPY killed %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1ACfd.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 R13B#0 R13BH#0 R13WH#0
Created 3 new intervals.
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACfd: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1ACfd.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1ACfd
********** JOINING INTERVALS ***********
:
16B	%0:gr64 = COPY $r13
	Considering merging %0 with $r13
	Can only merge into reserved registers.
32B	$rax = COPY %0:gr64
	Considering merging %0 with $rax
	Can only merge into reserved registers.
32B	$rax = COPY %0:gr64
	Considering merging %0 with $rax
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACfd: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1ACfd.

Before MISched:
# Machine code for function $s7partial1ACfd: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $rax = COPY %0:gr64
  RET 0, killed $rax

# End machine code for function $s7partial1ACfd.

********** MI Scheduling **********
$s7partial1ACfd:%bb.0 
  From: %0:gr64 = COPY $r13
    To: RET 0, killed $rax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %0:gr64 = COPY $r13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(1):   $rax = COPY %0:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   RET 0, killed $rax
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rax = COPY %0:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:gr64 = COPY $r13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %0:gr64 = COPY $r13
SU(1):   $rax = COPY %0:gr64

********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACfd: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1ACfd.


block-frequency: $s7partial1ACfd
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfd
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1ACfd
********** Compute Spill Weights **********
********** Function: $s7partial1ACfd
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:INF
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACfd: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1ACfd.


selectOrSplit GR64:%0 [16r,32r:0)  0@16r weight:INF w=INF
hints: $rax $r13
assigning %0 to $rax: AH [16r,32r:0)  0@16r AL [16r,32r:0)  0@16r HAX [16r,32r:0)  0@16r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1ACfd
********** REGISTER MAP **********
[%0 -> $rax] GR64

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY killed %0:gr64
48B	  RET 0, $rax
> renamable $rax = COPY $r13
> $rax = COPY killed renamable $rax
Identity copy: $rax = COPY killed renamable $rax
  deleted.
> RET 0, $rax
********** Stack Slot Coloring **********
********** Function: $s7partial1ACfd
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
******** Post-regalloc Machine LICM: $s7partial1ACfd ********

block-frequency: $s7partial1ACfd
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfd
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing $s7partial1ACfd
Look into: 0 
Use or define CSR(1) or FI(0): renamable $rax = COPY $r13

No Shrink wrap candidate found
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1ACfd
real copy:   renamable $rax = COPY $r13
replaced by: $rax = MOV64rr $r13
	discovered a new reachable node %bb.0

block-frequency: $s7partial1ACfd
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfd
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rax:	2	$rax = MOV64rr $r13
$rax:	2	$rax = MOV64rr $r13
$rax:	2	$rax = MOV64rr $r13
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1ACfd **********
X86 Retpoline Thunks
	discovered a new reachable node %1
[SafeStack] Function: $s7partial1ACfD
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %1
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACfD ----

Computing probabilities for 



=== $s7partial1ACfD
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Creating constant: t4: i64 = Constant<16>
Creating constant: t5: i64 = Constant<7>
Creating new node: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Creating new node: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
Creating new node: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
Creating constant: t13: i32 = Constant<0>
Creating new node: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1
Initial selection DAG: %bb.0 '$s7partial1ACfD:'
SelectionDAG has 16 nodes:
  t0: ch = EntryToken
  t3: i64 = GlobalAddress<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
  t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
  t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1



Combining: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1

Combining: t14: Untyped = RegisterMask

Combining: t13: i32 = Constant<0>

Combining: t12: i64 = TargetGlobalAddress<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1

Combining: t10: i64 = Register $rdx

Combining: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1

Combining: t8: i64 = Register $rsi

Combining: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

Combining: t6: i64 = Register $rdi

Combining: t5: i64 = Constant<7>

Combining: t4: i64 = Constant<16>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t1: i64 = Register %0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1ACfD:'
SelectionDAG has 15 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
  t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
  t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1


Legalizing node: t14: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t14: Untyped = RegisterMask

Legalizing node: t13: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t13: i32 = Constant<0>

Legalizing node: t12: i64 = TargetGlobalAddress<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0
Analyzing result type: i64
Legal result type
Legally typed node: t12: i64 = TargetGlobalAddress<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0

Legalizing node: t10: i64 = Register $rdx
Ignoring node results
Legally typed node: t10: i64 = Register $rdx

Legalizing node: t8: i64 = Register $rsi
Ignoring node results
Legally typed node: t8: i64 = Register $rsi

Legalizing node: t6: i64 = Register $rdi
Ignoring node results
Legally typed node: t6: i64 = Register $rdi

Legalizing node: t5: i64 = Constant<7>
Analyzing result type: i64
Legal result type
Legally typed node: t5: i64 = Constant<7>

Legalizing node: t4: i64 = Constant<16>
Analyzing result type: i64
Legal result type
Legally typed node: t4: i64 = Constant<16>

Legalizing node: t1: i64 = Register %0
Ignoring node results
Legally typed node: t1: i64 = Register %0

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing node: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Legally typed node: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

Legalizing node: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal operand
Analyzing operand: t4: i64 = Constant<16>
Legal operand
Analyzing operand: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal operand
Legally typed node: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1

Legalizing node: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
Legal operand
Analyzing operand: t5: i64 = Constant<7>
Legal operand
Analyzing operand: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
Legal operand
Legally typed node: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1

Legalizing node: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
Legal operand
Analyzing operand: t12: i64 = TargetGlobalAddress<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0
Legal operand
Analyzing operand: t13: i32 = Constant<0>
Legal operand
Analyzing operand: t14: Untyped = RegisterMask
Legal operand
Analyzing operand: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
Legal operand
Legally typed node: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1

Legalizing node: t65535: ch = handlenode t15
Analyzing result type: ch
Legal result type
Analyzing operand: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1
Legal operand
Legally typed node: t65535: ch = handlenode t15

Type-legalized selection DAG: %bb.0 '$s7partial1ACfD:'
SelectionDAG has 15 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
  t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
  t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1



Legalizing: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1
Legal node: nothing to do

Legalizing: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
Legal node: nothing to do

Legalizing: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
Legal node: nothing to do

Legalizing: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Legalizing: t14: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t13: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t12: i64 = TargetGlobalAddress<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0
Legal node: nothing to do

Legalizing: t10: i64 = Register $rdx

Legalizing: t8: i64 = Register $rsi

Legalizing: t6: i64 = Register $rdi

Legalizing: t5: i64 = Constant<7>
Legal node: nothing to do

Legalizing: t4: i64 = Constant<16>
Legal node: nothing to do

Legalizing: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1ACfD:'
SelectionDAG has 15 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
  t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
  t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1



Legalizing: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1
Legal node: nothing to do

Combining: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1

Legalizing: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
Legal node: nothing to do

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1

Legalizing: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
Legal node: nothing to do

Combining: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1

Legalizing: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal node: nothing to do

Combining: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing: t14: Untyped = RegisterMask
Legal node: nothing to do

Combining: t14: Untyped = RegisterMask

Legalizing: t13: i32 = Constant<0>
Legal node: nothing to do

Combining: t13: i32 = Constant<0>

Legalizing: t12: i64 = TargetGlobalAddress<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0
Legal node: nothing to do

Combining: t12: i64 = TargetGlobalAddress<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0

Legalizing: t10: i64 = Register $rdx

Combining: t10: i64 = Register $rdx

Legalizing: t8: i64 = Register $rsi

Combining: t8: i64 = Register $rsi

Legalizing: t6: i64 = Register $rdi

Combining: t6: i64 = Register $rdi

Legalizing: t5: i64 = Constant<7>
Legal node: nothing to do

Combining: t5: i64 = Constant<7>

Legalizing: t4: i64 = Constant<16>
Legal node: nothing to do

Combining: t4: i64 = Constant<16>

Legalizing: t1: i64 = Register %0

Combining: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1ACfD:'
SelectionDAG has 15 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1
  t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1
  t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t15: ch,glue = X86ISD::TC_RETURN t11, TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11:1
ISEL: Starting pattern match
  Initial Opcode index to 40262
  Match failed at index 40267
  Continuing at 40335
  OpcodeSwitch from 40341 to 40345
  TypeSwitch[i64] from 40345 to 40369
Creating constant: t16: i32 = TargetConstant<0>
  Morphed node: t15: ch = TCRETURNdi64 TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11, t11:1
ISEL: Match complete!

ISEL: Starting selection on root node: t11: ch,glue = CopyToReg t9, Register:i64 $rdx, Constant:i64<7>, t9:1

ISEL: Starting selection on root node: t9: ch,glue = CopyToReg t7, Register:i64 $rsi, Constant:i64<16>, t7:1

ISEL: Starting selection on root node: t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

ISEL: Starting selection on root node: t14: Untyped = RegisterMask

ISEL: Starting selection on root node: t12: i64 = TargetGlobalAddress<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0

ISEL: Starting selection on root node: t10: i64 = Register $rdx

ISEL: Starting selection on root node: t8: i64 = Register $rsi

ISEL: Starting selection on root node: t6: i64 = Register $rdi

ISEL: Starting selection on root node: t5: i64 = Constant<7>
ISEL: Starting pattern match
  Initial Opcode index to 125031
  Skipped scope entry (due to false predicate) at index 125033, continuing at 125110
  Skipped scope entry (due to false predicate) at index 125111, continuing at 125148
  Skipped scope entry (due to false predicate) at index 125149, continuing at 125195
  TypeSwitch[i64] from 125197 to 125229
  Match failed at index 125233
  Continuing at 125244
Creating constant: t17: i64 = TargetConstant<7>
  Morphed node: t5: i64 = MOV32ri64 TargetConstant:i64<7>
ISEL: Match complete!

ISEL: Starting selection on root node: t4: i64 = Constant<16>
ISEL: Starting pattern match
  Initial Opcode index to 125031
  Skipped scope entry (due to false predicate) at index 125033, continuing at 125110
  Skipped scope entry (due to false predicate) at index 125111, continuing at 125148
  Skipped scope entry (due to false predicate) at index 125149, continuing at 125195
  TypeSwitch[i64] from 125197 to 125229
  Match failed at index 125233
  Continuing at 125244
Creating constant: t18: i64 = TargetConstant<16>
  Morphed node: t4: i64 = MOV32ri64 TargetConstant:i64<16>
ISEL: Match complete!

ISEL: Starting selection on root node: t1: i64 = Register %0

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1ACfD:'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
    t4: i64 = MOV32ri64 TargetConstant:i64<16>
  t9: ch,glue = CopyToReg t7, Register:i64 $rsi, t4, t7:1
    t5: i64 = MOV32ri64 TargetConstant:i64<7>
  t11: ch,glue = CopyToReg t9, Register:i64 $rdx, t5, t9:1
  t15: ch = TCRETURNdi64 TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11, t11:1


********** List Scheduling %bb.0 '' **********
SU(0): t15: ch = TCRETURNdi64 TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11, t11:1

    t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t9: ch,glue = CopyToReg t7, Register:i64 $rsi, t4, t7:1

    t11: ch,glue = CopyToReg t9, Register:i64 $rdx, t5, t9:1

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
    SU(2): Data Latency=1
    SU(3): Data Latency=1
SU(1): t5: i64 = MOV32ri64 TargetConstant:i64<7>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(2): t4: i64 = MOV32ri64 TargetConstant:i64<16>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t15: ch = TCRETURNdi64 TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11, t11:1

    t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t9: ch,glue = CopyToReg t7, Register:i64 $rsi, t4, t7:1

    t11: ch,glue = CopyToReg t9, Register:i64 $rdx, t5, t9:1


*** Scheduling [0]: SU(0): t15: ch = TCRETURNdi64 TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11, t11:1

    t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t9: ch,glue = CopyToReg t7, Register:i64 $rsi, t4, t7:1

    t11: ch,glue = CopyToReg t9, Register:i64 $rdx, t5, t9:1


Examining Available:
Height 1: SU(1): t5: i64 = MOV32ri64 TargetConstant:i64<7>

Height 1: SU(2): t4: i64 = MOV32ri64 TargetConstant:i64<16>

Height 1: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [1]: SU(1): t5: i64 = MOV32ri64 TargetConstant:i64<7>


Examining Available:
Height 1: SU(2): t4: i64 = MOV32ri64 TargetConstant:i64<16>

Height 1: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [2]: SU(2): t4: i64 = MOV32ri64 TargetConstant:i64<16>


Examining Available:
Height 1: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [3]: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

*** Final schedule ***
SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

SU(2): t4: i64 = MOV32ri64 TargetConstant:i64<16>

SU(1): t5: i64 = MOV32ri64 TargetConstant:i64<7>

SU(0): t15: ch = TCRETURNdi64 TargetGlobalAddress:i64<void (%swift.refcounted*, i64, i64)* @swift_deallocClassInstance> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t11, t11:1

    t7: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t9: ch,glue = CopyToReg t7, Register:i64 $rsi, t4, t7:1

    t11: ch,glue = CopyToReg t9, Register:i64 $rdx, t5, t9:1


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1ACfD: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  %1:gr64 = MOV32ri64 16
  %2:gr64 = MOV32ri64 7
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $rdx = COPY %2:gr64
  TCRETURNdi64 @swift_deallocClassInstance, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial1ACfD.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1ACfD: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  %1:gr64 = MOV32ri64 16
  %2:gr64 = MOV32ri64 7
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $rdx = COPY %2:gr64
  TCRETURNdi64 @swift_deallocClassInstance, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial1ACfD.

# Machine code for function $s7partial1ACfD: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  %1:gr64 = MOV32ri64 16
48B	  %2:gr64 = MOV32ri64 7
64B	  $rdi = COPY %0:gr64
80B	  $rsi = COPY %1:gr64
96B	  $rdx = COPY %2:gr64
112B	  TCRETURNdi64 @swift_deallocClassInstance, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial1ACfD.

********** Stack Coloring **********
********** Function: $s7partial1ACfD
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1ACfD
Machine InstCombiner: $s7partial1ACfD
Combining MBB 
********** X86 cmov Conversion : $s7partial1ACfD**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: $s7partial1ACfD ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: $s7partial1ACfD
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfD
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1ACfD
Encountered load fold barrier on TCRETURNdi64 @swift_deallocClassInstance, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
**** Analysing $s7partial1ACfD
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1ACfD **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : $s7partial1ACfD **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1ACfD
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1ACfD
# Machine code for function $s7partial1ACfD: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY killed $r13
32B	  %1:gr64 = MOV32ri64 16
48B	  %2:gr64 = MOV32ri64 7
64B	  $rdi = COPY killed %0:gr64
80B	  $rsi = COPY killed %1:gr64
96B	  $rdx = COPY killed %2:gr64
112B	  TCRETURNdi64 @swift_deallocClassInstance, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACfD.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 R13B#0 R13BH#0 R13WH#0
Created 3 new intervals.
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,64r:0)  0@16r weight:0.000000e+00
%1 [32r,80r:0)  0@32r weight:0.000000e+00
%2 [48r,96r:0)  0@48r weight:0.000000e+00
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACfD: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  %1:gr64 = MOV32ri64 16
48B	  %2:gr64 = MOV32ri64 7
64B	  $rdi = COPY %0:gr64
80B	  $rsi = COPY %1:gr64
96B	  $rdx = COPY %2:gr64
112B	  TCRETURNdi64 @swift_deallocClassInstance, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACfD.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1ACfD
********** JOINING INTERVALS ***********
:
16B	%0:gr64 = COPY $r13
	Considering merging %0 with $r13
	Can only merge into reserved registers.
64B	$rdi = COPY %0:gr64
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
80B	$rsi = COPY %1:gr64
	Considering merging %1 with $rsi
	Can only merge into reserved registers.
Remat: $rsi = MOV32ri64 16
Shrink: %1 [32r,80r:0)  0@32r weight:0.000000e+00
All defs dead: 32r	dead %1:gr64 = MOV32ri64 16
Shrunk: %1 [32r,32d:0)  0@32r weight:0.000000e+00
Deleting dead def 32r	dead %1:gr64 = MOV32ri64 16
96B	$rdx = COPY %2:gr64
	Considering merging %2 with $rdx
	Can only merge into reserved registers.
Remat: $rdx = MOV32ri64 7
Shrink: %2 [48r,96r:0)  0@48r weight:0.000000e+00
All defs dead: 48r	dead %2:gr64 = MOV32ri64 7
Shrunk: %2 [48r,48d:0)  0@48r weight:0.000000e+00
Deleting dead def 48r	dead %2:gr64 = MOV32ri64 7
64B	$rdi = COPY %0:gr64
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,64r:0)  0@16r weight:0.000000e+00
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACfD: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
64B	  $rdi = COPY %0:gr64
80B	  $rsi = MOV32ri64 16
96B	  $rdx = MOV32ri64 7
112B	  TCRETURNdi64 @swift_deallocClassInstance, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACfD.

Before MISched:
# Machine code for function $s7partial1ACfD: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $rdi = COPY %0:gr64
  $rsi = MOV32ri64 16
  $rdx = MOV32ri64 7
  TCRETURNdi64 @swift_deallocClassInstance, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACfD.

********** MI Scheduling **********
$s7partial1ACfD:%bb.0 
  From: %0:gr64 = COPY $r13
    To: TCRETURNdi64 @swift_deallocClassInstance, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %0:gr64 = COPY $r13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(1):   $rdi = COPY %0:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $rsi = MOV32ri64 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $rdx = MOV32ri64 7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   TCRETURNdi64 @swift_deallocClassInstance, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rdi = COPY %0:gr64
handleMove 64B -> 104B: $rdi = COPY %0:gr64
     DIL:	[104r,112r:0)  0@104r
        -->	[104r,112r:0)  0@104r
     DIH:	[104r,112r:0)  0@104r
        -->	[104r,112r:0)  0@104r
     HDI:	[104r,112r:0)  0@104r
        -->	[104r,112r:0)  0@104r
     %0:	[16r,64r:0)  0@16r
        -->	[16r,104r:0)  0@16r
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $rdx = MOV32ri64 7
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $rsi = MOV32ri64 16
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:gr64 = COPY $r13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %0:gr64 = COPY $r13
SU(2):   $rsi = MOV32ri64 16
SU(3):   $rdx = MOV32ri64 7
SU(1):   $rdi = COPY %0:gr64

********** INTERVALS **********
DIL [104r,112r:0)  0@104r
DIH [104r,112r:0)  0@104r
HDI [104r,112r:0)  0@104r
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,104r:0)  0@16r weight:0.000000e+00
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACfD: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
80B	  $rsi = MOV32ri64 16
96B	  $rdx = MOV32ri64 7
104B	  $rdi = COPY %0:gr64
112B	  TCRETURNdi64 @swift_deallocClassInstance, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACfD.


block-frequency: $s7partial1ACfD
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfD
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1ACfD
********** Compute Spill Weights **********
********** Function: $s7partial1ACfD
********** INTERVALS **********
DIL [104r,112r:0)  0@104r
DIH [104r,112r:0)  0@104r
HDI [104r,112r:0)  0@104r
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,104r:0)  0@16r weight:4.139344e-03
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACfD: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
80B	  $rsi = MOV32ri64 16
96B	  $rdx = MOV32ri64 7
104B	  $rdi = COPY %0:gr64
112B	  TCRETURNdi64 @swift_deallocClassInstance, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACfD.


selectOrSplit GR64:%0 [16r,104r:0)  0@16r weight:4.139344e-03 w=4.139344e-03
hints: $rdi $r13
assigning %0 to $rdi: DIL [16r,104r:0)  0@16r DIH [16r,104r:0)  0@16r HDI [16r,104r:0)  0@16r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1ACfD
********** REGISTER MAP **********
[%0 -> $rdi] GR64

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
80B	  $rsi = MOV32ri64 16
96B	  $rdx = MOV32ri64 7
104B	  $rdi = COPY killed %0:gr64
112B	  TCRETURNdi64 @swift_deallocClassInstance, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx
> renamable $rdi = COPY $r13
> $rsi = MOV32ri64 16
> $rdx = MOV32ri64 7
> $rdi = COPY killed renamable $rdi
Identity copy: $rdi = COPY killed renamable $rdi
  deleted.
> TCRETURNdi64 @swift_deallocClassInstance, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx
********** Stack Slot Coloring **********
********** Function: $s7partial1ACfD
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rdi = COPY $r13
MCP: Copy is used - not dead:   renamable $rdi = COPY $r13
MCP: Copy is used - not dead:   renamable $rdi = COPY $r13
MCP: Copy is used - not dead:   renamable $rdi = COPY $r13
******** Post-regalloc Machine LICM: $s7partial1ACfD ********

block-frequency: $s7partial1ACfD
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfD
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing $s7partial1ACfD
Look into: 0 
Use or define CSR(1) or FI(0): renamable $rdi = COPY $r13

No Shrink wrap candidate found
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rdi = COPY $r13
MCP: Copy is used - not dead:   renamable $rdi = COPY $r13
MCP: Copy is used - not dead:   renamable $rdi = COPY $r13
MCP: Copy is used - not dead:   renamable $rdi = COPY $r13
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1ACfD
real copy:   renamable $rdi = COPY $r13
replaced by: $rdi = MOV64rr $r13
	discovered a new reachable node %bb.0

block-frequency: $s7partial1ACfD
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACfD
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rdi:	2	$rdi = MOV64rr $r13
$rdi:	2	$rdi = MOV64rr $r13
$rdi:	2	$rdi = MOV64rr $r13
$esi:	3	$esi = MOV32ri 16, implicit-def $rsi
$esi:	3	$esi = MOV32ri 16, implicit-def $rsi
$esi:	3	$esi = MOV32ri 16, implicit-def $rsi
$edx:	4	$edx = MOV32ri 7, implicit-def $rdx
$edx:	4	$edx = MOV32ri 7, implicit-def $rdx
$edx:	4	$edx = MOV32ri 7, implicit-def $rdx
$rbp:	5	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	5	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	5	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
%bb.0: entry
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1ACfD **********
X86 Retpoline Thunks
	discovered a new reachable node %3
[SafeStack] Function: $s7partial1BC1fySbxlF
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %3
	discovered a new reachable node %3
---- Branch Probability Info : $s7partial1BC1fySbxlF ----

Computing probabilities for 



=== $s7partial1BC1fySbxlF
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Creating new node: t4: i64,ch = CopyFromReg t0, Register:i64 %1
Creating new node: t6: i64,ch = CopyFromReg t0, Register:i64 %2
Creating constant: t7: i1 = Constant<0>
Creating constant: t8: i8 = Constant<0>
Creating constant: t9: i32 = TargetConstant<0>
Creating new node: t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>
Creating new node: t12: ch = X86ISD::RET_FLAG t11, TargetConstant:i32<0>, Register:i8 $al, t11:1
Initial selection DAG: %bb.0 '$s7partial1BC1fySbxlF:'
SelectionDAG has 13 nodes:
  t0: ch = EntryToken
  t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t4: i64,ch = CopyFromReg t0, Register:i64 %1
  t6: i64,ch = CopyFromReg t0, Register:i64 %2
  t7: i1 = Constant<0>
  t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>
  t12: ch = X86ISD::RET_FLAG t11, TargetConstant:i32<0>, Register:i8 $al, t11:1



Combining: t12: ch = X86ISD::RET_FLAG t11, TargetConstant:i32<0>, Register:i8 $al, t11:1

Combining: t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>

Combining: t10: i8 = Register $al

Combining: t9: i32 = TargetConstant<0>

Combining: t8: i8 = Constant<0>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1BC1fySbxlF:'
SelectionDAG has 6 nodes:
    t0: ch = EntryToken
  t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>
  t12: ch = X86ISD::RET_FLAG t11, TargetConstant:i32<0>, Register:i8 $al, t11:1


Legalizing node: t10: i8 = Register $al
Ignoring node results
Legally typed node: t10: i8 = Register $al

Legalizing node: t9: i32 = TargetConstant<0>
Ignoring node results
Legally typed node: t9: i32 = TargetConstant<0>

Legalizing node: t8: i8 = Constant<0>
Analyzing result type: i8
Legal result type
Legally typed node: t8: i8 = Constant<0>

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t8: i8 = Constant<0>
Legal operand
Legally typed node: t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>

Legalizing node: t12: ch = X86ISD::RET_FLAG t11, TargetConstant:i32<0>, Register:i8 $al, t11:1
Analyzing result type: ch
Legal result type
Analyzing operand: t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>
Legal operand
Analyzing operand: t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>
Legal operand
Legally typed node: t12: ch = X86ISD::RET_FLAG t11, TargetConstant:i32<0>, Register:i8 $al, t11:1

Legalizing node: t65535: ch = handlenode t12
Analyzing result type: ch
Legal result type
Analyzing operand: t12: ch = X86ISD::RET_FLAG t11, TargetConstant:i32<0>, Register:i8 $al, t11:1
Legal operand
Legally typed node: t65535: ch = handlenode t12

Type-legalized selection DAG: %bb.0 '$s7partial1BC1fySbxlF:'
SelectionDAG has 6 nodes:
    t0: ch = EntryToken
  t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>
  t12: ch = X86ISD::RET_FLAG t11, TargetConstant:i32<0>, Register:i8 $al, t11:1



Legalizing: t12: ch = X86ISD::RET_FLAG t11, TargetConstant:i32<0>, Register:i8 $al, t11:1
Legal node: nothing to do

Legalizing: t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>
Legal node: nothing to do

Legalizing: t10: i8 = Register $al

Legalizing: t9: i32 = TargetConstant<0>

Legalizing: t8: i8 = Constant<0>
Legal node: nothing to do

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1BC1fySbxlF:'
SelectionDAG has 6 nodes:
    t0: ch = EntryToken
  t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>
  t12: ch = X86ISD::RET_FLAG t11, TargetConstant:i32<0>, Register:i8 $al, t11:1



Legalizing: t12: ch = X86ISD::RET_FLAG t11, TargetConstant:i32<0>, Register:i8 $al, t11:1
Legal node: nothing to do

Combining: t12: ch = X86ISD::RET_FLAG t11, TargetConstant:i32<0>, Register:i8 $al, t11:1

Legalizing: t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>
Legal node: nothing to do

Combining: t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>

Legalizing: t10: i8 = Register $al

Combining: t10: i8 = Register $al

Legalizing: t9: i32 = TargetConstant<0>

Combining: t9: i32 = TargetConstant<0>

Legalizing: t8: i8 = Constant<0>
Legal node: nothing to do

Combining: t8: i8 = Constant<0>

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1BC1fySbxlF:'
SelectionDAG has 6 nodes:
    t0: ch = EntryToken
  t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>
  t12: ch = X86ISD::RET_FLAG t11, TargetConstant:i32<0>, Register:i8 $al, t11:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t12: ch = X86ISD::RET_FLAG t11, TargetConstant:i32<0>, Register:i8 $al, t11:1
ISEL: Starting pattern match
  Initial Opcode index to 130673
  Morphed node: t12: ch = RET TargetConstant:i32<0>, Register:i8 $al, t11, t11:1
ISEL: Match complete!

ISEL: Starting selection on root node: t11: ch,glue = CopyToReg t0, Register:i8 $al, Constant:i8<0>

ISEL: Starting selection on root node: t10: i8 = Register $al

ISEL: Starting selection on root node: t9: i32 = TargetConstant<0>

ISEL: Starting selection on root node: t8: i8 = Constant<0>
ISEL: Starting pattern match
  Initial Opcode index to 125031
  TypeSwitch[i8] from 125035 to 125047
  Created node: t13: i32,i32 = MOV32r0
Creating constant: t14: i32 = TargetConstant<1>
  Morphed node: t8: i8 = EXTRACT_SUBREG MOV32r0:i32,i32, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1BC1fySbxlF:'
SelectionDAG has 8 nodes:
    t0: ch = EntryToken
    t8: i8 = EXTRACT_SUBREG MOV32r0:i32,i32, TargetConstant:i32<1>
  t11: ch,glue = CopyToReg t0, Register:i8 $al, t8
  t12: ch = RET TargetConstant:i32<0>, Register:i8 $al, t11, t11:1


********** List Scheduling %bb.0 '' **********
SU(0): t12: ch = RET TargetConstant:i32<0>, Register:i8 $al, t11, t11:1

    t11: ch,glue = CopyToReg t0, Register:i8 $al, t8

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
SU(1): t8: i8 = EXTRACT_SUBREG MOV32r0:i32,i32, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1
  Successors:
    SU(0): Data Latency=1
SU(2): t13: i32,i32 = MOV32r0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Data Latency=1

Examining Available:
Height 0: SU(0): t12: ch = RET TargetConstant:i32<0>, Register:i8 $al, t11, t11:1

    t11: ch,glue = CopyToReg t0, Register:i8 $al, t8


*** Scheduling [0]: SU(0): t12: ch = RET TargetConstant:i32<0>, Register:i8 $al, t11, t11:1

    t11: ch,glue = CopyToReg t0, Register:i8 $al, t8


Examining Available:
Height 1: SU(1): t8: i8 = EXTRACT_SUBREG MOV32r0:i32,i32, TargetConstant:i32<1>


*** Scheduling [1]: SU(1): t8: i8 = EXTRACT_SUBREG MOV32r0:i32,i32, TargetConstant:i32<1>


Examining Available:
Height 2: SU(2): t13: i32,i32 = MOV32r0


*** Scheduling [2]: SU(2): t13: i32,i32 = MOV32r0

*** Final schedule ***
SU(2): t13: i32,i32 = MOV32r0

SU(1): t8: i8 = EXTRACT_SUBREG MOV32r0:i32,i32, TargetConstant:i32<1>

SU(0): t12: ch = RET TargetConstant:i32<0>, Register:i8 $al, t11, t11:1

    t11: ch,glue = CopyToReg t0, Register:i8 $al, t8


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1BC1fySbxlF: IsSSA, TracksLiveness

bb.0 (%ir-block.3):
  %3:gr32 = MOV32r0 implicit-def dead $eflags
  %4:gr8 = COPY %3.sub_8bit:gr32
  $al = COPY %4:gr8
  RET 0, $al

# End machine code for function $s7partial1BC1fySbxlF.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1BC1fySbxlF: IsSSA, TracksLiveness

bb.0 (%ir-block.3):
  %3:gr32 = MOV32r0 implicit-def dead $eflags
  %4:gr8 = COPY %3.sub_8bit:gr32
  $al = COPY %4:gr8
  RET 0, $al

# End machine code for function $s7partial1BC1fySbxlF.

# Machine code for function $s7partial1BC1fySbxlF: IsSSA, TracksLiveness

0B	bb.0 (%ir-block.3):
16B	  %3:gr32 = MOV32r0 implicit-def dead $eflags
32B	  %4:gr8 = COPY %3.sub_8bit:gr32
48B	  $al = COPY %4:gr8
64B	  RET 0, $al

# End machine code for function $s7partial1BC1fySbxlF.

********** Stack Coloring **********
********** Function: $s7partial1BC1fySbxlF
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1BC1fySbxlF
Machine InstCombiner: $s7partial1BC1fySbxlF
Combining MBB 
********** X86 cmov Conversion : $s7partial1BC1fySbxlF**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: $s7partial1BC1fySbxlF ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: $s7partial1BC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BC1fySbxlF
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1BC1fySbxlF
**** Analysing $s7partial1BC1fySbxlF
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1BC1fySbxlF **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : $s7partial1BC1fySbxlF **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1BC1fySbxlF
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1BC1fySbxlF
# Machine code for function $s7partial1BC1fySbxlF: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.3):
16B	  %3:gr32 = MOV32r0 implicit-def dead $eflags
32B	  %4:gr8 = COPY killed %3.sub_8bit:gr32
48B	  $al = COPY killed %4:gr8
64B	  RET 0, killed $al

# End machine code for function $s7partial1BC1fySbxlF.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%3 [16r,32r:0)  0@16r weight:0.000000e+00
%4 [32r,48r:0)  0@32r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BC1fySbxlF: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.3):
16B	  %3:gr32 = MOV32r0 implicit-def dead $eflags
32B	  %4:gr8 = COPY %3.sub_8bit:gr32
48B	  $al = COPY %4:gr8
64B	  RET 0, killed $al

# End machine code for function $s7partial1BC1fySbxlF.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1BC1fySbxlF
********** JOINING INTERVALS ***********
:
48B	$al = COPY %4:gr8
	Considering merging %4 with $al
	Can only merge into reserved registers.
32B	%4:gr8 = COPY %3.sub_8bit:gr32
	Considering merging to GR32 with %4 in %3:sub_8bit
		RHS = %4 [32r,48r:0)  0@32r weight:0.000000e+00
		LHS = %3 [16r,32r:0)  0@16r weight:0.000000e+00
		merge %4:0@32r into %3:0@16r --> @16r
		erased:	32r	%4:gr8 = COPY %3.sub_8bit:gr32
AllocationOrder(GR32) = [ $eax $ecx $edx $esi $edi $r8d $r9d $r10d $r11d $ebx $r14d $r15d $r12d $r13d ]
		updated: 48B	$al = COPY %3.sub_8bit:gr32
	Success: %4:sub_8bit -> %3
	Result = %3 [16r,48r:0)  0@16r weight:0.000000e+00
48B	$al = COPY %3.sub_8bit:gr32
	Considering merging %3 with $eax
	Can only merge into reserved registers.
Remat: dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
Shrink: %3 [16r,48r:0)  0@16r weight:0.000000e+00
All defs dead: 16r	dead %3:gr32 = MOV32r0 implicit-def dead $eflags
Shrunk: %3 [16r,16d:0)  0@16r weight:0.000000e+00
Deleting dead def 16r	dead %3:gr32 = MOV32r0 implicit-def dead $eflags
Trying to inflate 0 regs.
********** INTERVALS **********
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BC1fySbxlF: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.3):
48B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
64B	  RET 0, killed $al

# End machine code for function $s7partial1BC1fySbxlF.

Before MISched:
# Machine code for function $s7partial1BC1fySbxlF: NoPHIs, TracksLiveness

bb.0 (%ir-block.3):
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  RET 0, killed $al

# End machine code for function $s7partial1BC1fySbxlF.

********** INTERVALS **********
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BC1fySbxlF: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.3):
48B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
64B	  RET 0, killed $al

# End machine code for function $s7partial1BC1fySbxlF.


block-frequency: $s7partial1BC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BC1fySbxlF
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1BC1fySbxlF
********** Compute Spill Weights **********
********** Function: $s7partial1BC1fySbxlF
********** INTERVALS **********
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BC1fySbxlF: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.3):
48B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
64B	  RET 0, killed $al

# End machine code for function $s7partial1BC1fySbxlF.

********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1BC1fySbxlF
********** REGISTER MAP **********

0B	bb.0 (%ir-block.3):
48B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
64B	  RET 0, killed $al
> dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
> RET 0, killed $al
********** Stack Slot Coloring **********
********** Function: $s7partial1BC1fySbxlF
MCP: CopyPropagateBlock 
******** Post-regalloc Machine LICM: $s7partial1BC1fySbxlF ********

block-frequency: $s7partial1BC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BC1fySbxlF
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing $s7partial1BC1fySbxlF
Look into: 0 
Nothing to shrink-wrap
MCP: CopyPropagateBlock 
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1BC1fySbxlF
	discovered a new reachable node %bb.0

block-frequency: $s7partial1BC1fySbxlF
======================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BC1fySbxlF
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$eax:	2	dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
$eax:	2	dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
$eax:	2	dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1BC1fySbxlF **********
X86 Retpoline Thunks
	discovered a new reachable node %1
[SafeStack] Function: $s7partial1BCfd
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %1
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCfd ----

Computing probabilities for 



=== $s7partial1BCfd
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Creating constant: t3: i32 = TargetConstant<0>
Creating new node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Creating new node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Initial selection DAG: %bb.0 '$s7partial1BCfd:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1



Combining: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1

Combining: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

Combining: t4: i64 = Register $rax

Combining: t3: i32 = TargetConstant<0>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t1: i64 = Register %0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1BCfd:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1


Legalizing node: t4: i64 = Register $rax
Ignoring node results
Legally typed node: t4: i64 = Register $rax

Legalizing node: t3: i32 = TargetConstant<0>
Ignoring node results
Legally typed node: t3: i32 = TargetConstant<0>

Legalizing node: t1: i64 = Register %0
Ignoring node results
Legally typed node: t1: i64 = Register %0

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Legally typed node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

Legalizing node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Analyzing result type: ch
Legal result type
Analyzing operand: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal operand
Analyzing operand: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal operand
Legally typed node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1

Legalizing node: t65535: ch = handlenode t6
Analyzing result type: ch
Legal result type
Analyzing operand: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Legal operand
Legally typed node: t65535: ch = handlenode t6

Type-legalized selection DAG: %bb.0 '$s7partial1BCfd:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1



Legalizing: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Legal node: nothing to do

Legalizing: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Legalizing: t4: i64 = Register $rax

Legalizing: t3: i32 = TargetConstant<0>

Legalizing: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1BCfd:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1



Legalizing: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Legal node: nothing to do

Combining: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1

Legalizing: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal node: nothing to do

Combining: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing: t4: i64 = Register $rax

Combining: t4: i64 = Register $rax

Legalizing: t3: i32 = TargetConstant<0>

Combining: t3: i32 = TargetConstant<0>

Legalizing: t1: i64 = Register %0

Combining: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1BCfd:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
ISEL: Starting pattern match
  Initial Opcode index to 130673
  Morphed node: t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1
ISEL: Match complete!

ISEL: Starting selection on root node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

ISEL: Starting selection on root node: t4: i64 = Register $rax

ISEL: Starting selection on root node: t3: i32 = TargetConstant<0>

ISEL: Starting selection on root node: t1: i64 = Register %0

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1BCfd:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1


********** List Scheduling %bb.0 '' **********
SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2


*** Scheduling [0]: SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2


Examining Available:
Height 1: SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [1]: SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

*** Final schedule ***
SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1BCfd: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $rax = COPY %0:gr64
  RET 0, $rax

# End machine code for function $s7partial1BCfd.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1BCfd: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $rax = COPY %0:gr64
  RET 0, $rax

# End machine code for function $s7partial1BCfd.

# Machine code for function $s7partial1BCfd: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, $rax

# End machine code for function $s7partial1BCfd.

********** Stack Coloring **********
********** Function: $s7partial1BCfd
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1BCfd
Machine InstCombiner: $s7partial1BCfd
Combining MBB 
********** X86 cmov Conversion : $s7partial1BCfd**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: $s7partial1BCfd ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: $s7partial1BCfd
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfd
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1BCfd
**** Analysing $s7partial1BCfd
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1BCfd **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : $s7partial1BCfd **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1BCfd
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1BCfd
# Machine code for function $s7partial1BCfd: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY killed $r13
32B	  $rax = COPY killed %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1BCfd.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 R13B#0 R13BH#0 R13WH#0
Created 3 new intervals.
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCfd: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1BCfd.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1BCfd
********** JOINING INTERVALS ***********
:
16B	%0:gr64 = COPY $r13
	Considering merging %0 with $r13
	Can only merge into reserved registers.
32B	$rax = COPY %0:gr64
	Considering merging %0 with $rax
	Can only merge into reserved registers.
32B	$rax = COPY %0:gr64
	Considering merging %0 with $rax
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCfd: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1BCfd.

Before MISched:
# Machine code for function $s7partial1BCfd: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $rax = COPY %0:gr64
  RET 0, killed $rax

# End machine code for function $s7partial1BCfd.

********** MI Scheduling **********
$s7partial1BCfd:%bb.0 
  From: %0:gr64 = COPY $r13
    To: RET 0, killed $rax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %0:gr64 = COPY $r13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(1):   $rax = COPY %0:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   RET 0, killed $rax
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rax = COPY %0:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:gr64 = COPY $r13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %0:gr64 = COPY $r13
SU(1):   $rax = COPY %0:gr64

********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCfd: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1BCfd.


block-frequency: $s7partial1BCfd
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfd
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1BCfd
********** Compute Spill Weights **********
********** Function: $s7partial1BCfd
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:INF
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCfd: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1BCfd.


selectOrSplit GR64:%0 [16r,32r:0)  0@16r weight:INF w=INF
hints: $rax $r13
assigning %0 to $rax: AH [16r,32r:0)  0@16r AL [16r,32r:0)  0@16r HAX [16r,32r:0)  0@16r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1BCfd
********** REGISTER MAP **********
[%0 -> $rax] GR64

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY killed %0:gr64
48B	  RET 0, $rax
> renamable $rax = COPY $r13
> $rax = COPY killed renamable $rax
Identity copy: $rax = COPY killed renamable $rax
  deleted.
> RET 0, $rax
********** Stack Slot Coloring **********
********** Function: $s7partial1BCfd
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
******** Post-regalloc Machine LICM: $s7partial1BCfd ********

block-frequency: $s7partial1BCfd
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfd
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing $s7partial1BCfd
Look into: 0 
Use or define CSR(1) or FI(0): renamable $rax = COPY $r13

No Shrink wrap candidate found
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1BCfd
real copy:   renamable $rax = COPY $r13
replaced by: $rax = MOV64rr $r13
	discovered a new reachable node %bb.0

block-frequency: $s7partial1BCfd
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfd
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rax:	2	$rax = MOV64rr $r13
$rax:	2	$rax = MOV64rr $r13
$rax:	2	$rax = MOV64rr $r13
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1BCfd **********
X86 Retpoline Thunks
	discovered a new reachable node %1
[SafeStack] Function: $s7partial1BCACycfc
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %1
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCACycfc ----

Computing probabilities for 



=== $s7partial1BCACycfc
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Creating constant: t3: i32 = TargetConstant<0>
Creating new node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Creating new node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Initial selection DAG: %bb.0 '$s7partial1BCACycfc:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1



Combining: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1

Combining: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

Combining: t4: i64 = Register $rax

Combining: t3: i32 = TargetConstant<0>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t1: i64 = Register %0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1BCACycfc:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1


Legalizing node: t4: i64 = Register $rax
Ignoring node results
Legally typed node: t4: i64 = Register $rax

Legalizing node: t3: i32 = TargetConstant<0>
Ignoring node results
Legally typed node: t3: i32 = TargetConstant<0>

Legalizing node: t1: i64 = Register %0
Ignoring node results
Legally typed node: t1: i64 = Register %0

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Legally typed node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

Legalizing node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Analyzing result type: ch
Legal result type
Analyzing operand: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal operand
Analyzing operand: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal operand
Legally typed node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1

Legalizing node: t65535: ch = handlenode t6
Analyzing result type: ch
Legal result type
Analyzing operand: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Legal operand
Legally typed node: t65535: ch = handlenode t6

Type-legalized selection DAG: %bb.0 '$s7partial1BCACycfc:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1



Legalizing: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Legal node: nothing to do

Legalizing: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Legalizing: t4: i64 = Register $rax

Legalizing: t3: i32 = TargetConstant<0>

Legalizing: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1BCACycfc:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1



Legalizing: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
Legal node: nothing to do

Combining: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1

Legalizing: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
Legal node: nothing to do

Combining: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing: t4: i64 = Register $rax

Combining: t4: i64 = Register $rax

Legalizing: t3: i32 = TargetConstant<0>

Combining: t3: i32 = TargetConstant<0>

Legalizing: t1: i64 = Register %0

Combining: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1BCACycfc:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t6: ch = X86ISD::RET_FLAG t5, TargetConstant:i32<0>, Register:i64 $rax, t5:1
ISEL: Starting pattern match
  Initial Opcode index to 130673
  Morphed node: t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1
ISEL: Match complete!

ISEL: Starting selection on root node: t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

ISEL: Starting selection on root node: t4: i64 = Register $rax

ISEL: Starting selection on root node: t3: i32 = TargetConstant<0>

ISEL: Starting selection on root node: t1: i64 = Register %0

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1BCACycfc:'
SelectionDAG has 7 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2
  t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1


********** List Scheduling %bb.0 '' **********
SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2


*** Scheduling [0]: SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2


Examining Available:
Height 1: SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [1]: SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

*** Final schedule ***
SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

SU(0): t6: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $rax, t2


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1BCACycfc: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $rax = COPY %0:gr64
  RET 0, $rax

# End machine code for function $s7partial1BCACycfc.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1BCACycfc: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $rax = COPY %0:gr64
  RET 0, $rax

# End machine code for function $s7partial1BCACycfc.

# Machine code for function $s7partial1BCACycfc: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, $rax

# End machine code for function $s7partial1BCACycfc.

********** Stack Coloring **********
********** Function: $s7partial1BCACycfc
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1BCACycfc
Machine InstCombiner: $s7partial1BCACycfc
Combining MBB 
********** X86 cmov Conversion : $s7partial1BCACycfc**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: $s7partial1BCACycfc ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: $s7partial1BCACycfc
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfc
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1BCACycfc
**** Analysing $s7partial1BCACycfc
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1BCACycfc **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : $s7partial1BCACycfc **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1BCACycfc
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1BCACycfc
# Machine code for function $s7partial1BCACycfc: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY killed $r13
32B	  $rax = COPY killed %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1BCACycfc.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 R13B#0 R13BH#0 R13WH#0
Created 3 new intervals.
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCACycfc: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1BCACycfc.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1BCACycfc
********** JOINING INTERVALS ***********
:
16B	%0:gr64 = COPY $r13
	Considering merging %0 with $r13
	Can only merge into reserved registers.
32B	$rax = COPY %0:gr64
	Considering merging %0 with $rax
	Can only merge into reserved registers.
32B	$rax = COPY %0:gr64
	Considering merging %0 with $rax
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCACycfc: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1BCACycfc.

Before MISched:
# Machine code for function $s7partial1BCACycfc: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $rax = COPY %0:gr64
  RET 0, killed $rax

# End machine code for function $s7partial1BCACycfc.

********** MI Scheduling **********
$s7partial1BCACycfc:%bb.0 
  From: %0:gr64 = COPY $r13
    To: RET 0, killed $rax
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %0:gr64 = COPY $r13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(1):   $rax = COPY %0:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   RET 0, killed $rax
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rax = COPY %0:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:gr64 = COPY $r13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %0:gr64 = COPY $r13
SU(1):   $rax = COPY %0:gr64

********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCACycfc: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1BCACycfc.


block-frequency: $s7partial1BCACycfc
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfc
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1BCACycfc
********** Compute Spill Weights **********
********** Function: $s7partial1BCACycfc
********** INTERVALS **********
R13B [0B,16r:0)  0@0B-phi
R13BH [0B,16r:0)  0@0B-phi
R13WH [0B,16r:0)  0@0B-phi
%0 [16r,32r:0)  0@16r weight:INF
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCACycfc: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY %0:gr64
48B	  RET 0, killed $rax

# End machine code for function $s7partial1BCACycfc.


selectOrSplit GR64:%0 [16r,32r:0)  0@16r weight:INF w=INF
hints: $rax $r13
assigning %0 to $rax: AH [16r,32r:0)  0@16r AL [16r,32r:0)  0@16r HAX [16r,32r:0)  0@16r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1BCACycfc
********** REGISTER MAP **********
[%0 -> $rax] GR64

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $rax = COPY killed %0:gr64
48B	  RET 0, $rax
> renamable $rax = COPY $r13
> $rax = COPY killed renamable $rax
Identity copy: $rax = COPY killed renamable $rax
  deleted.
> RET 0, $rax
********** Stack Slot Coloring **********
********** Function: $s7partial1BCACycfc
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
******** Post-regalloc Machine LICM: $s7partial1BCACycfc ********

block-frequency: $s7partial1BCACycfc
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfc
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing $s7partial1BCACycfc
Look into: 0 
Use or define CSR(1) or FI(0): renamable $rax = COPY $r13

No Shrink wrap candidate found
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
MCP: Copy is used - not dead:   renamable $rax = COPY $r13
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1BCACycfc
real copy:   renamable $rax = COPY $r13
replaced by: $rax = MOV64rr $r13
	discovered a new reachable node %bb.0

block-frequency: $s7partial1BCACycfc
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfc
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rax:	2	$rax = MOV64rr $r13
$rax:	2	$rax = MOV64rr $r13
$rax:	2	$rax = MOV64rr $r13
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	3	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1BCACycfc **********
X86 Retpoline Thunks
	discovered a new reachable node %0
[SafeStack] Function: $s7partial8makeAorBAA1ACyF
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %0
	discovered a new reachable node %0
---- Branch Probability Info : $s7partial8makeAorBAA1ACyF ----

Computing probabilities for 



=== $s7partial8makeAorBAA1ACyF
Creating new node: t2: i64 = undef
Creating constant: t3: i64 = TargetConstant<0>
Creating new node: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Creating new node: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
Creating new node: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
Creating new node: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
Creating new node: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
Creating new node: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
Creating new node: t15: i64,i64 = merge_values t12, t14
Creating constant: t17: i64 = Constant<16>
Creating constant: t18: i64 = Constant<7>
Creating new node: t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t15
Creating new node: t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1
Creating new node: t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1
Creating constant: t24: i32 = Constant<0>
Creating new node: t25: ch,glue = X86ISD::TC_RETURN t22, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22:1
Initial selection DAG: %bb.0 '$s7partial8makeAorBAA1ACyF:'
SelectionDAG has 26 nodes:
  t1: i64 = GlobalAddress<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0
      t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
  t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
  t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
  t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
  t16: i64 = GlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0
    t15: i64,i64 = merge_values t12, t14
  t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t15
  t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1
  t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1
  t25: ch,glue = X86ISD::TC_RETURN t22, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22:1



Combining: t25: ch,glue = X86ISD::TC_RETURN t22, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22:1

Combining: t24: i32 = Constant<0>

Combining: t23: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0

Combining: t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1

Combining: t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1

Combining: t20: i64 = Register $rsi

Combining: t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t15

Combining: t18: i64 = Constant<7>

Combining: t17: i64 = Constant<16>

Combining: t15: i64,i64 = merge_values t12, t14

Combining: t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12

Combining: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

Combining: t13: i64 = Register $rdx

Combining: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1

Combining: t11: i64 = Register $rax

Combining: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1

Combining: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1

Combining: t8: Untyped = RegisterMask

Combining: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0

Combining: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64

Combining: t5: i64 = Register $rdi

Combining: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t3: i64 = TargetConstant<0>

Combining: t2: i64 = undef

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial8makeAorBAA1ACyF:'
SelectionDAG has 23 nodes:
      t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
  t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
  t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
    t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
  t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12
  t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1
  t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1
  t25: ch,glue = X86ISD::TC_RETURN t22, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22:1


Legalizing node: t24: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t24: i32 = Constant<0>

Legalizing node: t23: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0
Analyzing result type: i64
Legal result type
Legally typed node: t23: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0

Legalizing node: t20: i64 = Register $rsi
Ignoring node results
Legally typed node: t20: i64 = Register $rsi

Legalizing node: t18: i64 = Constant<7>
Analyzing result type: i64
Legal result type
Legally typed node: t18: i64 = Constant<7>

Legalizing node: t17: i64 = Constant<16>
Analyzing result type: i64
Legal result type
Legally typed node: t17: i64 = Constant<16>

Legalizing node: t13: i64 = Register $rdx
Ignoring node results
Legally typed node: t13: i64 = Register $rdx

Legalizing node: t11: i64 = Register $rax
Ignoring node results
Legally typed node: t11: i64 = Register $rax

Legalizing node: t8: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t8: Untyped = RegisterMask

Legalizing node: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0

Legalizing node: t5: i64 = Register $rdi
Ignoring node results
Legally typed node: t5: i64 = Register $rdi

Legalizing node: t3: i64 = TargetConstant<0>
Ignoring node results
Legally typed node: t3: i64 = TargetConstant<0>

Legalizing node: t2: i64 = undef
Analyzing result type: i64
Legal result type
Legally typed node: t2: i64 = undef

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing node: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Legal operand
Analyzing operand: t2: i64 = undef
Legal operand
Legally typed node: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64

Legalizing node: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
Legal operand
Analyzing operand: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0
Legal operand
Analyzing operand: t8: Untyped = RegisterMask
Legal operand
Analyzing operand: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
Legal operand
Legally typed node: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1

Legalizing node: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
Legal operand
Analyzing operand: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
Legal operand
Legally typed node: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1

Legalizing node: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
Legal operand
Analyzing operand: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
Legal operand
Legally typed node: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1

Legalizing node: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
Legal operand
Analyzing operand: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
Legal operand
Legally typed node: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

Legalizing node: t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
Legal operand
Analyzing operand: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
Legal operand
Legally typed node: t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12

Legalizing node: t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12
Legal operand
Analyzing operand: t17: i64 = Constant<16>
Legal operand
Analyzing operand: t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12
Legal operand
Legally typed node: t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1

Legalizing node: t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1
Legal operand
Analyzing operand: t18: i64 = Constant<7>
Legal operand
Analyzing operand: t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1
Legal operand
Legally typed node: t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1

Legalizing node: t25: ch,glue = X86ISD::TC_RETURN t22, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1
Legal operand
Analyzing operand: t23: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0
Legal operand
Analyzing operand: t24: i32 = Constant<0>
Legal operand
Analyzing operand: t8: Untyped = RegisterMask
Legal operand
Analyzing operand: t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1
Legal operand
Legally typed node: t25: ch,glue = X86ISD::TC_RETURN t22, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22:1

Legalizing node: t65535: ch = handlenode t25
Analyzing result type: ch
Legal result type
Analyzing operand: t25: ch,glue = X86ISD::TC_RETURN t22, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22:1
Legal operand
Legally typed node: t65535: ch = handlenode t25

Type-legalized selection DAG: %bb.0 '$s7partial8makeAorBAA1ACyF:'
SelectionDAG has 23 nodes:
      t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
  t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
  t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
    t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
  t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12
  t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1
  t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1
  t25: ch,glue = X86ISD::TC_RETURN t22, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22:1



Legalizing: t25: ch,glue = X86ISD::TC_RETURN t22, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22:1
Legal node: nothing to do

Legalizing: t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1
Legal node: nothing to do

Legalizing: t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1
Legal node: nothing to do

Legalizing: t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12
Legal node: nothing to do

Legalizing: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
Legal node: nothing to do

Legalizing: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
Legal node: nothing to do

Legalizing: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1

Legalizing: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
Legal node: nothing to do

Legalizing: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
Legal node: nothing to do

Legalizing: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t24: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t23: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0
Legal node: nothing to do

Legalizing: t20: i64 = Register $rsi

Legalizing: t18: i64 = Constant<7>
Legal node: nothing to do

Legalizing: t17: i64 = Constant<16>
Legal node: nothing to do

Legalizing: t13: i64 = Register $rdx

Legalizing: t11: i64 = Register $rax

Legalizing: t8: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0
Legal node: nothing to do

Legalizing: t5: i64 = Register $rdi

Legalizing: t3: i64 = TargetConstant<0>

Legalizing: t2: i64 = undef
Legal node: nothing to do

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial8makeAorBAA1ACyF:'
SelectionDAG has 23 nodes:
      t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
  t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
  t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
    t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
  t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12
  t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1
  t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1
  t25: ch,glue = X86ISD::TC_RETURN t22, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22:1



Legalizing: t25: ch,glue = X86ISD::TC_RETURN t22, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22:1
Legal node: nothing to do

Combining: t25: ch,glue = X86ISD::TC_RETURN t22, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22:1

Legalizing: t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1
Legal node: nothing to do

Combining: t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1

Legalizing: t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1
Legal node: nothing to do

Combining: t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1

Legalizing: t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12
Legal node: nothing to do

Combining: t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12

Legalizing: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
Legal node: nothing to do

Combining: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

Legalizing: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
Legal node: nothing to do

Combining: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1

Legalizing: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1

Combining: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1

Legalizing: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
Legal node: nothing to do

Combining: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1

Legalizing: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
Legal node: nothing to do

Combining: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64

Legalizing: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t24: i32 = Constant<0>
Legal node: nothing to do

Combining: t24: i32 = Constant<0>

Legalizing: t23: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0
Legal node: nothing to do

Combining: t23: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0

Legalizing: t20: i64 = Register $rsi

Combining: t20: i64 = Register $rsi

Legalizing: t18: i64 = Constant<7>
Legal node: nothing to do

Combining: t18: i64 = Constant<7>

Legalizing: t17: i64 = Constant<16>
Legal node: nothing to do

Combining: t17: i64 = Constant<16>

Legalizing: t13: i64 = Register $rdx

Combining: t13: i64 = Register $rdx

Legalizing: t11: i64 = Register $rax

Combining: t11: i64 = Register $rax

Legalizing: t8: Untyped = RegisterMask
Legal node: nothing to do

Combining: t8: Untyped = RegisterMask

Legalizing: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0
Legal node: nothing to do

Combining: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0

Legalizing: t5: i64 = Register $rdi

Combining: t5: i64 = Register $rdi

Legalizing: t3: i64 = TargetConstant<0>

Combining: t3: i64 = TargetConstant<0>

Legalizing: t2: i64 = undef
Legal node: nothing to do

Combining: t2: i64 = undef

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial8makeAorBAA1ACyF:'
SelectionDAG has 23 nodes:
      t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
  t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
  t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
    t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
  t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12
  t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1
  t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1
  t25: ch,glue = X86ISD::TC_RETURN t22, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t25: ch,glue = X86ISD::TC_RETURN t22, TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22:1
ISEL: Starting pattern match
  Initial Opcode index to 40262
  Match failed at index 40267
  Continuing at 40335
  OpcodeSwitch from 40341 to 40345
  TypeSwitch[i64] from 40345 to 40369
Creating constant: t26: i32 = TargetConstant<0>
  Morphed node: t25: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22, t22:1
ISEL: Match complete!

ISEL: Starting selection on root node: t22: ch,glue = CopyToReg t21, Register:i64 $rdx, Constant:i64<7>, t21:1

ISEL: Starting selection on root node: t21: ch,glue = CopyToReg t19, Register:i64 $rsi, Constant:i64<16>, t19:1

ISEL: Starting selection on root node: t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12

ISEL: Starting selection on root node: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

ISEL: Starting selection on root node: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1

ISEL: Starting selection on root node: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
ISEL: Starting pattern match
  Initial Opcode index to 130027
  Skipped scope entry (due to false predicate) at index 130043, continuing at 130054
  Morphed node: t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1
ISEL: Match complete!

ISEL: Starting selection on root node: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
ISEL: Starting pattern match
  Initial Opcode index to 91510
  Match failed at index 91515
  Continuing at 91598
  OpcodeSwitch from 91604 to 91608
  TypeSwitch[i64] from 91608 to 91611
  Morphed node: t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1
ISEL: Match complete!

ISEL: Starting selection on root node: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64

ISEL: Starting selection on root node: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
ISEL: Starting pattern match
  Initial Opcode index to 130070
  Skipped scope entry (due to false predicate) at index 130085, continuing at 130100
  Morphed node: t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t23: i64 = TargetGlobalAddress<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0

ISEL: Starting selection on root node: t20: i64 = Register $rsi

ISEL: Starting selection on root node: t18: i64 = Constant<7>
ISEL: Starting pattern match
  Initial Opcode index to 125031
  Skipped scope entry (due to false predicate) at index 125033, continuing at 125110
  Skipped scope entry (due to false predicate) at index 125111, continuing at 125148
  Skipped scope entry (due to false predicate) at index 125149, continuing at 125195
  TypeSwitch[i64] from 125197 to 125229
  Match failed at index 125233
  Continuing at 125244
Creating constant: t27: i64 = TargetConstant<7>
  Morphed node: t18: i64 = MOV32ri64 TargetConstant:i64<7>
ISEL: Match complete!

ISEL: Starting selection on root node: t17: i64 = Constant<16>
ISEL: Starting pattern match
  Initial Opcode index to 125031
  Skipped scope entry (due to false predicate) at index 125033, continuing at 125110
  Skipped scope entry (due to false predicate) at index 125111, continuing at 125148
  Skipped scope entry (due to false predicate) at index 125149, continuing at 125195
  TypeSwitch[i64] from 125197 to 125229
  Match failed at index 125233
  Continuing at 125244
Creating constant: t28: i64 = TargetConstant<16>
  Morphed node: t17: i64 = MOV32ri64 TargetConstant:i64<16>
ISEL: Match complete!

ISEL: Starting selection on root node: t13: i64 = Register $rdx

ISEL: Starting selection on root node: t11: i64 = Register $rax

ISEL: Starting selection on root node: t8: Untyped = RegisterMask

ISEL: Starting selection on root node: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0

ISEL: Starting selection on root node: t5: i64 = Register $rdi

ISEL: Starting selection on root node: t3: i64 = TargetConstant<0>

ISEL: Starting selection on root node: t2: i64 = undef

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial8makeAorBAA1ACyF:'
SelectionDAG has 25 nodes:
      t0: ch = EntryToken
    t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0
  t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, IMPLICIT_DEF:i64
  t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1
  t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1
  t12: i64,ch,glue = CopyFromReg t10:1, Register:i64 $rax, t10:2
    t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
  t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12
    t17: i64 = MOV32ri64 TargetConstant:i64<16>
  t21: ch,glue = CopyToReg t19, Register:i64 $rsi, t17, t19:1
    t18: i64 = MOV32ri64 TargetConstant:i64<7>
  t22: ch,glue = CopyToReg t21, Register:i64 $rdx, t18, t21:1
  t25: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22, t22:1


********** List Scheduling %bb.0 '' **********
SU(0): t25: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22, t22:1

    t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12

    t21: ch,glue = CopyToReg t19, Register:i64 $rsi, t17, t19:1

    t22: ch,glue = CopyToReg t21, Register:i64 $rdx, t18, t21:1

  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
    SU(2): Data Latency=1
    SU(3): Ord  Latency=1 Barrier
    SU(3): Data Latency=1
SU(1): t18: i64 = MOV32ri64 TargetConstant:i64<7>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(2): t17: i64 = MOV32ri64 TargetConstant:i64<16>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(3): t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1

    t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1

    t12: i64,ch,glue = CopyFromReg t10:1, Register:i64 $rax, t10:2

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Ord  Latency=1 Barrier
    SU(4): Data Latency=1
  Successors:
    SU(0): Ord  Latency=1 Barrier
    SU(0): Data Latency=1
SU(4): t2: i64 = IMPLICIT_DEF

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=1
SU(5): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t25: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22, t22:1

    t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12

    t21: ch,glue = CopyToReg t19, Register:i64 $rsi, t17, t19:1

    t22: ch,glue = CopyToReg t21, Register:i64 $rdx, t18, t21:1


*** Scheduling [0]: SU(0): t25: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22, t22:1

    t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12

    t21: ch,glue = CopyToReg t19, Register:i64 $rsi, t17, t19:1

    t22: ch,glue = CopyToReg t21, Register:i64 $rdx, t18, t21:1


Examining Available:
Height 1: SU(1): t18: i64 = MOV32ri64 TargetConstant:i64<7>

Height 1: SU(2): t17: i64 = MOV32ri64 TargetConstant:i64<16>

Height 1: SU(3): t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1

    t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1

    t12: i64,ch,glue = CopyFromReg t10:1, Register:i64 $rax, t10:2


*** Scheduling [1]: SU(1): t18: i64 = MOV32ri64 TargetConstant:i64<7>


Examining Available:
Height 1: SU(2): t17: i64 = MOV32ri64 TargetConstant:i64<16>

Height 1: SU(3): t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1

    t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1

    t12: i64,ch,glue = CopyFromReg t10:1, Register:i64 $rax, t10:2


*** Scheduling [2]: SU(2): t17: i64 = MOV32ri64 TargetConstant:i64<16>


Examining Available:
Height 1: SU(3): t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1

    t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1

    t12: i64,ch,glue = CopyFromReg t10:1, Register:i64 $rax, t10:2


*** Scheduling [3]: SU(3): t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1

    t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1

    t12: i64,ch,glue = CopyFromReg t10:1, Register:i64 $rax, t10:2


Examining Available:
Height 4: SU(4): t2: i64 = IMPLICIT_DEF

Height 4: SU(5): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0


*** Scheduling [4]: SU(4): t2: i64 = IMPLICIT_DEF


Examining Available:
Height 4: SU(5): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0


*** Scheduling [5]: SU(5): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

*** Final schedule ***
SU(5): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

SU(4): t2: i64 = IMPLICIT_DEF

SU(3): t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1BCMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1

    t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1

    t12: i64,ch,glue = CopyFromReg t10:1, Register:i64 $rax, t10:2

SU(2): t17: i64 = MOV32ri64 TargetConstant:i64<16>

SU(1): t18: i64 = MOV32ri64 TargetConstant:i64<7>

SU(0): t25: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.refcounted* (%swift.type*, i64, i64)* @swift_allocObject> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t22, t22:1

    t19: ch,glue = CopyToReg t14:1, Register:i64 $rdi, t12

    t21: ch,glue = CopyToReg t19, Register:i64 $rsi, t17, t19:1

    t22: ch,glue = CopyToReg t21, Register:i64 $rdx, t18, t21:1


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial8makeAorBAA1ACyF: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = IMPLICIT_DEF
  $rdi = COPY %0:gr64
  CALL64pcrel32 @"$s7partial1BCMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = COPY $rax
  %2:gr64 = COPY $rdx
  %3:gr64 = MOV32ri64 16
  %4:gr64 = MOV32ri64 7
  $rdi = COPY %1:gr64
  $rsi = COPY %3:gr64
  $rdx = COPY %4:gr64
  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial8makeAorBAA1ACyF.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial8makeAorBAA1ACyF: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = IMPLICIT_DEF
  $rdi = COPY %0:gr64
  CALL64pcrel32 @"$s7partial1BCMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = COPY $rax
  %2:gr64 = COPY $rdx
  %3:gr64 = MOV32ri64 16
  %4:gr64 = MOV32ri64 7
  $rdi = COPY %1:gr64
  $rsi = COPY %3:gr64
  $rdx = COPY %4:gr64
  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial8makeAorBAA1ACyF.

# Machine code for function $s7partial8makeAorBAA1ACyF: IsSSA, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  %0:gr64 = IMPLICIT_DEF
48B	  $rdi = COPY %0:gr64
64B	  CALL64pcrel32 @"$s7partial1BCMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
80B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  %1:gr64 = COPY $rax
112B	  %2:gr64 = COPY $rdx
128B	  %3:gr64 = MOV32ri64 16
144B	  %4:gr64 = MOV32ri64 7
160B	  $rdi = COPY %1:gr64
176B	  $rsi = COPY %3:gr64
192B	  $rdx = COPY %4:gr64
208B	  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial8makeAorBAA1ACyF.

********** Stack Coloring **********
********** Function: $s7partial8makeAorBAA1ACyF
DeadMachineInstructionElim: DELETING: %2:gr64 = COPY $rdx
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: $s7partial8makeAorBAA1ACyF
Machine InstCombiner: $s7partial8makeAorBAA1ACyF
Combining MBB 
********** X86 cmov Conversion : $s7partial8makeAorBAA1ACyF**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: $s7partial8makeAorBAA1ACyF ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: $s7partial8makeAorBAA1ACyF
===========================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial8makeAorBAA1ACyF
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial8makeAorBAA1ACyF
Encountered load fold barrier on CALL64pcrel32 @"$s7partial1BCMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
Encountered load fold barrier on TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
**** Analysing $s7partial8makeAorBAA1ACyF
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial8makeAorBAA1ACyF **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : $s7partial8makeAorBAA1ACyF **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial8makeAorBAA1ACyF
%bb.0 has 1 implicit defs.
Processing %0:gr64 = IMPLICIT_DEF
Converting to IMPLICIT_DEF: $rdi = COPY undef %0:gr64
Processing $rdi = IMPLICIT_DEF undef %0:gr64
Physreg user: CALL64pcrel32 @"$s7partial1BCMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial8makeAorBAA1ACyF
# Machine code for function $s7partial8makeAorBAA1ACyF: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  CALL64pcrel32 @"$s7partial1BCMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
48B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
64B	  %1:gr64 = COPY killed $rax
80B	  %3:gr64 = MOV32ri64 16
96B	  %4:gr64 = MOV32ri64 7
112B	  $rdi = COPY killed %1:gr64
128B	  $rsi = COPY killed %3:gr64
144B	  $rdx = COPY killed %4:gr64
160B	  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial8makeAorBAA1ACyF.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%1 [64r,112r:0)  0@64r weight:0.000000e+00
%3 [80r,128r:0)  0@80r weight:0.000000e+00
%4 [96r,144r:0)  0@96r weight:0.000000e+00
RegMasks: 32r 160r
********** MACHINEINSTRS **********
# Machine code for function $s7partial8makeAorBAA1ACyF: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  CALL64pcrel32 @"$s7partial1BCMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
48B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
64B	  %1:gr64 = COPY killed $rax
80B	  %3:gr64 = MOV32ri64 16
96B	  %4:gr64 = MOV32ri64 7
112B	  $rdi = COPY %1:gr64
128B	  $rsi = COPY %3:gr64
144B	  $rdx = COPY %4:gr64
160B	  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial8makeAorBAA1ACyF.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial8makeAorBAA1ACyF
********** JOINING INTERVALS ***********
:
64B	%1:gr64 = COPY killed $rax
	Considering merging %1 with $rax
	Can only merge into reserved registers.
112B	$rdi = COPY %1:gr64
	Considering merging %1 with $rdi
	Can only merge into reserved registers.
128B	$rsi = COPY %3:gr64
	Considering merging %3 with $rsi
	Can only merge into reserved registers.
Remat: $rsi = MOV32ri64 16
Shrink: %3 [80r,128r:0)  0@80r weight:0.000000e+00
All defs dead: 80r	dead %3:gr64 = MOV32ri64 16
Shrunk: %3 [80r,80d:0)  0@80r weight:0.000000e+00
Deleting dead def 80r	dead %3:gr64 = MOV32ri64 16
144B	$rdx = COPY %4:gr64
	Considering merging %4 with $rdx
	Can only merge into reserved registers.
Remat: $rdx = MOV32ri64 7
Shrink: %4 [96r,144r:0)  0@96r weight:0.000000e+00
All defs dead: 96r	dead %4:gr64 = MOV32ri64 7
Shrunk: %4 [96r,96d:0)  0@96r weight:0.000000e+00
Deleting dead def 96r	dead %4:gr64 = MOV32ri64 7
112B	$rdi = COPY %1:gr64
	Considering merging %1 with $rdi
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
%1 [64r,112r:0)  0@64r weight:0.000000e+00
RegMasks: 32r 160r
********** MACHINEINSTRS **********
# Machine code for function $s7partial8makeAorBAA1ACyF: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  CALL64pcrel32 @"$s7partial1BCMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
48B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
64B	  %1:gr64 = COPY killed $rax
112B	  $rdi = COPY %1:gr64
128B	  $rsi = MOV32ri64 16
144B	  $rdx = MOV32ri64 7
160B	  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial8makeAorBAA1ACyF.

Before MISched:
# Machine code for function $s7partial8makeAorBAA1ACyF: NoPHIs, TracksLiveness

bb.0 (%ir-block.0):
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @"$s7partial1BCMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = COPY killed $rax
  $rdi = COPY %1:gr64
  $rsi = MOV32ri64 16
  $rdx = MOV32ri64 7
  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial8makeAorBAA1ACyF.

********** MI Scheduling **********
$s7partial8makeAorBAA1ACyF:%bb.0 
  From: %1:gr64 = COPY killed $rax
    To: TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:gr64 = COPY killed $rax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   $rdi = COPY %1:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $rsi = MOV32ri64 16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $rdx = MOV32ri64 7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rdi = COPY %1:gr64
handleMove 112B -> 152B: $rdi = COPY %1:gr64
     DIL:	[152r,160r:0)  0@152r
        -->	[152r,160r:0)  0@152r
     DIH:	[152r,160r:0)  0@152r
        -->	[152r,160r:0)  0@152r
     HDI:	[152r,160r:0)  0@152r
        -->	[152r,160r:0)  0@152r
     %1:	[64r,112r:0)  0@64r
        -->	[64r,152r:0)  0@64r
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $rdx = MOV32ri64 7
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $rsi = MOV32ri64 16
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:gr64 = COPY killed $rax
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gr64 = COPY killed $rax
SU(2):   $rsi = MOV32ri64 16
SU(3):   $rdx = MOV32ri64 7
SU(1):   $rdi = COPY %1:gr64

********** INTERVALS **********
DIL [152r,160r:0)  0@152r
DIH [152r,160r:0)  0@152r
HDI [152r,160r:0)  0@152r
%1 [64r,152r:0)  0@64r weight:0.000000e+00
RegMasks: 32r 160r
********** MACHINEINSTRS **********
# Machine code for function $s7partial8makeAorBAA1ACyF: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  CALL64pcrel32 @"$s7partial1BCMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
48B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
64B	  %1:gr64 = COPY killed $rax
128B	  $rsi = MOV32ri64 16
144B	  $rdx = MOV32ri64 7
152B	  $rdi = COPY %1:gr64
160B	  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial8makeAorBAA1ACyF.


block-frequency: $s7partial8makeAorBAA1ACyF
===========================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial8makeAorBAA1ACyF
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial8makeAorBAA1ACyF
********** Compute Spill Weights **********
********** Function: $s7partial8makeAorBAA1ACyF
********** INTERVALS **********
DIL [152r,160r:0)  0@152r
DIH [152r,160r:0)  0@152r
HDI [152r,160r:0)  0@152r
%1 [64r,152r:0)  0@64r weight:4.139344e-03
RegMasks: 32r 160r
********** MACHINEINSTRS **********
# Machine code for function $s7partial8makeAorBAA1ACyF: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  CALL64pcrel32 @"$s7partial1BCMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
48B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
64B	  %1:gr64 = COPY killed $rax
128B	  $rsi = MOV32ri64 16
144B	  $rdx = MOV32ri64 7
152B	  $rdi = COPY %1:gr64
160B	  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial8makeAorBAA1ACyF.


selectOrSplit GR64:%1 [64r,152r:0)  0@64r weight:4.139344e-03 w=4.139344e-03
hints: $rax $rdi
assigning %1 to $rax: AH [64r,152r:0)  0@64r AL [64r,152r:0)  0@64r HAX [64r,152r:0)  0@64r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial8makeAorBAA1ACyF
********** REGISTER MAP **********
[%1 -> $rax] GR64

0B	bb.0 (%ir-block.0):
16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  CALL64pcrel32 @"$s7partial1BCMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
48B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
64B	  %1:gr64 = COPY $rax
128B	  $rsi = MOV32ri64 16
144B	  $rdx = MOV32ri64 7
152B	  $rdi = COPY killed %1:gr64
160B	  TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> CALL64pcrel32 @"$s7partial1BCMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> renamable $rax = COPY $rax
Identity copy: renamable $rax = COPY $rax
  deleted.
> $rsi = MOV32ri64 16
> $rdx = MOV32ri64 7
> $rdi = COPY killed renamable $rax
> TCRETURNdi64 @swift_allocObject, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx
********** Stack Slot Coloring **********
********** Function: $s7partial8makeAorBAA1ACyF
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $rax
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rax
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rax
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rax
******** Post-regalloc Machine LICM: $s7partial8makeAorBAA1ACyF ********

block-frequency: $s7partial8makeAorBAA1ACyF
===========================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial8makeAorBAA1ACyF
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing $s7partial8makeAorBAA1ACyF
Look into: 0 
Frame instruction: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

No Shrink wrap candidate found
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $rax
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rax
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rax
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rax
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial8makeAorBAA1ACyF
real copy:   $rdi = COPY killed renamable $rax
replaced by: $rdi = MOV64rr killed $rax
	discovered a new reachable node %bb.0

block-frequency: $s7partial8makeAorBAA1ACyF
===========================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial8makeAorBAA1ACyF
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$esi:	3	$esi = MOV32ri 16, implicit-def $rsi
$esi:	3	$esi = MOV32ri 16, implicit-def $rsi
$esi:	3	$esi = MOV32ri 16, implicit-def $rsi
$edx:	4	$edx = MOV32ri 7, implicit-def $rdx
$edx:	4	$edx = MOV32ri 7, implicit-def $rdx
$edx:	4	$edx = MOV32ri 7, implicit-def $rdx
$rdi:	5	$rdi = MOV64rr killed $rax
$rdi:	5	$rdi = MOV64rr killed $rax
$rdi:	5	$rdi = MOV64rr killed $rax
$rbp:	6	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	6	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	6	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
%bb.0: entry
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial8makeAorBAA1ACyF **********
X86 Retpoline Thunks
	discovered a new reachable node %0
	discovered a new reachable node %11
	discovered a new reachable node %8
	discovered a new reachable node %16
	discovered a new reachable node %18
	discovered a new reachable node %20
[SafeStack] Function: $s7partial1gSbyF
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %0
	discovered a new reachable node %11
	discovered a new reachable node %8
	discovered a new reachable node %16
	discovered a new reachable node %18
	discovered a new reachable node %20
	discovered a new reachable node %0
	discovered a new reachable node %11
	discovered a new reachable node %8
	discovered a new reachable node %16
	discovered a new reachable node %18
	discovered a new reachable node %20
---- Branch Probability Info : $s7partial1gSbyF ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%



=== $s7partial1gSbyF
Creating constant: t2: i64 = TargetConstant<0>
Creating new node: t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Creating new node: t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped
Creating new node: t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1
Creating new node: t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1
Creating new node: t11: ch = CopyToReg t0, Register:i64 %0, t9
Creating new node: t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>
Creating constant: t15: i16 = Constant<9>
Creating constant: t16: i64 = Constant<0>
Creating new node: t17: i64 = undef
Creating new node: t18: ch = store<(store 2 into %ir.4)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64
Creating new node: t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64
Creating new node: t21: ch = CopyToReg t0, Register:i64 %1, t19
Creating constant: t23: i64 = Constant<16>
Creating new node: t24: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
Creating new node: t26: i1 = setcc t19, t24, seteq:ch
Creating new node: t27: ch = TokenFactor t11, t21, t18
Creating new node: t29: ch = brcond t27, t26, BasicBlock:ch< 0x7f9e6a81ee70>
Creating new node: t31: ch = br t29, BasicBlock:ch< 0x7f9e6a81ef38>
Initial selection DAG: %bb.0 '$s7partial1gSbyF:'
SelectionDAG has 32 nodes:
  t0: ch = EntryToken
  t1: i64 = GlobalAddress<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0
    t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped
  t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1
  t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1
  t16: i64 = Constant<0>
    t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>
  t18: ch = store<(store 2 into %ir.4)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64
  t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64
        t11: ch = CopyToReg t0, Register:i64 %0, t9
        t21: ch = CopyToReg t0, Register:i64 %1, t19
      t27: ch = TokenFactor t11, t21, t18
        t24: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
      t26: i1 = setcc t19, t24, seteq:ch
    t29: ch = brcond t27, t26, BasicBlock:ch< 0x7f9e6a81ee70>
  t31: ch = br t29, BasicBlock:ch< 0x7f9e6a81ef38>



Combining: t31: ch = br t29, BasicBlock:ch< 0x7f9e6a81ef38>

Combining: t30: ch = BasicBlock< 0x7f9e6a81ef38>

Combining: t29: ch = brcond t27, t26, BasicBlock:ch< 0x7f9e6a81ee70>

Combining: t28: ch = BasicBlock< 0x7f9e6a81ee70>

Combining: t27: ch = TokenFactor t11, t21, t18

Combining: t26: i1 = setcc t19, t24, seteq:ch

Combining: t25: ch = seteq

Combining: t24: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>

Combining: t23: i64 = Constant<16>

Combining: t22: i64 = GlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0

Combining: t21: ch = CopyToReg t0, Register:i64 %1, t19

Combining: t20: i64 = Register %1

Combining: t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64

Combining: t18: ch = store<(store 2 into %ir.4)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64

Combining: t17: i64 = undef

Combining: t15: i16 = Constant<9>

Combining: t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>

Combining: t13: i64 = TargetFrameIndex<0>

Combining: t12: i64 = FrameIndex<0>

Combining: t11: ch = CopyToReg t0, Register:i64 %0, t9

Combining: t10: i64 = Register %0

Combining: t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1

Combining: t8: i64 = Register $rax

Combining: t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1

Combining: t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped

Combining: t5: Untyped = RegisterMask

Combining: t4: i64 = TargetGlobalAddress<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0

Combining: t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t2: i64 = TargetConstant<0>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1gSbyF:'
SelectionDAG has 30 nodes:
  t0: ch = EntryToken
    t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped
  t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1
  t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1
    t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>
  t18: ch = store<(store 2 into %ir.4, align 8)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64
  t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64
        t11: ch = CopyToReg t0, Register:i64 %0, t9
        t21: ch = CopyToReg t0, Register:i64 %1, t19
      t27: ch = TokenFactor t11, t21, t18
        t24: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
      t26: i1 = setcc t19, t24, seteq:ch
    t29: ch = brcond t27, t26, BasicBlock:ch< 0x7f9e6a81ee70>
  t31: ch = br t29, BasicBlock:ch< 0x7f9e6a81ef38>


Legalizing node: t30: ch = BasicBlock< 0x7f9e6a81ef38>
Analyzing result type: ch
Legal result type
Legally typed node: t30: ch = BasicBlock< 0x7f9e6a81ef38>

Legalizing node: t28: ch = BasicBlock< 0x7f9e6a81ee70>
Analyzing result type: ch
Legal result type
Legally typed node: t28: ch = BasicBlock< 0x7f9e6a81ee70>

Legalizing node: t25: ch = seteq
Analyzing result type: ch
Legal result type
Legally typed node: t25: ch = seteq

Legalizing node: t23: i64 = Constant<16>
Analyzing result type: i64
Legal result type
Legally typed node: t23: i64 = Constant<16>

Legalizing node: t22: i64 = GlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t22: i64 = GlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0

Legalizing node: t24: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
Analyzing result type: i64
Legal result type
Analyzing operand: t22: i64 = GlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Legal operand
Analyzing operand: t23: i64 = Constant<16>
Legal operand
Legally typed node: t24: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>

Legalizing node: t20: i64 = Register %1
Ignoring node results
Legally typed node: t20: i64 = Register %1

Legalizing node: t17: i64 = undef
Analyzing result type: i64
Legal result type
Legally typed node: t17: i64 = undef

Legalizing node: t15: i16 = Constant<9>
Analyzing result type: i16
Legal result type
Legally typed node: t15: i16 = Constant<9>

Legalizing node: t13: i64 = TargetFrameIndex<0>
Analyzing result type: i64
Legal result type
Legally typed node: t13: i64 = TargetFrameIndex<0>

Legalizing node: t12: i64 = FrameIndex<0>
Analyzing result type: i64
Legal result type
Legally typed node: t12: i64 = FrameIndex<0>

Legalizing node: t10: i64 = Register %0
Ignoring node results
Legally typed node: t10: i64 = Register %0

Legalizing node: t8: i64 = Register $rax
Ignoring node results
Legally typed node: t8: i64 = Register $rax

Legalizing node: t5: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t5: Untyped = RegisterMask

Legalizing node: t4: i64 = TargetGlobalAddress<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t4: i64 = TargetGlobalAddress<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0

Legalizing node: t2: i64 = TargetConstant<0>
Ignoring node results
Legally typed node: t2: i64 = TargetConstant<0>

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing node: t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Legal operand
Analyzing operand: t4: i64 = TargetGlobalAddress<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0
Legal operand
Analyzing operand: t5: Untyped = RegisterMask
Legal operand
Legally typed node: t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped

Legalizing node: t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped
Legal operand
Analyzing operand: t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped
Legal operand
Legally typed node: t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1

Legalizing node: t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1
Legal operand
Analyzing operand: t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1
Legal operand
Legally typed node: t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1

Legalizing node: t11: ch = CopyToReg t0, Register:i64 %0, t9
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1
Legal operand
Legally typed node: t11: ch = CopyToReg t0, Register:i64 %0, t9

Legalizing node: t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>
Analyzing result type: ch
Legal result type
Analyzing operand: t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1
Legal operand
Analyzing operand: t13: i64 = TargetFrameIndex<0>
Legal operand
Legally typed node: t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>

Legalizing node: t18: ch = store<(store 2 into %ir.4, align 8)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64
Analyzing result type: ch
Legal result type
Analyzing operand: t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>
Legal operand
Analyzing operand: t15: i16 = Constant<9>
Legal operand
Analyzing operand: t12: i64 = FrameIndex<0>
Legal operand
Analyzing operand: t17: i64 = undef
Legal operand
Legally typed node: t18: ch = store<(store 2 into %ir.4, align 8)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64

Legalizing node: t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t18: ch = store<(store 2 into %ir.4, align 8)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64
Legal operand
Analyzing operand: t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1
Legal operand
Analyzing operand: t17: i64 = undef
Legal operand
Legally typed node: t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64

Legalizing node: t21: ch = CopyToReg t0, Register:i64 %1, t19
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64
Legal operand
Legally typed node: t21: ch = CopyToReg t0, Register:i64 %1, t19

Legalizing node: t27: ch = TokenFactor t11, t21, t18
Analyzing result type: ch
Legal result type
Analyzing operand: t11: ch = CopyToReg t0, Register:i64 %0, t9
Legal operand
Analyzing operand: t21: ch = CopyToReg t0, Register:i64 %1, t19
Legal operand
Analyzing operand: t18: ch = store<(store 2 into %ir.4, align 8)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64
Legal operand
Legally typed node: t27: ch = TokenFactor t11, t21, t18

Legalizing node: t26: i1 = setcc t19, t24, seteq:ch
Analyzing result type: i1
Promote integer result: t26: i1 = setcc t19, t24, seteq:ch

Creating new node: t32: i8 = setcc t19, t24, seteq:ch
Legalizing node: t29: ch = brcond t27, t26, BasicBlock:ch< 0x7f9e6a81ee70>
Analyzing result type: ch
Legal result type
Analyzing operand: t27: ch = TokenFactor t11, t21, t18
Legal operand
Analyzing operand: t26: i1 = setcc t19, t24, seteq:ch
Promote integer operand: t29: ch = brcond t27, t26, BasicBlock:ch< 0x7f9e6a81ee70>

Creating new node: t33: i8 = zero_extend t26
Legalizing node: t33: i8 = zero_extend t26
Analyzing result type: i8
Legal result type
Analyzing operand: t26: i1 = setcc t19, t24, seteq:ch
Promote integer operand: t33: i8 = zero_extend t26

Creating constant: t34: i8 = Constant<1>
Creating new node: t35: i8 = and t32, Constant:i8<1>
Legalizing node: t34: i8 = Constant<1>
Analyzing result type: i8
Legal result type
Legally typed node: t34: i8 = Constant<1>

Legalizing node: t32: i8 = setcc t19, t24, seteq:ch
Analyzing result type: i8
Legal result type
Analyzing operand: t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64
Legal operand
Analyzing operand: t24: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
Legal operand
Analyzing operand: t25: ch = seteq
Legal operand
Legally typed node: t32: i8 = setcc t19, t24, seteq:ch

Legalizing node: t35: i8 = and t32, Constant:i8<1>
Analyzing result type: i8
Legal result type
Analyzing operand: t32: i8 = setcc t19, t24, seteq:ch
Legal operand
Analyzing operand: t34: i8 = Constant<1>
Legal operand
Legally typed node: t35: i8 = and t32, Constant:i8<1>

Legalizing node: t29: ch = brcond t27, t35, BasicBlock:ch< 0x7f9e6a81ee70>
Analyzing result type: ch
Legal result type
Analyzing operand: t27: ch = TokenFactor t11, t21, t18
Legal operand
Analyzing operand: t35: i8 = and t32, Constant:i8<1>
Legal operand
Analyzing operand: t28: ch = BasicBlock< 0x7f9e6a81ee70>
Legal operand
Legally typed node: t29: ch = brcond t27, t35, BasicBlock:ch< 0x7f9e6a81ee70>

Legalizing node: t31: ch = br t29, BasicBlock:ch< 0x7f9e6a81ef38>
Analyzing result type: ch
Legal result type
Analyzing operand: t29: ch = brcond t27, t35, BasicBlock:ch< 0x7f9e6a81ee70>
Legal operand
Analyzing operand: t30: ch = BasicBlock< 0x7f9e6a81ef38>
Legal operand
Legally typed node: t31: ch = br t29, BasicBlock:ch< 0x7f9e6a81ef38>

Legalizing node: t65535: ch = handlenode t31
Analyzing result type: ch
Legal result type
Analyzing operand: t31: ch = br t29, BasicBlock:ch< 0x7f9e6a81ef38>
Legal operand
Legally typed node: t65535: ch = handlenode t31

Type-legalized selection DAG: %bb.0 '$s7partial1gSbyF:'
SelectionDAG has 32 nodes:
  t0: ch = EntryToken
    t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped
  t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1
  t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1
    t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>
  t18: ch = store<(store 2 into %ir.4, align 8)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64
  t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64
        t11: ch = CopyToReg t0, Register:i64 %0, t9
        t21: ch = CopyToReg t0, Register:i64 %1, t19
      t27: ch = TokenFactor t11, t21, t18
          t24: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
        t32: i8 = setcc t19, t24, seteq:ch
      t35: i8 = and t32, Constant:i8<1>
    t29: ch = brcond t27, t35, BasicBlock:ch< 0x7f9e6a81ee70>
  t31: ch = br t29, BasicBlock:ch< 0x7f9e6a81ef38>



Combining: t35: i8 = and t32, Constant:i8<1>

Replacing.2 t35: i8 = and t32, Constant:i8<1>

With: t32: i8 = setcc t19, t24, seteq:ch


Combining: t32: i8 = setcc t19, t24, seteq:ch

Combining: t31: ch = br t29, BasicBlock:ch< 0x7f9e6a81ef38>

Combining: t30: ch = BasicBlock< 0x7f9e6a81ef38>

Combining: t29: ch = brcond t27, t32, BasicBlock:ch< 0x7f9e6a81ee70>

Combining: t28: ch = BasicBlock< 0x7f9e6a81ee70>

Combining: t27: ch = TokenFactor t11, t21, t18

Combining: t25: ch = seteq

Combining: t24: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>

Combining: t23: i64 = Constant<16>

Combining: t22: i64 = GlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0

Combining: t21: ch = CopyToReg t0, Register:i64 %1, t19

Combining: t20: i64 = Register %1

Combining: t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64

Combining: t18: ch = store<(store 2 into %ir.4, align 8)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64

Combining: t17: i64 = undef

Combining: t15: i16 = Constant<9>

Combining: t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>

Combining: t13: i64 = TargetFrameIndex<0>

Combining: t12: i64 = FrameIndex<0>

Combining: t11: ch = CopyToReg t0, Register:i64 %0, t9

Combining: t10: i64 = Register %0

Combining: t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1

Combining: t8: i64 = Register $rax

Combining: t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1

Combining: t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped

Combining: t5: Untyped = RegisterMask

Combining: t4: i64 = TargetGlobalAddress<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0

Combining: t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t2: i64 = TargetConstant<0>

Combining: t0: ch = EntryToken
Optimized type-legalized selection DAG: %bb.0 '$s7partial1gSbyF:'
SelectionDAG has 30 nodes:
  t0: ch = EntryToken
    t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped
  t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1
  t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1
    t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>
  t18: ch = store<(store 2 into %ir.4, align 8)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64
  t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64
        t11: ch = CopyToReg t0, Register:i64 %0, t9
        t21: ch = CopyToReg t0, Register:i64 %1, t19
      t27: ch = TokenFactor t11, t21, t18
        t24: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
      t32: i8 = setcc t19, t24, seteq:ch
    t29: ch = brcond t27, t32, BasicBlock:ch< 0x7f9e6a81ee70>
  t31: ch = br t29, BasicBlock:ch< 0x7f9e6a81ef38>



Legalizing: t31: ch = br t29, BasicBlock:ch< 0x7f9e6a81ef38>
Legal node: nothing to do

Legalizing: t29: ch = brcond t27, t32, BasicBlock:ch< 0x7f9e6a81ee70>
Trying custom legalization
Creating new node: t36: i64,i32 = X86ISD::SUB t19, t24
Creating constant: t37: i8 = Constant<4>
Creating new node: t38: i8 = X86ISD::SETCC Constant:i8<4>, t36:1
Creating new node: t39: ch = X86ISD::BRCOND t27, BasicBlock:ch< 0x7f9e6a81ee70>, Constant:i8<4>, t36:1
Successfully custom legalized node
 ... replacing: t29: ch = brcond t27, t32, BasicBlock:ch< 0x7f9e6a81ee70>
     with:      t39: ch = X86ISD::BRCOND t27, BasicBlock:ch< 0x7f9e6a81ee70>, Constant:i8<4>, t36:1

Legalizing: t27: ch = TokenFactor t11, t21, t18
Legal node: nothing to do

Legalizing: t21: ch = CopyToReg t0, Register:i64 %1, t19
Legal node: nothing to do

Legalizing: t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64
Legalizing non-extending load operation

Legalizing: t18: ch = store<(store 2 into %ir.4, align 8)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t11: ch = CopyToReg t0, Register:i64 %0, t9
Legal node: nothing to do

Legalizing: t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>
Legal node: nothing to do

Legalizing: t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1
Legal node: nothing to do

Legalizing: t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1

Legalizing: t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped
Legal node: nothing to do

Legalizing: t24: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
Legal node: nothing to do

Legalizing: t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t30: ch = BasicBlock< 0x7f9e6a81ef38>
Legal node: nothing to do

Legalizing: t28: ch = BasicBlock< 0x7f9e6a81ee70>
Legal node: nothing to do

Legalizing: t23: i64 = Constant<16>
Legal node: nothing to do

Legalizing: t22: i64 = GlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Trying custom legalization
Creating new node: t41: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Successfully custom legalized node
 ... replacing: t22: i64 = GlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
     with:      t41: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0

Legalizing: t20: i64 = Register %1

Legalizing: t17: i64 = undef
Legal node: nothing to do

Legalizing: t15: i16 = Constant<9>
Legal node: nothing to do

Legalizing: t13: i64 = TargetFrameIndex<0>
Legal node: nothing to do

Legalizing: t12: i64 = FrameIndex<0>
Legal node: nothing to do

Legalizing: t10: i64 = Register %0

Legalizing: t8: i64 = Register $rax

Legalizing: t5: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t4: i64 = TargetGlobalAddress<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0
Legal node: nothing to do

Legalizing: t2: i64 = TargetConstant<0>

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t41: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Legal node: nothing to do

Legalizing: t40: i64 = TargetGlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Legal node: nothing to do

Legalizing: t39: ch = X86ISD::BRCOND t27, BasicBlock:ch< 0x7f9e6a81ee70>, Constant:i8<4>, t36:1
Legal node: nothing to do

Legalizing: t37: i8 = Constant<4>
Legal node: nothing to do

Legalizing: t36: i64,i32 = X86ISD::SUB t19, t24
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1gSbyF:'
SelectionDAG has 31 nodes:
  t0: ch = EntryToken
    t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped
  t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1
  t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1
    t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>
  t18: ch = store<(store 2 into %ir.4, align 8)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64
  t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64
        t11: ch = CopyToReg t0, Register:i64 %0, t9
        t21: ch = CopyToReg t0, Register:i64 %1, t19
      t27: ch = TokenFactor t11, t21, t18
          t41: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
        t24: i64 = add nuw t41, Constant:i64<16>
      t36: i64,i32 = X86ISD::SUB t19, t24
    t39: ch = X86ISD::BRCOND t27, BasicBlock:ch< 0x7f9e6a81ee70>, Constant:i8<4>, t36:1
  t31: ch = br t39, BasicBlock:ch< 0x7f9e6a81ef38>



Legalizing: t41: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Legal node: nothing to do

Combining: t41: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0

Legalizing: t40: i64 = TargetGlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Legal node: nothing to do

Combining: t40: i64 = TargetGlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0

Legalizing: t39: ch = X86ISD::BRCOND t27, BasicBlock:ch< 0x7f9e6a81ee70>, Constant:i8<4>, t36:1
Legal node: nothing to do

Combining: t39: ch = X86ISD::BRCOND t27, BasicBlock:ch< 0x7f9e6a81ee70>, Constant:i8<4>, t36:1

Legalizing: t37: i8 = Constant<4>
Legal node: nothing to do

Combining: t37: i8 = Constant<4>

Legalizing: t36: i64,i32 = X86ISD::SUB t19, t24
Legal node: nothing to do

Combining: t36: i64,i32 = X86ISD::SUB t19, t24

Legalizing: t31: ch = br t39, BasicBlock:ch< 0x7f9e6a81ef38>
Legal node: nothing to do

Combining: t31: ch = br t39, BasicBlock:ch< 0x7f9e6a81ef38>

Legalizing: t27: ch = TokenFactor t11, t21, t18
Legal node: nothing to do

Combining: t27: ch = TokenFactor t11, t21, t18

Legalizing: t21: ch = CopyToReg t0, Register:i64 %1, t19
Legal node: nothing to do

Combining: t21: ch = CopyToReg t0, Register:i64 %1, t19

Legalizing: t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64
Legalizing non-extending load operation

Combining: t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64

Legalizing: t18: ch = store<(store 2 into %ir.4, align 8)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t18: ch = store<(store 2 into %ir.4, align 8)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64

Legalizing: t11: ch = CopyToReg t0, Register:i64 %0, t9
Legal node: nothing to do

Combining: t11: ch = CopyToReg t0, Register:i64 %0, t9

Legalizing: t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>
Legal node: nothing to do

Combining: t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>

Legalizing: t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1
Legal node: nothing to do

Combining: t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1

Legalizing: t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1

Combining: t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1

Legalizing: t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped
Legal node: nothing to do

Combining: t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped

Legalizing: t24: i64 = add nuw t41, Constant:i64<16>
Legal node: nothing to do

Combining: t24: i64 = add nuw t41, Constant:i64<16>

Legalizing: t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t30: ch = BasicBlock< 0x7f9e6a81ef38>
Legal node: nothing to do

Combining: t30: ch = BasicBlock< 0x7f9e6a81ef38>

Legalizing: t28: ch = BasicBlock< 0x7f9e6a81ee70>
Legal node: nothing to do

Combining: t28: ch = BasicBlock< 0x7f9e6a81ee70>

Legalizing: t23: i64 = Constant<16>
Legal node: nothing to do

Combining: t23: i64 = Constant<16>

Legalizing: t20: i64 = Register %1

Combining: t20: i64 = Register %1

Legalizing: t17: i64 = undef
Legal node: nothing to do

Combining: t17: i64 = undef

Legalizing: t15: i16 = Constant<9>
Legal node: nothing to do

Combining: t15: i16 = Constant<9>

Legalizing: t13: i64 = TargetFrameIndex<0>
Legal node: nothing to do

Combining: t13: i64 = TargetFrameIndex<0>

Legalizing: t12: i64 = FrameIndex<0>
Legal node: nothing to do

Combining: t12: i64 = FrameIndex<0>

Legalizing: t10: i64 = Register %0

Combining: t10: i64 = Register %0

Legalizing: t8: i64 = Register $rax

Combining: t8: i64 = Register $rax

Legalizing: t5: Untyped = RegisterMask
Legal node: nothing to do

Combining: t5: Untyped = RegisterMask

Legalizing: t4: i64 = TargetGlobalAddress<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0
Legal node: nothing to do

Combining: t4: i64 = TargetGlobalAddress<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0

Legalizing: t2: i64 = TargetConstant<0>

Combining: t2: i64 = TargetConstant<0>

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1gSbyF:'
SelectionDAG has 31 nodes:
  t0: ch = EntryToken
    t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped
  t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1
  t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1
    t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>
  t18: ch = store<(store 2 into %ir.4, align 8)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64
  t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64
        t11: ch = CopyToReg t0, Register:i64 %0, t9
        t21: ch = CopyToReg t0, Register:i64 %1, t19
      t27: ch = TokenFactor t11, t21, t18
          t41: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
        t24: i64 = add nuw t41, Constant:i64<16>
      t36: i64,i32 = X86ISD::SUB t19, t24
    t39: ch = X86ISD::BRCOND t27, BasicBlock:ch< 0x7f9e6a81ee70>, Constant:i8<4>, t36:1
  t31: ch = br t39, BasicBlock:ch< 0x7f9e6a81ef38>


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t31: ch = br t39, BasicBlock:ch< 0x7f9e6a81ef38>
ISEL: Starting pattern match
  Initial Opcode index to 131331
  Morphed node: t31: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ef38>, t39
ISEL: Match complete!

ISEL: Starting selection on root node: t39: ch = X86ISD::BRCOND t27, BasicBlock:ch< 0x7f9e6a81ee70>, Constant:i8<4>, t36:1
ISEL: Starting pattern match
  Initial Opcode index to 130713
Creating constant: t42: i8 = TargetConstant<4>
Creating new node: t44: ch,glue = CopyToReg t27, Register:i32 $eflags, t36:1
  Morphed node: t39: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81ee70>, TargetConstant:i8<4>, t44, t44:1
ISEL: Match complete!

ISEL: Starting selection on root node: t27: ch = TokenFactor t11, t21, t18

ISEL: Starting selection on root node: t21: ch = CopyToReg t0, Register:i64 %1, t19

ISEL: Starting selection on root node: t36: i64,i32 = X86ISD::SUB t19, t24
ISEL: Starting pattern match
  Initial Opcode index to 89709
  Match failed at index 89716
  Continuing at 89819
  Match failed at index 89820
  Continuing at 89866
  Match failed at index 89867
  Continuing at 89930
  Continuing at 89931
  Match failed at index 89932
  Continuing at 89977
  Skipped scope entry (due to false predicate) at index 89987, continuing at 90049
  Match failed at index 90053
  Continuing at 90067
  Match failed at index 90071
  Continuing at 90085
  Match failed at index 90089
  Continuing at 90103
  Match failed at index 90104
  Continuing at 90123
  Match failed at index 90124
  Continuing at 90143
  Continuing at 90144
  Match failed at index 90145
  Continuing at 90156
  Match failed at index 90157
  Continuing at 90168
  Match failed at index 90169
  Continuing at 90180
  Morphed node: t36: i64,i32 = SUB64rr t19, t24
ISEL: Match complete!

ISEL: Starting selection on root node: t19: i64,ch = load<(load 8 from %ir.5)> t18, t9, undef:i64
ISEL: Starting pattern match
  Initial Opcode index to 114898
  Match failed at index 114907
  Continuing at 114924
  Match failed at index 114927
  Continuing at 114944
  Match failed at index 114947
  Continuing at 114964
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t45: i8 = TargetConstant<1>
Creating constant: t47: i32 = TargetConstant<0>
  Morphed node: t19: i64,ch = MOV64rm<Mem:(load 8 from %ir.5)> t9, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t18
ISEL: Match complete!

ISEL: Starting selection on root node: t18: ch = store<(store 2 into %ir.4, align 8)> t14, Constant:i16<9>, FrameIndex:i64<0>, undef:i64
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 13, continuing at 80
  Skipped scope entry (due to false predicate) at index 81, continuing at 148
  Skipped scope entry (due to false predicate) at index 149, continuing at 198
  Skipped scope entry (due to false predicate) at index 199, continuing at 248
  Skipped scope entry (due to false predicate) at index 249, continuing at 316
  Skipped scope entry (due to false predicate) at index 317, continuing at 366
  Skipped scope entry (due to false predicate) at index 367, continuing at 393
  Skipped scope entry (due to false predicate) at index 394, continuing at 420
  Skipped scope entry (due to false predicate) at index 421, continuing at 470
  Skipped scope entry (due to false predicate) at index 471, continuing at 520
  Skipped scope entry (due to false predicate) at index 521, continuing at 570
  Skipped scope entry (due to false predicate) at index 571, continuing at 638
  Skipped scope entry (due to false predicate) at index 639, continuing at 706
  Skipped scope entry (due to false predicate) at index 707, continuing at 774
  Skipped scope entry (due to false predicate) at index 775, continuing at 803
  Skipped scope entry (due to false predicate) at index 804, continuing at 832
  Skipped scope entry (due to false predicate) at index 833, continuing at 861
  Skipped scope entry (due to false predicate) at index 862, continuing at 890
  Skipped scope entry (due to false predicate) at index 891, continuing at 919
  Skipped scope entry (due to false predicate) at index 920, continuing at 948
  Skipped scope entry (due to false predicate) at index 949, continuing at 986
  Skipped scope entry (due to false predicate) at index 987, continuing at 1024
  Match failed at index 11
  Continuing at 1025
  Match failed at index 1028
  Continuing at 11584
  Match failed at index 11588
  Continuing at 12650
  Match failed at index 12653
  Continuing at 13044
  Match failed at index 13045
  Continuing at 13142
  Match failed at index 13144
  Continuing at 13277
  TypeSwitch[i16] from 13280 to 13311
Creating constant: t49: i16 = TargetConstant<9>
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
  Morphed node: t18: ch = MOV16mi<Mem:(store 2 into %ir.4, align 8)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, TargetConstant:i16<9>, t14
ISEL: Match complete!

ISEL: Starting selection on root node: t11: ch = CopyToReg t0, Register:i64 %0, t9

ISEL: Starting selection on root node: t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>

ISEL: Starting selection on root node: t9: i64,ch,glue = CopyFromReg t7, Register:i64 $rax, t7:1

ISEL: Starting selection on root node: t7: ch,glue = callseq_end t6, TargetConstant:i64<0>, TargetConstant:i64<0>, t6:1
ISEL: Starting pattern match
  Initial Opcode index to 130027
  Skipped scope entry (due to false predicate) at index 130043, continuing at 130054
  Morphed node: t7: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t6, t6:1
ISEL: Match complete!

ISEL: Starting selection on root node: t24: i64 = add nuw t41, Constant:i64<16>
ISEL: Starting pattern match
  Initial Opcode index to 96740
  Match failed at index 96744
  Continuing at 96847
  Match failed at index 96849
  Continuing at 96956
  TypeSwitch[i64] from 96958 to 96999
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg t51: i64 = Register $rip
 Scale 1
IndexReg nul
 Disp 0
GV @"$s7partial1ACMf" = internal global <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }> <{ void (%T7partial1AC*)* @"$s7partial1ACfD", i8** @"$sBoWV", i64 ptrtoint (%objc_class* @"$s7partial1ACMm" to i64), %objc_class* @"OBJC_CLASS_$__TtCs12_SwiftObject", %swift.opaque* @_objc_empty_cache, %swift.opaque* null, i64 add (i64 ptrtoint ({ i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8* }* @_DATA__TtC7partial1A to i64), i64 2), i32 2, i32 0, i32 16, i16 7, i16 0, i32 112, i32 16, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>* @"$s7partial1ACMn", i8* null, %T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC", i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* @"$s7partial1AC1fySbxlF" }>, align 8
 CP nul
ES nul MCSym nul JT-1 Align0
  Morphed node: t24: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> + 16, Register:i16 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t6: ch,glue = X86ISD::CALL t3, TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped
ISEL: Starting pattern match
  Initial Opcode index to 91510
  Match failed at index 91515
  Continuing at 91598
  OpcodeSwitch from 91604 to 91608
  TypeSwitch[i64] from 91608 to 91611
  Morphed node: t6: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped, t3
ISEL: Match complete!

ISEL: Starting selection on root node: t3: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
ISEL: Starting pattern match
  Initial Opcode index to 130070
  Skipped scope entry (due to false predicate) at index 130085, continuing at 130100
  Morphed node: t3: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t30: ch = BasicBlock< 0x7f9e6a81ef38>

ISEL: Starting selection on root node: t28: ch = BasicBlock< 0x7f9e6a81ee70>

ISEL: Starting selection on root node: t20: i64 = Register %1

ISEL: Starting selection on root node: t13: i64 = TargetFrameIndex<0>

ISEL: Starting selection on root node: t10: i64 = Register %0

ISEL: Starting selection on root node: t8: i64 = Register $rax

ISEL: Starting selection on root node: t5: Untyped = RegisterMask

ISEL: Starting selection on root node: t4: i64 = TargetGlobalAddress<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0

ISEL: Starting selection on root node: t2: i64 = TargetConstant<0>

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1gSbyF:'
SelectionDAG has 35 nodes:
  t0: ch = EntryToken
    t3: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0
  t6: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped, t3:1
  t7: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t6, t6:1
  t9: i64,ch,glue = CopyFromReg t7:1, Register:i64 $rax, t7:2
    t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>
  t18: ch = MOV16mi<Mem:(store 2 into %ir.4, align 8)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, TargetConstant:i16<9>, t14
  t19: i64,ch = MOV64rm<Mem:(load 8 from %ir.5)> t9, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t18
      t11: ch = CopyToReg t0, Register:i64 %0, t9
      t21: ch = CopyToReg t0, Register:i64 %1, t19
    t27: ch = TokenFactor t11, t21, t18
      t24: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> + 16, Register:i16 $noreg
    t36: i64,i32 = SUB64rr t19, t24
  t44: ch,glue = CopyToReg t27, Register:i32 $eflags, t36:1
  t50: i32 = Register $noreg
    t39: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81ee70>, TargetConstant:i8<4>, t44, t44:1
  t31: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ef38>, t39


********** List Scheduling %bb.0 '' **********
SU(0): t31: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ef38>, t39

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Barrier
SU(1): t39: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81ee70>, TargetConstant:i8<4>, t44, t44:1

    t44: ch,glue = CopyToReg t27, Register:i32 $eflags, t36:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(9): Ord  Latency=0 Barrier
    SU(2): Data Latency=1 Reg=$eflags
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(2): t36: i64,i32 = SUB64rr t19, t24

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1
    SU(3): Data Latency=1
  Successors:
    SU(1): Data Latency=1 Reg=$eflags
SU(3): t24: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> + 16, Register:i16 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Data Latency=1
SU(4): t19: i64,ch = MOV64rm<Mem:(load 8 from %ir.5)> t9, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t18

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(7): Data Latency=1
    SU(5): Ord  Latency=1 Barrier
  Successors:
    SU(2): Data Latency=1
    SU(10): Data Latency=1
SU(5): t18: ch = MOV16mi<Mem:(store 2 into %ir.4, align 8)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, TargetConstant:i16<9>, t14

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 4
  Predecessors:
    SU(6): Ord  Latency=1 Barrier
  Successors:
    SU(4): Ord  Latency=1 Barrier
    SU(9): Ord  Latency=1 Barrier
SU(6): t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(7): Ord  Latency=1 Barrier
  Successors:
    SU(5): Ord  Latency=1 Barrier
SU(7): t9: i64,ch,glue = CopyFromReg t7:1, Register:i64 $rax, t7:2

    t6: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped, t3:1

    t7: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t6, t6:1

  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(8): Ord  Latency=1 Barrier
  Successors:
    SU(4): Data Latency=1
    SU(6): Ord  Latency=1 Barrier
    SU(11): Data Latency=1
SU(8): t3: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(7): Ord  Latency=1 Barrier
SU(9): t27: ch = TokenFactor t11, t21, t18

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(11): Ord  Latency=1 Barrier
    SU(10): Ord  Latency=1 Barrier
    SU(5): Ord  Latency=1 Barrier
  Successors:
    SU(1): Ord  Latency=0 Barrier
SU(10): t21: ch = CopyToReg t0, Register:i64 %1, t19

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1
  Successors:
    SU(9): Ord  Latency=1 Barrier
SU(11): t11: ch = CopyToReg t0, Register:i64 %0, t9

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(7): Data Latency=1
  Successors:
    SU(9): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t31: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ef38>, t39


*** Scheduling [0]: SU(0): t31: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ef38>, t39


Examining Available:
Height 1: SU(1): t39: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81ee70>, TargetConstant:i8<4>, t44, t44:1

    t44: ch,glue = CopyToReg t27, Register:i32 $eflags, t36:1


*** Scheduling [1]: SU(1): t39: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81ee70>, TargetConstant:i8<4>, t44, t44:1

    t44: ch,glue = CopyToReg t27, Register:i32 $eflags, t36:1


Examining Available:
Height 1: SU(9): t27: ch = TokenFactor t11, t21, t18

Height 2: SU(2): t36: i64,i32 = SUB64rr t19, t24


*** Scheduling [2]: SU(9): t27: ch = TokenFactor t11, t21, t18


Examining Available:
Height 2: SU(2): t36: i64,i32 = SUB64rr t19, t24

Height 3: SU(10): t21: ch = CopyToReg t0, Register:i64 %1, t19

Height 3: SU(11): t11: ch = CopyToReg t0, Register:i64 %0, t9


*** Scheduling [3]: SU(2): t36: i64,i32 = SUB64rr t19, t24


Examining Available:
Height 4: SU(3): t24: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> + 16, Register:i16 $noreg

Height 3: SU(10): t21: ch = CopyToReg t0, Register:i64 %1, t19

Height 3: SU(11): t11: ch = CopyToReg t0, Register:i64 %0, t9


*** Scheduling [4]: SU(3): t24: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> + 16, Register:i16 $noreg


Examining Available:
Height 3: SU(10): t21: ch = CopyToReg t0, Register:i64 %1, t19

Height 3: SU(11): t11: ch = CopyToReg t0, Register:i64 %0, t9


*** Scheduling [5]: SU(10): t21: ch = CopyToReg t0, Register:i64 %1, t19


Examining Available:
Height 6: SU(4): t19: i64,ch = MOV64rm<Mem:(load 8 from %ir.5)> t9, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t18

Height 3: SU(11): t11: ch = CopyToReg t0, Register:i64 %0, t9


*** Scheduling [6]: SU(4): t19: i64,ch = MOV64rm<Mem:(load 8 from %ir.5)> t9, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t18


Examining Available:
Height 7: SU(5): t18: ch = MOV16mi<Mem:(store 2 into %ir.4, align 8)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, TargetConstant:i16<9>, t14

Height 3: SU(11): t11: ch = CopyToReg t0, Register:i64 %0, t9


*** Scheduling [7]: SU(5): t18: ch = MOV16mi<Mem:(store 2 into %ir.4, align 8)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, TargetConstant:i16<9>, t14


Examining Available:
Height 8: SU(6): t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>

Height 3: SU(11): t11: ch = CopyToReg t0, Register:i64 %0, t9


*** Scheduling [8]: SU(6): t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>


Examining Available:
Height 3: SU(11): t11: ch = CopyToReg t0, Register:i64 %0, t9


*** Scheduling [9]: SU(11): t11: ch = CopyToReg t0, Register:i64 %0, t9


Examining Available:
Height 10: SU(7): t9: i64,ch,glue = CopyFromReg t7:1, Register:i64 $rax, t7:2

    t6: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped, t3:1

    t7: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t6, t6:1


*** Scheduling [10]: SU(7): t9: i64,ch,glue = CopyFromReg t7:1, Register:i64 $rax, t7:2

    t6: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped, t3:1

    t7: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t6, t6:1


Examining Available:
Height 11: SU(8): t3: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0


*** Scheduling [11]: SU(8): t3: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

*** Final schedule ***
SU(8): t3: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

SU(7): t9: i64,ch,glue = CopyFromReg t7:1, Register:i64 $rax, t7:2

    t6: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%T7partial1AC* ()* @"$s7partial8makeAorBAA1ACyF"> 0, RegisterMask:Untyped, t3:1

    t7: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t6, t6:1

SU(11): t11: ch = CopyToReg t0, Register:i64 %0, t9

SU(6): t14: ch = lifetime.start<0 to 2> t9:1, TargetFrameIndex:i64<0>

SU(5): t18: ch = MOV16mi<Mem:(store 2 into %ir.4, align 8)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, TargetConstant:i16<9>, t14

SU(4): t19: i64,ch = MOV64rm<Mem:(load 8 from %ir.5)> t9, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t18

SU(10): t21: ch = CopyToReg t0, Register:i64 %1, t19

SU(3): t24: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> + 16, Register:i16 $noreg

SU(2): t36: i64,i32 = SUB64rr t19, t24

SU(9): t27: ch = TokenFactor t11, t21, t18

SU(1): t39: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81ee70>, TargetConstant:i8<4>, t44, t44:1

    t44: ch,glue = CopyToReg t27, Register:i32 $eflags, t36:1

SU(0): t31: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ef38>, t39


Total amount of phi nodes to update: 0
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %1
Creating constant: t4: i64 = Constant<16>
Creating new node: t5: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
Creating new node: t7: i1 = setcc t2, t5, seteq:ch
Creating constant: t8: i1 = Constant<-1>
Creating new node: t9: i1 = xor t7, Constant:i1<-1>
Creating new node: t11: ch = brcond t0, t9, BasicBlock:ch< 0x7f9e6a81f0c8>
Creating new node: t13: ch = br t11, BasicBlock:ch< 0x7f9e6a81f000>
Initial selection DAG: %bb.3 '$s7partial1gSbyF:'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
          t2: i64,ch = CopyFromReg t0, Register:i64 %1
          t5: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
        t7: i1 = setcc t2, t5, seteq:ch
      t9: i1 = xor t7, Constant:i1<-1>
    t11: ch = brcond t0, t9, BasicBlock:ch< 0x7f9e6a81f0c8>
  t13: ch = br t11, BasicBlock:ch< 0x7f9e6a81f000>



Combining: t13: ch = br t11, BasicBlock:ch< 0x7f9e6a81f000>

Combining: t12: ch = BasicBlock< 0x7f9e6a81f000>

Combining: t11: ch = brcond t0, t9, BasicBlock:ch< 0x7f9e6a81f0c8>
Creating new node: t15: i1 = setcc t2, t5, setne:ch
Creating new node: t16: ch = brcond t0, t15, BasicBlock:ch< 0x7f9e6a81f0c8>
 ... into: t16: ch = brcond t0, t15, BasicBlock:ch< 0x7f9e6a81f0c8>

Combining: t13: ch = br t16, BasicBlock:ch< 0x7f9e6a81f000>

Combining: t16: ch = brcond t0, t15, BasicBlock:ch< 0x7f9e6a81f0c8>

Combining: t15: i1 = setcc t2, t5, setne:ch

Combining: t14: ch = setne

Combining: t10: ch = BasicBlock< 0x7f9e6a81f0c8>

Combining: t5: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>

Combining: t4: i64 = Constant<16>

Combining: t3: i64 = GlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %1

Combining: t1: i64 = Register %1

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.3 '$s7partial1gSbyF:'
SelectionDAG has 12 nodes:
  t0: ch = EntryToken
        t2: i64,ch = CopyFromReg t0, Register:i64 %1
        t5: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
      t15: i1 = setcc t2, t5, setne:ch
    t16: ch = brcond t0, t15, BasicBlock:ch< 0x7f9e6a81f0c8>
  t13: ch = br t16, BasicBlock:ch< 0x7f9e6a81f000>


Legalizing node: t14: ch = setne
Analyzing result type: ch
Legal result type
Legally typed node: t14: ch = setne

Legalizing node: t12: ch = BasicBlock< 0x7f9e6a81f000>
Analyzing result type: ch
Legal result type
Legally typed node: t12: ch = BasicBlock< 0x7f9e6a81f000>

Legalizing node: t10: ch = BasicBlock< 0x7f9e6a81f0c8>
Analyzing result type: ch
Legal result type
Legally typed node: t10: ch = BasicBlock< 0x7f9e6a81f0c8>

Legalizing node: t4: i64 = Constant<16>
Analyzing result type: i64
Legal result type
Legally typed node: t4: i64 = Constant<16>

Legalizing node: t3: i64 = GlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t3: i64 = GlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0

Legalizing node: t5: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
Analyzing result type: i64
Legal result type
Analyzing operand: t3: i64 = GlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Legal operand
Analyzing operand: t4: i64 = Constant<16>
Legal operand
Legally typed node: t5: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>

Legalizing node: t1: i64 = Register %1
Ignoring node results
Legally typed node: t1: i64 = Register %1

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %1
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %1

Legalizing node: t15: i1 = setcc t2, t5, setne:ch
Analyzing result type: i1
Promote integer result: t15: i1 = setcc t2, t5, setne:ch

Creating new node: t17: i8 = setcc t2, t5, setne:ch
Legalizing node: t16: ch = brcond t0, t15, BasicBlock:ch< 0x7f9e6a81f0c8>
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t15: i1 = setcc t2, t5, setne:ch
Promote integer operand: t16: ch = brcond t0, t15, BasicBlock:ch< 0x7f9e6a81f0c8>

Creating new node: t18: i8 = zero_extend t15
Legalizing node: t18: i8 = zero_extend t15
Analyzing result type: i8
Legal result type
Analyzing operand: t15: i1 = setcc t2, t5, setne:ch
Promote integer operand: t18: i8 = zero_extend t15

Creating constant: t19: i8 = Constant<1>
Creating new node: t20: i8 = and t17, Constant:i8<1>
Legalizing node: t19: i8 = Constant<1>
Analyzing result type: i8
Legal result type
Legally typed node: t19: i8 = Constant<1>

Legalizing node: t17: i8 = setcc t2, t5, setne:ch
Analyzing result type: i8
Legal result type
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %1
Legal operand
Analyzing operand: t5: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
Legal operand
Analyzing operand: t14: ch = setne
Legal operand
Legally typed node: t17: i8 = setcc t2, t5, setne:ch

Legalizing node: t20: i8 = and t17, Constant:i8<1>
Analyzing result type: i8
Legal result type
Analyzing operand: t17: i8 = setcc t2, t5, setne:ch
Legal operand
Analyzing operand: t19: i8 = Constant<1>
Legal operand
Legally typed node: t20: i8 = and t17, Constant:i8<1>

Legalizing node: t16: ch = brcond t0, t20, BasicBlock:ch< 0x7f9e6a81f0c8>
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t20: i8 = and t17, Constant:i8<1>
Legal operand
Analyzing operand: t10: ch = BasicBlock< 0x7f9e6a81f0c8>
Legal operand
Legally typed node: t16: ch = brcond t0, t20, BasicBlock:ch< 0x7f9e6a81f0c8>

Legalizing node: t13: ch = br t16, BasicBlock:ch< 0x7f9e6a81f000>
Analyzing result type: ch
Legal result type
Analyzing operand: t16: ch = brcond t0, t20, BasicBlock:ch< 0x7f9e6a81f0c8>
Legal operand
Analyzing operand: t12: ch = BasicBlock< 0x7f9e6a81f000>
Legal operand
Legally typed node: t13: ch = br t16, BasicBlock:ch< 0x7f9e6a81f000>

Legalizing node: t65535: ch = handlenode t13
Analyzing result type: ch
Legal result type
Analyzing operand: t13: ch = br t16, BasicBlock:ch< 0x7f9e6a81f000>
Legal operand
Legally typed node: t65535: ch = handlenode t13

Type-legalized selection DAG: %bb.3 '$s7partial1gSbyF:'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
          t2: i64,ch = CopyFromReg t0, Register:i64 %1
          t5: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
        t17: i8 = setcc t2, t5, setne:ch
      t20: i8 = and t17, Constant:i8<1>
    t16: ch = brcond t0, t20, BasicBlock:ch< 0x7f9e6a81f0c8>
  t13: ch = br t16, BasicBlock:ch< 0x7f9e6a81f000>



Combining: t20: i8 = and t17, Constant:i8<1>

Replacing.2 t20: i8 = and t17, Constant:i8<1>

With: t17: i8 = setcc t2, t5, setne:ch


Combining: t17: i8 = setcc t2, t5, setne:ch

Combining: t16: ch = brcond t0, t17, BasicBlock:ch< 0x7f9e6a81f0c8>

Combining: t14: ch = setne

Combining: t13: ch = br t16, BasicBlock:ch< 0x7f9e6a81f000>

Combining: t12: ch = BasicBlock< 0x7f9e6a81f000>

Combining: t10: ch = BasicBlock< 0x7f9e6a81f0c8>

Combining: t5: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>

Combining: t4: i64 = Constant<16>

Combining: t3: i64 = GlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %1

Combining: t1: i64 = Register %1

Combining: t0: ch = EntryToken
Optimized type-legalized selection DAG: %bb.3 '$s7partial1gSbyF:'
SelectionDAG has 12 nodes:
  t0: ch = EntryToken
        t2: i64,ch = CopyFromReg t0, Register:i64 %1
        t5: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
      t17: i8 = setcc t2, t5, setne:ch
    t16: ch = brcond t0, t17, BasicBlock:ch< 0x7f9e6a81f0c8>
  t13: ch = br t16, BasicBlock:ch< 0x7f9e6a81f000>



Legalizing: t13: ch = br t16, BasicBlock:ch< 0x7f9e6a81f000>
Legal node: nothing to do

Legalizing: t16: ch = brcond t0, t17, BasicBlock:ch< 0x7f9e6a81f0c8>
Trying custom legalization
Creating new node: t21: i64,i32 = X86ISD::SUB t2, t5
Creating constant: t22: i8 = Constant<5>
Creating new node: t23: i8 = X86ISD::SETCC Constant:i8<5>, t21:1
Creating new node: t24: ch = X86ISD::BRCOND t0, BasicBlock:ch< 0x7f9e6a81f0c8>, Constant:i8<5>, t21:1
Successfully custom legalized node
 ... replacing: t16: ch = brcond t0, t17, BasicBlock:ch< 0x7f9e6a81f0c8>
     with:      t24: ch = X86ISD::BRCOND t0, BasicBlock:ch< 0x7f9e6a81f0c8>, Constant:i8<5>, t21:1

Legalizing: t5: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %1
Legal node: nothing to do

Legalizing: t12: ch = BasicBlock< 0x7f9e6a81f000>
Legal node: nothing to do

Legalizing: t10: ch = BasicBlock< 0x7f9e6a81f0c8>
Legal node: nothing to do

Legalizing: t4: i64 = Constant<16>
Legal node: nothing to do

Legalizing: t3: i64 = GlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Trying custom legalization
Creating new node: t26: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Successfully custom legalized node
 ... replacing: t3: i64 = GlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
     with:      t26: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0

Legalizing: t1: i64 = Register %1

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t26: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Legal node: nothing to do

Legalizing: t25: i64 = TargetGlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Legal node: nothing to do

Legalizing: t24: ch = X86ISD::BRCOND t0, BasicBlock:ch< 0x7f9e6a81f0c8>, Constant:i8<5>, t21:1
Legal node: nothing to do

Legalizing: t22: i8 = Constant<5>
Legal node: nothing to do

Legalizing: t21: i64,i32 = X86ISD::SUB t2, t5
Legal node: nothing to do
Legalized selection DAG: %bb.3 '$s7partial1gSbyF:'
SelectionDAG has 13 nodes:
  t0: ch = EntryToken
        t2: i64,ch = CopyFromReg t0, Register:i64 %1
          t26: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
        t5: i64 = add nuw t26, Constant:i64<16>
      t21: i64,i32 = X86ISD::SUB t2, t5
    t24: ch = X86ISD::BRCOND t0, BasicBlock:ch< 0x7f9e6a81f0c8>, Constant:i8<5>, t21:1
  t13: ch = br t24, BasicBlock:ch< 0x7f9e6a81f000>



Legalizing: t26: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Legal node: nothing to do

Combining: t26: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0

Legalizing: t25: i64 = TargetGlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Legal node: nothing to do

Combining: t25: i64 = TargetGlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0

Legalizing: t24: ch = X86ISD::BRCOND t0, BasicBlock:ch< 0x7f9e6a81f0c8>, Constant:i8<5>, t21:1
Legal node: nothing to do

Combining: t24: ch = X86ISD::BRCOND t0, BasicBlock:ch< 0x7f9e6a81f0c8>, Constant:i8<5>, t21:1

Legalizing: t22: i8 = Constant<5>
Legal node: nothing to do

Combining: t22: i8 = Constant<5>

Legalizing: t21: i64,i32 = X86ISD::SUB t2, t5
Legal node: nothing to do

Combining: t21: i64,i32 = X86ISD::SUB t2, t5

Legalizing: t13: ch = br t24, BasicBlock:ch< 0x7f9e6a81f000>
Legal node: nothing to do

Combining: t13: ch = br t24, BasicBlock:ch< 0x7f9e6a81f000>

Legalizing: t5: i64 = add nuw t26, Constant:i64<16>
Legal node: nothing to do

Combining: t5: i64 = add nuw t26, Constant:i64<16>

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %1
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %1

Legalizing: t12: ch = BasicBlock< 0x7f9e6a81f000>
Legal node: nothing to do

Combining: t12: ch = BasicBlock< 0x7f9e6a81f000>

Legalizing: t10: ch = BasicBlock< 0x7f9e6a81f0c8>
Legal node: nothing to do

Combining: t10: ch = BasicBlock< 0x7f9e6a81f0c8>

Legalizing: t4: i64 = Constant<16>
Legal node: nothing to do

Combining: t4: i64 = Constant<16>

Legalizing: t1: i64 = Register %1

Combining: t1: i64 = Register %1

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.3 '$s7partial1gSbyF:'
SelectionDAG has 13 nodes:
  t0: ch = EntryToken
        t2: i64,ch = CopyFromReg t0, Register:i64 %1
          t26: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
        t5: i64 = add nuw t26, Constant:i64<16>
      t21: i64,i32 = X86ISD::SUB t2, t5
    t24: ch = X86ISD::BRCOND t0, BasicBlock:ch< 0x7f9e6a81f0c8>, Constant:i8<5>, t21:1
  t13: ch = br t24, BasicBlock:ch< 0x7f9e6a81f000>


===== Instruction selection begins: %bb.3 ''

ISEL: Starting selection on root node: t13: ch = br t24, BasicBlock:ch< 0x7f9e6a81f000>
ISEL: Starting pattern match
  Initial Opcode index to 131331
  Morphed node: t13: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81f000>, t24
ISEL: Match complete!

ISEL: Starting selection on root node: t24: ch = X86ISD::BRCOND t0, BasicBlock:ch< 0x7f9e6a81f0c8>, Constant:i8<5>, t21:1
ISEL: Starting pattern match
  Initial Opcode index to 130713
Creating constant: t27: i8 = TargetConstant<5>
Creating new node: t29: ch,glue = CopyToReg t0, Register:i32 $eflags, t21:1
  Morphed node: t24: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81f0c8>, TargetConstant:i8<5>, t29, t29:1
ISEL: Match complete!

ISEL: Starting selection on root node: t21: i64,i32 = X86ISD::SUB t2, t5
ISEL: Starting pattern match
  Initial Opcode index to 89709
  Match failed at index 89716
  Continuing at 89819
  Match failed at index 89820
  Continuing at 89866
  Match failed at index 89867
  Continuing at 89930
  Continuing at 89931
  Match failed at index 89932
  Continuing at 89977
  Skipped scope entry (due to false predicate) at index 89987, continuing at 90049
  Match failed at index 90053
  Continuing at 90067
  Match failed at index 90071
  Continuing at 90085
  Match failed at index 90089
  Continuing at 90103
  Match failed at index 90104
  Continuing at 90123
  Match failed at index 90124
  Continuing at 90143
  Continuing at 90144
  Match failed at index 90145
  Continuing at 90156
  Match failed at index 90157
  Continuing at 90168
  Match failed at index 90169
  Continuing at 90180
  Morphed node: t21: i64,i32 = SUB64rr t2, t5
ISEL: Match complete!

ISEL: Starting selection on root node: t5: i64 = add nuw t26, Constant:i64<16>
ISEL: Starting pattern match
  Initial Opcode index to 96740
  Match failed at index 96744
  Continuing at 96847
  Match failed at index 96849
  Continuing at 96956
  TypeSwitch[i64] from 96958 to 96999
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg t31: i64 = Register $rip
 Scale 1
IndexReg nul
 Disp 0
GV @"$s7partial1BCMf" = internal global <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }> <{ void (%T7partial1BC*)* @"$s7partial1BCfD", i8** @"$sBoWV", i64 ptrtoint (%objc_class* @"$s7partial1BCMm" to i64), %swift.type* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %swift.type*), %swift.opaque* @_objc_empty_cache, %swift.opaque* null, i64 add (i64 ptrtoint ({ i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8* }* @_DATA__TtC7partial1B to i64), i64 2), i32 2, i32 0, i32 16, i16 7, i16 0, i32 112, i32 16, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>* @"$s7partial1BCMn", i8* null, %T7partial1BC* (%swift.type*)* @"$s7partial1BCACycfC", i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* @"$s7partial1BC1fySbxlF" }>, align 8
 CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t32: i8 = TargetConstant<1>
  Morphed node: t5: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> + 16, Register:i16 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %1

ISEL: Starting selection on root node: t12: ch = BasicBlock< 0x7f9e6a81f000>

ISEL: Starting selection on root node: t10: ch = BasicBlock< 0x7f9e6a81f0c8>

ISEL: Starting selection on root node: t1: i64 = Register %1

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.3 '$s7partial1gSbyF:'
SelectionDAG has 18 nodes:
  t0: ch = EntryToken
      t2: i64,ch = CopyFromReg t0, Register:i64 %1
      t5: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> + 16, Register:i16 $noreg
    t21: i64,i32 = SUB64rr t2, t5
  t29: ch,glue = CopyToReg t0, Register:i32 $eflags, t21:1
  t30: i32 = Register $noreg
    t24: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81f0c8>, TargetConstant:i8<5>, t29, t29:1
  t13: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81f000>, t24


********** List Scheduling %bb.3 '' **********
SU(0): t13: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81f000>, t24

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Barrier
SU(1): t24: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81f0c8>, TargetConstant:i8<5>, t29, t29:1

    t29: ch,glue = CopyToReg t0, Register:i32 $eflags, t21:1

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$eflags
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(2): t21: i64,i32 = SUB64rr t2, t5

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1
    SU(3): Data Latency=1
  Successors:
    SU(1): Data Latency=1 Reg=$eflags
SU(3): t5: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> + 16, Register:i16 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Data Latency=1
SU(4): t2: i64,ch = CopyFromReg t0, Register:i64 %1

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Data Latency=1

Examining Available:
Height 0: SU(0): t13: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81f000>, t24


*** Scheduling [0]: SU(0): t13: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81f000>, t24


Examining Available:
Height 1: SU(1): t24: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81f0c8>, TargetConstant:i8<5>, t29, t29:1

    t29: ch,glue = CopyToReg t0, Register:i32 $eflags, t21:1


*** Scheduling [1]: SU(1): t24: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81f0c8>, TargetConstant:i8<5>, t29, t29:1

    t29: ch,glue = CopyToReg t0, Register:i32 $eflags, t21:1


Examining Available:
Height 2: SU(2): t21: i64,i32 = SUB64rr t2, t5


*** Scheduling [2]: SU(2): t21: i64,i32 = SUB64rr t2, t5


Examining Available:
Height 3: SU(4): t2: i64,ch = CopyFromReg t0, Register:i64 %1

Height 3: SU(3): t5: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> + 16, Register:i16 $noreg


*** Scheduling [3]: SU(4): t2: i64,ch = CopyFromReg t0, Register:i64 %1


Examining Available:
Height 3: SU(3): t5: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> + 16, Register:i16 $noreg


*** Scheduling [4]: SU(3): t5: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> + 16, Register:i16 $noreg

*** Final schedule ***
SU(3): t5: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> + 16, Register:i16 $noreg

SU(4): t2: i64,ch = CopyFromReg t0, Register:i64 %1

SU(2): t21: i64,i32 = SUB64rr t2, t5

SU(1): t24: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81f0c8>, TargetConstant:i8<5>, t29, t29:1

    t29: ch,glue = CopyToReg t0, Register:i32 $eflags, t21:1

SU(0): t13: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81f000>, t24


Total amount of phi nodes to update: 0
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %1
Creating constant: t3: i64 = Constant<88>
Creating new node: t4: i64 = add nuw t2, Constant:i64<88>
Creating constant: t5: i64 = Constant<0>
Creating new node: t6: i64 = undef
Creating new node: t7: i64,ch = load<(invariant load 8 from %ir.22)> t0, t4, undef:i64
Creating new node: t11: i64,ch = CopyFromReg t0, Register:i64 %0
Creating constant: t12: i64 = TargetConstant<0>
Creating new node: t13: ch,glue = callseq_start t7:1, TargetConstant:i64<0>, TargetConstant:i64<0>
Creating new node: t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>
Creating new node: t17: ch,glue = CopyToReg t15, Register:i64 $rsi, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, t15:1
Creating new node: t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1
Creating new node: t21: ch,glue = X86ISD::CALL t19, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1
Creating new node: t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1
Creating new node: t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1
Creating new node: t25: i1 = truncate t24
Creating new node: t27: ch = CopyToReg t0, Register:i8 %4, t24
Creating new node: t29: ch,glue = callseq_start t24:1, TargetConstant:i64<0>, TargetConstant:i64<0>
Creating new node: t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11
Creating new node: t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1
Creating new node: t33: ch,glue = callseq_end t32, TargetConstant:i64<0>, TargetConstant:i64<0>, t32:1
Creating new node: t34: ch = TokenFactor t27, t33
Creating new node: t36: ch = br t34, BasicBlock:ch< 0x7f9e6a81ed40>
Initial selection DAG: %bb.5 '$s7partial1gSbyF:'
SelectionDAG has 37 nodes:
  t0: ch = EntryToken
  t5: i64 = Constant<0>
      t2: i64,ch = CopyFromReg t0, Register:i64 %1
    t4: i64 = add nuw t2, Constant:i64<88>
  t7: i64,ch = load<(invariant load 8 from %ir.22)> t0, t4, undef:i64
  t11: i64,ch = CopyFromReg t0, Register:i64 %0
    t13: ch,glue = callseq_start t7:1, TargetConstant:i64<0>, TargetConstant:i64<0>
  t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>
  t17: ch,glue = CopyToReg t15, Register:i64 $rsi, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, t15:1
  t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1
  t21: ch,glue = X86ISD::CALL t19, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1
  t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1
  t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1
  t25: i1 = truncate t24
  t28: i64 = GlobalAddress<void (%swift.refcounted*)* @swift_release> 0
    t29: ch,glue = callseq_start t24:1, TargetConstant:i64<0>, TargetConstant:i64<0>
  t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11
  t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1
      t27: ch = CopyToReg t0, Register:i8 %4, t24
      t33: ch,glue = callseq_end t32, TargetConstant:i64<0>, TargetConstant:i64<0>, t32:1
    t34: ch = TokenFactor t27, t33
  t36: ch = br t34, BasicBlock:ch< 0x7f9e6a81ed40>



Combining: t36: ch = br t34, BasicBlock:ch< 0x7f9e6a81ed40>

Combining: t35: ch = BasicBlock< 0x7f9e6a81ed40>

Combining: t34: ch = TokenFactor t27, t33

Combining: t33: ch,glue = callseq_end t32, TargetConstant:i64<0>, TargetConstant:i64<0>, t32:1

Combining: t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1

Combining: t31: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0

Combining: t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11

Combining: t29: ch,glue = callseq_start t24:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t27: ch = CopyToReg t0, Register:i8 %4, t24

Combining: t26: i8 = Register %4

Combining: t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1

Combining: t23: i8 = Register $al

Combining: t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1

Combining: t21: ch,glue = X86ISD::CALL t19, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1

Combining: t20: Untyped = RegisterMask

Combining: t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1

Combining: t18: i64 = Register $r13

Combining: t17: ch,glue = CopyToReg t15, Register:i64 $rsi, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, t15:1

Combining: t16: i64 = Register $rsi

Combining: t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>

Combining: t14: i64 = Register $rdi

Combining: t13: ch,glue = callseq_start t7:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t12: i64 = TargetConstant<0>

Combining: t11: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t10: i64 = Register %0

Combining: t9: i64 = GlobalAddress<%swift.type* @"$ss6UInt16VN"> 0

Combining: t8: i64 = FrameIndex<0>

Combining: t7: i64,ch = load<(invariant load 8 from %ir.22)> t0, t4, undef:i64

Combining: t6: i64 = undef

Combining: t4: i64 = add nuw t2, Constant:i64<88>

Combining: t3: i64 = Constant<88>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %1

Combining: t1: i64 = Register %1

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.5 '$s7partial1gSbyF:'
SelectionDAG has 34 nodes:
  t0: ch = EntryToken
      t2: i64,ch = CopyFromReg t0, Register:i64 %1
    t4: i64 = add nuw t2, Constant:i64<88>
  t7: i64,ch = load<(invariant load 8 from %ir.22)> t0, t4, undef:i64
  t11: i64,ch = CopyFromReg t0, Register:i64 %0
    t13: ch,glue = callseq_start t7:1, TargetConstant:i64<0>, TargetConstant:i64<0>
  t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>
  t17: ch,glue = CopyToReg t15, Register:i64 $rsi, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, t15:1
  t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1
  t21: ch,glue = X86ISD::CALL t19, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1
  t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1
  t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1
    t29: ch,glue = callseq_start t24:1, TargetConstant:i64<0>, TargetConstant:i64<0>
  t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11
  t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1
      t27: ch = CopyToReg t0, Register:i8 %4, t24
      t33: ch,glue = callseq_end t32, TargetConstant:i64<0>, TargetConstant:i64<0>, t32:1
    t34: ch = TokenFactor t27, t33
  t36: ch = br t34, BasicBlock:ch< 0x7f9e6a81ed40>


Legalizing node: t35: ch = BasicBlock< 0x7f9e6a81ed40>
Analyzing result type: ch
Legal result type
Legally typed node: t35: ch = BasicBlock< 0x7f9e6a81ed40>

Legalizing node: t31: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0
Analyzing result type: i64
Legal result type
Legally typed node: t31: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0

Legalizing node: t26: i8 = Register %4
Ignoring node results
Legally typed node: t26: i8 = Register %4

Legalizing node: t23: i8 = Register $al
Ignoring node results
Legally typed node: t23: i8 = Register $al

Legalizing node: t20: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t20: Untyped = RegisterMask

Legalizing node: t18: i64 = Register $r13
Ignoring node results
Legally typed node: t18: i64 = Register $r13

Legalizing node: t16: i64 = Register $rsi
Ignoring node results
Legally typed node: t16: i64 = Register $rsi

Legalizing node: t14: i64 = Register $rdi
Ignoring node results
Legally typed node: t14: i64 = Register $rdi

Legalizing node: t12: i64 = TargetConstant<0>
Ignoring node results
Legally typed node: t12: i64 = TargetConstant<0>

Legalizing node: t10: i64 = Register %0
Ignoring node results
Legally typed node: t10: i64 = Register %0

Legalizing node: t9: i64 = GlobalAddress<%swift.type* @"$ss6UInt16VN"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t9: i64 = GlobalAddress<%swift.type* @"$ss6UInt16VN"> 0

Legalizing node: t8: i64 = FrameIndex<0>
Analyzing result type: i64
Legal result type
Legally typed node: t8: i64 = FrameIndex<0>

Legalizing node: t6: i64 = undef
Analyzing result type: i64
Legal result type
Legally typed node: t6: i64 = undef

Legalizing node: t3: i64 = Constant<88>
Analyzing result type: i64
Legal result type
Legally typed node: t3: i64 = Constant<88>

Legalizing node: t1: i64 = Register %1
Ignoring node results
Legally typed node: t1: i64 = Register %1

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %1
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %1

Legalizing node: t4: i64 = add nuw t2, Constant:i64<88>
Analyzing result type: i64
Legal result type
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %1
Legal operand
Analyzing operand: t3: i64 = Constant<88>
Legal operand
Legally typed node: t4: i64 = add nuw t2, Constant:i64<88>

Legalizing node: t7: i64,ch = load<(invariant load 8 from %ir.22)> t0, t4, undef:i64
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t4: i64 = add nuw t2, Constant:i64<88>
Legal operand
Analyzing operand: t6: i64 = undef
Legal operand
Legally typed node: t7: i64,ch = load<(invariant load 8 from %ir.22)> t0, t4, undef:i64

Legalizing node: t13: ch,glue = callseq_start t7:1, TargetConstant:i64<0>, TargetConstant:i64<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t7: i64,ch = load<(invariant load 8 from %ir.22)> t0, t4, undef:i64
Legal operand
Legally typed node: t13: ch,glue = callseq_start t7:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing node: t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t13: ch,glue = callseq_start t7:1, TargetConstant:i64<0>, TargetConstant:i64<0>
Legal operand
Analyzing operand: t8: i64 = FrameIndex<0>
Legal operand
Legally typed node: t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>

Legalizing node: t17: ch,glue = CopyToReg t15, Register:i64 $rsi, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, t15:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>
Legal operand
Analyzing operand: t9: i64 = GlobalAddress<%swift.type* @"$ss6UInt16VN"> 0
Legal operand
Analyzing operand: t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>
Legal operand
Legally typed node: t17: ch,glue = CopyToReg t15, Register:i64 $rsi, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, t15:1

Legalizing node: t11: i64,ch = CopyFromReg t0, Register:i64 %0
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t11: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing node: t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t17: ch,glue = CopyToReg t15, Register:i64 $rsi, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, t15:1
Legal operand
Analyzing operand: t11: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Analyzing operand: t17: ch,glue = CopyToReg t15, Register:i64 $rsi, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, t15:1
Legal operand
Legally typed node: t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1

Legalizing node: t21: ch,glue = X86ISD::CALL t19, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1
Legal operand
Analyzing operand: t7: i64,ch = load<(invariant load 8 from %ir.22)> t0, t4, undef:i64
Legal operand
Analyzing operand: t20: Untyped = RegisterMask
Legal operand
Analyzing operand: t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1
Legal operand
Legally typed node: t21: ch,glue = X86ISD::CALL t19, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1

Legalizing node: t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t21: ch,glue = X86ISD::CALL t19, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1
Legal operand
Analyzing operand: t21: ch,glue = X86ISD::CALL t19, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1
Legal operand
Legally typed node: t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1

Legalizing node: t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1
Analyzing result type: i8
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1
Legal operand
Analyzing operand: t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1
Legal operand
Legally typed node: t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1

Legalizing node: t27: ch = CopyToReg t0, Register:i8 %4, t24
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1
Legal operand
Legally typed node: t27: ch = CopyToReg t0, Register:i8 %4, t24

Legalizing node: t29: ch,glue = callseq_start t24:1, TargetConstant:i64<0>, TargetConstant:i64<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1
Legal operand
Legally typed node: t29: ch,glue = callseq_start t24:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing node: t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t29: ch,glue = callseq_start t24:1, TargetConstant:i64<0>, TargetConstant:i64<0>
Legal operand
Analyzing operand: t11: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Legally typed node: t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11

Legalizing node: t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11
Legal operand
Analyzing operand: t31: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0
Legal operand
Analyzing operand: t20: Untyped = RegisterMask
Legal operand
Analyzing operand: t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11
Legal operand
Legally typed node: t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1

Legalizing node: t33: ch,glue = callseq_end t32, TargetConstant:i64<0>, TargetConstant:i64<0>, t32:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1
Legal operand
Analyzing operand: t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1
Legal operand
Legally typed node: t33: ch,glue = callseq_end t32, TargetConstant:i64<0>, TargetConstant:i64<0>, t32:1

Legalizing node: t34: ch = TokenFactor t27, t33
Analyzing result type: ch
Legal result type
Analyzing operand: t27: ch = CopyToReg t0, Register:i8 %4, t24
Legal operand
Analyzing operand: t33: ch,glue = callseq_end t32, TargetConstant:i64<0>, TargetConstant:i64<0>, t32:1
Legal operand
Legally typed node: t34: ch = TokenFactor t27, t33

Legalizing node: t36: ch = br t34, BasicBlock:ch< 0x7f9e6a81ed40>
Analyzing result type: ch
Legal result type
Analyzing operand: t34: ch = TokenFactor t27, t33
Legal operand
Analyzing operand: t35: ch = BasicBlock< 0x7f9e6a81ed40>
Legal operand
Legally typed node: t36: ch = br t34, BasicBlock:ch< 0x7f9e6a81ed40>

Legalizing node: t65535: ch = handlenode t36
Analyzing result type: ch
Legal result type
Analyzing operand: t36: ch = br t34, BasicBlock:ch< 0x7f9e6a81ed40>
Legal operand
Legally typed node: t65535: ch = handlenode t36

Type-legalized selection DAG: %bb.5 '$s7partial1gSbyF:'
SelectionDAG has 34 nodes:
  t0: ch = EntryToken
      t2: i64,ch = CopyFromReg t0, Register:i64 %1
    t4: i64 = add nuw t2, Constant:i64<88>
  t7: i64,ch = load<(invariant load 8 from %ir.22)> t0, t4, undef:i64
  t11: i64,ch = CopyFromReg t0, Register:i64 %0
    t13: ch,glue = callseq_start t7:1, TargetConstant:i64<0>, TargetConstant:i64<0>
  t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>
  t17: ch,glue = CopyToReg t15, Register:i64 $rsi, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, t15:1
  t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1
  t21: ch,glue = X86ISD::CALL t19, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1
  t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1
  t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1
    t29: ch,glue = callseq_start t24:1, TargetConstant:i64<0>, TargetConstant:i64<0>
  t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11
  t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1
      t27: ch = CopyToReg t0, Register:i8 %4, t24
      t33: ch,glue = callseq_end t32, TargetConstant:i64<0>, TargetConstant:i64<0>, t32:1
    t34: ch = TokenFactor t27, t33
  t36: ch = br t34, BasicBlock:ch< 0x7f9e6a81ed40>



Legalizing: t36: ch = br t34, BasicBlock:ch< 0x7f9e6a81ed40>
Legal node: nothing to do

Legalizing: t34: ch = TokenFactor t27, t33
Legal node: nothing to do

Legalizing: t33: ch,glue = callseq_end t32, TargetConstant:i64<0>, TargetConstant:i64<0>, t32:1

Legalizing: t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1
Legal node: nothing to do

Legalizing: t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11
Legal node: nothing to do

Legalizing: t27: ch = CopyToReg t0, Register:i8 %4, t24
Legal node: nothing to do

Legalizing: t29: ch,glue = callseq_start t24:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1
Legal node: nothing to do

Legalizing: t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1

Legalizing: t21: ch,glue = X86ISD::CALL t19, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1
Legal node: nothing to do

Legalizing: t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1
Legal node: nothing to do

Legalizing: t17: ch,glue = CopyToReg t15, Register:i64 $rsi, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, t15:1
Legal node: nothing to do

Legalizing: t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>
Legal node: nothing to do

Legalizing: t13: ch,glue = callseq_start t7:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t7: i64,ch = load<(invariant load 8 from %ir.22)> t0, t4, undef:i64
Legalizing non-extending load operation

Legalizing: t4: i64 = add nuw t2, Constant:i64<88>
Legal node: nothing to do

Legalizing: t11: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %1
Legal node: nothing to do

Legalizing: t35: ch = BasicBlock< 0x7f9e6a81ed40>
Legal node: nothing to do

Legalizing: t31: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0
Legal node: nothing to do

Legalizing: t26: i8 = Register %4

Legalizing: t23: i8 = Register $al

Legalizing: t20: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t18: i64 = Register $r13

Legalizing: t16: i64 = Register $rsi

Legalizing: t14: i64 = Register $rdi

Legalizing: t12: i64 = TargetConstant<0>

Legalizing: t10: i64 = Register %0

Legalizing: t9: i64 = GlobalAddress<%swift.type* @"$ss6UInt16VN"> 0
Trying custom legalization
Creating new node: t38: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]
Creating new node: t39: i64,ch = load<(load 8 from got)> t0, t38, undef:i64
Successfully custom legalized node
 ... replacing: t9: i64 = GlobalAddress<%swift.type* @"$ss6UInt16VN"> 0
     with:      t39: i64,ch = load<(load 8 from got)> t0, t38, undef:i64

Legalizing: t8: i64 = FrameIndex<0>
Legal node: nothing to do

Legalizing: t6: i64 = undef
Legal node: nothing to do

Legalizing: t3: i64 = Constant<88>
Legal node: nothing to do

Legalizing: t1: i64 = Register %1

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t39: i64,ch = load<(load 8 from got)> t0, t38, undef:i64
Legalizing non-extending load operation

Legalizing: t38: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]
Legal node: nothing to do

Legalizing: t37: i64 = TargetGlobalAddress<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]
Legal node: nothing to do
Legalized selection DAG: %bb.5 '$s7partial1gSbyF:'
SelectionDAG has 36 nodes:
  t0: ch = EntryToken
  t11: i64,ch = CopyFromReg t0, Register:i64 %0
      t2: i64,ch = CopyFromReg t0, Register:i64 %1
    t4: i64 = add nuw t2, Constant:i64<88>
  t7: i64,ch = load<(invariant load 8 from %ir.22)> t0, t4, undef:i64
    t13: ch,glue = callseq_start t7:1, TargetConstant:i64<0>, TargetConstant:i64<0>
  t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>
      t38: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]
    t39: i64,ch = load<(load 8 from got)> t0, t38, undef:i64
  t17: ch,glue = CopyToReg t15, Register:i64 $rsi, t39, t15:1
  t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1
  t21: ch,glue = X86ISD::CALL t19, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1
  t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1
  t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1
    t29: ch,glue = callseq_start t24:1, TargetConstant:i64<0>, TargetConstant:i64<0>
  t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11
  t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1
      t27: ch = CopyToReg t0, Register:i8 %4, t24
      t33: ch,glue = callseq_end t32, TargetConstant:i64<0>, TargetConstant:i64<0>, t32:1
    t34: ch = TokenFactor t27, t33
  t36: ch = br t34, BasicBlock:ch< 0x7f9e6a81ed40>



Legalizing: t39: i64,ch = load<(load 8 from got)> t0, t38, undef:i64
Legalizing non-extending load operation

Combining: t39: i64,ch = load<(load 8 from got)> t0, t38, undef:i64

Legalizing: t38: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]
Legal node: nothing to do

Combining: t38: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]

Legalizing: t37: i64 = TargetGlobalAddress<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]
Legal node: nothing to do

Combining: t37: i64 = TargetGlobalAddress<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]

Legalizing: t36: ch = br t34, BasicBlock:ch< 0x7f9e6a81ed40>
Legal node: nothing to do

Combining: t36: ch = br t34, BasicBlock:ch< 0x7f9e6a81ed40>

Legalizing: t34: ch = TokenFactor t27, t33
Legal node: nothing to do

Combining: t34: ch = TokenFactor t27, t33

Legalizing: t33: ch,glue = callseq_end t32, TargetConstant:i64<0>, TargetConstant:i64<0>, t32:1

Combining: t33: ch,glue = callseq_end t32, TargetConstant:i64<0>, TargetConstant:i64<0>, t32:1

Legalizing: t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1
Legal node: nothing to do

Combining: t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1

Legalizing: t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11
Legal node: nothing to do

Combining: t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11

Legalizing: t27: ch = CopyToReg t0, Register:i8 %4, t24
Legal node: nothing to do

Combining: t27: ch = CopyToReg t0, Register:i8 %4, t24

Legalizing: t29: ch,glue = callseq_start t24:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t29: ch,glue = callseq_start t24:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1
Legal node: nothing to do

Combining: t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1

Legalizing: t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1

Combining: t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1

Legalizing: t21: ch,glue = X86ISD::CALL t19, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1
Legal node: nothing to do

Combining: t21: ch,glue = X86ISD::CALL t19, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1

Legalizing: t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1
Legal node: nothing to do

Combining: t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1

Legalizing: t17: ch,glue = CopyToReg t15, Register:i64 $rsi, t39, t15:1
Legal node: nothing to do

Combining: t17: ch,glue = CopyToReg t15, Register:i64 $rsi, t39, t15:1

Legalizing: t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>
Legal node: nothing to do

Combining: t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>

Legalizing: t13: ch,glue = callseq_start t7:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t13: ch,glue = callseq_start t7:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t7: i64,ch = load<(invariant load 8 from %ir.22)> t0, t4, undef:i64
Legalizing non-extending load operation

Combining: t7: i64,ch = load<(invariant load 8 from %ir.22)> t0, t4, undef:i64

Legalizing: t4: i64 = add nuw t2, Constant:i64<88>
Legal node: nothing to do

Combining: t4: i64 = add nuw t2, Constant:i64<88>

Legalizing: t11: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Combining: t11: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %1
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %1

Legalizing: t35: ch = BasicBlock< 0x7f9e6a81ed40>
Legal node: nothing to do

Combining: t35: ch = BasicBlock< 0x7f9e6a81ed40>

Legalizing: t31: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0
Legal node: nothing to do

Combining: t31: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0

Legalizing: t26: i8 = Register %4

Combining: t26: i8 = Register %4

Legalizing: t23: i8 = Register $al

Combining: t23: i8 = Register $al

Legalizing: t20: Untyped = RegisterMask
Legal node: nothing to do

Combining: t20: Untyped = RegisterMask

Legalizing: t18: i64 = Register $r13

Combining: t18: i64 = Register $r13

Legalizing: t16: i64 = Register $rsi

Combining: t16: i64 = Register $rsi

Legalizing: t14: i64 = Register $rdi

Combining: t14: i64 = Register $rdi

Legalizing: t12: i64 = TargetConstant<0>

Combining: t12: i64 = TargetConstant<0>

Legalizing: t10: i64 = Register %0

Combining: t10: i64 = Register %0

Legalizing: t8: i64 = FrameIndex<0>
Legal node: nothing to do

Combining: t8: i64 = FrameIndex<0>

Legalizing: t6: i64 = undef
Legal node: nothing to do

Combining: t6: i64 = undef

Legalizing: t3: i64 = Constant<88>
Legal node: nothing to do

Combining: t3: i64 = Constant<88>

Legalizing: t1: i64 = Register %1

Combining: t1: i64 = Register %1

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.5 '$s7partial1gSbyF:'
SelectionDAG has 36 nodes:
  t0: ch = EntryToken
  t11: i64,ch = CopyFromReg t0, Register:i64 %0
      t2: i64,ch = CopyFromReg t0, Register:i64 %1
    t4: i64 = add nuw t2, Constant:i64<88>
  t7: i64,ch = load<(invariant load 8 from %ir.22)> t0, t4, undef:i64
    t13: ch,glue = callseq_start t7:1, TargetConstant:i64<0>, TargetConstant:i64<0>
  t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>
      t38: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]
    t39: i64,ch = load<(load 8 from got)> t0, t38, undef:i64
  t17: ch,glue = CopyToReg t15, Register:i64 $rsi, t39, t15:1
  t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1
  t21: ch,glue = X86ISD::CALL t19, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1
  t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1
  t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1
    t29: ch,glue = callseq_start t24:1, TargetConstant:i64<0>, TargetConstant:i64<0>
  t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11
  t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1
      t27: ch = CopyToReg t0, Register:i8 %4, t24
      t33: ch,glue = callseq_end t32, TargetConstant:i64<0>, TargetConstant:i64<0>, t32:1
    t34: ch = TokenFactor t27, t33
  t36: ch = br t34, BasicBlock:ch< 0x7f9e6a81ed40>


===== Instruction selection begins: %bb.5 ''

ISEL: Starting selection on root node: t36: ch = br t34, BasicBlock:ch< 0x7f9e6a81ed40>
ISEL: Starting pattern match
  Initial Opcode index to 131331
  Morphed node: t36: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t34
ISEL: Match complete!

ISEL: Starting selection on root node: t34: ch = TokenFactor t27, t33

ISEL: Starting selection on root node: t33: ch,glue = callseq_end t32, TargetConstant:i64<0>, TargetConstant:i64<0>, t32:1
ISEL: Starting pattern match
  Initial Opcode index to 130027
  Skipped scope entry (due to false predicate) at index 130043, continuing at 130054
  Morphed node: t33: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t32, t32:1
ISEL: Match complete!

ISEL: Starting selection on root node: t32: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30:1
ISEL: Starting pattern match
  Initial Opcode index to 91510
  Match failed at index 91515
  Continuing at 91598
  OpcodeSwitch from 91604 to 91608
  TypeSwitch[i64] from 91608 to 91611
  Morphed node: t32: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30, t30:1
ISEL: Match complete!

ISEL: Starting selection on root node: t30: ch,glue = CopyToReg t29, Register:i64 $rdi, t11

ISEL: Starting selection on root node: t27: ch = CopyToReg t0, Register:i8 %4, t24

ISEL: Starting selection on root node: t29: ch,glue = callseq_start t24:1, TargetConstant:i64<0>, TargetConstant:i64<0>
ISEL: Starting pattern match
  Initial Opcode index to 130070
  Skipped scope entry (due to false predicate) at index 130085, continuing at 130100
Creating constant: t40: i32 = TargetConstant<0>
  Morphed node: t29: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t24:1
ISEL: Match complete!

ISEL: Starting selection on root node: t24: i8,ch,glue = CopyFromReg t22, Register:i8 $al, t22:1

ISEL: Starting selection on root node: t22: ch,glue = callseq_end t21, TargetConstant:i64<0>, TargetConstant:i64<0>, t21:1
ISEL: Starting pattern match
  Initial Opcode index to 130027
  Skipped scope entry (due to false predicate) at index 130043, continuing at 130054
  Morphed node: t22: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t21, t21:1
ISEL: Match complete!

ISEL: Starting selection on root node: t21: ch,glue = X86ISD::CALL t7:1, t7, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19:1
ISEL: Starting pattern match
  Initial Opcode index to 91510
  TypeSwitch[i64] from 91524 to 91575
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg t2: i64,ch = CopyFromReg t0, Register:i64 %1
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t41: i8 = TargetConstant<1>
Creating constant: t43: i32 = TargetConstant<88>
  Morphed node: t21: ch,glue = CALL64m<Mem:(invariant load 8 from %ir.22)> t2, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<88>, Register:i16 $noreg, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19, t19:1
ISEL: Match complete!

ISEL: Starting selection on root node: t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1

ISEL: Starting selection on root node: t17: ch,glue = CopyToReg t15, Register:i64 $rsi, t39, t15:1

ISEL: Starting selection on root node: t39: i64,ch = load<(load 8 from got)> t0, t38, undef:i64
ISEL: Starting pattern match
  Initial Opcode index to 114898
  Match failed at index 114907
  Continuing at 114924
  Match failed at index 114927
  Continuing at 114944
  Match failed at index 114947
  Continuing at 114964
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
  Morphed node: t39: i64,ch = MOV64rm<Mem:(load 8 from got)> Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type* @"$ss6UInt16VN"> 0 [TF=5], Register:i16 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t15: ch,glue = CopyToReg t13, Register:i64 $rdi, FrameIndex:i64<0>

ISEL: Starting selection on root node: t13: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
ISEL: Starting pattern match
  Initial Opcode index to 130070
  Skipped scope entry (due to false predicate) at index 130085, continuing at 130100
  Morphed node: t13: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t11: i64,ch = CopyFromReg t0, Register:i64 %0

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %1

ISEL: Starting selection on root node: t35: ch = BasicBlock< 0x7f9e6a81ed40>

ISEL: Starting selection on root node: t31: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0

ISEL: Starting selection on root node: t26: i8 = Register %4

ISEL: Starting selection on root node: t23: i8 = Register $al

ISEL: Starting selection on root node: t20: Untyped = RegisterMask

ISEL: Starting selection on root node: t18: i64 = Register $r13

ISEL: Starting selection on root node: t16: i64 = Register $rsi

ISEL: Starting selection on root node: t14: i64 = Register $rdi

ISEL: Starting selection on root node: t12: i64 = TargetConstant<0>

ISEL: Starting selection on root node: t10: i64 = Register %0

ISEL: Starting selection on root node: t8: i64 = FrameIndex<0>
ISEL: Starting pattern match
  Initial Opcode index to 124327
  TypeSwitch[i64] from 124328 to 124369
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
  Morphed node: t8: i64 = LEA64r TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t1: i64 = Register %1

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.5 '$s7partial1gSbyF:'
SelectionDAG has 39 nodes:
  t0: ch = EntryToken
  t11: i64,ch = CopyFromReg t0, Register:i64 %0
    t13: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0
    t8: i64 = LEA64r TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg
  t15: ch,glue = CopyToReg t13:1, Register:i64 $rdi, t8
    t39: i64,ch = MOV64rm<Mem:(load 8 from got)> Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type* @"$ss6UInt16VN"> 0 [TF=5], Register:i16 $noreg, t0
  t17: ch,glue = CopyToReg t15, Register:i64 $rsi, t39, t15:1
  t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1
    t2: i64,ch = CopyFromReg t0, Register:i64 %1
  t21: ch,glue = CALL64m<Mem:(invariant load 8 from %ir.22)> t2, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<88>, Register:i16 $noreg, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19, t19:1
  t22: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t21, t21:1
  t24: i8,ch,glue = CopyFromReg t22:1, Register:i8 $al, t22:2
    t29: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t24:1
  t30: ch,glue = CopyToReg t29:1, Register:i64 $rdi, t11
  t32: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30, t30:1
  t47: i32 = Register $noreg
      t27: ch = CopyToReg t0, Register:i8 %4, t24
      t33: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t32, t32:1
    t34: ch = TokenFactor t27, t33:1
  t36: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t34


********** List Scheduling %bb.5 '' **********
SU(0): t36: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t34

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Barrier
SU(1): t34: ch = TokenFactor t27, t33:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=1 Barrier
    SU(2): Ord  Latency=1 Barrier
  Successors:
    SU(0): Ord  Latency=0 Barrier
SU(2): t33: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t32, t32:1

    t30: ch,glue = CopyToReg t29:1, Register:i64 $rdi, t11

    t32: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30, t30:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(4): Ord  Latency=1 Barrier
    SU(3): Data Latency=1
  Successors:
    SU(1): Ord  Latency=1 Barrier
SU(3): t11: i64,ch = CopyFromReg t0, Register:i64 %0

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=1
    SU(5): Data Latency=1
SU(4): t29: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t24:1

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(5): Ord  Latency=1 Barrier
  Successors:
    SU(2): Ord  Latency=1 Barrier
SU(5): t24: i8,ch,glue = CopyFromReg t22:1, Register:i8 $al, t22:2

    t15: ch,glue = CopyToReg t13:1, Register:i64 $rdi, t8

    t17: ch,glue = CopyToReg t15, Register:i64 $rsi, t39, t15:1

    t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1

    t21: ch,glue = CALL64m<Mem:(invariant load 8 from %ir.22)> t2, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<88>, Register:i16 $noreg, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19, t19:1

    t22: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t21, t21:1

  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(9): Data Latency=1
    SU(3): Data Latency=1
    SU(6): Data Latency=1
    SU(8): Ord  Latency=1 Barrier
    SU(7): Data Latency=1
  Successors:
    SU(4): Ord  Latency=1 Barrier
    SU(10): Data Latency=1
SU(6): t39: i64,ch = MOV64rm<Mem:(load 8 from got)> Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type* @"$ss6UInt16VN"> 0 [TF=5], Register:i16 $noreg, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=1
SU(7): t8: i64 = LEA64r TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=1
SU(8): t13: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Ord  Latency=1 Barrier
SU(9): t2: i64,ch = CopyFromReg t0, Register:i64 %1

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=1
SU(10): t27: ch = CopyToReg t0, Register:i8 %4, t24

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1
  Successors:
    SU(1): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t36: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t34


*** Scheduling [0]: SU(0): t36: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t34


Examining Available:
Height 0: SU(1): t34: ch = TokenFactor t27, t33:1


*** Scheduling [1]: SU(1): t34: ch = TokenFactor t27, t33:1


Examining Available:
Height 2: SU(2): t33: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t32, t32:1

    t30: ch,glue = CopyToReg t29:1, Register:i64 $rdi, t11

    t32: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30, t30:1

Height 2: SU(10): t27: ch = CopyToReg t0, Register:i8 %4, t24


*** Scheduling [2]: SU(2): t33: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t32, t32:1

    t30: ch,glue = CopyToReg t29:1, Register:i64 $rdi, t11

    t32: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30, t30:1


Examining Available:
Height 3: SU(4): t29: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t24:1

Height 2: SU(10): t27: ch = CopyToReg t0, Register:i8 %4, t24


*** Scheduling [3]: SU(4): t29: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t24:1


Examining Available:
Height 2: SU(10): t27: ch = CopyToReg t0, Register:i8 %4, t24


*** Scheduling [4]: SU(10): t27: ch = CopyToReg t0, Register:i8 %4, t24


Examining Available:
Height 5: SU(5): t24: i8,ch,glue = CopyFromReg t22:1, Register:i8 $al, t22:2

    t15: ch,glue = CopyToReg t13:1, Register:i64 $rdi, t8

    t17: ch,glue = CopyToReg t15, Register:i64 $rsi, t39, t15:1

    t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1

    t21: ch,glue = CALL64m<Mem:(invariant load 8 from %ir.22)> t2, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<88>, Register:i16 $noreg, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19, t19:1

    t22: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t21, t21:1


*** Scheduling [5]: SU(5): t24: i8,ch,glue = CopyFromReg t22:1, Register:i8 $al, t22:2

    t15: ch,glue = CopyToReg t13:1, Register:i64 $rdi, t8

    t17: ch,glue = CopyToReg t15, Register:i64 $rsi, t39, t15:1

    t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1

    t21: ch,glue = CALL64m<Mem:(invariant load 8 from %ir.22)> t2, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<88>, Register:i16 $noreg, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19, t19:1

    t22: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t21, t21:1


Examining Available:
Height 6: SU(7): t8: i64 = LEA64r TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg

Height 6: SU(3): t11: i64,ch = CopyFromReg t0, Register:i64 %0

Height 6: SU(6): t39: i64,ch = MOV64rm<Mem:(load 8 from got)> Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type* @"$ss6UInt16VN"> 0 [TF=5], Register:i16 $noreg, t0

Height 6: SU(8): t13: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

Height 6: SU(9): t2: i64,ch = CopyFromReg t0, Register:i64 %1


*** Scheduling [6]: SU(7): t8: i64 = LEA64r TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg


Examining Available:
Height 6: SU(3): t11: i64,ch = CopyFromReg t0, Register:i64 %0

Height 6: SU(6): t39: i64,ch = MOV64rm<Mem:(load 8 from got)> Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type* @"$ss6UInt16VN"> 0 [TF=5], Register:i16 $noreg, t0

Height 6: SU(8): t13: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

Height 6: SU(9): t2: i64,ch = CopyFromReg t0, Register:i64 %1


*** Scheduling [7]: SU(3): t11: i64,ch = CopyFromReg t0, Register:i64 %0


Examining Available:
Height 6: SU(6): t39: i64,ch = MOV64rm<Mem:(load 8 from got)> Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type* @"$ss6UInt16VN"> 0 [TF=5], Register:i16 $noreg, t0

Height 6: SU(8): t13: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

Height 6: SU(9): t2: i64,ch = CopyFromReg t0, Register:i64 %1


*** Scheduling [8]: SU(6): t39: i64,ch = MOV64rm<Mem:(load 8 from got)> Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type* @"$ss6UInt16VN"> 0 [TF=5], Register:i16 $noreg, t0


Examining Available:
Height 6: SU(8): t13: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

Height 6: SU(9): t2: i64,ch = CopyFromReg t0, Register:i64 %1


*** Scheduling [9]: SU(8): t13: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0


Examining Available:
Height 6: SU(9): t2: i64,ch = CopyFromReg t0, Register:i64 %1


*** Scheduling [10]: SU(9): t2: i64,ch = CopyFromReg t0, Register:i64 %1

*** Final schedule ***
SU(9): t2: i64,ch = CopyFromReg t0, Register:i64 %1

SU(8): t13: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

SU(6): t39: i64,ch = MOV64rm<Mem:(load 8 from got)> Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type* @"$ss6UInt16VN"> 0 [TF=5], Register:i16 $noreg, t0

SU(3): t11: i64,ch = CopyFromReg t0, Register:i64 %0

SU(7): t8: i64 = LEA64r TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg

SU(5): t24: i8,ch,glue = CopyFromReg t22:1, Register:i8 $al, t22:2

    t15: ch,glue = CopyToReg t13:1, Register:i64 $rdi, t8

    t17: ch,glue = CopyToReg t15, Register:i64 $rsi, t39, t15:1

    t19: ch,glue = CopyToReg t17, Register:i64 $r13, t11, t17:1

    t21: ch,glue = CALL64m<Mem:(invariant load 8 from %ir.22)> t2, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<88>, Register:i16 $noreg, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $r13, RegisterMask:Untyped, t19, t19:1

    t22: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t21, t21:1

SU(10): t27: ch = CopyToReg t0, Register:i8 %4, t24

SU(4): t29: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t24:1

SU(2): t33: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t32, t32:1

    t30: ch,glue = CopyToReg t29:1, Register:i64 $rdi, t11

    t32: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t30, t30:1

SU(1): t34: ch = TokenFactor t27, t33:1

SU(0): t36: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t34


Total amount of phi nodes to update: 1
Node 0 : (0x7f9e6a81ee08, 2147483652)
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Creating constant: t4: i64 = TargetConstant<0>
Creating new node: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Creating new node: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2
Creating new node: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
Creating new node: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
Creating constant: t12: i1 = Constant<0>
Creating constant: t13: i8 = Constant<0>
Creating new node: t15: ch = CopyToReg t0, Register:i8 %13, Constant:i8<0>
Creating new node: t16: ch = TokenFactor t15, t11
Creating new node: t18: ch = br t16, BasicBlock:ch< 0x7f9e6a81ed40>
Initial selection DAG: %bb.4 '$s7partial1gSbyF:'
SelectionDAG has 19 nodes:
  t0: ch = EntryToken
  t3: i64 = GlobalAddress<void (%swift.refcounted*)* @swift_release> 0
    t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2
  t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
  t12: i1 = Constant<0>
      t15: ch = CopyToReg t0, Register:i8 %13, Constant:i8<0>
      t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
    t16: ch = TokenFactor t15, t11
  t18: ch = br t16, BasicBlock:ch< 0x7f9e6a81ed40>



Combining: t18: ch = br t16, BasicBlock:ch< 0x7f9e6a81ed40>

Combining: t17: ch = BasicBlock< 0x7f9e6a81ed40>

Combining: t16: ch = TokenFactor t15, t11

Combining: t15: ch = CopyToReg t0, Register:i8 %13, Constant:i8<0>

Combining: t14: i8 = Register %13

Combining: t13: i8 = Constant<0>

Combining: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1

Combining: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1

Combining: t9: Untyped = RegisterMask

Combining: t8: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0

Combining: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2

Combining: t6: i64 = Register $rdi

Combining: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t4: i64 = TargetConstant<0>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t1: i64 = Register %0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.4 '$s7partial1gSbyF:'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
    t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2
  t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
      t15: ch = CopyToReg t0, Register:i8 %13, Constant:i8<0>
      t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
    t16: ch = TokenFactor t15, t11
  t18: ch = br t16, BasicBlock:ch< 0x7f9e6a81ed40>


Legalizing node: t17: ch = BasicBlock< 0x7f9e6a81ed40>
Analyzing result type: ch
Legal result type
Legally typed node: t17: ch = BasicBlock< 0x7f9e6a81ed40>

Legalizing node: t14: i8 = Register %13
Ignoring node results
Legally typed node: t14: i8 = Register %13

Legalizing node: t13: i8 = Constant<0>
Analyzing result type: i8
Legal result type
Legally typed node: t13: i8 = Constant<0>

Legalizing node: t9: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t9: Untyped = RegisterMask

Legalizing node: t8: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0
Analyzing result type: i64
Legal result type
Legally typed node: t8: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0

Legalizing node: t6: i64 = Register $rdi
Ignoring node results
Legally typed node: t6: i64 = Register $rdi

Legalizing node: t4: i64 = TargetConstant<0>
Ignoring node results
Legally typed node: t4: i64 = TargetConstant<0>

Legalizing node: t1: i64 = Register %0
Ignoring node results
Legally typed node: t1: i64 = Register %0

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing node: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing node: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Legal operand
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Legally typed node: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2

Legalizing node: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2
Legal operand
Analyzing operand: t8: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0
Legal operand
Analyzing operand: t9: Untyped = RegisterMask
Legal operand
Analyzing operand: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2
Legal operand
Legally typed node: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1

Legalizing node: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
Legal operand
Analyzing operand: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
Legal operand
Legally typed node: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1

Legalizing node: t15: ch = CopyToReg t0, Register:i8 %13, Constant:i8<0>
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t13: i8 = Constant<0>
Legal operand
Legally typed node: t15: ch = CopyToReg t0, Register:i8 %13, Constant:i8<0>

Legalizing node: t16: ch = TokenFactor t15, t11
Analyzing result type: ch
Legal result type
Analyzing operand: t15: ch = CopyToReg t0, Register:i8 %13, Constant:i8<0>
Legal operand
Analyzing operand: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
Legal operand
Legally typed node: t16: ch = TokenFactor t15, t11

Legalizing node: t18: ch = br t16, BasicBlock:ch< 0x7f9e6a81ed40>
Analyzing result type: ch
Legal result type
Analyzing operand: t16: ch = TokenFactor t15, t11
Legal operand
Analyzing operand: t17: ch = BasicBlock< 0x7f9e6a81ed40>
Legal operand
Legally typed node: t18: ch = br t16, BasicBlock:ch< 0x7f9e6a81ed40>

Legalizing node: t65535: ch = handlenode t18
Analyzing result type: ch
Legal result type
Analyzing operand: t18: ch = br t16, BasicBlock:ch< 0x7f9e6a81ed40>
Legal operand
Legally typed node: t65535: ch = handlenode t18

Type-legalized selection DAG: %bb.4 '$s7partial1gSbyF:'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
    t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2
  t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
      t15: ch = CopyToReg t0, Register:i8 %13, Constant:i8<0>
      t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
    t16: ch = TokenFactor t15, t11
  t18: ch = br t16, BasicBlock:ch< 0x7f9e6a81ed40>



Legalizing: t18: ch = br t16, BasicBlock:ch< 0x7f9e6a81ed40>
Legal node: nothing to do

Legalizing: t16: ch = TokenFactor t15, t11
Legal node: nothing to do

Legalizing: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1

Legalizing: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
Legal node: nothing to do

Legalizing: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2
Legal node: nothing to do

Legalizing: t15: ch = CopyToReg t0, Register:i8 %13, Constant:i8<0>
Legal node: nothing to do

Legalizing: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Legalizing: t17: ch = BasicBlock< 0x7f9e6a81ed40>
Legal node: nothing to do

Legalizing: t14: i8 = Register %13

Legalizing: t13: i8 = Constant<0>
Legal node: nothing to do

Legalizing: t9: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t8: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0
Legal node: nothing to do

Legalizing: t6: i64 = Register $rdi

Legalizing: t4: i64 = TargetConstant<0>

Legalizing: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.4 '$s7partial1gSbyF:'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
    t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2
  t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
      t15: ch = CopyToReg t0, Register:i8 %13, Constant:i8<0>
      t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
    t16: ch = TokenFactor t15, t11
  t18: ch = br t16, BasicBlock:ch< 0x7f9e6a81ed40>



Legalizing: t18: ch = br t16, BasicBlock:ch< 0x7f9e6a81ed40>
Legal node: nothing to do

Combining: t18: ch = br t16, BasicBlock:ch< 0x7f9e6a81ed40>

Legalizing: t16: ch = TokenFactor t15, t11
Legal node: nothing to do

Combining: t16: ch = TokenFactor t15, t11

Legalizing: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1

Combining: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1

Legalizing: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
Legal node: nothing to do

Combining: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1

Legalizing: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2
Legal node: nothing to do

Combining: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2

Legalizing: t15: ch = CopyToReg t0, Register:i8 %13, Constant:i8<0>
Legal node: nothing to do

Combining: t15: ch = CopyToReg t0, Register:i8 %13, Constant:i8<0>

Legalizing: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing: t17: ch = BasicBlock< 0x7f9e6a81ed40>
Legal node: nothing to do

Combining: t17: ch = BasicBlock< 0x7f9e6a81ed40>

Legalizing: t14: i8 = Register %13

Combining: t14: i8 = Register %13

Legalizing: t13: i8 = Constant<0>
Legal node: nothing to do

Combining: t13: i8 = Constant<0>

Legalizing: t9: Untyped = RegisterMask
Legal node: nothing to do

Combining: t9: Untyped = RegisterMask

Legalizing: t8: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0
Legal node: nothing to do

Combining: t8: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0

Legalizing: t6: i64 = Register $rdi

Combining: t6: i64 = Register $rdi

Legalizing: t4: i64 = TargetConstant<0>

Combining: t4: i64 = TargetConstant<0>

Legalizing: t1: i64 = Register %0

Combining: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.4 '$s7partial1gSbyF:'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
    t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2
  t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
      t15: ch = CopyToReg t0, Register:i8 %13, Constant:i8<0>
      t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
    t16: ch = TokenFactor t15, t11
  t18: ch = br t16, BasicBlock:ch< 0x7f9e6a81ed40>


===== Instruction selection begins: %bb.4 ''

ISEL: Starting selection on root node: t18: ch = br t16, BasicBlock:ch< 0x7f9e6a81ed40>
ISEL: Starting pattern match
  Initial Opcode index to 131331
  Morphed node: t18: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t16
ISEL: Match complete!

ISEL: Starting selection on root node: t16: ch = TokenFactor t15, t11

ISEL: Starting selection on root node: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
ISEL: Starting pattern match
  Initial Opcode index to 130027
  Skipped scope entry (due to false predicate) at index 130043, continuing at 130054
  Morphed node: t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1
ISEL: Match complete!

ISEL: Starting selection on root node: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
ISEL: Starting pattern match
  Initial Opcode index to 91510
  Match failed at index 91515
  Continuing at 91598
  OpcodeSwitch from 91604 to 91608
  TypeSwitch[i64] from 91608 to 91611
  Morphed node: t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1
ISEL: Match complete!

ISEL: Starting selection on root node: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t2

ISEL: Starting selection on root node: t15: ch = CopyToReg t0, Register:i8 %13, Constant:i8<0>

ISEL: Starting selection on root node: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
ISEL: Starting pattern match
  Initial Opcode index to 130070
  Skipped scope entry (due to false predicate) at index 130085, continuing at 130100
Creating constant: t19: i32 = TargetConstant<0>
  Morphed node: t5: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

ISEL: Starting selection on root node: t17: ch = BasicBlock< 0x7f9e6a81ed40>

ISEL: Starting selection on root node: t14: i8 = Register %13

ISEL: Starting selection on root node: t13: i8 = Constant<0>
ISEL: Starting pattern match
  Initial Opcode index to 125031
  TypeSwitch[i8] from 125035 to 125047
  Created node: t20: i32,i32 = MOV32r0
Creating constant: t21: i32 = TargetConstant<1>
  Morphed node: t13: i8 = EXTRACT_SUBREG MOV32r0:i32,i32, TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t9: Untyped = RegisterMask

ISEL: Starting selection on root node: t8: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0

ISEL: Starting selection on root node: t6: i64 = Register $rdi

ISEL: Starting selection on root node: t4: i64 = TargetConstant<0>

ISEL: Starting selection on root node: t1: i64 = Register %0

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.4 '$s7partial1gSbyF:'
SelectionDAG has 20 nodes:
  t0: ch = EntryToken
    t5: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t7: ch,glue = CopyToReg t5:1, Register:i64 $rdi, t2
  t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1
        t13: i8 = EXTRACT_SUBREG MOV32r0:i32,i32, TargetConstant:i32<1>
      t15: ch = CopyToReg t0, Register:i8 %13, t13
      t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1
    t16: ch = TokenFactor t15, t11:1
  t18: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t16


********** List Scheduling %bb.4 '' **********
SU(0): t18: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t16

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Barrier
SU(1): t16: ch = TokenFactor t15, t11:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Barrier
    SU(2): Ord  Latency=1 Barrier
  Successors:
    SU(0): Ord  Latency=0 Barrier
SU(2): t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1

    t7: ch,glue = CopyToReg t5:1, Register:i64 $rdi, t2

    t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Ord  Latency=1 Barrier
    SU(3): Data Latency=1
  Successors:
    SU(1): Ord  Latency=1 Barrier
SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1
SU(4): t5: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Ord  Latency=1 Barrier
SU(5): t15: ch = CopyToReg t0, Register:i8 %13, t13

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1
  Successors:
    SU(1): Ord  Latency=1 Barrier
SU(6): t13: i8 = EXTRACT_SUBREG MOV32r0:i32,i32, TargetConstant:i32<1>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(7): Data Latency=1
  Successors:
    SU(5): Data Latency=1
SU(7): t20: i32,i32 = MOV32r0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(6): Data Latency=1

Examining Available:
Height 0: SU(0): t18: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t16


*** Scheduling [0]: SU(0): t18: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t16


Examining Available:
Height 0: SU(1): t16: ch = TokenFactor t15, t11:1


*** Scheduling [1]: SU(1): t16: ch = TokenFactor t15, t11:1


Examining Available:
Height 2: SU(5): t15: ch = CopyToReg t0, Register:i8 %13, t13

Height 2: SU(2): t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1

    t7: ch,glue = CopyToReg t5:1, Register:i64 $rdi, t2

    t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1


*** Scheduling [2]: SU(5): t15: ch = CopyToReg t0, Register:i8 %13, t13


Examining Available:
Height 3: SU(6): t13: i8 = EXTRACT_SUBREG MOV32r0:i32,i32, TargetConstant:i32<1>

Height 2: SU(2): t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1

    t7: ch,glue = CopyToReg t5:1, Register:i64 $rdi, t2

    t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1


*** Scheduling [3]: SU(6): t13: i8 = EXTRACT_SUBREG MOV32r0:i32,i32, TargetConstant:i32<1>


Examining Available:
Height 4: SU(7): t20: i32,i32 = MOV32r0

Height 2: SU(2): t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1

    t7: ch,glue = CopyToReg t5:1, Register:i64 $rdi, t2

    t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1


*** Scheduling [4]: SU(7): t20: i32,i32 = MOV32r0


Examining Available:
Height 2: SU(2): t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1

    t7: ch,glue = CopyToReg t5:1, Register:i64 $rdi, t2

    t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1


*** Scheduling [5]: SU(2): t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1

    t7: ch,glue = CopyToReg t5:1, Register:i64 $rdi, t2

    t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1


Examining Available:
Height 6: SU(4): t5: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

Height 6: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [6]: SU(4): t5: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0


Examining Available:
Height 6: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [7]: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

*** Final schedule ***
SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

SU(4): t5: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

SU(2): t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1

    t7: ch,glue = CopyToReg t5:1, Register:i64 $rdi, t2

    t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1

SU(7): t20: i32,i32 = MOV32r0

SU(6): t13: i8 = EXTRACT_SUBREG MOV32r0:i32,i32, TargetConstant:i32<1>

SU(5): t15: ch = CopyToReg t0, Register:i8 %13, t13

SU(1): t16: ch = TokenFactor t15, t11:1

SU(0): t18: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t16


Total amount of phi nodes to update: 1
Node 0 : (0x7f9e6a81ee08, 2147483661)
Creating new node: t2: i64 = undef
Creating constant: t3: i64 = TargetConstant<0>
Creating new node: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Creating new node: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
Creating new node: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
Creating new node: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
Creating new node: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
Creating new node: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
Creating new node: t15: i64,i64 = merge_values t12, t14
Creating new node: t17: i64,ch = CopyFromReg t0, Register:i64 %0
Creating new node: t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>
Creating new node: t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17
Creating new node: t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1
Creating new node: t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1
Creating new node: t26: i1 = setcc t15, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch
Creating new node: t27: i8 = any_extend t26
Creating new node: t29: ch = CopyToReg t0, Register:i8 %3, t27
Creating new node: t30: ch = TokenFactor t29, t23
Creating new node: t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>
Initial selection DAG: %bb.2 '$s7partial1gSbyF:'
SelectionDAG has 33 nodes:
  t0: ch = EntryToken
  t1: i64 = GlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
  t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
  t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
  t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
  t18: i64 = GlobalAddress<void (%swift.refcounted*)* @swift_release> 0
    t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>
    t17: i64,ch = CopyFromReg t0, Register:i64 %0
  t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17
  t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1
            t15: i64,i64 = merge_values t12, t14
          t26: i1 = setcc t15, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch
        t27: i8 = any_extend t26
      t29: ch = CopyToReg t0, Register:i8 %3, t27
      t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1
    t30: ch = TokenFactor t29, t23
  t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>



Combining: t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>

Combining: t31: ch = BasicBlock< 0x7f9e6a81ed40>

Combining: t30: ch = TokenFactor t29, t23

Combining: t29: ch = CopyToReg t0, Register:i8 %3, t27

Combining: t28: i8 = Register %3

Combining: t27: i8 = any_extend t26
Creating constant: t33: i8 = Constant<1>
Creating constant: t34: i8 = Constant<0>

Combining: t26: i1 = setcc t15, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch

Combining: t25: ch = seteq

Combining: t24: i64 = GlobalAddress<%swift.type* @"$ss6UInt16VN"> 0

Combining: t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1

Combining: t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1

Combining: t21: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0

Combining: t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17

Combining: t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t17: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t16: i64 = Register %0

Combining: t15: i64,i64 = merge_values t12, t14

Combining: t26: i1 = setcc t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch

Combining: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

Combining: t13: i64 = Register $rdx

Combining: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1

Combining: t11: i64 = Register $rax

Combining: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1

Combining: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1

Combining: t8: Untyped = RegisterMask

Combining: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0

Combining: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64

Combining: t5: i64 = Register $rdi

Combining: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t3: i64 = TargetConstant<0>

Combining: t2: i64 = undef

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.2 '$s7partial1gSbyF:'
SelectionDAG has 30 nodes:
  t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
  t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
  t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
      t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
    t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>
    t17: i64,ch = CopyFromReg t0, Register:i64 %0
  t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17
  t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1
          t26: i1 = setcc t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch
        t27: i8 = any_extend t26
      t29: ch = CopyToReg t0, Register:i8 %3, t27
      t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1
    t30: ch = TokenFactor t29, t23
  t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>


Legalizing node: t31: ch = BasicBlock< 0x7f9e6a81ed40>
Analyzing result type: ch
Legal result type
Legally typed node: t31: ch = BasicBlock< 0x7f9e6a81ed40>

Legalizing node: t28: i8 = Register %3
Ignoring node results
Legally typed node: t28: i8 = Register %3

Legalizing node: t25: ch = seteq
Analyzing result type: ch
Legal result type
Legally typed node: t25: ch = seteq

Legalizing node: t24: i64 = GlobalAddress<%swift.type* @"$ss6UInt16VN"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t24: i64 = GlobalAddress<%swift.type* @"$ss6UInt16VN"> 0

Legalizing node: t21: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0
Analyzing result type: i64
Legal result type
Legally typed node: t21: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0

Legalizing node: t16: i64 = Register %0
Ignoring node results
Legally typed node: t16: i64 = Register %0

Legalizing node: t13: i64 = Register $rdx
Ignoring node results
Legally typed node: t13: i64 = Register $rdx

Legalizing node: t11: i64 = Register $rax
Ignoring node results
Legally typed node: t11: i64 = Register $rax

Legalizing node: t8: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t8: Untyped = RegisterMask

Legalizing node: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0

Legalizing node: t5: i64 = Register $rdi
Ignoring node results
Legally typed node: t5: i64 = Register $rdi

Legalizing node: t3: i64 = TargetConstant<0>
Ignoring node results
Legally typed node: t3: i64 = TargetConstant<0>

Legalizing node: t2: i64 = undef
Analyzing result type: i64
Legal result type
Legally typed node: t2: i64 = undef

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing node: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Legal operand
Analyzing operand: t2: i64 = undef
Legal operand
Legally typed node: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64

Legalizing node: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
Legal operand
Analyzing operand: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0
Legal operand
Analyzing operand: t8: Untyped = RegisterMask
Legal operand
Analyzing operand: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
Legal operand
Legally typed node: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1

Legalizing node: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
Legal operand
Analyzing operand: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
Legal operand
Legally typed node: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1

Legalizing node: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
Legal operand
Analyzing operand: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
Legal operand
Legally typed node: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1

Legalizing node: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
Legal operand
Analyzing operand: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
Legal operand
Legally typed node: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

Legalizing node: t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
Legal operand
Legally typed node: t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing node: t26: i1 = setcc t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch
Analyzing result type: i1
Promote integer result: t26: i1 = setcc t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch

Creating new node: t35: i8 = setcc t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch
Legalizing node: t27: i8 = any_extend t26
Analyzing result type: i8
Legal result type
Analyzing operand: t26: i1 = setcc t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch
Promote integer operand: t27: i8 = any_extend t26

Legalizing node: t35: i8 = setcc t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch
Analyzing result type: i8
Legal result type
Analyzing operand: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
Legal operand
Analyzing operand: t24: i64 = GlobalAddress<%swift.type* @"$ss6UInt16VN"> 0
Legal operand
Analyzing operand: t25: ch = seteq
Legal operand
Legally typed node: t35: i8 = setcc t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch

Legalizing node: t29: ch = CopyToReg t0, Register:i8 %3, t35
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t35: i8 = setcc t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch
Legal operand
Legally typed node: t29: ch = CopyToReg t0, Register:i8 %3, t35

Legalizing node: t17: i64,ch = CopyFromReg t0, Register:i64 %0
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t17: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing node: t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>
Legal operand
Analyzing operand: t17: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Legally typed node: t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17

Legalizing node: t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17
Legal operand
Analyzing operand: t21: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0
Legal operand
Analyzing operand: t8: Untyped = RegisterMask
Legal operand
Analyzing operand: t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17
Legal operand
Legally typed node: t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1

Legalizing node: t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1
Legal operand
Analyzing operand: t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1
Legal operand
Legally typed node: t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1

Legalizing node: t30: ch = TokenFactor t29, t23
Analyzing result type: ch
Legal result type
Analyzing operand: t29: ch = CopyToReg t0, Register:i8 %3, t35
Legal operand
Analyzing operand: t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1
Legal operand
Legally typed node: t30: ch = TokenFactor t29, t23

Legalizing node: t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>
Analyzing result type: ch
Legal result type
Analyzing operand: t30: ch = TokenFactor t29, t23
Legal operand
Analyzing operand: t31: ch = BasicBlock< 0x7f9e6a81ed40>
Legal operand
Legally typed node: t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>

Legalizing node: t65535: ch = handlenode t32
Analyzing result type: ch
Legal result type
Analyzing operand: t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>
Legal operand
Legally typed node: t65535: ch = handlenode t32

Type-legalized selection DAG: %bb.2 '$s7partial1gSbyF:'
SelectionDAG has 29 nodes:
  t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
  t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
  t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
      t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
    t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>
    t17: i64,ch = CopyFromReg t0, Register:i64 %0
  t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17
  t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1
        t35: i8 = setcc t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch
      t29: ch = CopyToReg t0, Register:i8 %3, t35
      t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1
    t30: ch = TokenFactor t29, t23
  t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>



Combining: t35: i8 = setcc t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch

Combining: t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>

Combining: t31: ch = BasicBlock< 0x7f9e6a81ed40>

Combining: t30: ch = TokenFactor t29, t23

Combining: t29: ch = CopyToReg t0, Register:i8 %3, t35

Combining: t28: i8 = Register %3

Combining: t25: ch = seteq

Combining: t24: i64 = GlobalAddress<%swift.type* @"$ss6UInt16VN"> 0

Combining: t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1

Combining: t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1

Combining: t21: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0

Combining: t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17

Combining: t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t17: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t16: i64 = Register %0

Combining: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

Combining: t13: i64 = Register $rdx

Combining: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1

Combining: t11: i64 = Register $rax

Combining: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1

Combining: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1

Combining: t8: Untyped = RegisterMask

Combining: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0

Combining: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64

Combining: t5: i64 = Register $rdi

Combining: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t3: i64 = TargetConstant<0>

Combining: t2: i64 = undef

Combining: t0: ch = EntryToken
Optimized type-legalized selection DAG: %bb.2 '$s7partial1gSbyF:'
SelectionDAG has 29 nodes:
  t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
  t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
  t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
      t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
    t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>
    t17: i64,ch = CopyFromReg t0, Register:i64 %0
  t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17
  t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1
        t35: i8 = setcc t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch
      t29: ch = CopyToReg t0, Register:i8 %3, t35
      t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1
    t30: ch = TokenFactor t29, t23
  t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>



Legalizing: t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>
Legal node: nothing to do

Legalizing: t30: ch = TokenFactor t29, t23
Legal node: nothing to do

Legalizing: t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1

Legalizing: t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1
Legal node: nothing to do

Legalizing: t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17
Legal node: nothing to do

Legalizing: t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t29: ch = CopyToReg t0, Register:i8 %3, t35
Legal node: nothing to do

Legalizing: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
Legal node: nothing to do

Legalizing: t35: i8 = setcc t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch
Trying custom legalization
Creating new node: t36: i64,i32 = X86ISD::SUB t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0
Creating constant: t37: i8 = Constant<4>
Creating new node: t38: i8 = X86ISD::SETCC Constant:i8<4>, t36:1
Successfully custom legalized node
 ... replacing: t35: i8 = setcc t12, GlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0, seteq:ch
     with:      t38: i8 = X86ISD::SETCC Constant:i8<4>, t36:1

Legalizing: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
Legal node: nothing to do

Legalizing: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1

Legalizing: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
Legal node: nothing to do

Legalizing: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
Legal node: nothing to do

Legalizing: t17: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Legalizing: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t31: ch = BasicBlock< 0x7f9e6a81ed40>
Legal node: nothing to do

Legalizing: t28: i8 = Register %3

Legalizing: t24: i64 = GlobalAddress<%swift.type* @"$ss6UInt16VN"> 0
Trying custom legalization
Creating new node: t40: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]
Creating new node: t41: i64,ch = load<(load 8 from got)> t0, t40, undef:i64
Successfully custom legalized node
 ... replacing: t24: i64 = GlobalAddress<%swift.type* @"$ss6UInt16VN"> 0
     with:      t41: i64,ch = load<(load 8 from got)> t0, t40, undef:i64

Legalizing: t21: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0
Legal node: nothing to do

Legalizing: t16: i64 = Register %0

Legalizing: t13: i64 = Register $rdx

Legalizing: t11: i64 = Register $rax

Legalizing: t8: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0
Legal node: nothing to do

Legalizing: t5: i64 = Register $rdi

Legalizing: t3: i64 = TargetConstant<0>

Legalizing: t2: i64 = undef
Legal node: nothing to do

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t41: i64,ch = load<(load 8 from got)> t0, t40, undef:i64
Legalizing non-extending load operation

Legalizing: t40: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]
Legal node: nothing to do

Legalizing: t39: i64 = TargetGlobalAddress<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]
Legal node: nothing to do

Legalizing: t38: i8 = X86ISD::SETCC Constant:i8<4>, t36:1
Legal node: nothing to do

Legalizing: t37: i8 = Constant<4>
Legal node: nothing to do

Legalizing: t36: i64,i32 = X86ISD::SUB t12, t41
Legal node: nothing to do
Legalized selection DAG: %bb.2 '$s7partial1gSbyF:'
SelectionDAG has 32 nodes:
  t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
  t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
  t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
      t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
    t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>
    t17: i64,ch = CopyFromReg t0, Register:i64 %0
  t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17
  t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1
              t40: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]
            t41: i64,ch = load<(load 8 from got)> t0, t40, undef:i64
          t36: i64,i32 = X86ISD::SUB t12, t41
        t38: i8 = X86ISD::SETCC Constant:i8<4>, t36:1
      t29: ch = CopyToReg t0, Register:i8 %3, t38
      t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1
    t30: ch = TokenFactor t29, t23
  t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>



Legalizing: t41: i64,ch = load<(load 8 from got)> t0, t40, undef:i64
Legalizing non-extending load operation

Combining: t41: i64,ch = load<(load 8 from got)> t0, t40, undef:i64

Legalizing: t40: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]
Legal node: nothing to do

Combining: t40: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]

Legalizing: t39: i64 = TargetGlobalAddress<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]
Legal node: nothing to do

Combining: t39: i64 = TargetGlobalAddress<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]

Legalizing: t38: i8 = X86ISD::SETCC Constant:i8<4>, t36:1
Legal node: nothing to do

Combining: t38: i8 = X86ISD::SETCC Constant:i8<4>, t36:1

Legalizing: t37: i8 = Constant<4>
Legal node: nothing to do

Combining: t37: i8 = Constant<4>

Legalizing: t36: i64,i32 = X86ISD::SUB t12, t41
Legal node: nothing to do

Combining: t36: i64,i32 = X86ISD::SUB t12, t41

Legalizing: t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>
Legal node: nothing to do

Combining: t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>

Legalizing: t30: ch = TokenFactor t29, t23
Legal node: nothing to do

Combining: t30: ch = TokenFactor t29, t23

Legalizing: t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1

Combining: t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1

Legalizing: t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1
Legal node: nothing to do

Combining: t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1

Legalizing: t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17
Legal node: nothing to do

Combining: t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17

Legalizing: t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t29: ch = CopyToReg t0, Register:i8 %3, t38
Legal node: nothing to do

Combining: t29: ch = CopyToReg t0, Register:i8 %3, t38

Legalizing: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
Legal node: nothing to do

Combining: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

Legalizing: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
Legal node: nothing to do

Combining: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1

Legalizing: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1

Combining: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1

Legalizing: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
Legal node: nothing to do

Combining: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1

Legalizing: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
Legal node: nothing to do

Combining: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64

Legalizing: t17: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Combining: t17: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t31: ch = BasicBlock< 0x7f9e6a81ed40>
Legal node: nothing to do

Combining: t31: ch = BasicBlock< 0x7f9e6a81ed40>

Legalizing: t28: i8 = Register %3

Combining: t28: i8 = Register %3

Legalizing: t21: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0
Legal node: nothing to do

Combining: t21: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0

Legalizing: t16: i64 = Register %0

Combining: t16: i64 = Register %0

Legalizing: t13: i64 = Register $rdx

Combining: t13: i64 = Register $rdx

Legalizing: t11: i64 = Register $rax

Combining: t11: i64 = Register $rax

Legalizing: t8: Untyped = RegisterMask
Legal node: nothing to do

Combining: t8: Untyped = RegisterMask

Legalizing: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0
Legal node: nothing to do

Combining: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0

Legalizing: t5: i64 = Register $rdi

Combining: t5: i64 = Register $rdi

Legalizing: t3: i64 = TargetConstant<0>

Combining: t3: i64 = TargetConstant<0>

Legalizing: t2: i64 = undef
Legal node: nothing to do

Combining: t2: i64 = undef

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.2 '$s7partial1gSbyF:'
SelectionDAG has 32 nodes:
  t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
  t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
  t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1
      t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
    t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>
    t17: i64,ch = CopyFromReg t0, Register:i64 %0
  t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17
  t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1
              t40: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type* @"$ss6UInt16VN"> 0 [TF=5]
            t41: i64,ch = load<(load 8 from got)> t0, t40, undef:i64
          t36: i64,i32 = X86ISD::SUB t12, t41
        t38: i8 = X86ISD::SETCC Constant:i8<4>, t36:1
      t29: ch = CopyToReg t0, Register:i8 %3, t38
      t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1
    t30: ch = TokenFactor t29, t23
  t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>


===== Instruction selection begins: %bb.2 ''

ISEL: Starting selection on root node: t32: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>
ISEL: Starting pattern match
  Initial Opcode index to 131331
  Morphed node: t32: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t30
ISEL: Match complete!

ISEL: Starting selection on root node: t30: ch = TokenFactor t29, t23

ISEL: Starting selection on root node: t23: ch,glue = callseq_end t22, TargetConstant:i64<0>, TargetConstant:i64<0>, t22:1
ISEL: Starting pattern match
  Initial Opcode index to 130027
  Skipped scope entry (due to false predicate) at index 130043, continuing at 130054
  Morphed node: t23: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t22, t22:1
ISEL: Match complete!

ISEL: Starting selection on root node: t22: ch,glue = X86ISD::CALL t20, TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20:1
ISEL: Starting pattern match
  Initial Opcode index to 91510
  Match failed at index 91515
  Continuing at 91598
  OpcodeSwitch from 91604 to 91608
  TypeSwitch[i64] from 91608 to 91611
  Morphed node: t22: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20, t20:1
ISEL: Match complete!

ISEL: Starting selection on root node: t20: ch,glue = CopyToReg t19, Register:i64 $rdi, t17

ISEL: Starting selection on root node: t29: ch = CopyToReg t0, Register:i8 %3, t38

ISEL: Starting selection on root node: t19: ch,glue = callseq_start t14:1, TargetConstant:i64<0>, TargetConstant:i64<0>
ISEL: Starting pattern match
  Initial Opcode index to 130070
  Skipped scope entry (due to false predicate) at index 130085, continuing at 130100
Creating constant: t42: i32 = TargetConstant<0>
  Morphed node: t19: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t14:1
ISEL: Match complete!

ISEL: Starting selection on root node: t38: i8 = X86ISD::SETCC Constant:i8<4>, t36:1
ISEL: Starting pattern match
  Initial Opcode index to 130691
Creating constant: t43: i8 = TargetConstant<4>
Creating new node: t45: ch,glue = CopyToReg t0, Register:i32 $eflags, t36:1
  Morphed node: t38: i8 = SETCCr TargetConstant:i8<4>, t45:1
ISEL: Match complete!

ISEL: Starting selection on root node: t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

ISEL: Starting selection on root node: t36: i64,i32 = X86ISD::SUB t12, t41
ISEL: Starting pattern match
  Initial Opcode index to 89709
  Match failed at index 89730
  Continuing at 89749
  Match failed at index 89753
  Continuing at 89772
  Match failed at index 89776
  Continuing at 89795
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t47: i8 = TargetConstant<1>
  Morphed node: t36: i64,i32,ch = SUB64rm<Mem:(load 8 from got)> t12, Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type* @"$ss6UInt16VN"> 0 [TF=5], Register:i16 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t12: i64,ch,glue = CopyFromReg t10, Register:i64 $rax, t10:1

ISEL: Starting selection on root node: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1
ISEL: Starting pattern match
  Initial Opcode index to 130027
  Skipped scope entry (due to false predicate) at index 130043, continuing at 130054
  Morphed node: t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1
ISEL: Match complete!

ISEL: Starting selection on root node: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1
ISEL: Starting pattern match
  Initial Opcode index to 91510
  Match failed at index 91515
  Continuing at 91598
  OpcodeSwitch from 91604 to 91608
  TypeSwitch[i64] from 91608 to 91611
  Morphed node: t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1
ISEL: Match complete!

ISEL: Starting selection on root node: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, undef:i64

ISEL: Starting selection on root node: t17: i64,ch = CopyFromReg t0, Register:i64 %0

ISEL: Starting selection on root node: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
ISEL: Starting pattern match
  Initial Opcode index to 130070
  Skipped scope entry (due to false predicate) at index 130085, continuing at 130100
  Morphed node: t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t31: ch = BasicBlock< 0x7f9e6a81ed40>

ISEL: Starting selection on root node: t28: i8 = Register %3

ISEL: Starting selection on root node: t21: i64 = TargetGlobalAddress<void (%swift.refcounted*)* @swift_release> 0

ISEL: Starting selection on root node: t16: i64 = Register %0

ISEL: Starting selection on root node: t13: i64 = Register $rdx

ISEL: Starting selection on root node: t11: i64 = Register $rax

ISEL: Starting selection on root node: t8: Untyped = RegisterMask

ISEL: Starting selection on root node: t7: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0

ISEL: Starting selection on root node: t5: i64 = Register $rdi

ISEL: Starting selection on root node: t3: i64 = TargetConstant<0>

ISEL: Starting selection on root node: t2: i64 = undef

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.2 '$s7partial1gSbyF:'
SelectionDAG has 37 nodes:
  t0: ch = EntryToken
    t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0
  t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, IMPLICIT_DEF:i64
  t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1
  t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1
  t12: i64,ch,glue = CopyFromReg t10:1, Register:i64 $rax, t10:2
      t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2
    t19: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t14:1
    t17: i64,ch = CopyFromReg t0, Register:i64 %0
  t20: ch,glue = CopyToReg t19:1, Register:i64 $rdi, t17
  t22: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20, t20:1
            t36: i64,i32,ch = SUB64rm<Mem:(load 8 from got)> t12, Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type* @"$ss6UInt16VN"> 0 [TF=5], Register:i16 $noreg, t0
          t45: ch,glue = CopyToReg t0, Register:i32 $eflags, t36:1
        t38: i8 = SETCCr TargetConstant:i8<4>, t45:1
      t29: ch = CopyToReg t0, Register:i8 %3, t38
      t23: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t22, t22:1
    t30: ch = TokenFactor t29, t23:1
  t32: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t30


********** List Scheduling %bb.2 '' **********
SU(0): t32: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t30

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Barrier
SU(1): t30: ch = TokenFactor t29, t23:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Barrier
    SU(2): Ord  Latency=1 Barrier
  Successors:
    SU(0): Ord  Latency=0 Barrier
SU(2): t23: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t22, t22:1

    t20: ch,glue = CopyToReg t19:1, Register:i64 $rdi, t17

    t22: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20, t20:1

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(4): Ord  Latency=1 Barrier
    SU(3): Data Latency=1
  Successors:
    SU(1): Ord  Latency=1 Barrier
SU(3): t17: i64,ch = CopyFromReg t0, Register:i64 %0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1
SU(4): t19: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t14:1

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(5): Ord  Latency=1 Barrier
  Successors:
    SU(2): Ord  Latency=1 Barrier
SU(5): t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1

    t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1

    t12: i64,ch,glue = CopyFromReg t10:1, Register:i64 $rax, t10:2

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(7): Ord  Latency=1 Barrier
    SU(6): Data Latency=1
  Successors:
    SU(4): Ord  Latency=1 Barrier
    SU(10): Data Latency=1
SU(6): t2: i64 = IMPLICIT_DEF

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=1
SU(7): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Ord  Latency=1 Barrier
SU(8): t29: ch = CopyToReg t0, Register:i8 %3, t38

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(9): Data Latency=1
  Successors:
    SU(1): Ord  Latency=1 Barrier
SU(9): t38: i8 = SETCCr TargetConstant:i8<4>, t45:1

    t45: ch,glue = CopyToReg t0, Register:i32 $eflags, t36:1

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(10): Data Latency=1 Reg=$eflags
  Successors:
    SU(8): Data Latency=1
SU(10): t36: i64,i32,ch = SUB64rm<Mem:(load 8 from got)> t12, Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type* @"$ss6UInt16VN"> 0 [TF=5], Register:i16 $noreg, t0

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1
  Successors:
    SU(9): Data Latency=1 Reg=$eflags

Examining Available:
Height 0: SU(0): t32: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t30


*** Scheduling [0]: SU(0): t32: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t30


Examining Available:
Height 0: SU(1): t30: ch = TokenFactor t29, t23:1


*** Scheduling [1]: SU(1): t30: ch = TokenFactor t29, t23:1


Examining Available:
Height 2: SU(8): t29: ch = CopyToReg t0, Register:i8 %3, t38

Height 2: SU(2): t23: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t22, t22:1

    t20: ch,glue = CopyToReg t19:1, Register:i64 $rdi, t17

    t22: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20, t20:1


*** Scheduling [2]: SU(8): t29: ch = CopyToReg t0, Register:i8 %3, t38


Examining Available:
Height 3: SU(9): t38: i8 = SETCCr TargetConstant:i8<4>, t45:1

    t45: ch,glue = CopyToReg t0, Register:i32 $eflags, t36:1

Height 2: SU(2): t23: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t22, t22:1

    t20: ch,glue = CopyToReg t19:1, Register:i64 $rdi, t17

    t22: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20, t20:1


*** Scheduling [3]: SU(9): t38: i8 = SETCCr TargetConstant:i8<4>, t45:1

    t45: ch,glue = CopyToReg t0, Register:i32 $eflags, t36:1


Examining Available:
Height 4: SU(10): t36: i64,i32,ch = SUB64rm<Mem:(load 8 from got)> t12, Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type* @"$ss6UInt16VN"> 0 [TF=5], Register:i16 $noreg, t0

Height 2: SU(2): t23: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t22, t22:1

    t20: ch,glue = CopyToReg t19:1, Register:i64 $rdi, t17

    t22: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20, t20:1


*** Scheduling [4]: SU(10): t36: i64,i32,ch = SUB64rm<Mem:(load 8 from got)> t12, Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type* @"$ss6UInt16VN"> 0 [TF=5], Register:i16 $noreg, t0


Examining Available:
Height 2: SU(2): t23: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t22, t22:1

    t20: ch,glue = CopyToReg t19:1, Register:i64 $rdi, t17

    t22: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20, t20:1


*** Scheduling [5]: SU(2): t23: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t22, t22:1

    t20: ch,glue = CopyToReg t19:1, Register:i64 $rdi, t17

    t22: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20, t20:1


Examining Available:
Height 6: SU(4): t19: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t14:1

Height 6: SU(3): t17: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [6]: SU(4): t19: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t14:1


Examining Available:
Height 6: SU(3): t17: i64,ch = CopyFromReg t0, Register:i64 %0

Height 7: SU(5): t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1

    t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1

    t12: i64,ch,glue = CopyFromReg t10:1, Register:i64 $rax, t10:2


*** Scheduling [7]: SU(3): t17: i64,ch = CopyFromReg t0, Register:i64 %0


Examining Available:
Height 7: SU(5): t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1

    t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1

    t12: i64,ch,glue = CopyFromReg t10:1, Register:i64 $rax, t10:2


*** Scheduling [8]: SU(5): t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1

    t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1

    t12: i64,ch,glue = CopyFromReg t10:1, Register:i64 $rax, t10:2


Examining Available:
Height 9: SU(6): t2: i64 = IMPLICIT_DEF

Height 9: SU(7): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0


*** Scheduling [9]: SU(6): t2: i64 = IMPLICIT_DEF


Examining Available:
Height 9: SU(7): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0


*** Scheduling [10]: SU(7): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

*** Final schedule ***
SU(7): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

SU(6): t2: i64 = IMPLICIT_DEF

SU(5): t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rdx, t12:2

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1

    t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1

    t12: i64,ch,glue = CopyFromReg t10:1, Register:i64 $rax, t10:2

SU(3): t17: i64,ch = CopyFromReg t0, Register:i64 %0

SU(4): t19: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t14:1

SU(2): t23: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t22, t22:1

    t20: ch,glue = CopyToReg t19:1, Register:i64 $rdi, t17

    t22: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%swift.refcounted*)* @swift_release> 0, Register:i64 $rdi, RegisterMask:Untyped, t20, t20:1

SU(10): t36: i64,i32,ch = SUB64rm<Mem:(load 8 from got)> t12, Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type* @"$ss6UInt16VN"> 0 [TF=5], Register:i16 $noreg, t0

SU(9): t38: i8 = SETCCr TargetConstant:i8<4>, t45:1

    t45: ch,glue = CopyToReg t0, Register:i32 $eflags, t36:1

SU(8): t29: ch = CopyToReg t0, Register:i8 %3, t38

SU(1): t30: ch = TokenFactor t29, t23:1

SU(0): t32: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t30


Total amount of phi nodes to update: 1
Node 0 : (0x7f9e6a81ee08, 2147483651)
Creating new node: t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>
Creating new node: t5: i8,ch = CopyFromReg t0, Register:i8 %2
Creating new node: t6: i1 = truncate t5
Creating constant: t7: i32 = TargetConstant<0>
Creating new node: t9: ch,glue = CopyToReg t3, Register:i8 $al, t5
Creating new node: t10: ch = X86ISD::RET_FLAG t9, TargetConstant:i32<0>, Register:i8 $al, t9:1
Initial selection DAG: %bb.1 '$s7partial1gSbyF:'
SelectionDAG has 11 nodes:
  t0: ch = EntryToken
  t1: i64 = FrameIndex<0>
  t5: i8,ch = CopyFromReg t0, Register:i8 %2
  t6: i1 = truncate t5
    t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>
  t9: ch,glue = CopyToReg t3, Register:i8 $al, t5
  t10: ch = X86ISD::RET_FLAG t9, TargetConstant:i32<0>, Register:i8 $al, t9:1



Combining: t10: ch = X86ISD::RET_FLAG t9, TargetConstant:i32<0>, Register:i8 $al, t9:1

Combining: t9: ch,glue = CopyToReg t3, Register:i8 $al, t5

Combining: t8: i8 = Register $al

Combining: t7: i32 = TargetConstant<0>

Combining: t5: i8,ch = CopyFromReg t0, Register:i8 %2

Combining: t4: i8 = Register %2

Combining: t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>

Combining: t2: i64 = TargetFrameIndex<0>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.1 '$s7partial1gSbyF:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>
    t5: i8,ch = CopyFromReg t0, Register:i8 %2
  t9: ch,glue = CopyToReg t3, Register:i8 $al, t5
  t10: ch = X86ISD::RET_FLAG t9, TargetConstant:i32<0>, Register:i8 $al, t9:1


Legalizing node: t8: i8 = Register $al
Ignoring node results
Legally typed node: t8: i8 = Register $al

Legalizing node: t7: i32 = TargetConstant<0>
Ignoring node results
Legally typed node: t7: i32 = TargetConstant<0>

Legalizing node: t4: i8 = Register %2
Ignoring node results
Legally typed node: t4: i8 = Register %2

Legalizing node: t2: i64 = TargetFrameIndex<0>
Analyzing result type: i64
Legal result type
Legally typed node: t2: i64 = TargetFrameIndex<0>

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t2: i64 = TargetFrameIndex<0>
Legal operand
Legally typed node: t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>

Legalizing node: t5: i8,ch = CopyFromReg t0, Register:i8 %2
Analyzing result type: i8
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t5: i8,ch = CopyFromReg t0, Register:i8 %2

Legalizing node: t9: ch,glue = CopyToReg t3, Register:i8 $al, t5
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>
Legal operand
Analyzing operand: t5: i8,ch = CopyFromReg t0, Register:i8 %2
Legal operand
Legally typed node: t9: ch,glue = CopyToReg t3, Register:i8 $al, t5

Legalizing node: t10: ch = X86ISD::RET_FLAG t9, TargetConstant:i32<0>, Register:i8 $al, t9:1
Analyzing result type: ch
Legal result type
Analyzing operand: t9: ch,glue = CopyToReg t3, Register:i8 $al, t5
Legal operand
Analyzing operand: t9: ch,glue = CopyToReg t3, Register:i8 $al, t5
Legal operand
Legally typed node: t10: ch = X86ISD::RET_FLAG t9, TargetConstant:i32<0>, Register:i8 $al, t9:1

Legalizing node: t65535: ch = handlenode t10
Analyzing result type: ch
Legal result type
Analyzing operand: t10: ch = X86ISD::RET_FLAG t9, TargetConstant:i32<0>, Register:i8 $al, t9:1
Legal operand
Legally typed node: t65535: ch = handlenode t10

Type-legalized selection DAG: %bb.1 '$s7partial1gSbyF:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>
    t5: i8,ch = CopyFromReg t0, Register:i8 %2
  t9: ch,glue = CopyToReg t3, Register:i8 $al, t5
  t10: ch = X86ISD::RET_FLAG t9, TargetConstant:i32<0>, Register:i8 $al, t9:1



Legalizing: t10: ch = X86ISD::RET_FLAG t9, TargetConstant:i32<0>, Register:i8 $al, t9:1
Legal node: nothing to do

Legalizing: t9: ch,glue = CopyToReg t3, Register:i8 $al, t5
Legal node: nothing to do

Legalizing: t5: i8,ch = CopyFromReg t0, Register:i8 %2
Legal node: nothing to do

Legalizing: t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>
Legal node: nothing to do

Legalizing: t8: i8 = Register $al

Legalizing: t7: i32 = TargetConstant<0>

Legalizing: t4: i8 = Register %2

Legalizing: t2: i64 = TargetFrameIndex<0>
Legal node: nothing to do

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.1 '$s7partial1gSbyF:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>
    t5: i8,ch = CopyFromReg t0, Register:i8 %2
  t9: ch,glue = CopyToReg t3, Register:i8 $al, t5
  t10: ch = X86ISD::RET_FLAG t9, TargetConstant:i32<0>, Register:i8 $al, t9:1



Legalizing: t10: ch = X86ISD::RET_FLAG t9, TargetConstant:i32<0>, Register:i8 $al, t9:1
Legal node: nothing to do

Combining: t10: ch = X86ISD::RET_FLAG t9, TargetConstant:i32<0>, Register:i8 $al, t9:1

Legalizing: t9: ch,glue = CopyToReg t3, Register:i8 $al, t5
Legal node: nothing to do

Combining: t9: ch,glue = CopyToReg t3, Register:i8 $al, t5

Legalizing: t5: i8,ch = CopyFromReg t0, Register:i8 %2
Legal node: nothing to do

Combining: t5: i8,ch = CopyFromReg t0, Register:i8 %2

Legalizing: t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>
Legal node: nothing to do

Combining: t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>

Legalizing: t8: i8 = Register $al

Combining: t8: i8 = Register $al

Legalizing: t7: i32 = TargetConstant<0>

Combining: t7: i32 = TargetConstant<0>

Legalizing: t4: i8 = Register %2

Combining: t4: i8 = Register %2

Legalizing: t2: i64 = TargetFrameIndex<0>
Legal node: nothing to do

Combining: t2: i64 = TargetFrameIndex<0>

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.1 '$s7partial1gSbyF:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>
    t5: i8,ch = CopyFromReg t0, Register:i8 %2
  t9: ch,glue = CopyToReg t3, Register:i8 $al, t5
  t10: ch = X86ISD::RET_FLAG t9, TargetConstant:i32<0>, Register:i8 $al, t9:1


===== Instruction selection begins: %bb.1 ''

ISEL: Starting selection on root node: t10: ch = X86ISD::RET_FLAG t9, TargetConstant:i32<0>, Register:i8 $al, t9:1
ISEL: Starting pattern match
  Initial Opcode index to 130673
  Morphed node: t10: ch = RET TargetConstant:i32<0>, Register:i8 $al, t9, t9:1
ISEL: Match complete!

ISEL: Starting selection on root node: t9: ch,glue = CopyToReg t3, Register:i8 $al, t5

ISEL: Starting selection on root node: t5: i8,ch = CopyFromReg t0, Register:i8 %2

ISEL: Starting selection on root node: t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>

ISEL: Starting selection on root node: t8: i8 = Register $al

ISEL: Starting selection on root node: t7: i32 = TargetConstant<0>

ISEL: Starting selection on root node: t4: i8 = Register %2

ISEL: Starting selection on root node: t2: i64 = TargetFrameIndex<0>

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.1 '$s7partial1gSbyF:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>
    t5: i8,ch = CopyFromReg t0, Register:i8 %2
  t9: ch,glue = CopyToReg t3, Register:i8 $al, t5
  t10: ch = RET TargetConstant:i32<0>, Register:i8 $al, t9, t9:1


********** List Scheduling %bb.1 '' **********
SU(0): t10: ch = RET TargetConstant:i32<0>, Register:i8 $al, t9, t9:1

    t9: ch,glue = CopyToReg t3, Register:i8 $al, t5

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Barrier
    SU(1): Data Latency=1
SU(1): t5: i8,ch = CopyFromReg t0, Register:i8 %2

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(2): t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t10: ch = RET TargetConstant:i32<0>, Register:i8 $al, t9, t9:1

    t9: ch,glue = CopyToReg t3, Register:i8 $al, t5


*** Scheduling [0]: SU(0): t10: ch = RET TargetConstant:i32<0>, Register:i8 $al, t9, t9:1

    t9: ch,glue = CopyToReg t3, Register:i8 $al, t5


Examining Available:
Height 1: SU(1): t5: i8,ch = CopyFromReg t0, Register:i8 %2

Height 1: SU(2): t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>


*** Scheduling [1]: SU(1): t5: i8,ch = CopyFromReg t0, Register:i8 %2


Examining Available:
Height 1: SU(2): t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>


*** Scheduling [2]: SU(2): t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>

*** Final schedule ***
SU(2): t3: ch = lifetime.end<0 to 2> t0, TargetFrameIndex:i64<0>

SU(1): t5: i8,ch = CopyFromReg t0, Register:i8 %2

SU(0): t10: ch = RET TargetConstant:i32<0>, Register:i8 $al, t9, t9:1

    t9: ch,glue = CopyToReg t3, Register:i8 $al, t5


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1gSbyF: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=2, align=8, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2(0x30000000), %bb.3(0x50000000); %bb.2(37.50%), %bb.3(62.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @"$s7partial8makeAorBAA1ACyF", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = COPY $rax
  %0:gr64 = COPY %5:gr64
  LIFETIME_START %stack.0
  MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
  %1:gr64 = MOV64rm %5:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
  %6:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
  %7:gr64 = SUB64rr %1:gr64(tied-def 0), killed %6:gr64, implicit-def $eflags
  JCC_1 %bb.2, 4, implicit $eflags
  JMP_1 %bb.3

bb.1 (%ir-block.8):
; predecessors: %bb.5, %bb.4, %bb.2

  %2:gr8 = PHI %4:gr8, %bb.5, %13:gr8, %bb.4, %3:gr8, %bb.2
  LIFETIME_END %stack.0
  $al = COPY %2:gr8
  RET 0, $al

bb.2 (%ir-block.11):
; predecessors: %bb.0
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = IMPLICIT_DEF
  $rdi = COPY %15:gr64
  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %16:gr64 = COPY $rax
  %17:gr64 = COPY $rdx
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = SUB64rm %16:gr64(tied-def 0), $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
  %3:gr8 = SETCCr 4, implicit $eflags
  JMP_1 %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.0
  successors: %bb.4(0x30000000), %bb.5(0x50000000); %bb.4(37.50%), %bb.5(62.50%)

  %8:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
  %9:gr64 = SUB64rr %1:gr64(tied-def 0), killed %8:gr64, implicit-def $eflags
  JCC_1 %bb.5, 5, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32r0 implicit-def dead $eflags
  %13:gr8 = COPY %14.sub_8bit:gr32
  JMP_1 %bb.1

bb.5 (%ir-block.20):
; predecessors: %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
  %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %11:gr64
  $rsi = COPY %10:gr64
  $r13 = COPY %0:gr64
  CALL64m %1:gr64, 1, $noreg, 88, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $r13, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (invariant load 8 from %ir.22)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr8 = COPY $al
  %4:gr8 = COPY %12:gr8
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.1

# End machine code for function $s7partial1gSbyF.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1gSbyF: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=2, align=8, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2(0x30000000), %bb.3(0x50000000); %bb.2(37.50%), %bb.3(62.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @"$s7partial8makeAorBAA1ACyF", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = COPY $rax
  %0:gr64 = COPY %5:gr64
  LIFETIME_START %stack.0
  MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
  %1:gr64 = MOV64rm %5:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
  %6:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
  %7:gr64 = SUB64rr %1:gr64(tied-def 0), killed %6:gr64, implicit-def $eflags
  JCC_1 %bb.2, 4, implicit $eflags
  JMP_1 %bb.3

bb.1 (%ir-block.8):
; predecessors: %bb.5, %bb.4, %bb.2

  %2:gr8 = PHI %4:gr8, %bb.5, %13:gr8, %bb.4, %3:gr8, %bb.2
  LIFETIME_END %stack.0
  $al = COPY %2:gr8
  RET 0, $al

bb.2 (%ir-block.11):
; predecessors: %bb.0
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %15:gr64 = IMPLICIT_DEF
  $rdi = COPY %15:gr64
  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %16:gr64 = COPY $rax
  %17:gr64 = COPY $rdx
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = SUB64rm %16:gr64(tied-def 0), $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
  %3:gr8 = SETCCr 4, implicit $eflags
  JMP_1 %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.0
  successors: %bb.4(0x30000000), %bb.5(0x50000000); %bb.4(37.50%), %bb.5(62.50%)

  %8:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
  %9:gr64 = SUB64rr %1:gr64(tied-def 0), killed %8:gr64, implicit-def $eflags
  JCC_1 %bb.5, 5, implicit $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32r0 implicit-def dead $eflags
  %13:gr8 = COPY %14.sub_8bit:gr32
  JMP_1 %bb.1

bb.5 (%ir-block.20):
; predecessors: %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
  %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %11:gr64
  $rsi = COPY %10:gr64
  $r13 = COPY %0:gr64
  CALL64m %1:gr64, 1, $noreg, 88, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $r13, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (invariant load 8 from %ir.22)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr8 = COPY $al
  %4:gr8 = COPY %12:gr8
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.1

# End machine code for function $s7partial1gSbyF.

# Machine code for function $s7partial1gSbyF: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=2, align=8, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2(0x30000000), %bb.3(0x50000000); %bb.2(37.50%), %bb.3(62.50%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  CALL64pcrel32 @"$s7partial8makeAorBAA1ACyF", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
48B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
64B	  %5:gr64 = COPY $rax
80B	  %0:gr64 = COPY %5:gr64
96B	  LIFETIME_START %stack.0
112B	  MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
128B	  %1:gr64 = MOV64rm %5:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
144B	  %6:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
160B	  %7:gr64 = SUB64rr %1:gr64(tied-def 0), killed %6:gr64, implicit-def $eflags
176B	  JCC_1 %bb.2, 4, implicit $eflags
192B	  JMP_1 %bb.3

208B	bb.1 (%ir-block.8):
	; predecessors: %bb.5, %bb.4, %bb.2

224B	  %2:gr8 = PHI %4:gr8, %bb.5, %13:gr8, %bb.4, %3:gr8, %bb.2
240B	  LIFETIME_END %stack.0
256B	  $al = COPY %2:gr8
272B	  RET 0, $al

288B	bb.2 (%ir-block.11):
	; predecessors: %bb.0
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %15:gr64 = IMPLICIT_DEF
336B	  $rdi = COPY %15:gr64
352B	  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
368B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
384B	  %16:gr64 = COPY $rax
400B	  %17:gr64 = COPY $rdx
416B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
432B	  $rdi = COPY %0:gr64
448B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
464B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
480B	  %18:gr64 = SUB64rm %16:gr64(tied-def 0), $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
496B	  %3:gr8 = SETCCr 4, implicit $eflags
512B	  JMP_1 %bb.1

528B	bb.3 (%ir-block.16):
	; predecessors: %bb.0
	  successors: %bb.4(0x30000000), %bb.5(0x50000000); %bb.4(37.50%), %bb.5(62.50%)

544B	  %8:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
560B	  %9:gr64 = SUB64rr %1:gr64(tied-def 0), killed %8:gr64, implicit-def $eflags
576B	  JCC_1 %bb.5, 5, implicit $eflags
592B	  JMP_1 %bb.4

608B	bb.4 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

624B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
640B	  $rdi = COPY %0:gr64
656B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
672B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
688B	  %14:gr32 = MOV32r0 implicit-def dead $eflags
704B	  %13:gr8 = COPY %14.sub_8bit:gr32
720B	  JMP_1 %bb.1

736B	bb.5 (%ir-block.20):
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
768B	  %10:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
784B	  %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
800B	  $rdi = COPY %11:gr64
816B	  $rsi = COPY %10:gr64
832B	  $r13 = COPY %0:gr64
848B	  CALL64m %1:gr64, 1, $noreg, 88, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $r13, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (invariant load 8 from %ir.22)
864B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
880B	  %12:gr8 = COPY $al
896B	  %4:gr8 = COPY %12:gr8
912B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  $rdi = COPY %0:gr64
944B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
976B	  JMP_1 %bb.1

# End machine code for function $s7partial1gSbyF.

********** Stack Coloring **********
********** Function: $s7partial1gSbyF
Found a lifetime start marker for slot #0 with allocation: 
Found a lifetime end marker for slot #0 with allocation: 
Conservative slots : { 0 }
Found a use of slot #0 at %bb.0 index 112B with allocation: 
Found a use of slot #0 at %bb.5 index 784B with allocation: 
Found 2 markers and 1 slots
Slot structure:
Slot #0 - 2 bytes.
Total Stack size: 2 bytes

Will not try to merge slots.
Removed 2 markers.
DeadMachineInstructionElim: DELETING: %17:gr64 = COPY $rdx
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.5
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1gSbyF
Machine InstCombiner: $s7partial1gSbyF
Combining MBB 
Combining MBB 
Combining MBB 
Combining MBB 
Combining MBB 
Combining MBB 
********** X86 cmov Conversion : $s7partial1gSbyF**********
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.5
******** Pre-regalloc Machine LICM: $s7partial1gSbyF ********
Entering: 
Entering: 
Entering: 
Exiting: 
Entering: 
Exiting: 
Exiting: 
Entering: 
Exiting: 
Entering: 
Exiting: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.1
Last visited node: %bb.5
		Looking for non-trivial roots
Total: 6, Num: 7
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.1
3: %bb.2
4: %bb.0
5: %bb.4
6: %bb.3
7: %bb.5
Found roots: %bb.1 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.5

block-frequency: $s7partial1gSbyF
=================================
reverse-post-order-traversal
 - 0: BB0[]
 - 1: BB3[]
 - 2: BB5[]
 - 3: BB4[]
 - 4: BB2[]
 - 5: BB1[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => [ local  ] weight = 805306368, succ = BB2[]
  => [ local  ] weight = 1342177280, succ = BB3[]
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to BB3[]
  => assign 6000000000000000 (0000000000000000) to BB2[]
 - node: BB3[]
  => [ local  ] weight = 805306368, succ = BB4[]
  => [ local  ] weight = 1342177280, succ = BB5[]
  => mass:  9fffffffffffffff
  => assign 63ffffffffffffff (3c00000000000000) to BB5[]
  => assign 3c00000000000000 (0000000000000000) to BB4[]
 - node: BB5[]
  => [ local  ] weight = 2147483648, succ = BB1[]
  => mass:  63ffffffffffffff
  => assign 63ffffffffffffff (0000000000000000) to BB1[]
 - node: BB4[]
  => [ local  ] weight = 2147483648, succ = BB1[]
  => mass:  3c00000000000000
  => assign 3c00000000000000 (0000000000000000) to BB1[]
 - node: BB2[]
  => [ local  ] weight = 2147483648, succ = BB1[]
  => mass:  6000000000000000
  => assign 6000000000000000 (0000000000000000) to BB1[]
 - node: BB1[]
  => mass:  ffffffffffffffff
float-to-int: min = 0.234375, max = 1.0, factor = 34.13333333
 - BB0[]: float = 1.0, scaled = 34.13333333, int = 34
 - BB3[]: float = 0.625, scaled = 21.33333333, int = 21
 - BB5[]: float = 0.390625, scaled = 13.33333333, int = 13
 - BB4[]: float = 0.234375, scaled = 8.0, int = 8
 - BB2[]: float = 0.375, scaled = 12.8, int = 12
 - BB1[]: float = 1.0, scaled = 34.13333333, int = 34
block-frequency-info: $s7partial1gSbyF
 - BB0[]: float = 1.0, int = 34
 - BB1[]: float = 1.0, int = 34
 - BB2[]: float = 0.375, int = 12
 - BB3[]: float = 0.625, int = 21
 - BB4[]: float = 0.23438, int = 8
 - BB5[]: float = 0.39063, int = 13

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1gSbyF
Encountered load fold barrier on CALL64pcrel32 @"$s7partial8makeAorBAA1ACyF", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
Encountered load fold barrier on MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
Encountered load fold barrier on CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
Encountered load fold barrier on CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
Encountered load fold barrier on CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
Encountered load fold barrier on CALL64m %1:gr64, 1, $noreg, 88, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $r13, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (invariant load 8 from %ir.22)
Encountered load fold barrier on CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
**** Analysing $s7partial1gSbyF
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1gSbyF **********
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.5
********** X86 EFLAGS copy lowering : $s7partial1gSbyF **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1gSbyF
%bb.2 has 1 implicit defs.
Processing %15:gr64 = IMPLICIT_DEF
Converting to IMPLICIT_DEF: $rdi = COPY undef %15:gr64
Processing $rdi = IMPLICIT_DEF undef %15:gr64
Physreg user: CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.5
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1gSbyF
# Machine code for function $s7partial1gSbyF: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=2, align=8, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2(0x30000000), %bb.3(0x50000000); %bb.2(37.50%), %bb.3(62.50%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  CALL64pcrel32 @"$s7partial8makeAorBAA1ACyF", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
48B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
64B	  %5:gr64 = COPY killed $rax
80B	  %0:gr64 = COPY %5:gr64
96B	  MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
112B	  %1:gr64 = MOV64rm killed %5:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
128B	  %6:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
144B	  CMP64rr %1:gr64, killed %6:gr64, implicit-def $eflags
160B	  JCC_1 %bb.2, 4, implicit killed $eflags
176B	  JMP_1 %bb.3

192B	bb.1 (%ir-block.8):
	; predecessors: %bb.5, %bb.4, %bb.2

208B	  %2:gr8 = COPY killed %19:gr8
224B	  $al = COPY killed %2:gr8
240B	  RET 0, killed $al

256B	bb.2 (%ir-block.11):
	; predecessors: %bb.0
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

272B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
304B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %16:gr64 = COPY killed $rax
336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
352B	  $rdi = COPY killed %0:gr64
368B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP64rm killed %16:gr64, $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
416B	  %3:gr8 = SETCCr 4, implicit killed $eflags
432B	  %19:gr8 = COPY killed %3:gr8
448B	  JMP_1 %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.0
	  successors: %bb.4(0x30000000), %bb.5(0x50000000); %bb.4(37.50%), %bb.5(62.50%)

480B	  %8:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
496B	  CMP64rr %1:gr64, killed %8:gr64, implicit-def $eflags
512B	  JCC_1 %bb.5, 5, implicit killed $eflags
528B	  JMP_1 %bb.4

544B	bb.4 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY killed %0:gr64
592B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %14:gr32 = MOV32r0 implicit-def dead $eflags
640B	  %13:gr8 = COPY killed %14.sub_8bit:gr32
656B	  %19:gr8 = COPY killed %13:gr8
672B	  JMP_1 %bb.1

688B	bb.5 (%ir-block.20):
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
720B	  %10:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
736B	  %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
752B	  $rdi = COPY killed %11:gr64
768B	  $rsi = COPY killed %10:gr64
784B	  $r13 = COPY %0:gr64
800B	  CALL64m killed %1:gr64, 1, $noreg, 88, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $r13, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (invariant load 8 from %ir.22)
816B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
832B	  %12:gr8 = COPY killed $al
848B	  %4:gr8 = COPY killed %12:gr8
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
880B	  $rdi = COPY killed %0:gr64
896B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
912B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  %19:gr8 = COPY killed %4:gr8
944B	  JMP_1 %bb.1

# End machine code for function $s7partial1gSbyF.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%0 [80r,192B:0)[256B,352r:0)[464B,576r:0)[688B,880r:0)  0@80r weight:0.000000e+00
%1 [112r,192B:0)[464B,544B:0)[688B,800r:0)  0@112r weight:0.000000e+00
%2 [208r,224r:0)  0@208r weight:0.000000e+00
%3 [416r,432r:0)  0@416r weight:0.000000e+00
%4 [848r,928r:0)  0@848r weight:0.000000e+00
%5 [64r,112r:0)  0@64r weight:0.000000e+00
%6 [128r,144r:0)  0@128r weight:0.000000e+00
%8 [480r,496r:0)  0@480r weight:0.000000e+00
%10 [720r,768r:0)  0@720r weight:0.000000e+00
%11 [736r,752r:0)  0@736r weight:0.000000e+00
%12 [832r,848r:0)  0@832r weight:0.000000e+00
%13 [640r,656r:0)  0@640r weight:0.000000e+00
%14 [624r,640r:0)  0@624r weight:0.000000e+00
%16 [320r,400r:0)  0@320r weight:0.000000e+00
%19 [192B,208r:3)[432r,464B:2)[656r,688B:1)[928r,960B:0)  0@928r 1@656r 2@432r 3@192B-phi weight:0.000000e+00
RegMasks: 32r 288r 368r 592r 800r 896r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1gSbyF: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=2, align=8, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2(0x30000000), %bb.3(0x50000000); %bb.2(37.50%), %bb.3(62.50%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  CALL64pcrel32 @"$s7partial8makeAorBAA1ACyF", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
48B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
64B	  %5:gr64 = COPY killed $rax
80B	  %0:gr64 = COPY %5:gr64
96B	  MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
112B	  %1:gr64 = MOV64rm %5:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
128B	  %6:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
144B	  CMP64rr %1:gr64, %6:gr64, implicit-def $eflags
160B	  JCC_1 %bb.2, 4, implicit killed $eflags
176B	  JMP_1 %bb.3

192B	bb.1 (%ir-block.8):
	; predecessors: %bb.5, %bb.4, %bb.2

208B	  %2:gr8 = COPY %19:gr8
224B	  $al = COPY %2:gr8
240B	  RET 0, killed $al

256B	bb.2 (%ir-block.11):
	; predecessors: %bb.0
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

272B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
304B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %16:gr64 = COPY killed $rax
336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
352B	  $rdi = COPY %0:gr64
368B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP64rm %16:gr64, $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
416B	  %3:gr8 = SETCCr 4, implicit killed $eflags
432B	  %19:gr8 = COPY %3:gr8
448B	  JMP_1 %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.0
	  successors: %bb.4(0x30000000), %bb.5(0x50000000); %bb.4(37.50%), %bb.5(62.50%)

480B	  %8:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
496B	  CMP64rr %1:gr64, %8:gr64, implicit-def $eflags
512B	  JCC_1 %bb.5, 5, implicit killed $eflags
528B	  JMP_1 %bb.4

544B	bb.4 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %0:gr64
592B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %14:gr32 = MOV32r0 implicit-def dead $eflags
640B	  %13:gr8 = COPY %14.sub_8bit:gr32
656B	  %19:gr8 = COPY %13:gr8
672B	  JMP_1 %bb.1

688B	bb.5 (%ir-block.20):
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
720B	  %10:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
736B	  %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
752B	  $rdi = COPY %11:gr64
768B	  $rsi = COPY %10:gr64
784B	  $r13 = COPY %0:gr64
800B	  CALL64m %1:gr64, 1, $noreg, 88, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $r13, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (invariant load 8 from %ir.22)
816B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
832B	  %12:gr8 = COPY killed $al
848B	  %4:gr8 = COPY %12:gr8
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
880B	  $rdi = COPY %0:gr64
896B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
912B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
928B	  %19:gr8 = COPY %4:gr8
944B	  JMP_1 %bb.1

# End machine code for function $s7partial1gSbyF.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1gSbyF
********** JOINING INTERVALS ***********
:
224B	$al = COPY %2:gr8
	Considering merging %2 with $al
	Can only merge into reserved registers.
:
:
64B	%5:gr64 = COPY killed $rax
	Considering merging %5 with $rax
	Can only merge into reserved registers.
:
320B	%16:gr64 = COPY killed $rax
	Considering merging %16 with $rax
	Can only merge into reserved registers.
352B	$rdi = COPY %0:gr64
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
:
576B	$rdi = COPY %0:gr64
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
:
752B	$rdi = COPY %11:gr64
	Considering merging %11 with $rdi
	Can only merge into reserved registers.
768B	$rsi = COPY %10:gr64
	Considering merging %10 with $rsi
	Can only merge into reserved registers.
784B	$r13 = COPY %0:gr64
	Considering merging %0 with $r13
	Can only merge into reserved registers.
832B	%12:gr8 = COPY killed $al
	Considering merging %12 with $al
	Can only merge into reserved registers.
880B	$rdi = COPY %0:gr64
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
208B	%2:gr8 = COPY %19:gr8
	Considering merging to GR8 with %2 in %19
		RHS = %2 [208r,224r:0)  0@208r weight:0.000000e+00
		LHS = %19 [192B,208r:3)[432r,464B:2)[656r,688B:1)[928r,960B:0)  0@928r 1@656r 2@432r 3@192B-phi weight:0.000000e+00
		merge %2:0@208r into %19:3@192B --> @192B
		erased:	208r	%2:gr8 = COPY %19:gr8
AllocationOrder(GR8) = [ $al $cl $dl $sil $dil $r8b $r9b $r10b $r11b $bl $r14b $r15b $r12b $r13b ]
		updated: 224B	$al = COPY %19:gr8
	Success: %2 -> %19
	Result = %19 [192B,224r:3)[432r,464B:2)[656r,688B:1)[928r,960B:0)  0@928r 1@656r 2@432r 3@192B-phi weight:0.000000e+00
80B	%0:gr64 = COPY %5:gr64
	Considering merging to GR64 with %5 in %0
		RHS = %5 [64r,112r:0)  0@64r weight:0.000000e+00
		LHS = %0 [80r,192B:0)[256B,352r:0)[464B,576r:0)[688B,880r:0)  0@80r weight:0.000000e+00
		merge %0:0@80r into %5:0@64r --> @64r
		erased:	80r	%0:gr64 = COPY %5:gr64
AllocationOrder(GR64) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r10 $r11 $rbx $r14 $r15 $r12 $r13 ]
		updated: 64B	%0:gr64 = COPY killed $rax
		updated: 112B	%1:gr64 = MOV64rm %0:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
	Success: %5 -> %0
	Result = %0 [64r,192B:0)[256B,352r:0)[464B,576r:0)[688B,880r:0)  0@64r weight:0.000000e+00
432B	%19:gr8 = COPY %3:gr8
	Considering merging to GR8 with %3 in %19
		RHS = %3 [416r,432r:0)  0@416r weight:0.000000e+00
		LHS = %19 [192B,224r:3)[432r,464B:2)[656r,688B:1)[928r,960B:0)  0@928r 1@656r 2@432r 3@192B-phi weight:0.000000e+00
		merge %19:2@432r into %3:0@416r --> @416r
		erased:	432r	%19:gr8 = COPY %3:gr8
		updated: 416B	%19:gr8 = SETCCr 4, implicit killed $eflags
	Success: %3 -> %19
	Result = %19 [192B,224r:3)[416r,464B:2)[656r,688B:1)[928r,960B:0)  0@928r 1@656r 2@416r 3@192B-phi weight:0.000000e+00
640B	%13:gr8 = COPY %14.sub_8bit:gr32
	Considering merging to GR32 with %13 in %14:sub_8bit
		RHS = %13 [640r,656r:0)  0@640r weight:0.000000e+00
		LHS = %14 [624r,640r:0)  0@624r weight:0.000000e+00
		merge %13:0@640r into %14:0@624r --> @624r
		erased:	640r	%13:gr8 = COPY %14.sub_8bit:gr32
		updated: 656B	%19:gr8 = COPY %14.sub_8bit:gr32
	Success: %13:sub_8bit -> %14
	Result = %14 [624r,656r:0)  0@624r weight:0.000000e+00
656B	%19:gr8 = COPY %14.sub_8bit:gr32
	Considering merging to GR32 with %19 in %14:sub_8bit
		RHS = %19 [192B,224r:3)[416r,464B:2)[656r,688B:1)[928r,960B:0)  0@928r 1@656r 2@416r 3@192B-phi weight:0.000000e+00
		LHS = %14 [624r,656r:0)  0@624r weight:0.000000e+00
		merge %19:1@656r into %14:0@624r --> @624r
		erased:	656r	%19:gr8 = COPY %14.sub_8bit:gr32
		updated: 416B	undef %14.sub_8bit:gr32 = SETCCr 4, implicit killed $eflags
		updated: 928B	undef %14.sub_8bit:gr32 = COPY %4:gr8
		updated: 224B	$al = COPY %14.sub_8bit:gr32
	Success: %19:sub_8bit -> %14
	Result = %14 [192B,224r:3)[416r,464B:2)[624r,688B:0)[928r,960B:1)  0@624r 1@928r 2@416r 3@192B-phi weight:0.000000e+00
848B	%4:gr8 = COPY %12:gr8
	Considering merging to GR8 with %12 in %4
		RHS = %12 [832r,848r:0)  0@832r weight:0.000000e+00
		LHS = %4 [848r,928r:0)  0@848r weight:0.000000e+00
		merge %4:0@848r into %12:0@832r --> @832r
		erased:	848r	%4:gr8 = COPY %12:gr8
		updated: 832B	%4:gr8 = COPY killed $al
	Success: %12 -> %4
	Result = %4 [832r,928r:0)  0@832r weight:0.000000e+00
928B	undef %14.sub_8bit:gr32 = COPY %4:gr8
	Considering merging to GR32 with %4 in %14:sub_8bit
		RHS = %4 [832r,928r:0)  0@832r weight:0.000000e+00
		LHS = %14 [192B,224r:3)[416r,464B:2)[624r,688B:0)[928r,960B:1)  0@624r 1@928r 2@416r 3@192B-phi weight:0.000000e+00
		merge %14:1@928r into %4:0@832r --> @832r
		erased:	928r	undef %14.sub_8bit:gr32 = COPY %4:gr8
		updated: 832B	undef %14.sub_8bit:gr32 = COPY killed $al
	Success: %4:sub_8bit -> %14
	Result = %14 [192B,224r:3)[416r,464B:2)[624r,688B:0)[832r,960B:1)  0@624r 1@832r 2@416r 3@192B-phi weight:0.000000e+00
224B	$al = COPY %14.sub_8bit:gr32
	Considering merging %14 with $eax
	Can only merge into reserved registers.
352B	$rdi = COPY %0:gr64
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
576B	$rdi = COPY %0:gr64
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
784B	$r13 = COPY %0:gr64
	Considering merging %0 with $r13
	Can only merge into reserved registers.
880B	$rdi = COPY %0:gr64
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
%0 [64r,192B:0)[256B,352r:0)[464B,576r:0)[688B,880r:0)  0@64r weight:0.000000e+00
%1 [112r,192B:0)[464B,544B:0)[688B,800r:0)  0@112r weight:0.000000e+00
%6 [128r,144r:0)  0@128r weight:0.000000e+00
%8 [480r,496r:0)  0@480r weight:0.000000e+00
%10 [720r,768r:0)  0@720r weight:0.000000e+00
%11 [736r,752r:0)  0@736r weight:0.000000e+00
%14 [192B,224r:3)[416r,464B:2)[624r,688B:0)[832r,960B:1)  0@624r 1@832r 2@416r 3@192B-phi weight:0.000000e+00
%16 [320r,400r:0)  0@320r weight:0.000000e+00
RegMasks: 32r 288r 368r 592r 800r 896r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1gSbyF: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=2, align=8, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2(0x30000000), %bb.3(0x50000000); %bb.2(37.50%), %bb.3(62.50%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  CALL64pcrel32 @"$s7partial8makeAorBAA1ACyF", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
48B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
64B	  %0:gr64 = COPY killed $rax
96B	  MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
112B	  %1:gr64 = MOV64rm %0:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
128B	  %6:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
144B	  CMP64rr %1:gr64, %6:gr64, implicit-def $eflags
160B	  JCC_1 %bb.2, 4, implicit killed $eflags
176B	  JMP_1 %bb.3

192B	bb.1 (%ir-block.8):
	; predecessors: %bb.5, %bb.4, %bb.2

224B	  $al = COPY %14.sub_8bit:gr32
240B	  RET 0, killed $al

256B	bb.2 (%ir-block.11):
	; predecessors: %bb.0
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

272B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
304B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %16:gr64 = COPY killed $rax
336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
352B	  $rdi = COPY %0:gr64
368B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP64rm %16:gr64, $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
416B	  undef %14.sub_8bit:gr32 = SETCCr 4, implicit killed $eflags
448B	  JMP_1 %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.0
	  successors: %bb.4(0x30000000), %bb.5(0x50000000); %bb.4(37.50%), %bb.5(62.50%)

480B	  %8:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
496B	  CMP64rr %1:gr64, %8:gr64, implicit-def $eflags
512B	  JCC_1 %bb.5, 5, implicit killed $eflags
528B	  JMP_1 %bb.4

544B	bb.4 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %0:gr64
592B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %14:gr32 = MOV32r0 implicit-def dead $eflags
672B	  JMP_1 %bb.1

688B	bb.5 (%ir-block.20):
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
720B	  %10:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
736B	  %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
752B	  $rdi = COPY %11:gr64
768B	  $rsi = COPY %10:gr64
784B	  $r13 = COPY %0:gr64
800B	  CALL64m %1:gr64, 1, $noreg, 88, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $r13, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (invariant load 8 from %ir.22)
816B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
832B	  undef %14.sub_8bit:gr32 = COPY killed $al
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
880B	  $rdi = COPY %0:gr64
896B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
912B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
944B	  JMP_1 %bb.1

# End machine code for function $s7partial1gSbyF.

Before MISched:
# Machine code for function $s7partial1gSbyF: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=2, align=8, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2(0x30000000), %bb.3(0x50000000); %bb.2(37.50%), %bb.3(62.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @"$s7partial8makeAorBAA1ACyF", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = COPY killed $rax
  MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
  %1:gr64 = MOV64rm %0:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
  %6:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
  CMP64rr %1:gr64, %6:gr64, implicit-def $eflags
  JCC_1 %bb.2, 4, implicit killed $eflags
  JMP_1 %bb.3

bb.1 (%ir-block.8):
; predecessors: %bb.5, %bb.4, %bb.2

  $al = COPY %14.sub_8bit:gr32
  RET 0, killed $al

bb.2 (%ir-block.11):
; predecessors: %bb.0
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %16:gr64 = COPY killed $rax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP64rm %16:gr64, $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
  undef %14.sub_8bit:gr32 = SETCCr 4, implicit killed $eflags
  JMP_1 %bb.1

bb.3 (%ir-block.16):
; predecessors: %bb.0
  successors: %bb.4(0x30000000), %bb.5(0x50000000); %bb.4(37.50%), %bb.5(62.50%)

  %8:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
  CMP64rr %1:gr64, %8:gr64, implicit-def $eflags
  JCC_1 %bb.5, 5, implicit killed $eflags
  JMP_1 %bb.4

bb.4 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32r0 implicit-def dead $eflags
  JMP_1 %bb.1

bb.5 (%ir-block.20):
; predecessors: %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
  %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %11:gr64
  $rsi = COPY %10:gr64
  $r13 = COPY %0:gr64
  CALL64m %1:gr64, 1, $noreg, 88, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $r13, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (invariant load 8 from %ir.22)
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  undef %14.sub_8bit:gr32 = COPY killed $al
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %0:gr64
  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.1

# End machine code for function $s7partial1gSbyF.

********** MI Scheduling **********
$s7partial1gSbyF:%bb.0 
  From: %0:gr64 = COPY killed $rax
    To: JCC_1 %bb.2, 4, implicit killed $eflags
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Macro fuse: SU(4) - ExitSU /  CMP64rr - JCC_1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %0:gr64 = COPY killed $rax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(1):   MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   %1:gr64 = MOV64rm %0:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
  Successors:
    SU(4): Data Latency=5 Reg=%1
  Single Issue       : false;
SU(3):   %6:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%6
  Single Issue       : false;
SU(4):   CMP64rr %1:gr64, %6:gr64, implicit-def $eflags
  # preds left       : 3
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%6
    SU(2): Data Latency=5 Reg=%1
    SU(1): Ord  Latency=0 Artificial
  Successors:
    ExitSU: Ord  Latency=0 Artificial
    ExitSU: Ord  Latency=0 Cluster
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Cluster
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) CMP64rr %1:gr64, %6:gr64, implicit-def $eflags
  Ready @0c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A TopLatency SU(4) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %6:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
  Ready @1c
  SBPort01 +1x6u
  *** Critical resource SBPort01: 0c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %1:gr64 = MOV64rm %0:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
  Ready @5c
  SBPort23 +1x6u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
  Ready @0c
  SBPort4 +1x12u
  *** Critical resource SBPort4: 1c
  SBPort23 +1x6u
  SBPortAny +2x2u
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 1 SBPort4
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:gr64 = COPY killed $rax
  Ready @5c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 1 SBPort4
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %0:gr64 = COPY killed $rax
SU(1):   MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
SU(2):   %1:gr64 = MOV64rm %0:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
SU(3):   %6:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
SU(4):   CMP64rr %1:gr64, %6:gr64, implicit-def $eflags

********** MI Scheduling **********
$s7partial1gSbyF:%bb.2 
  From: CMP64rm %16:gr64, $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
    To: JMP_1 %bb.1
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   CMP64rm %16:gr64, $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 6
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=6 Reg=$eflags
  Single Issue       : false;
SU(1):   undef %14.sub_8bit:gr32 = SETCCr 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(0): Data Latency=6 Reg=$eflags
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) undef %14.sub_8bit:gr32 = SETCCr 4, implicit killed $eflags
  Ready @0c
  SBPort05 +1x6u
  *** Critical resource SBPort05: 0c
  SBPort015 +1x4u
  SBPortAny +1x2u
  BotQ.A TopLatency SU(1) 6c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort05
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) CMP64rm %16:gr64, $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
  Ready @6c
  SBPort23 +1x6u
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +2x2u
  BotQ.A BotLatency SU(0) 6c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   CMP64rm %16:gr64, $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
SU(1):   undef %14.sub_8bit:gr32 = SETCCr 4, implicit killed $eflags

********** MI Scheduling **********
$s7partial1gSbyF:%bb.3 
  From: %8:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
    To: JCC_1 %bb.5, 5, implicit killed $eflags
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Macro fuse: SU(1) - ExitSU /  CMP64rr - JCC_1
SU(0):   %8:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%8
  Single Issue       : false;
SU(1):   CMP64rr %1:gr64, %8:gr64, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%8
  Successors:
    ExitSU: Ord  Latency=0 Artificial
    ExitSU: Ord  Latency=0 Cluster
  Single Issue       : false;
ExitSU:   JCC_1 %bb.5, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Cluster
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP64rr %1:gr64, %8:gr64, implicit-def $eflags
  Ready @0c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %8:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
  Ready @1c
  SBPort01 +1x6u
  *** Critical resource SBPort01: 0c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %8:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
SU(1):   CMP64rr %1:gr64, %8:gr64, implicit-def $eflags

********** MI Scheduling **********
$s7partial1gSbyF:%bb.5 
  From: %10:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
    To: CALL64m %1:gr64, 1, $noreg, 88, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $r13, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (invariant load 8 from %ir.22)
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %10:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=5 Reg=%10
  Single Issue       : false;
SU(1):   %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%11
  Single Issue       : false;
SU(2):   $rdi = COPY %11:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%11
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $rsi = COPY %10:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(0): Data Latency=5 Reg=%10
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $r13 = COPY %0:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64m %1:gr64, 1, $noreg, 88, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $r13, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (invariant load 8 from %ir.22)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $r13 = COPY %0:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rsi = COPY %10:gr64
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $rdi = COPY %11:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  Ready @1c
  SBPort01 +1x6u
  *** Critical resource SBPort01: 0c
  SBPort015 +1x4u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort01
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %10:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
  Ready @5c
  SBPort23 +1x6u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 1 SBPort01
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %10:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
SU(1):   %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
SU(2):   $rdi = COPY %11:gr64
SU(3):   $rsi = COPY %10:gr64
SU(4):   $r13 = COPY %0:gr64

********** INTERVALS **********
%0 [64r,192B:0)[256B,352r:0)[464B,576r:0)[688B,880r:0)  0@64r weight:0.000000e+00
%1 [112r,192B:0)[464B,544B:0)[688B,800r:0)  0@112r weight:0.000000e+00
%6 [128r,144r:0)  0@128r weight:0.000000e+00
%8 [480r,496r:0)  0@480r weight:0.000000e+00
%10 [720r,768r:0)  0@720r weight:0.000000e+00
%11 [736r,752r:0)  0@736r weight:0.000000e+00
%14 [192B,224r:3)[416r,464B:2)[624r,688B:0)[832r,960B:1)  0@624r 1@832r 2@416r 3@192B-phi weight:0.000000e+00
%16 [320r,400r:0)  0@320r weight:0.000000e+00
RegMasks: 32r 288r 368r 592r 800r 896r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1gSbyF: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=2, align=8, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2(0x30000000), %bb.3(0x50000000); %bb.2(37.50%), %bb.3(62.50%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  CALL64pcrel32 @"$s7partial8makeAorBAA1ACyF", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
48B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
64B	  %0:gr64 = COPY killed $rax
96B	  MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
112B	  %1:gr64 = MOV64rm %0:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
128B	  %6:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
144B	  CMP64rr %1:gr64, %6:gr64, implicit-def $eflags
160B	  JCC_1 %bb.2, 4, implicit killed $eflags
176B	  JMP_1 %bb.3

192B	bb.1 (%ir-block.8):
	; predecessors: %bb.5, %bb.4, %bb.2

224B	  $al = COPY %14.sub_8bit:gr32
240B	  RET 0, killed $al

256B	bb.2 (%ir-block.11):
	; predecessors: %bb.0
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

272B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
304B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %16:gr64 = COPY killed $rax
336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
352B	  $rdi = COPY %0:gr64
368B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP64rm %16:gr64, $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
416B	  undef %14.sub_8bit:gr32 = SETCCr 4, implicit killed $eflags
448B	  JMP_1 %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.0
	  successors: %bb.4(0x30000000), %bb.5(0x50000000); %bb.4(37.50%), %bb.5(62.50%)

480B	  %8:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
496B	  CMP64rr %1:gr64, %8:gr64, implicit-def $eflags
512B	  JCC_1 %bb.5, 5, implicit killed $eflags
528B	  JMP_1 %bb.4

544B	bb.4 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %0:gr64
592B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %14:gr32 = MOV32r0 implicit-def dead $eflags
672B	  JMP_1 %bb.1

688B	bb.5 (%ir-block.20):
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
720B	  %10:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
736B	  %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
752B	  $rdi = COPY %11:gr64
768B	  $rsi = COPY %10:gr64
784B	  $r13 = COPY %0:gr64
800B	  CALL64m %1:gr64, 1, $noreg, 88, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $r13, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (invariant load 8 from %ir.22)
816B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
832B	  undef %14.sub_8bit:gr32 = COPY killed $al
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
880B	  $rdi = COPY %0:gr64
896B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
912B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
944B	  JMP_1 %bb.1

# End machine code for function $s7partial1gSbyF.


block-frequency: $s7partial1gSbyF
=================================
reverse-post-order-traversal
 - 0: BB0[]
 - 1: BB3[]
 - 2: BB5[]
 - 3: BB4[]
 - 4: BB2[]
 - 5: BB1[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => [ local  ] weight = 805306368, succ = BB2[]
  => [ local  ] weight = 1342177280, succ = BB3[]
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to BB3[]
  => assign 6000000000000000 (0000000000000000) to BB2[]
 - node: BB3[]
  => [ local  ] weight = 805306368, succ = BB4[]
  => [ local  ] weight = 1342177280, succ = BB5[]
  => mass:  9fffffffffffffff
  => assign 63ffffffffffffff (3c00000000000000) to BB5[]
  => assign 3c00000000000000 (0000000000000000) to BB4[]
 - node: BB5[]
  => [ local  ] weight = 2147483648, succ = BB1[]
  => mass:  63ffffffffffffff
  => assign 63ffffffffffffff (0000000000000000) to BB1[]
 - node: BB4[]
  => [ local  ] weight = 2147483648, succ = BB1[]
  => mass:  3c00000000000000
  => assign 3c00000000000000 (0000000000000000) to BB1[]
 - node: BB2[]
  => [ local  ] weight = 2147483648, succ = BB1[]
  => mass:  6000000000000000
  => assign 6000000000000000 (0000000000000000) to BB1[]
 - node: BB1[]
  => mass:  ffffffffffffffff
float-to-int: min = 0.234375, max = 1.0, factor = 34.13333333
 - BB0[]: float = 1.0, scaled = 34.13333333, int = 34
 - BB3[]: float = 0.625, scaled = 21.33333333, int = 21
 - BB5[]: float = 0.390625, scaled = 13.33333333, int = 13
 - BB4[]: float = 0.234375, scaled = 8.0, int = 8
 - BB2[]: float = 0.375, scaled = 12.8, int = 12
 - BB1[]: float = 1.0, scaled = 34.13333333, int = 34
block-frequency-info: $s7partial1gSbyF
 - BB0[]: float = 1.0, int = 34
 - BB1[]: float = 1.0, int = 34
 - BB2[]: float = 0.375, int = 12
 - BB3[]: float = 0.625, int = 21
 - BB4[]: float = 0.23438, int = 8
 - BB5[]: float = 0.39063, int = 13

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1gSbyF
********** Compute Spill Weights **********
********** Function: $s7partial1gSbyF
********** INTERVALS **********
%0 [64r,192B:0)[256B,352r:0)[464B,576r:0)[688B,880r:0)  0@64r weight:3.633552e-03
%1 [112r,192B:0)[464B,544B:0)[688B,800r:0)  0@112r weight:4.464286e-03
%6 [128r,144r:0)  0@128r weight:INF
%8 [480r,496r:0)  0@480r weight:INF
%10 [720r,768r:0)  0@720r weight:8.620010e-04
%11 [736r,752r:0)  0@736r weight:INF
%14 [192B,224r:3)[416r,464B:2)[624r,688B:0)[832r,960B:1)  0@624r 1@832r 2@416r 3@192B-phi weight:2.979482e-03
%16 [320r,400r:0)  0@320r weight:1.485294e-03
RegMasks: 32r 288r 368r 592r 800r 896r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1gSbyF: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=2, align=8, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2(0x30000000), %bb.3(0x50000000); %bb.2(37.50%), %bb.3(62.50%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  CALL64pcrel32 @"$s7partial8makeAorBAA1ACyF", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
48B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
64B	  %0:gr64 = COPY killed $rax
96B	  MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
112B	  %1:gr64 = MOV64rm %0:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
128B	  %6:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
144B	  CMP64rr %1:gr64, %6:gr64, implicit-def $eflags
160B	  JCC_1 %bb.2, 4, implicit killed $eflags
176B	  JMP_1 %bb.3

192B	bb.1 (%ir-block.8):
	; predecessors: %bb.5, %bb.4, %bb.2

224B	  $al = COPY %14.sub_8bit:gr32
240B	  RET 0, killed $al

256B	bb.2 (%ir-block.11):
	; predecessors: %bb.0
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

272B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
304B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %16:gr64 = COPY killed $rax
336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
352B	  $rdi = COPY %0:gr64
368B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP64rm %16:gr64, $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
416B	  undef %14.sub_8bit:gr32 = SETCCr 4, implicit killed $eflags
448B	  JMP_1 %bb.1

464B	bb.3 (%ir-block.16):
	; predecessors: %bb.0
	  successors: %bb.4(0x30000000), %bb.5(0x50000000); %bb.4(37.50%), %bb.5(62.50%)

480B	  %8:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
496B	  CMP64rr %1:gr64, %8:gr64, implicit-def $eflags
512B	  JCC_1 %bb.5, 5, implicit killed $eflags
528B	  JMP_1 %bb.4

544B	bb.4 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY %0:gr64
592B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %14:gr32 = MOV32r0 implicit-def dead $eflags
672B	  JMP_1 %bb.1

688B	bb.5 (%ir-block.20):
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
720B	  %10:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
736B	  %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
752B	  $rdi = COPY %11:gr64
768B	  $rsi = COPY %10:gr64
784B	  $r13 = COPY %0:gr64
800B	  CALL64m %1:gr64, 1, $noreg, 88, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $r13, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (invariant load 8 from %ir.22)
816B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
832B	  undef %14.sub_8bit:gr32 = COPY killed $al
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
880B	  $rdi = COPY %0:gr64
896B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp
912B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
944B	  JMP_1 %bb.1

# End machine code for function $s7partial1gSbyF.


selectOrSplit GR64:%0 [64r,192B:0)[256B,352r:0)[464B,576r:0)[688B,880r:0)  0@64r weight:3.633552e-03 w=3.633552e-03
hints: $rax $rdi $r13
assigning %0 to $r13: R13B [64r,192B:0)[256B,352r:0)[464B,576r:0)[688B,880r:0)  0@64r R13BH [64r,192B:0)[256B,352r:0)[464B,576r:0)[688B,880r:0)  0@64r R13WH [64r,192B:0)[256B,352r:0)[464B,576r:0)[688B,880r:0)  0@64r

selectOrSplit GR32:%14 [192B,224r:3)[416r,464B:2)[624r,688B:0)[832r,960B:1)  0@624r 1@832r 2@416r 3@192B-phi weight:2.979482e-03 w=2.979482e-03
AllocationOrder(GR32) = [ $eax $ecx $edx $esi $edi $r8d $r9d $r10d $r11d $ebx $r14d $r15d $r12d $r13d ]
hints: $eax
missed hint $eax
assigning %14 to $ebx: BH [192B,224r:3)[416r,464B:2)[624r,688B:0)[832r,960B:1)  0@624r 1@832r 2@416r 3@192B-phi BL [192B,224r:3)[416r,464B:2)[624r,688B:0)[832r,960B:1)  0@624r 1@832r 2@416r 3@192B-phi HBX [192B,224r:3)[416r,464B:2)[624r,688B:0)[832r,960B:1)  0@624r 1@832r 2@416r 3@192B-phi

selectOrSplit GR64:%16 [320r,400r:0)  0@320r weight:1.485294e-03 w=1.485294e-03
hints: $rax
missed hint $rax
assigning %16 to $rbx: BH [320r,400r:0)  0@320r BL [320r,400r:0)  0@320r HBX [320r,400r:0)  0@320r

selectOrSplit GR64:%10 [720r,768r:0)  0@720r weight:8.620010e-04 w=8.620010e-04
hints: $rsi
assigning %10 to $rsi: SIL [720r,768r:0)  0@720r SIH [720r,768r:0)  0@720r HSI [720r,768r:0)  0@720r

selectOrSplit GR64:%11 [736r,752r:0)  0@736r weight:INF w=INF
hints: $rdi
assigning %11 to $rdi: DIL [736r,752r:0)  0@736r DIH [736r,752r:0)  0@736r HDI [736r,752r:0)  0@736r

selectOrSplit GR64:%1 [112r,192B:0)[464B,544B:0)[688B,800r:0)  0@112r weight:4.464286e-03 w=4.464286e-03
assigning %1 to $rcx: CH [112r,192B:0)[464B,544B:0)[688B,800r:0)  0@112r CL [112r,192B:0)[464B,544B:0)[688B,800r:0)  0@112r HCX [112r,192B:0)[464B,544B:0)[688B,800r:0)  0@112r

selectOrSplit GR64:%6 [128r,144r:0)  0@128r weight:INF w=INF
assigning %6 to $rax: AH [128r,144r:0)  0@128r AL [128r,144r:0)  0@128r HAX [128r,144r:0)  0@128r

selectOrSplit GR64:%8 [480r,496r:0)  0@480r weight:INF w=INF
assigning %8 to $rax: AH [480r,496r:0)  0@480r AL [480r,496r:0)  0@480r HAX [480r,496r:0)  0@480r
Trying to reconcile hints for: %14($ebx)
%14($ebx) is recolorable.
Trying to reconcile hints for: %16($rbx)
%16($rbx) is recolorable.
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1gSbyF
********** REGISTER MAP **********
[%0 -> $r13] GR64
[%1 -> $rcx] GR64
[%6 -> $rax] GR64
[%8 -> $rax] GR64
[%10 -> $rsi] GR64
[%11 -> $rdi] GR64
[%14 -> $ebx] GR32
[%16 -> $rbx] GR64

0B	bb.0 (%ir-block.0):
	  successors: %bb.2(0x30000000), %bb.3(0x50000000); %bb.2(37.50%), %bb.3(62.50%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  CALL64pcrel32 @"$s7partial8makeAorBAA1ACyF", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
48B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
64B	  %0:gr64 = COPY $rax
96B	  MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
112B	  %1:gr64 = MOV64rm %0:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
128B	  %6:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
144B	  CMP64rr %1:gr64, killed %6:gr64, implicit-def $eflags
160B	  JCC_1 %bb.2, 4, implicit killed $eflags
176B	  JMP_1 %bb.3
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> CALL64pcrel32 @"$s7partial8makeAorBAA1ACyF", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> renamable $r13 = COPY $rax
> MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store 2 into %ir.4, align 8)
> renamable $rcx = MOV64rm renamable $r13, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
> renamable $rax = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
> CMP64rr renamable $rcx, killed renamable $rax, implicit-def $eflags
> JCC_1 %bb.2, 4, implicit killed $eflags
> JMP_1 %bb.3
192B	bb.1 (%ir-block.8):
	; predecessors: %bb.5, %bb.4, %bb.2
	  liveins: $ebx
224B	  $al = COPY killed %14.sub_8bit:gr32
240B	  RET 0, $al
> $al = COPY renamable $bl, implicit killed $ebx
> RET 0, $al
256B	bb.2 (%ir-block.11):
	; predecessors: %bb.0
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $r13
272B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
304B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %16:gr64 = COPY $rax
336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
352B	  $rdi = COPY killed %0:gr64
368B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP64rm killed %16:gr64, $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
416B	  undef %14.sub_8bit:gr32 = SETCCr 4, implicit killed $eflags
448B	  JMP_1 %bb.1
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> renamable $rbx = COPY $rax
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> $rdi = COPY killed renamable $r13
> CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> CMP64rm killed renamable $rbx, $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg, implicit-def $eflags :: (load 8 from got)
> renamable $bl = SETCCr 4, implicit killed $eflags, implicit-def $ebx
> JMP_1 %bb.1
464B	bb.3 (%ir-block.16):
	; predecessors: %bb.0
	  successors: %bb.4(0x30000000), %bb.5(0x50000000); %bb.4(37.50%), %bb.5(62.50%)
	  liveins: $rcx, $r13
480B	  %8:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
496B	  CMP64rr %1:gr64, killed %8:gr64, implicit-def $eflags
512B	  JCC_1 %bb.5, 5, implicit killed $eflags
528B	  JMP_1 %bb.4
> renamable $rax = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
> CMP64rr renamable $rcx, killed renamable $rax, implicit-def $eflags
> JCC_1 %bb.5, 5, implicit killed $eflags
> JMP_1 %bb.4
544B	bb.4 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $r13
560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
576B	  $rdi = COPY killed %0:gr64
592B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
608B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
624B	  %14:gr32 = MOV32r0 implicit-def dead $eflags
672B	  JMP_1 %bb.1
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> $rdi = COPY killed renamable $r13
> CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> renamable $ebx = MOV32r0 implicit-def dead $eflags
> JMP_1 %bb.1
688B	bb.5 (%ir-block.20):
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $rcx, $r13
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
720B	  %10:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
736B	  %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
752B	  $rdi = COPY killed %11:gr64
768B	  $rsi = COPY killed %10:gr64
784B	  $r13 = COPY %0:gr64
800B	  CALL64m killed %1:gr64, 1, $noreg, 88, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $r13, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (invariant load 8 from %ir.22)
816B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
832B	  undef %14.sub_8bit:gr32 = COPY $al
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
880B	  $rdi = COPY killed %0:gr64
896B	  CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
912B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
944B	  JMP_1 %bb.1
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
> renamable $rdi = LEA64r %stack.0, 1, $noreg, 0, $noreg
> $rdi = COPY killed renamable $rdi
Identity copy: $rdi = COPY killed renamable $rdi
  deleted.
> $rsi = COPY killed renamable $rsi
Identity copy: $rsi = COPY killed renamable $rsi
  deleted.
> $r13 = COPY renamable $r13
Identity copy: $r13 = COPY renamable $r13
  deleted.
> CALL64m killed renamable $rcx, 1, $noreg, 88, $noreg, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $r13, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (invariant load 8 from %ir.22)
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> renamable $bl = COPY $al, implicit-def $ebx
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> $rdi = COPY killed renamable $r13
> CALL64pcrel32 @swift_release, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> JMP_1 %bb.1
********** Stack Slot Coloring **********
********** Function: $s7partial1gSbyF
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $r13 = COPY $rax
MCP: Replacing $r13
     with $rax
     in renamable $rcx = MOV64rm renamable $r13, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
     from renamable $r13 = COPY $rax
MCP: After replacement: renamable $rcx = MOV64rm $rax, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)

MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   $al = COPY renamable $bl, implicit killed $ebx
MCP: Copy is used - not dead:   $al = COPY renamable $bl, implicit killed $ebx
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rbx = COPY $rax
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax
MCP: CopyPropagateBlock 
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $bl = COPY $al, implicit-def $ebx
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
******** Post-regalloc Machine LICM: $s7partial1gSbyF ********

block-frequency: $s7partial1gSbyF
=================================
reverse-post-order-traversal
 - 0: BB0[]
 - 1: BB3[]
 - 2: BB5[]
 - 3: BB4[]
 - 4: BB2[]
 - 5: BB1[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => [ local  ] weight = 805306368, succ = BB2[]
  => [ local  ] weight = 1342177280, succ = BB3[]
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to BB3[]
  => assign 6000000000000000 (0000000000000000) to BB2[]
 - node: BB3[]
  => [ local  ] weight = 805306368, succ = BB4[]
  => [ local  ] weight = 1342177280, succ = BB5[]
  => mass:  9fffffffffffffff
  => assign 63ffffffffffffff (3c00000000000000) to BB5[]
  => assign 3c00000000000000 (0000000000000000) to BB4[]
 - node: BB5[]
  => [ local  ] weight = 2147483648, succ = BB1[]
  => mass:  63ffffffffffffff
  => assign 63ffffffffffffff (0000000000000000) to BB1[]
 - node: BB4[]
  => [ local  ] weight = 2147483648, succ = BB1[]
  => mass:  3c00000000000000
  => assign 3c00000000000000 (0000000000000000) to BB1[]
 - node: BB2[]
  => [ local  ] weight = 2147483648, succ = BB1[]
  => mass:  6000000000000000
  => assign 6000000000000000 (0000000000000000) to BB1[]
 - node: BB1[]
  => mass:  ffffffffffffffff
float-to-int: min = 0.234375, max = 1.0, factor = 34.13333333
 - BB0[]: float = 1.0, scaled = 34.13333333, int = 34
 - BB3[]: float = 0.625, scaled = 21.33333333, int = 21
 - BB5[]: float = 0.390625, scaled = 13.33333333, int = 13
 - BB4[]: float = 0.234375, scaled = 8.0, int = 8
 - BB2[]: float = 0.375, scaled = 12.8, int = 12
 - BB1[]: float = 1.0, scaled = 34.13333333, int = 34
block-frequency-info: $s7partial1gSbyF
 - BB0[]: float = 1.0, int = 34
 - BB1[]: float = 1.0, int = 34
 - BB2[]: float = 0.375, int = 12
 - BB3[]: float = 0.625, int = 21
 - BB4[]: float = 0.23438, int = 8
 - BB5[]: float = 0.39063, int = 13

		Looking for trivial roots
Found a new trivial root: %bb.1
Last visited node: %bb.5
		Looking for non-trivial roots
Total: 6, Num: 7
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.1
3: %bb.2
4: %bb.0
5: %bb.4
6: %bb.3
7: %bb.5
Found roots: %bb.1 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.5
**** Analysing $s7partial1gSbyF
Look into: 0 
Frame instruction: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp

No Shrink wrap candidate found
alloc FI(0) at SP[-40]

TryTailMergeBlocks: %bb.5, %bb.4, %bb.2
  with successor %bb.1
  which has fall-through from %bb.0
Looking for common tails of at least 3 instructions

TryTailMergeBlocks: %bb.5, %bb.4, %bb.2
  with successor %bb.1
  which has fall-through from %bb.5
Looking for common tails of at least 3 instructions
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $r13 = COPY $rax
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rbx = COPY $rax
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax
MCP: CopyPropagateBlock 
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $bl = COPY $al, implicit-def $ebx
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $r13
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   $al = COPY renamable $bl, implicit killed $ebx
MCP: Copy is used - not dead:   $al = COPY renamable $bl, implicit killed $ebx
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1gSbyF
real copy:   renamable $r13 = COPY $rax
replaced by: $r13 = MOV64rr $rax
real copy:   renamable $rbx = COPY $rax
replaced by: $rbx = MOV64rr $rax
real copy:   $rdi = COPY killed renamable $r13
replaced by: $rdi = MOV64rr killed $r13
real copy:   $rdi = COPY killed renamable $r13
replaced by: $rdi = MOV64rr killed $r13
real copy:   renamable $bl = COPY $al, implicit-def $ebx
replaced by: $bl = MOV8rr $al, implicit-def $ebx
real copy:   $rdi = COPY killed renamable $r13
replaced by: $rdi = MOV64rr killed $r13
real copy:   $al = COPY renamable $bl, implicit killed $ebx
replaced by: $al = MOV8rr $bl, implicit killed $ebx
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.4

block-frequency: $s7partial1gSbyF
=================================
reverse-post-order-traversal
 - 0: BB0[]
 - 1: BB2[]
 - 2: BB4[]
 - 3: BB3[]
 - 4: BB1[]
 - 5: BB5[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => [ local  ] weight = 805306368, succ = BB1[]
  => [ local  ] weight = 1342177280, succ = BB2[]
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to BB2[]
  => assign 6000000000000000 (0000000000000000) to BB1[]
 - node: BB2[]
  => [ local  ] weight = 805306368, succ = BB3[]
  => [ local  ] weight = 1342177280, succ = BB4[]
  => mass:  9fffffffffffffff
  => assign 63ffffffffffffff (3c00000000000000) to BB4[]
  => assign 3c00000000000000 (0000000000000000) to BB3[]
 - node: BB4[]
  => [ local  ] weight = 2147483648, succ = BB5[]
  => mass:  63ffffffffffffff
  => assign 63ffffffffffffff (0000000000000000) to BB5[]
 - node: BB3[]
  => [ local  ] weight = 2147483648, succ = BB5[]
  => mass:  3c00000000000000
  => assign 3c00000000000000 (0000000000000000) to BB5[]
 - node: BB1[]
  => [ local  ] weight = 2147483648, succ = BB5[]
  => mass:  6000000000000000
  => assign 6000000000000000 (0000000000000000) to BB5[]
 - node: BB5[]
  => mass:  ffffffffffffffff
float-to-int: min = 0.234375, max = 1.0, factor = 34.13333333
 - BB0[]: float = 1.0, scaled = 34.13333333, int = 34
 - BB2[]: float = 0.625, scaled = 21.33333333, int = 21
 - BB4[]: float = 0.390625, scaled = 13.33333333, int = 13
 - BB3[]: float = 0.234375, scaled = 8.0, int = 8
 - BB1[]: float = 0.375, scaled = 12.8, int = 12
 - BB5[]: float = 1.0, scaled = 34.13333333, int = 34
block-frequency-info: $s7partial1gSbyF
 - BB0[]: float = 1.0, int = 34
 - BB1[]: float = 0.375, int = 12
 - BB2[]: float = 0.625, int = 21
 - BB3[]: float = 0.23438, int = 8
 - BB4[]: float = 0.39063, int = 13
 - BB5[]: float = 1.0, int = 34

		Looking for trivial roots
Found a new trivial root: %bb.5
Last visited node: %bb.4
		Looking for non-trivial roots
Total: 6, Num: 7
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.5
3: %bb.1
4: %bb.0
5: %bb.3
6: %bb.2
7: %bb.4
Found roots: %bb.5 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.4
Pre-computing triangle chains.
Selecting best successor for: %bb.0 ('')
    Candidate: %bb.1 (''), probability: 0x30000000 / 0x80000000 = 37.50%
    Setting it as best candidate
    Candidate: %bb.2 (''), probability: 0x50000000 / 0x80000000 = 62.50%
    Setting it as best candidate
    Selected: %bb.2 ('')
Merging from %bb.0 ('') to %bb.2 ('')
Selecting best successor for: %bb.2 ('')
    Candidate: %bb.3 (''), probability: 0x30000000 / 0x80000000 = 37.50%
    Setting it as best candidate
    Candidate: %bb.4 (''), probability: 0x50000000 / 0x80000000 = 62.50%
    Setting it as best candidate
    Selected: %bb.4 ('')
Merging from %bb.2 ('') to %bb.4 ('')
Selecting best successor for: %bb.4 ('')
    Not a candidate: %bb.5 ('') -> 0x80000000 / 0x80000000 = 100.00% (prob) (non-cold CFG conflict)
    %bb.1 ('') -> 0.3529411765 (freq)
    %bb.3 ('') -> 0.2352941176 (freq)
Merging from %bb.4 ('') to %bb.1 ('')
Selecting best successor for: %bb.1 ('')
    Not a candidate: %bb.5 ('') -> 0x80000000 / 0x80000000 = 100.00% (prob) (non-cold CFG conflict)
    %bb.3 ('') -> 0.2352941176 (freq)
Merging from %bb.1 ('') to %bb.3 ('')
Selecting best successor for: %bb.3 ('')
    Candidate: %bb.5 (''), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: %bb.5 ('')
Merging from %bb.3 ('') to %bb.5 ('')
Selecting best successor for: %bb.5 ('')
Finished forming chain for header block %bb.0 ('')
[MBP] Function: $s7partial1gSbyF
Placing chain %bb.0 ('')
          ... %bb.2 ('')
          ... %bb.4 ('')
          ... %bb.1 ('')
          ... %bb.3 ('')
          ... %bb.5 ('')

TryTailMergeBlocks: %bb.4, %bb.3, %bb.1
  with successor %bb.5
  which has fall-through from %bb.3
Looking for common tails of at least 3 instructions
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	3	$rbp = frame-setup MOV64rr $rsp
$rbp:	3	$rbp = frame-setup MOV64rr $rsp
$rbp:	3	$rbp = frame-setup MOV64rr $rsp
$rsp:	7	$rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
$rsp:	7	$rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
$rsp:	7	$rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
$r13:	11	$r13 = MOV64rr $rax
$r13:	11	$r13 = MOV64rr $rax
$r13:	11	$r13 = MOV64rr $rax
$rcx:	13	renamable $rcx = MOV64rm $rax, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
$rcx:	13	renamable $rcx = MOV64rm $rax, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
$rcx:	13	renamable $rcx = MOV64rm $rax, 1, $noreg, 0, $noreg :: (load 8 from %ir.5)
$rax:	14	renamable $rax = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
$rax:	14	renamable $rax = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
$rax:	14	renamable $rax = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
%bb.2: all preds known
$rax:	0	renamable $rax = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
$rax:	0	renamable $rax = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
$rax:	0	renamable $rax = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
%bb.4: all preds known
$rsi:	0	renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
$rsi:	0	renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
$rsi:	0	renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @"$ss6UInt16VN", $noreg :: (load 8 from got)
$rdi:	1	renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
$rdi:	1	renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
$rdi:	1	renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
$bl:	3	$bl = MOV8rr $al, implicit-def $ebx
$rdi:	4	$rdi = MOV64rr killed $r13
$rdi:	4	$rdi = MOV64rr killed $r13
$rdi:	4	$rdi = MOV64rr killed $r13
%bb.3: all preds known
$rdi:	0	$rdi = MOV64rr killed $r13
$rdi:	0	$rdi = MOV64rr killed $r13
$rdi:	0	$rdi = MOV64rr killed $r13
$ebx:	2	renamable $ebx = XOR32rr undef $ebx(tied-def 0), undef $ebx, implicit-def dead $eflags
$ebx:	2	renamable $ebx = XOR32rr undef $ebx(tied-def 0), undef $ebx, implicit-def dead $eflags
$ebx:	2	renamable $ebx = XOR32rr undef $ebx(tied-def 0), undef $ebx, implicit-def dead $eflags
%bb.1: all preds known
$rbx:	1	$rbx = MOV64rr $rax
$rbx:	1	$rbx = MOV64rr $rax
$rbx:	1	$rbx = MOV64rr $rax
$rdi:	2	$rdi = MOV64rr killed $r13
$rdi:	2	$rdi = MOV64rr killed $r13
$rdi:	2	$rdi = MOV64rr killed $r13
$bl:	5	renamable $bl = SETCCr 4, implicit killed $eflags, implicit-def $ebx
%bb.5: all preds known
$al:	0	$al = MOV8rr $bl, implicit killed $ebx
$rsp:	1	$rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
$rsp:	1	$rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
$rsp:	1	$rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
$rbx:	2	$rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbx:	2	$rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbx:	2	$rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$r13:	3	$r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$r13:	3	$r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$r13:	3	$r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	4	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	4	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	4	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
%bb.0: entry
%bb.2: all preds known
%bb.4: all preds known
%bb.3: all preds known
%bb.1: all preds known
%bb.5: all preds known
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.4
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1gSbyF **********
X86 Retpoline Thunks
	discovered a new reachable node %1
[SafeStack] Function: $s7partial1AC1fySbxlFTf4dd_n
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %1
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1AC1fySbxlFTf4dd_n ----

Computing probabilities for 



=== $s7partial1AC1fySbxlFTf4dd_n
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Creating new node: t4: i64 = undef
Creating constant: t5: i64 = TargetConstant<0>
Creating new node: t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Creating new node: t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64
Creating new node: t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1
Creating new node: t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1
Creating new node: t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1
Creating new node: t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2
Creating new node: t17: i64,i64 = merge_values t14, t16
Creating new node: t19: i1 = setcc t17, t2, seteq:ch
Creating new node: t20: i8 = any_extend t19
Creating constant: t21: i32 = TargetConstant<0>
Creating new node: t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t20
Creating new node: t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1
Initial selection DAG: %bb.0 '$s7partial1AC1fySbxlFTf4dd_n:'
SelectionDAG has 25 nodes:
  t0: ch = EntryToken
  t3: i64 = GlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0
    t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64
  t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1
  t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1
  t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1
  t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2
        t17: i64,i64 = merge_values t14, t16
        t2: i64,ch = CopyFromReg t0, Register:i64 %0
      t19: i1 = setcc t17, t2, seteq:ch
    t20: i8 = any_extend t19
  t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t20
  t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1



Combining: t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1

Combining: t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t20

Combining: t22: i8 = Register $al

Combining: t21: i32 = TargetConstant<0>

Combining: t20: i8 = any_extend t19
Creating constant: t25: i8 = Constant<1>
Creating constant: t26: i8 = Constant<0>

Combining: t19: i1 = setcc t17, t2, seteq:ch

Combining: t18: ch = seteq

Combining: t17: i64,i64 = merge_values t14, t16

Combining: t19: i1 = setcc t14, t2, seteq:ch

Combining: t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2

Combining: t15: i64 = Register $rdx

Combining: t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1

Combining: t13: i64 = Register $rax

Combining: t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1

Combining: t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1

Combining: t10: Untyped = RegisterMask

Combining: t9: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0

Combining: t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64

Combining: t7: i64 = Register $rdi

Combining: t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t5: i64 = TargetConstant<0>

Combining: t4: i64 = undef

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t1: i64 = Register %0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1AC1fySbxlFTf4dd_n:'
SelectionDAG has 23 nodes:
  t0: ch = EntryToken
    t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64
  t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1
  t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1
  t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1
    t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2
        t2: i64,ch = CopyFromReg t0, Register:i64 %0
      t19: i1 = setcc t14, t2, seteq:ch
    t20: i8 = any_extend t19
  t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t20
  t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1


Legalizing node: t22: i8 = Register $al
Ignoring node results
Legally typed node: t22: i8 = Register $al

Legalizing node: t21: i32 = TargetConstant<0>
Ignoring node results
Legally typed node: t21: i32 = TargetConstant<0>

Legalizing node: t18: ch = seteq
Analyzing result type: ch
Legal result type
Legally typed node: t18: ch = seteq

Legalizing node: t15: i64 = Register $rdx
Ignoring node results
Legally typed node: t15: i64 = Register $rdx

Legalizing node: t13: i64 = Register $rax
Ignoring node results
Legally typed node: t13: i64 = Register $rax

Legalizing node: t10: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t10: Untyped = RegisterMask

Legalizing node: t9: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t9: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0

Legalizing node: t7: i64 = Register $rdi
Ignoring node results
Legally typed node: t7: i64 = Register $rdi

Legalizing node: t5: i64 = TargetConstant<0>
Ignoring node results
Legally typed node: t5: i64 = TargetConstant<0>

Legalizing node: t4: i64 = undef
Analyzing result type: i64
Legal result type
Legally typed node: t4: i64 = undef

Legalizing node: t1: i64 = Register %0
Ignoring node results
Legally typed node: t1: i64 = Register %0

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing node: t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing node: t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Legal operand
Analyzing operand: t4: i64 = undef
Legal operand
Legally typed node: t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64

Legalizing node: t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64
Legal operand
Analyzing operand: t9: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0
Legal operand
Analyzing operand: t10: Untyped = RegisterMask
Legal operand
Analyzing operand: t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64
Legal operand
Legally typed node: t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1

Legalizing node: t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1
Legal operand
Analyzing operand: t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1
Legal operand
Legally typed node: t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1

Legalizing node: t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1
Legal operand
Analyzing operand: t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1
Legal operand
Legally typed node: t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1

Legalizing node: t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1
Legal operand
Analyzing operand: t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1
Legal operand
Legally typed node: t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2

Legalizing node: t19: i1 = setcc t14, t2, seteq:ch
Analyzing result type: i1
Promote integer result: t19: i1 = setcc t14, t2, seteq:ch

Creating new node: t27: i8 = setcc t14, t2, seteq:ch
Legalizing node: t20: i8 = any_extend t19
Analyzing result type: i8
Legal result type
Analyzing operand: t19: i1 = setcc t14, t2, seteq:ch
Promote integer operand: t20: i8 = any_extend t19

Legalizing node: t27: i8 = setcc t14, t2, seteq:ch
Analyzing result type: i8
Legal result type
Analyzing operand: t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1
Legal operand
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Analyzing operand: t18: ch = seteq
Legal operand
Legally typed node: t27: i8 = setcc t14, t2, seteq:ch

Legalizing node: t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t27
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2
Legal operand
Analyzing operand: t27: i8 = setcc t14, t2, seteq:ch
Legal operand
Legally typed node: t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t27

Legalizing node: t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1
Analyzing result type: ch
Legal result type
Analyzing operand: t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t27
Legal operand
Analyzing operand: t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t27
Legal operand
Legally typed node: t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1

Legalizing node: t65535: ch = handlenode t24
Analyzing result type: ch
Legal result type
Analyzing operand: t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1
Legal operand
Legally typed node: t65535: ch = handlenode t24

Type-legalized selection DAG: %bb.0 '$s7partial1AC1fySbxlFTf4dd_n:'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
    t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64
  t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1
  t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1
  t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1
    t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2
      t2: i64,ch = CopyFromReg t0, Register:i64 %0
    t27: i8 = setcc t14, t2, seteq:ch
  t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t27
  t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1



Combining: t27: i8 = setcc t14, t2, seteq:ch

Combining: t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1

Combining: t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t27

Combining: t22: i8 = Register $al

Combining: t21: i32 = TargetConstant<0>

Combining: t18: ch = seteq

Combining: t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2

Combining: t15: i64 = Register $rdx

Combining: t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1

Combining: t13: i64 = Register $rax

Combining: t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1

Combining: t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1

Combining: t10: Untyped = RegisterMask

Combining: t9: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0

Combining: t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64

Combining: t7: i64 = Register $rdi

Combining: t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t5: i64 = TargetConstant<0>

Combining: t4: i64 = undef

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t1: i64 = Register %0

Combining: t0: ch = EntryToken
Optimized type-legalized selection DAG: %bb.0 '$s7partial1AC1fySbxlFTf4dd_n:'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
    t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64
  t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1
  t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1
  t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1
    t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2
      t2: i64,ch = CopyFromReg t0, Register:i64 %0
    t27: i8 = setcc t14, t2, seteq:ch
  t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t27
  t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1



Legalizing: t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1
Legal node: nothing to do

Legalizing: t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t27
Legal node: nothing to do

Legalizing: t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2
Legal node: nothing to do

Legalizing: t27: i8 = setcc t14, t2, seteq:ch
Trying custom legalization
Creating new node: t28: i64,i32 = X86ISD::SUB t14, t2
Creating constant: t29: i8 = Constant<4>
Creating new node: t30: i8 = X86ISD::SETCC Constant:i8<4>, t28:1
Successfully custom legalized node
 ... replacing: t27: i8 = setcc t14, t2, seteq:ch
     with:      t30: i8 = X86ISD::SETCC Constant:i8<4>, t28:1

Legalizing: t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1
Legal node: nothing to do

Legalizing: t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1

Legalizing: t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1
Legal node: nothing to do

Legalizing: t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64
Legal node: nothing to do

Legalizing: t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Legalizing: t22: i8 = Register $al

Legalizing: t21: i32 = TargetConstant<0>

Legalizing: t15: i64 = Register $rdx

Legalizing: t13: i64 = Register $rax

Legalizing: t10: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t9: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0
Legal node: nothing to do

Legalizing: t7: i64 = Register $rdi

Legalizing: t5: i64 = TargetConstant<0>

Legalizing: t4: i64 = undef
Legal node: nothing to do

Legalizing: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t30: i8 = X86ISD::SETCC Constant:i8<4>, t28:1
Legal node: nothing to do

Legalizing: t29: i8 = Constant<4>
Legal node: nothing to do

Legalizing: t28: i64,i32 = X86ISD::SUB t14, t2
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1AC1fySbxlFTf4dd_n:'
SelectionDAG has 23 nodes:
  t0: ch = EntryToken
    t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64
  t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1
  t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1
  t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1
    t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2
        t2: i64,ch = CopyFromReg t0, Register:i64 %0
      t28: i64,i32 = X86ISD::SUB t14, t2
    t30: i8 = X86ISD::SETCC Constant:i8<4>, t28:1
  t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t30
  t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1



Legalizing: t30: i8 = X86ISD::SETCC Constant:i8<4>, t28:1
Legal node: nothing to do

Combining: t30: i8 = X86ISD::SETCC Constant:i8<4>, t28:1

Legalizing: t29: i8 = Constant<4>
Legal node: nothing to do

Combining: t29: i8 = Constant<4>

Legalizing: t28: i64,i32 = X86ISD::SUB t14, t2
Legal node: nothing to do

Combining: t28: i64,i32 = X86ISD::SUB t14, t2

Legalizing: t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1
Legal node: nothing to do

Combining: t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1

Legalizing: t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t30
Legal node: nothing to do

Combining: t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t30

Legalizing: t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2
Legal node: nothing to do

Combining: t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2

Legalizing: t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1
Legal node: nothing to do

Combining: t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1

Legalizing: t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1

Combining: t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1

Legalizing: t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1
Legal node: nothing to do

Combining: t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1

Legalizing: t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64
Legal node: nothing to do

Combining: t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64

Legalizing: t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing: t22: i8 = Register $al

Combining: t22: i8 = Register $al

Legalizing: t21: i32 = TargetConstant<0>

Combining: t21: i32 = TargetConstant<0>

Legalizing: t15: i64 = Register $rdx

Combining: t15: i64 = Register $rdx

Legalizing: t13: i64 = Register $rax

Combining: t13: i64 = Register $rax

Legalizing: t10: Untyped = RegisterMask
Legal node: nothing to do

Combining: t10: Untyped = RegisterMask

Legalizing: t9: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0
Legal node: nothing to do

Combining: t9: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0

Legalizing: t7: i64 = Register $rdi

Combining: t7: i64 = Register $rdi

Legalizing: t5: i64 = TargetConstant<0>

Combining: t5: i64 = TargetConstant<0>

Legalizing: t4: i64 = undef
Legal node: nothing to do

Combining: t4: i64 = undef

Legalizing: t1: i64 = Register %0

Combining: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1AC1fySbxlFTf4dd_n:'
SelectionDAG has 23 nodes:
  t0: ch = EntryToken
    t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
  t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64
  t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1
  t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1
  t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1
    t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2
        t2: i64,ch = CopyFromReg t0, Register:i64 %0
      t28: i64,i32 = X86ISD::SUB t14, t2
    t30: i8 = X86ISD::SETCC Constant:i8<4>, t28:1
  t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t30
  t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t24: ch = X86ISD::RET_FLAG t23, TargetConstant:i32<0>, Register:i8 $al, t23:1
ISEL: Starting pattern match
  Initial Opcode index to 130673
  Morphed node: t24: ch = RET TargetConstant:i32<0>, Register:i8 $al, t23, t23:1
ISEL: Match complete!

ISEL: Starting selection on root node: t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t30

ISEL: Starting selection on root node: t30: i8 = X86ISD::SETCC Constant:i8<4>, t28:1
ISEL: Starting pattern match
  Initial Opcode index to 130691
Creating constant: t31: i8 = TargetConstant<4>
Creating new node: t33: ch,glue = CopyToReg t0, Register:i32 $eflags, t28:1
  Morphed node: t30: i8 = SETCCr TargetConstant:i8<4>, t33:1
ISEL: Match complete!

ISEL: Starting selection on root node: t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2

ISEL: Starting selection on root node: t28: i64,i32 = X86ISD::SUB t14, t2
ISEL: Starting pattern match
  Initial Opcode index to 89709
  Match failed at index 89716
  Continuing at 89819
  Match failed at index 89820
  Continuing at 89866
  Match failed at index 89867
  Continuing at 89930
  Continuing at 89931
  Match failed at index 89932
  Continuing at 89977
  Skipped scope entry (due to false predicate) at index 89987, continuing at 90049
  Match failed at index 90053
  Continuing at 90067
  Match failed at index 90071
  Continuing at 90085
  Match failed at index 90089
  Continuing at 90103
  Match failed at index 90104
  Continuing at 90123
  Match failed at index 90124
  Continuing at 90143
  Continuing at 90144
  Match failed at index 90145
  Continuing at 90156
  Match failed at index 90157
  Continuing at 90168
  Match failed at index 90169
  Continuing at 90180
  Morphed node: t28: i64,i32 = SUB64rr t14, t2
ISEL: Match complete!

ISEL: Starting selection on root node: t14: i64,ch,glue = CopyFromReg t12, Register:i64 $rax, t12:1

ISEL: Starting selection on root node: t12: ch,glue = callseq_end t11, TargetConstant:i64<0>, TargetConstant:i64<0>, t11:1
ISEL: Starting pattern match
  Initial Opcode index to 130027
  Skipped scope entry (due to false predicate) at index 130043, continuing at 130054
  Morphed node: t12: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t11, t11:1
ISEL: Match complete!

ISEL: Starting selection on root node: t11: ch,glue = X86ISD::CALL t8, TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8:1
ISEL: Starting pattern match
  Initial Opcode index to 91510
  Match failed at index 91515
  Continuing at 91598
  OpcodeSwitch from 91604 to 91608
  TypeSwitch[i64] from 91608 to 91611
  Morphed node: t11: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8, t8:1
ISEL: Match complete!

ISEL: Starting selection on root node: t8: ch,glue = CopyToReg t6, Register:i64 $rdi, undef:i64

ISEL: Starting selection on root node: t6: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
ISEL: Starting pattern match
  Initial Opcode index to 130070
  Skipped scope entry (due to false predicate) at index 130085, continuing at 130100
  Morphed node: t6: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

ISEL: Starting selection on root node: t22: i8 = Register $al

ISEL: Starting selection on root node: t21: i32 = TargetConstant<0>

ISEL: Starting selection on root node: t15: i64 = Register $rdx

ISEL: Starting selection on root node: t13: i64 = Register $rax

ISEL: Starting selection on root node: t10: Untyped = RegisterMask

ISEL: Starting selection on root node: t9: i64 = TargetGlobalAddress<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0

ISEL: Starting selection on root node: t7: i64 = Register $rdi

ISEL: Starting selection on root node: t5: i64 = TargetConstant<0>

ISEL: Starting selection on root node: t4: i64 = undef

ISEL: Starting selection on root node: t1: i64 = Register %0

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1AC1fySbxlFTf4dd_n:'
SelectionDAG has 25 nodes:
  t0: ch = EntryToken
    t6: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0
  t8: ch,glue = CopyToReg t6:1, Register:i64 $rdi, IMPLICIT_DEF:i64
  t11: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8, t8:1
  t12: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t11, t11:1
  t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rax, t12:2
    t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2
          t2: i64,ch = CopyFromReg t0, Register:i64 %0
        t28: i64,i32 = SUB64rr t14, t2
      t33: ch,glue = CopyToReg t0, Register:i32 $eflags, t28:1
    t30: i8 = SETCCr TargetConstant:i8<4>, t33:1
  t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t30
  t24: ch = RET TargetConstant:i32<0>, Register:i8 $al, t23, t23:1


********** List Scheduling %bb.0 '' **********
SU(0): t24: ch = RET TargetConstant:i32<0>, Register:i8 $al, t23, t23:1

    t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t30

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Barrier
    SU(1): Data Latency=1
SU(1): t30: i8 = SETCCr TargetConstant:i8<4>, t33:1

    t33: ch,glue = CopyToReg t0, Register:i32 $eflags, t28:1

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$eflags
  Successors:
    SU(0): Data Latency=1
SU(2): t28: i64,i32 = SUB64rr t14, t2

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1
    SU(3): Data Latency=1
  Successors:
    SU(1): Data Latency=1 Reg=$eflags
SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Data Latency=1
SU(4): t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2

    t8: ch,glue = CopyToReg t6:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t11: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8, t8:1

    t12: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t11, t11:1

    t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rax, t12:2

  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(6): Ord  Latency=1 Barrier
    SU(5): Data Latency=1
  Successors:
    SU(0): Ord  Latency=1 Barrier
    SU(2): Data Latency=1
SU(5): t4: i64 = IMPLICIT_DEF

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=1
SU(6): t6: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t24: ch = RET TargetConstant:i32<0>, Register:i8 $al, t23, t23:1

    t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t30


*** Scheduling [0]: SU(0): t24: ch = RET TargetConstant:i32<0>, Register:i8 $al, t23, t23:1

    t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t30


Examining Available:
Height 1: SU(1): t30: i8 = SETCCr TargetConstant:i8<4>, t33:1

    t33: ch,glue = CopyToReg t0, Register:i32 $eflags, t28:1


*** Scheduling [1]: SU(1): t30: i8 = SETCCr TargetConstant:i8<4>, t33:1

    t33: ch,glue = CopyToReg t0, Register:i32 $eflags, t28:1


Examining Available:
Height 2: SU(2): t28: i64,i32 = SUB64rr t14, t2


*** Scheduling [2]: SU(2): t28: i64,i32 = SUB64rr t14, t2


Examining Available:
Height 3: SU(4): t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2

    t8: ch,glue = CopyToReg t6:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t11: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8, t8:1

    t12: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t11, t11:1

    t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rax, t12:2

Height 3: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [3]: SU(4): t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2

    t8: ch,glue = CopyToReg t6:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t11: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8, t8:1

    t12: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t11, t11:1

    t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rax, t12:2


Examining Available:
Height 4: SU(5): t4: i64 = IMPLICIT_DEF

Height 4: SU(6): t6: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

Height 3: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [4]: SU(5): t4: i64 = IMPLICIT_DEF


Examining Available:
Height 4: SU(6): t6: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

Height 3: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [5]: SU(6): t6: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0


Examining Available:
Height 3: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [6]: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

*** Final schedule ***
SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

SU(6): t6: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

SU(5): t4: i64 = IMPLICIT_DEF

SU(4): t16: i64,ch,glue = CopyFromReg t14:1, Register:i64 $rdx, t14:2

    t8: ch,glue = CopyToReg t6:1, Register:i64 $rdi, IMPLICIT_DEF:i64

    t11: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%swift.metadata_response (i64)* @"$s7partial1ACMa"> 0, Register:i64 $rdi, RegisterMask:Untyped, t8, t8:1

    t12: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t11, t11:1

    t14: i64,ch,glue = CopyFromReg t12:1, Register:i64 $rax, t12:2

SU(2): t28: i64,i32 = SUB64rr t14, t2

SU(1): t30: i8 = SETCCr TargetConstant:i8<4>, t33:1

    t33: ch,glue = CopyToReg t0, Register:i32 $eflags, t28:1

SU(0): t24: ch = RET TargetConstant:i32<0>, Register:i8 $al, t23, t23:1

    t23: ch,glue = CopyToReg t16:1, Register:i8 $al, t30


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1AC1fySbxlFTf4dd_n: IsSSA, TracksLiveness
Function Live Ins: $rdi in %0

bb.0 (%ir-block.1):
  liveins: $rdi
  %0:gr64 = COPY $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = IMPLICIT_DEF
  $rdi = COPY %1:gr64
  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = COPY $rax
  %3:gr64 = COPY $rdx
  %4:gr64 = SUB64rr %2:gr64(tied-def 0), %0:gr64, implicit-def $eflags
  %5:gr8 = SETCCr 4, implicit $eflags
  $al = COPY %5:gr8
  RET 0, $al

# End machine code for function $s7partial1AC1fySbxlFTf4dd_n.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1AC1fySbxlFTf4dd_n: IsSSA, TracksLiveness
Function Live Ins: $rdi in %0

bb.0 (%ir-block.1):
  liveins: $rdi
  %0:gr64 = COPY $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = IMPLICIT_DEF
  $rdi = COPY %1:gr64
  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = COPY $rax
  %3:gr64 = COPY $rdx
  %4:gr64 = SUB64rr %2:gr64(tied-def 0), %0:gr64, implicit-def $eflags
  %5:gr8 = SETCCr 4, implicit $eflags
  $al = COPY %5:gr8
  RET 0, $al

# End machine code for function $s7partial1AC1fySbxlFTf4dd_n.

# Machine code for function $s7partial1AC1fySbxlFTf4dd_n: IsSSA, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  %1:gr64 = IMPLICIT_DEF
64B	  $rdi = COPY %1:gr64
80B	  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
96B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
112B	  %2:gr64 = COPY $rax
128B	  %3:gr64 = COPY $rdx
144B	  %4:gr64 = SUB64rr %2:gr64(tied-def 0), %0:gr64, implicit-def $eflags
160B	  %5:gr8 = SETCCr 4, implicit $eflags
176B	  $al = COPY %5:gr8
192B	  RET 0, $al

# End machine code for function $s7partial1AC1fySbxlFTf4dd_n.

********** Stack Coloring **********
********** Function: $s7partial1AC1fySbxlFTf4dd_n
DeadMachineInstructionElim: DELETING: %3:gr64 = COPY $rdx
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1AC1fySbxlFTf4dd_n
Machine InstCombiner: $s7partial1AC1fySbxlFTf4dd_n
Combining MBB 
********** X86 cmov Conversion : $s7partial1AC1fySbxlFTf4dd_n**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: $s7partial1AC1fySbxlFTf4dd_n ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: $s7partial1AC1fySbxlFTf4dd_n
=============================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlFTf4dd_n
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1AC1fySbxlFTf4dd_n
Encountered load fold barrier on CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
**** Analysing $s7partial1AC1fySbxlFTf4dd_n
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1AC1fySbxlFTf4dd_n **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : $s7partial1AC1fySbxlFTf4dd_n **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1AC1fySbxlFTf4dd_n
%bb.0 has 1 implicit defs.
Processing %1:gr64 = IMPLICIT_DEF
Converting to IMPLICIT_DEF: $rdi = COPY undef %1:gr64
Processing $rdi = IMPLICIT_DEF undef %1:gr64
Physreg user: CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1AC1fySbxlFTf4dd_n
# Machine code for function $s7partial1AC1fySbxlFTf4dd_n: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY killed $rdi
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
64B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %2:gr64 = COPY killed $rax
96B	  CMP64rr killed %2:gr64, killed %0:gr64, implicit-def $eflags
112B	  %5:gr8 = SETCCr 4, implicit killed $eflags
128B	  $al = COPY killed %5:gr8
144B	  RET 0, killed $al

# End machine code for function $s7partial1AC1fySbxlFTf4dd_n.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 DIL#0 DIH#0 HDI#0
Created 3 new intervals.
********** INTERVALS **********
DIL [0B,16r:0)  0@0B-phi
DIH [0B,16r:0)  0@0B-phi
HDI [0B,16r:0)  0@0B-phi
%0 [16r,96r:0)  0@16r weight:0.000000e+00
%2 [80r,96r:0)  0@80r weight:0.000000e+00
%5 [112r,128r:0)  0@112r weight:0.000000e+00
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1AC1fySbxlFTf4dd_n: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
64B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %2:gr64 = COPY killed $rax
96B	  CMP64rr %2:gr64, %0:gr64, implicit-def $eflags
112B	  %5:gr8 = SETCCr 4, implicit killed $eflags
128B	  $al = COPY %5:gr8
144B	  RET 0, killed $al

# End machine code for function $s7partial1AC1fySbxlFTf4dd_n.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1AC1fySbxlFTf4dd_n
********** JOINING INTERVALS ***********
:
16B	%0:gr64 = COPY $rdi
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
80B	%2:gr64 = COPY killed $rax
	Considering merging %2 with $rax
	Can only merge into reserved registers.
128B	$al = COPY %5:gr8
	Considering merging %5 with $al
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
DIL [0B,16r:0)  0@0B-phi
DIH [0B,16r:0)  0@0B-phi
HDI [0B,16r:0)  0@0B-phi
%0 [16r,96r:0)  0@16r weight:0.000000e+00
%2 [80r,96r:0)  0@80r weight:0.000000e+00
%5 [112r,128r:0)  0@112r weight:0.000000e+00
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1AC1fySbxlFTf4dd_n: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
64B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %2:gr64 = COPY killed $rax
96B	  CMP64rr %2:gr64, %0:gr64, implicit-def $eflags
112B	  %5:gr8 = SETCCr 4, implicit killed $eflags
128B	  $al = COPY %5:gr8
144B	  RET 0, killed $al

# End machine code for function $s7partial1AC1fySbxlFTf4dd_n.

Before MISched:
# Machine code for function $s7partial1AC1fySbxlFTf4dd_n: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

bb.0 (%ir-block.1):
  liveins: $rdi
  %0:gr64 = COPY $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = COPY killed $rax
  CMP64rr %2:gr64, %0:gr64, implicit-def $eflags
  %5:gr8 = SETCCr 4, implicit killed $eflags
  $al = COPY %5:gr8
  RET 0, killed $al

# End machine code for function $s7partial1AC1fySbxlFTf4dd_n.

********** MI Scheduling **********
$s7partial1AC1fySbxlFTf4dd_n:%bb.0 
  From: %2:gr64 = COPY killed $rax
    To: RET 0, killed $al
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %2:gr64 = COPY killed $rax
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Data Latency=0 Reg=%2
    SU(3): Anti Latency=0
  Single Issue       : false;
SU(1):   CMP64rr %2:gr64, %0:gr64, implicit-def $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Data Latency=0 Reg=%2
  Successors:
    SU(2): Data Latency=1 Reg=$eflags
  Single Issue       : false;
SU(2):   %5:gr8 = SETCCr 4, implicit killed $eflags
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$eflags
  Successors:
    SU(3): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(3):   $al = COPY %5:gr8
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%5
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   RET 0, killed $al
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 2
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) $al = COPY %5:gr8
  Ready @0c
  BotQ.A TopLatency SU(3) 2c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %5:gr8 = SETCCr 4, implicit killed $eflags
  Ready @1c
  SBPort05 +1x6u
  *** Critical resource SBPort05: 0c
  SBPort015 +1x4u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort05
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP64rr %2:gr64, %0:gr64, implicit-def $eflags
  Ready @2c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(1) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %2:gr64 = COPY killed $rax
  Ready @2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %2:gr64 = COPY killed $rax
SU(1):   CMP64rr %2:gr64, %0:gr64, implicit-def $eflags
SU(2):   %5:gr8 = SETCCr 4, implicit killed $eflags
SU(3):   $al = COPY %5:gr8

********** INTERVALS **********
DIL [0B,16r:0)  0@0B-phi
DIH [0B,16r:0)  0@0B-phi
HDI [0B,16r:0)  0@0B-phi
%0 [16r,96r:0)  0@16r weight:0.000000e+00
%2 [80r,96r:0)  0@80r weight:0.000000e+00
%5 [112r,128r:0)  0@112r weight:0.000000e+00
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1AC1fySbxlFTf4dd_n: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
64B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %2:gr64 = COPY killed $rax
96B	  CMP64rr %2:gr64, %0:gr64, implicit-def $eflags
112B	  %5:gr8 = SETCCr 4, implicit killed $eflags
128B	  $al = COPY %5:gr8
144B	  RET 0, killed $al

# End machine code for function $s7partial1AC1fySbxlFTf4dd_n.


block-frequency: $s7partial1AC1fySbxlFTf4dd_n
=============================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlFTf4dd_n
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1AC1fySbxlFTf4dd_n
********** Compute Spill Weights **********
********** Function: $s7partial1AC1fySbxlFTf4dd_n
********** INTERVALS **********
DIL [0B,16r:0)  0@0B-phi
DIH [0B,16r:0)  0@0B-phi
HDI [0B,16r:0)  0@0B-phi
%0 [16r,96r:0)  0@16r weight:4.208333e-03
%2 [80r,96r:0)  0@80r weight:INF
%5 [112r,128r:0)  0@112r weight:INF
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1AC1fySbxlFTf4dd_n: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
64B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %2:gr64 = COPY killed $rax
96B	  CMP64rr %2:gr64, %0:gr64, implicit-def $eflags
112B	  %5:gr8 = SETCCr 4, implicit killed $eflags
128B	  $al = COPY %5:gr8
144B	  RET 0, killed $al

# End machine code for function $s7partial1AC1fySbxlFTf4dd_n.


selectOrSplit GR64:%0 [16r,96r:0)  0@16r weight:4.208333e-03 w=4.208333e-03
hints: $rdi
missed hint $rdi
assigning %0 to $rbx: BH [16r,96r:0)  0@16r BL [16r,96r:0)  0@16r HBX [16r,96r:0)  0@16r

selectOrSplit GR64:%2 [80r,96r:0)  0@80r weight:INF w=INF
hints: $rax
assigning %2 to $rax: AH [80r,96r:0)  0@80r AL [80r,96r:0)  0@80r HAX [80r,96r:0)  0@80r

selectOrSplit GR8:%5 [112r,128r:0)  0@112r weight:INF w=INF
AllocationOrder(GR8) = [ $al $cl $dl $sil $dil $r8b $r9b $r10b $r11b $bl $r14b $r15b $r12b $r13b ]
hints: $al
assigning %5 to $al: AL [112r,128r:0)  0@112r
Trying to reconcile hints for: %0($rbx)
%0($rbx) is recolorable.
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1AC1fySbxlFTf4dd_n
********** REGISTER MAP **********
[%0 -> $rbx] GR64
[%2 -> $rax] GR64
[%5 -> $al] GR8

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
64B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %2:gr64 = COPY $rax
96B	  CMP64rr killed %2:gr64, killed %0:gr64, implicit-def $eflags
112B	  %5:gr8 = SETCCr 4, implicit killed $eflags
128B	  $al = COPY killed %5:gr8
144B	  RET 0, $al
> renamable $rbx = COPY $rdi
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> CALL64pcrel32 @"$s7partial1ACMa", <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def dead $rdx
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> renamable $rax = COPY $rax
Identity copy: renamable $rax = COPY $rax
  deleted.
> CMP64rr killed renamable $rax, killed renamable $rbx, implicit-def $eflags
> renamable $al = SETCCr 4, implicit killed $eflags
> $al = COPY killed renamable $al
Identity copy: $al = COPY killed renamable $al
  deleted.
> RET 0, $al
********** Stack Slot Coloring **********
********** Function: $s7partial1AC1fySbxlFTf4dd_n
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rbx = COPY $rdi
MCP: Copy is used - not dead:   renamable $rbx = COPY $rdi
MCP: Copy is used - not dead:   renamable $rbx = COPY $rdi
MCP: Copy is used - not dead:   renamable $rbx = COPY $rdi
******** Post-regalloc Machine LICM: $s7partial1AC1fySbxlFTf4dd_n ********

block-frequency: $s7partial1AC1fySbxlFTf4dd_n
=============================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlFTf4dd_n
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing $s7partial1AC1fySbxlFTf4dd_n
Look into: 0 
Use or define CSR(1) or FI(0): renamable $rbx = COPY $rdi

No Shrink wrap candidate found
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rbx = COPY $rdi
MCP: Copy is used - not dead:   renamable $rbx = COPY $rdi
MCP: Copy is used - not dead:   renamable $rbx = COPY $rdi
MCP: Copy is used - not dead:   renamable $rbx = COPY $rdi
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1AC1fySbxlFTf4dd_n
real copy:   renamable $rbx = COPY $rdi
replaced by: $rbx = MOV64rr $rdi
	discovered a new reachable node %bb.0

block-frequency: $s7partial1AC1fySbxlFTf4dd_n
=============================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1AC1fySbxlFTf4dd_n
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	3	$rbp = frame-setup MOV64rr $rsp
$rbp:	3	$rbp = frame-setup MOV64rr $rsp
$rbp:	3	$rbp = frame-setup MOV64rr $rsp
$rbx:	8	$rbx = MOV64rr $rdi
$rbx:	8	$rbx = MOV64rr $rdi
$rbx:	8	$rbx = MOV64rr $rdi
$al:	11	renamable $al = SETCCr 4, implicit killed $eflags
$rsp:	12	$rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
$rsp:	12	$rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
$rsp:	12	$rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 8, implicit-def dead $eflags
$rbx:	13	$rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbx:	13	$rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbx:	13	$rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	14	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	14	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	14	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
%bb.0: entry
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1AC1fySbxlFTf4dd_n **********
X86 Retpoline Thunks
	discovered a new reachable node %1
[SafeStack] Function: $s7partial1BCMa
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %1
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCMa ----

Computing probabilities for 



=== $s7partial1BCMa
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Creating constant: t6: i64 = Constant<16>
Creating new node: t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
Creating new node: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Creating new node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0, t9:1
Creating new node: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
Creating constant: t15: i32 = Constant<0>
Creating new node: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1
Initial selection DAG: %bb.0 '$s7partial1BCMa:'
SelectionDAG has 18 nodes:
  t0: ch = EntryToken
  t3: i64 = GlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0, t9:1
    t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
  t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
  t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1



Combining: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1

Combining: t16: Untyped = RegisterMask

Combining: t15: i32 = Constant<0>

Combining: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0

Combining: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1

Combining: t12: i64 = Register $rdx

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0, t9:1

Combining: t10: i64 = Register $rsi

Combining: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

Combining: t8: i64 = Register $rdi

Combining: t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>

Combining: t6: i64 = Constant<16>

Combining: t5: i64 = GlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0

Combining: t4: i64 = GlobalAddress<%swift.type** @"$s7partial1BCML"> 0

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t1: i64 = Register %0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1BCMa:'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0, t9:1
    t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
  t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
  t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1


Legalizing node: t16: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t16: Untyped = RegisterMask

Legalizing node: t15: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t15: i32 = Constant<0>

Legalizing node: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0

Legalizing node: t12: i64 = Register $rdx
Ignoring node results
Legally typed node: t12: i64 = Register $rdx

Legalizing node: t10: i64 = Register $rsi
Ignoring node results
Legally typed node: t10: i64 = Register $rsi

Legalizing node: t8: i64 = Register $rdi
Ignoring node results
Legally typed node: t8: i64 = Register $rdi

Legalizing node: t6: i64 = Constant<16>
Analyzing result type: i64
Legal result type
Legally typed node: t6: i64 = Constant<16>

Legalizing node: t5: i64 = GlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t5: i64 = GlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0

Legalizing node: t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
Analyzing result type: i64
Legal result type
Analyzing operand: t5: i64 = GlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Legal operand
Analyzing operand: t6: i64 = Constant<16>
Legal operand
Legally typed node: t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>

Legalizing node: t4: i64 = GlobalAddress<%swift.type** @"$s7partial1BCML"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t4: i64 = GlobalAddress<%swift.type** @"$s7partial1BCML"> 0

Legalizing node: t1: i64 = Register %0
Ignoring node results
Legally typed node: t1: i64 = Register %0

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing node: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Legally typed node: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

Legalizing node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0, t9:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal operand
Analyzing operand: t4: i64 = GlobalAddress<%swift.type** @"$s7partial1BCML"> 0
Legal operand
Analyzing operand: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal operand
Legally typed node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0, t9:1

Legalizing node: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0, t9:1
Legal operand
Analyzing operand: t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
Legal operand
Analyzing operand: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0, t9:1
Legal operand
Legally typed node: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1

Legalizing node: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
Legal operand
Analyzing operand: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0
Legal operand
Analyzing operand: t15: i32 = Constant<0>
Legal operand
Analyzing operand: t16: Untyped = RegisterMask
Legal operand
Analyzing operand: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
Legal operand
Legally typed node: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1

Legalizing node: t65535: ch = handlenode t17
Analyzing result type: ch
Legal result type
Analyzing operand: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1
Legal operand
Legally typed node: t65535: ch = handlenode t17

Type-legalized selection DAG: %bb.0 '$s7partial1BCMa:'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0, t9:1
    t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
  t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
  t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1



Legalizing: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1
Legal node: nothing to do

Legalizing: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
Legal node: nothing to do

Legalizing: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0, t9:1
Legal node: nothing to do

Legalizing: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal node: nothing to do

Legalizing: t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0, Constant:i64<16>
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Legalizing: t16: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t15: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0
Legal node: nothing to do

Legalizing: t12: i64 = Register $rdx

Legalizing: t10: i64 = Register $rsi

Legalizing: t8: i64 = Register $rdi

Legalizing: t6: i64 = Constant<16>
Legal node: nothing to do

Legalizing: t5: i64 = GlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Trying custom legalization
Creating new node: t19: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Successfully custom legalized node
 ... replacing: t5: i64 = GlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
     with:      t19: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0

Legalizing: t4: i64 = GlobalAddress<%swift.type** @"$s7partial1BCML"> 0
Trying custom legalization
Creating new node: t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0
Successfully custom legalized node
 ... replacing: t4: i64 = GlobalAddress<%swift.type** @"$s7partial1BCML"> 0
     with:      t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0

Legalizing: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0
Legal node: nothing to do

Legalizing: t20: i64 = TargetGlobalAddress<%swift.type** @"$s7partial1BCML"> 0
Legal node: nothing to do

Legalizing: t19: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Legal node: nothing to do

Legalizing: t18: i64 = TargetGlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1BCMa:'
SelectionDAG has 19 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
    t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1
      t19: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
    t7: i64 = add nuw t19, Constant:i64<16>
  t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
  t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1



Legalizing: t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0
Legal node: nothing to do

Combining: t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0

Legalizing: t20: i64 = TargetGlobalAddress<%swift.type** @"$s7partial1BCML"> 0
Legal node: nothing to do

Combining: t20: i64 = TargetGlobalAddress<%swift.type** @"$s7partial1BCML"> 0

Legalizing: t19: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Legal node: nothing to do

Combining: t19: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0

Legalizing: t18: i64 = TargetGlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
Legal node: nothing to do

Combining: t18: i64 = TargetGlobalAddress<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0

Legalizing: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1
Legal node: nothing to do

Combining: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1

Legalizing: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
Legal node: nothing to do

Combining: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1

Legalizing: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1
Legal node: nothing to do

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1

Legalizing: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal node: nothing to do

Combining: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

Legalizing: t7: i64 = add nuw t19, Constant:i64<16>
Legal node: nothing to do

Combining: t7: i64 = add nuw t19, Constant:i64<16>

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing: t16: Untyped = RegisterMask
Legal node: nothing to do

Combining: t16: Untyped = RegisterMask

Legalizing: t15: i32 = Constant<0>
Legal node: nothing to do

Combining: t15: i32 = Constant<0>

Legalizing: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0
Legal node: nothing to do

Combining: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0

Legalizing: t12: i64 = Register $rdx

Combining: t12: i64 = Register $rdx

Legalizing: t10: i64 = Register $rsi

Combining: t10: i64 = Register $rsi

Legalizing: t8: i64 = Register $rdi

Combining: t8: i64 = Register $rdi

Legalizing: t6: i64 = Constant<16>
Legal node: nothing to do

Combining: t6: i64 = Constant<16>

Legalizing: t1: i64 = Register %0

Combining: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1BCMa:'
SelectionDAG has 19 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
    t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1
      t19: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> 0
    t7: i64 = add nuw t19, Constant:i64<16>
  t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
  t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1
ISEL: Starting pattern match
  Initial Opcode index to 40262
  Match failed at index 40267
  Continuing at 40335
  OpcodeSwitch from 40341 to 40345
  TypeSwitch[i64] from 40345 to 40369
Creating constant: t22: i32 = TargetConstant<0>
  Morphed node: t17: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13, t13:1
ISEL: Match complete!

ISEL: Starting selection on root node: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1

ISEL: Starting selection on root node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1

ISEL: Starting selection on root node: t7: i64 = add nuw t19, Constant:i64<16>
ISEL: Starting pattern match
  Initial Opcode index to 96740
  Match failed at index 96744
  Continuing at 96847
  Match failed at index 96849
  Continuing at 96956
  TypeSwitch[i64] from 96958 to 96999
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg t24: i64 = Register $rip
 Scale 1
IndexReg nul
 Disp 0
GV @"$s7partial1BCMf" = internal global <{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }> <{ void (%T7partial1BC*)* @"$s7partial1BCfD", i8** @"$sBoWV", i64 ptrtoint (%objc_class* @"$s7partial1BCMm" to i64), %swift.type* bitcast (i64* getelementptr inbounds (<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>, <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf", i32 0, i32 2) to %swift.type*), %swift.opaque* @_objc_empty_cache, %swift.opaque* null, i64 add (i64 ptrtoint ({ i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8* }* @_DATA__TtC7partial1B to i64), i64 2), i32 2, i32 0, i32 16, i16 7, i16 0, i32 112, i32 16, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>* @"$s7partial1BCMn", i8* null, %T7partial1BC* (%swift.type*)* @"$s7partial1BCACycfC", i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* @"$s7partial1BC1fySbxlF" }>, align 8
 CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t25: i8 = TargetConstant<1>
  Morphed node: t7: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> + 16, Register:i16 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

ISEL: Starting selection on root node: t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1BCML"> 0
ISEL: Starting pattern match
  Initial Opcode index to 124387
  TypeSwitch[i64] from 124388 to 124409
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
  Morphed node: t21: i64 = LEA64r Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type** @"$s7partial1BCML"> 0, Register:i16 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

ISEL: Starting selection on root node: t16: Untyped = RegisterMask

ISEL: Starting selection on root node: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0

ISEL: Starting selection on root node: t12: i64 = Register $rdx

ISEL: Starting selection on root node: t10: i64 = Register $rsi

ISEL: Starting selection on root node: t8: i64 = Register $rdi

ISEL: Starting selection on root node: t1: i64 = Register %0

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1BCMa:'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
    t21: i64 = LEA64r Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type** @"$s7partial1BCML"> 0, Register:i16 $noreg
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1
    t7: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> + 16, Register:i16 $noreg
  t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
  t23: i32 = Register $noreg
  t17: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13, t13:1


********** List Scheduling %bb.0 '' **********
SU(0): t17: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13, t13:1

    t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1

    t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
    SU(2): Data Latency=1
    SU(3): Data Latency=1
SU(1): t7: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> + 16, Register:i16 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(2): t21: i64 = LEA64r Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type** @"$s7partial1BCML"> 0, Register:i16 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t17: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13, t13:1

    t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1

    t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1


*** Scheduling [0]: SU(0): t17: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13, t13:1

    t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1

    t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1


Examining Available:
Height 1: SU(1): t7: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> + 16, Register:i16 $noreg

Height 1: SU(2): t21: i64 = LEA64r Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type** @"$s7partial1BCML"> 0, Register:i16 $noreg

Height 1: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [1]: SU(1): t7: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> + 16, Register:i16 $noreg


Examining Available:
Height 1: SU(2): t21: i64 = LEA64r Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type** @"$s7partial1BCML"> 0, Register:i16 $noreg

Height 1: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [2]: SU(2): t21: i64 = LEA64r Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type** @"$s7partial1BCML"> 0, Register:i16 $noreg


Examining Available:
Height 1: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [3]: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

*** Final schedule ***
SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

SU(2): t21: i64 = LEA64r Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type** @"$s7partial1BCML"> 0, Register:i16 $noreg

SU(1): t7: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1BC*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_override_descriptor, %swift.method_override_descriptor }>*, i8*, %T7partial1BC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1BC*)* }>* @"$s7partial1BCMf"> + 16, Register:i16 $noreg

SU(0): t17: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13, t13:1

    t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1

    t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1BCMa: IsSSA, TracksLiveness
Function Live Ins: $rdi in %0

bb.0 (%ir-block.1):
  liveins: $rdi
  %0:gr64 = COPY $rdi
  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $rdx = COPY %2:gr64
  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial1BCMa.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1BCMa: IsSSA, TracksLiveness
Function Live Ins: $rdi in %0

bb.0 (%ir-block.1):
  liveins: $rdi
  %0:gr64 = COPY $rdi
  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $rdx = COPY %2:gr64
  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial1BCMa.

# Machine code for function $s7partial1BCMa: IsSSA, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
48B	  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
64B	  $rdi = COPY %0:gr64
80B	  $rsi = COPY %1:gr64
96B	  $rdx = COPY %2:gr64
112B	  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial1BCMa.

********** Stack Coloring **********
********** Function: $s7partial1BCMa
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1BCMa
Machine InstCombiner: $s7partial1BCMa
Combining MBB 
********** X86 cmov Conversion : $s7partial1BCMa**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: $s7partial1BCMa ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: $s7partial1BCMa
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCMa
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1BCMa
Encountered load fold barrier on TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
**** Analysing $s7partial1BCMa
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1BCMa **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : $s7partial1BCMa **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1BCMa
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1BCMa
# Machine code for function $s7partial1BCMa: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY killed $rdi
32B	  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
48B	  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
64B	  $rdi = COPY killed %0:gr64
80B	  $rsi = COPY killed %1:gr64
96B	  $rdx = COPY killed %2:gr64
112B	  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1BCMa.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 DIL#0 DIH#0 HDI#0
Created 3 new intervals.
********** INTERVALS **********
DIL [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
DIH [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
HDI [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
%0 [16r,64r:0)  0@16r weight:0.000000e+00
%1 [32r,80r:0)  0@32r weight:0.000000e+00
%2 [48r,96r:0)  0@48r weight:0.000000e+00
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCMa: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
48B	  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
64B	  $rdi = COPY %0:gr64
80B	  $rsi = COPY %1:gr64
96B	  $rdx = COPY %2:gr64
112B	  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1BCMa.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1BCMa
********** JOINING INTERVALS ***********
:
16B	%0:gr64 = COPY $rdi
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
64B	$rdi = COPY %0:gr64
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
80B	$rsi = COPY %1:gr64
	Considering merging %1 with $rsi
	Can only merge into reserved registers.
96B	$rdx = COPY %2:gr64
	Considering merging %2 with $rdx
	Can only merge into reserved registers.
64B	$rdi = COPY %0:gr64
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
DIL [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
DIH [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
HDI [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
%0 [16r,64r:0)  0@16r weight:0.000000e+00
%1 [32r,80r:0)  0@32r weight:0.000000e+00
%2 [48r,96r:0)  0@48r weight:0.000000e+00
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCMa: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
48B	  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
64B	  $rdi = COPY %0:gr64
80B	  $rsi = COPY %1:gr64
96B	  $rdx = COPY %2:gr64
112B	  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1BCMa.

Before MISched:
# Machine code for function $s7partial1BCMa: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

bb.0 (%ir-block.1):
  liveins: $rdi
  %0:gr64 = COPY $rdi
  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $rdx = COPY %2:gr64
  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1BCMa.

AllocationOrder(GR32) = [ $eax $ecx $edx $esi $edi $r8d $r9d $r10d $r11d $ebx $ebp $r14d $r15d $r12d $r13d ]
AllocationOrder(GR16) = [ $ax $cx $dx $si $di $r8w $r9w $r10w $r11w $bx $bp $r14w $r15w $r12w $r13w ]
AllocationOrder(GR8) = [ $al $cl $dl $sil $dil $r8b $r9b $r10b $r11b $bl $bpl $r14b $r15b $r12b $r13b ]
********** MI Scheduling **********
$s7partial1BCMa:%bb.0 
  From: %0:gr64 = COPY $rdi
    To: TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %0:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
    SU(3): Anti Latency=0
  Single Issue       : false;
SU(1):   %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%1
  Single Issue       : false;
SU(2):   %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%2
  Single Issue       : false;
SU(3):   $rdi = COPY %0:gr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $rsi = COPY %1:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%1
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $rdx = COPY %2:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%2
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $rdx = COPY %2:gr64
  Ready @0c
  BotQ.A TopLatency SU(5) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 2 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $rsi = COPY %1:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $rdi = COPY %0:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 0 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
  Ready @1c
  SBPort01 +1x6u
  *** Critical resource SBPort01: 0c
  SBPort015 +1x4u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort01
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
  Ready @1c
  SBPort01 +1x6u
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 2
  Executed: 1c
  Critical: 1c, 2 SBPort01
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:gr64 = COPY $rdi
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 1c
  Critical: 1c, 2 SBPort01
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %0:gr64 = COPY $rdi
SU(1):   %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
SU(2):   %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
SU(3):   $rdi = COPY %0:gr64
SU(4):   $rsi = COPY %1:gr64
SU(5):   $rdx = COPY %2:gr64

********** INTERVALS **********
DIL [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
DIH [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
HDI [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
%0 [16r,64r:0)  0@16r weight:0.000000e+00
%1 [32r,80r:0)  0@32r weight:0.000000e+00
%2 [48r,96r:0)  0@48r weight:0.000000e+00
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCMa: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
48B	  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
64B	  $rdi = COPY %0:gr64
80B	  $rsi = COPY %1:gr64
96B	  $rdx = COPY %2:gr64
112B	  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1BCMa.


block-frequency: $s7partial1BCMa
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCMa
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1BCMa
********** Compute Spill Weights **********
********** Function: $s7partial1BCMa
********** INTERVALS **********
DIL [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
DIH [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
HDI [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
%0 [16r,64r:0)  0@16r weight:4.508928e-03
%1 [32r,80r:0)  0@32r weight:2.254464e-03
%2 [48r,96r:0)  0@48r weight:2.254464e-03
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCMa: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
48B	  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
64B	  $rdi = COPY %0:gr64
80B	  $rsi = COPY %1:gr64
96B	  $rdx = COPY %2:gr64
112B	  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1BCMa.


selectOrSplit GR64:%0 [16r,64r:0)  0@16r weight:4.508928e-03 w=4.508928e-03
AllocationOrder(GR64) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r10 $r11 $rbx $r14 $r15 $r12 $r13 $rbp ]
hints: $rdi
assigning %0 to $rdi: DIL [16r,64r:0)  0@16r DIH [16r,64r:0)  0@16r HDI [16r,64r:0)  0@16r

selectOrSplit GR64:%1 [32r,80r:0)  0@32r weight:2.254464e-03 w=2.254464e-03
hints: $rsi
assigning %1 to $rsi: SIL [32r,80r:0)  0@32r SIH [32r,80r:0)  0@32r HSI [32r,80r:0)  0@32r

selectOrSplit GR64:%2 [48r,96r:0)  0@48r weight:2.254464e-03 w=2.254464e-03
hints: $rdx
assigning %2 to $rdx: DH [48r,96r:0)  0@48r DL [48r,96r:0)  0@48r HDX [48r,96r:0)  0@48r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1BCMa
********** REGISTER MAP **********
[%0 -> $rdi] GR64
[%1 -> $rsi] GR64
[%2 -> $rdx] GR64

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
48B	  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
64B	  $rdi = COPY killed %0:gr64
80B	  $rsi = COPY killed %1:gr64
96B	  $rdx = COPY killed %2:gr64
112B	  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
> renamable $rdi = COPY $rdi
Identity copy: renamable $rdi = COPY $rdi
  deleted.
> renamable $rsi = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
> renamable $rdx = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
> $rdi = COPY killed renamable $rdi
Identity copy: $rdi = COPY killed renamable $rdi
  deleted.
> $rsi = COPY killed renamable $rsi
Identity copy: $rsi = COPY killed renamable $rsi
  deleted.
> $rdx = COPY killed renamable $rdx
Identity copy: $rdx = COPY killed renamable $rdx
  deleted.
> TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
********** Stack Slot Coloring **********
********** Function: $s7partial1BCMa
MCP: CopyPropagateBlock 
******** Post-regalloc Machine LICM: $s7partial1BCMa ********

block-frequency: $s7partial1BCMa
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCMa
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing $s7partial1BCMa
Look into: 0 
Nothing to shrink-wrap
MCP: CopyPropagateBlock 
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1BCMa
	discovered a new reachable node %bb.0

block-frequency: $s7partial1BCMa
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCMa
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rsi:	0	renamable $rsi = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
$rsi:	0	renamable $rsi = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
$rsi:	0	renamable $rsi = LEA64r $rip, 1, $noreg, @"$s7partial1BCML", $noreg
$rdx:	1	renamable $rdx = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
$rdx:	1	renamable $rdx = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
$rdx:	1	renamable $rdx = nuw LEA64r $rip, 1, $noreg, @"$s7partial1BCMf" + 16, $noreg
********** FIX EXECUTION DOMAIN: VR128X **********
%bb.0: entry
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1BCMa **********
X86 Retpoline Thunks
	discovered a new reachable node %1
[SafeStack] Function: $s7partial1ACMa
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %1
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1ACMa ----

Computing probabilities for 



=== $s7partial1ACMa
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Creating constant: t6: i64 = Constant<16>
Creating new node: t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
Creating new node: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Creating new node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0, t9:1
Creating new node: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
Creating constant: t15: i32 = Constant<0>
Creating new node: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1
Initial selection DAG: %bb.0 '$s7partial1ACMa:'
SelectionDAG has 18 nodes:
  t0: ch = EntryToken
  t3: i64 = GlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0, t9:1
    t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
  t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
  t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1



Combining: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1

Combining: t16: Untyped = RegisterMask

Combining: t15: i32 = Constant<0>

Combining: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0

Combining: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1

Combining: t12: i64 = Register $rdx

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0, t9:1

Combining: t10: i64 = Register $rsi

Combining: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

Combining: t8: i64 = Register $rdi

Combining: t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>

Combining: t6: i64 = Constant<16>

Combining: t5: i64 = GlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0

Combining: t4: i64 = GlobalAddress<%swift.type** @"$s7partial1ACML"> 0

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t1: i64 = Register %0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1ACMa:'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0, t9:1
    t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
  t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
  t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1


Legalizing node: t16: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t16: Untyped = RegisterMask

Legalizing node: t15: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t15: i32 = Constant<0>

Legalizing node: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0

Legalizing node: t12: i64 = Register $rdx
Ignoring node results
Legally typed node: t12: i64 = Register $rdx

Legalizing node: t10: i64 = Register $rsi
Ignoring node results
Legally typed node: t10: i64 = Register $rsi

Legalizing node: t8: i64 = Register $rdi
Ignoring node results
Legally typed node: t8: i64 = Register $rdi

Legalizing node: t6: i64 = Constant<16>
Analyzing result type: i64
Legal result type
Legally typed node: t6: i64 = Constant<16>

Legalizing node: t5: i64 = GlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t5: i64 = GlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0

Legalizing node: t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
Analyzing result type: i64
Legal result type
Analyzing operand: t5: i64 = GlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Legal operand
Analyzing operand: t6: i64 = Constant<16>
Legal operand
Legally typed node: t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>

Legalizing node: t4: i64 = GlobalAddress<%swift.type** @"$s7partial1ACML"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t4: i64 = GlobalAddress<%swift.type** @"$s7partial1ACML"> 0

Legalizing node: t1: i64 = Register %0
Ignoring node results
Legally typed node: t1: i64 = Register %0

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing node: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Legally typed node: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

Legalizing node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0, t9:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal operand
Analyzing operand: t4: i64 = GlobalAddress<%swift.type** @"$s7partial1ACML"> 0
Legal operand
Analyzing operand: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal operand
Legally typed node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0, t9:1

Legalizing node: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0, t9:1
Legal operand
Analyzing operand: t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
Legal operand
Analyzing operand: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0, t9:1
Legal operand
Legally typed node: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1

Legalizing node: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
Legal operand
Analyzing operand: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0
Legal operand
Analyzing operand: t15: i32 = Constant<0>
Legal operand
Analyzing operand: t16: Untyped = RegisterMask
Legal operand
Analyzing operand: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
Legal operand
Legally typed node: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1

Legalizing node: t65535: ch = handlenode t17
Analyzing result type: ch
Legal result type
Analyzing operand: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1
Legal operand
Legally typed node: t65535: ch = handlenode t17

Type-legalized selection DAG: %bb.0 '$s7partial1ACMa:'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0, t9:1
    t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
  t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
  t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1



Legalizing: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1
Legal node: nothing to do

Legalizing: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
Legal node: nothing to do

Legalizing: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0, t9:1
Legal node: nothing to do

Legalizing: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal node: nothing to do

Legalizing: t7: i64 = add nuw GlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0, Constant:i64<16>
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Legalizing: t16: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t15: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0
Legal node: nothing to do

Legalizing: t12: i64 = Register $rdx

Legalizing: t10: i64 = Register $rsi

Legalizing: t8: i64 = Register $rdi

Legalizing: t6: i64 = Constant<16>
Legal node: nothing to do

Legalizing: t5: i64 = GlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Trying custom legalization
Creating new node: t19: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Successfully custom legalized node
 ... replacing: t5: i64 = GlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
     with:      t19: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0

Legalizing: t4: i64 = GlobalAddress<%swift.type** @"$s7partial1ACML"> 0
Trying custom legalization
Creating new node: t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0
Successfully custom legalized node
 ... replacing: t4: i64 = GlobalAddress<%swift.type** @"$s7partial1ACML"> 0
     with:      t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0

Legalizing: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0
Legal node: nothing to do

Legalizing: t20: i64 = TargetGlobalAddress<%swift.type** @"$s7partial1ACML"> 0
Legal node: nothing to do

Legalizing: t19: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Legal node: nothing to do

Legalizing: t18: i64 = TargetGlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1ACMa:'
SelectionDAG has 19 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
    t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1
      t19: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
    t7: i64 = add nuw t19, Constant:i64<16>
  t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
  t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1



Legalizing: t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0
Legal node: nothing to do

Combining: t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0

Legalizing: t20: i64 = TargetGlobalAddress<%swift.type** @"$s7partial1ACML"> 0
Legal node: nothing to do

Combining: t20: i64 = TargetGlobalAddress<%swift.type** @"$s7partial1ACML"> 0

Legalizing: t19: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Legal node: nothing to do

Combining: t19: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0

Legalizing: t18: i64 = TargetGlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
Legal node: nothing to do

Combining: t18: i64 = TargetGlobalAddress<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0

Legalizing: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1
Legal node: nothing to do

Combining: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1

Legalizing: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
Legal node: nothing to do

Combining: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1

Legalizing: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1
Legal node: nothing to do

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1

Legalizing: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
Legal node: nothing to do

Combining: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

Legalizing: t7: i64 = add nuw t19, Constant:i64<16>
Legal node: nothing to do

Combining: t7: i64 = add nuw t19, Constant:i64<16>

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing: t16: Untyped = RegisterMask
Legal node: nothing to do

Combining: t16: Untyped = RegisterMask

Legalizing: t15: i32 = Constant<0>
Legal node: nothing to do

Combining: t15: i32 = Constant<0>

Legalizing: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0
Legal node: nothing to do

Combining: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0

Legalizing: t12: i64 = Register $rdx

Combining: t12: i64 = Register $rdx

Legalizing: t10: i64 = Register $rsi

Combining: t10: i64 = Register $rsi

Legalizing: t8: i64 = Register $rdi

Combining: t8: i64 = Register $rdi

Legalizing: t6: i64 = Constant<16>
Legal node: nothing to do

Combining: t6: i64 = Constant<16>

Legalizing: t1: i64 = Register %0

Combining: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1ACMa:'
SelectionDAG has 19 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
    t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1
      t19: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> 0
    t7: i64 = add nuw t19, Constant:i64<16>
  t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
  t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t17: ch,glue = X86ISD::TC_RETURN t13, TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13:1
ISEL: Starting pattern match
  Initial Opcode index to 40262
  Match failed at index 40267
  Continuing at 40335
  OpcodeSwitch from 40341 to 40345
  TypeSwitch[i64] from 40345 to 40369
Creating constant: t22: i32 = TargetConstant<0>
  Morphed node: t17: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13, t13:1
ISEL: Match complete!

ISEL: Starting selection on root node: t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1

ISEL: Starting selection on root node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1

ISEL: Starting selection on root node: t7: i64 = add nuw t19, Constant:i64<16>
ISEL: Starting pattern match
  Initial Opcode index to 96740
  Match failed at index 96744
  Continuing at 96847
  Match failed at index 96849
  Continuing at 96956
  TypeSwitch[i64] from 96958 to 96999
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg t24: i64 = Register $rip
 Scale 1
IndexReg nul
 Disp 0
GV @"$s7partial1ACMf" = internal global <{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }> <{ void (%T7partial1AC*)* @"$s7partial1ACfD", i8** @"$sBoWV", i64 ptrtoint (%objc_class* @"$s7partial1ACMm" to i64), %objc_class* @"OBJC_CLASS_$__TtCs12_SwiftObject", %swift.opaque* @_objc_empty_cache, %swift.opaque* null, i64 add (i64 ptrtoint ({ i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8* }* @_DATA__TtC7partial1A to i64), i64 2), i32 2, i32 0, i32 16, i16 7, i16 0, i32 112, i32 16, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>* @"$s7partial1ACMn", i8* null, %T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC", i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* @"$s7partial1AC1fySbxlF" }>, align 8
 CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t25: i8 = TargetConstant<1>
  Morphed node: t7: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> + 16, Register:i16 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

ISEL: Starting selection on root node: t21: i64 = X86ISD::WrapperRIP TargetGlobalAddress:i64<%swift.type** @"$s7partial1ACML"> 0
ISEL: Starting pattern match
  Initial Opcode index to 124387
  TypeSwitch[i64] from 124388 to 124409
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
  Morphed node: t21: i64 = LEA64r Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type** @"$s7partial1ACML"> 0, Register:i16 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

ISEL: Starting selection on root node: t16: Untyped = RegisterMask

ISEL: Starting selection on root node: t14: i64 = TargetGlobalAddress<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0

ISEL: Starting selection on root node: t12: i64 = Register $rdx

ISEL: Starting selection on root node: t10: i64 = Register $rsi

ISEL: Starting selection on root node: t8: i64 = Register $rdi

ISEL: Starting selection on root node: t1: i64 = Register %0

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1ACMa:'
SelectionDAG has 22 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2
    t21: i64 = LEA64r Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type** @"$s7partial1ACML"> 0, Register:i16 $noreg
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1
    t7: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> + 16, Register:i16 $noreg
  t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1
  t23: i32 = Register $noreg
  t17: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13, t13:1


********** List Scheduling %bb.0 '' **********
SU(0): t17: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13, t13:1

    t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1

    t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
    SU(2): Data Latency=1
    SU(3): Data Latency=1
SU(1): t7: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> + 16, Register:i16 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(2): t21: i64 = LEA64r Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type** @"$s7partial1ACML"> 0, Register:i16 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t17: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13, t13:1

    t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1

    t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1


*** Scheduling [0]: SU(0): t17: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13, t13:1

    t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1

    t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1


Examining Available:
Height 1: SU(1): t7: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> + 16, Register:i16 $noreg

Height 1: SU(2): t21: i64 = LEA64r Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type** @"$s7partial1ACML"> 0, Register:i16 $noreg

Height 1: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [1]: SU(1): t7: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> + 16, Register:i16 $noreg


Examining Available:
Height 1: SU(2): t21: i64 = LEA64r Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type** @"$s7partial1ACML"> 0, Register:i16 $noreg

Height 1: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [2]: SU(2): t21: i64 = LEA64r Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type** @"$s7partial1ACML"> 0, Register:i16 $noreg


Examining Available:
Height 1: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [3]: SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

*** Final schedule ***
SU(3): t2: i64,ch = CopyFromReg t0, Register:i64 %0

SU(2): t21: i64 = LEA64r Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<%swift.type** @"$s7partial1ACML"> 0, Register:i16 $noreg

SU(1): t7: i64 = LEA64r nuw Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetGlobalAddress:i32<<{ void (%T7partial1AC*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %swift.method_descriptor, %swift.method_descriptor }>*, i8*, %T7partial1AC* (%swift.type*)*, i1 (%swift.opaque*, %swift.type*, %T7partial1AC*)* }>* @"$s7partial1ACMf"> + 16, Register:i16 $noreg

SU(0): t17: ch = TCRETURNdi64 TargetGlobalAddress:i64<%swift.metadata_response (i64, %swift.type**, %objc_class*)* @"$s7partial1BCMaTm"> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t13, t13:1

    t9: ch,glue = CopyToReg t0, Register:i64 $rdi, t2

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t21, t9:1

    t13: ch,glue = CopyToReg t11, Register:i64 $rdx, t7, t11:1


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1ACMa: IsSSA, TracksLiveness
Function Live Ins: $rdi in %0

bb.0 (%ir-block.1):
  liveins: $rdi
  %0:gr64 = COPY $rdi
  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $rdx = COPY %2:gr64
  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial1ACMa.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1ACMa: IsSSA, TracksLiveness
Function Live Ins: $rdi in %0

bb.0 (%ir-block.1):
  liveins: $rdi
  %0:gr64 = COPY $rdi
  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $rdx = COPY %2:gr64
  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial1ACMa.

# Machine code for function $s7partial1ACMa: IsSSA, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
48B	  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
64B	  $rdi = COPY %0:gr64
80B	  $rsi = COPY %1:gr64
96B	  $rdx = COPY %2:gr64
112B	  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx

# End machine code for function $s7partial1ACMa.

********** Stack Coloring **********
********** Function: $s7partial1ACMa
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1ACMa
Machine InstCombiner: $s7partial1ACMa
Combining MBB 
********** X86 cmov Conversion : $s7partial1ACMa**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: $s7partial1ACMa ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: $s7partial1ACMa
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACMa
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1ACMa
Encountered load fold barrier on TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
**** Analysing $s7partial1ACMa
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1ACMa **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : $s7partial1ACMa **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1ACMa
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1ACMa
# Machine code for function $s7partial1ACMa: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY killed $rdi
32B	  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
48B	  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
64B	  $rdi = COPY killed %0:gr64
80B	  $rsi = COPY killed %1:gr64
96B	  $rdx = COPY killed %2:gr64
112B	  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACMa.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 DIL#0 DIH#0 HDI#0
Created 3 new intervals.
********** INTERVALS **********
DIL [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
DIH [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
HDI [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
%0 [16r,64r:0)  0@16r weight:0.000000e+00
%1 [32r,80r:0)  0@32r weight:0.000000e+00
%2 [48r,96r:0)  0@48r weight:0.000000e+00
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACMa: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
48B	  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
64B	  $rdi = COPY %0:gr64
80B	  $rsi = COPY %1:gr64
96B	  $rdx = COPY %2:gr64
112B	  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACMa.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1ACMa
********** JOINING INTERVALS ***********
:
16B	%0:gr64 = COPY $rdi
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
64B	$rdi = COPY %0:gr64
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
80B	$rsi = COPY %1:gr64
	Considering merging %1 with $rsi
	Can only merge into reserved registers.
96B	$rdx = COPY %2:gr64
	Considering merging %2 with $rdx
	Can only merge into reserved registers.
64B	$rdi = COPY %0:gr64
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
DIL [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
DIH [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
HDI [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
%0 [16r,64r:0)  0@16r weight:0.000000e+00
%1 [32r,80r:0)  0@32r weight:0.000000e+00
%2 [48r,96r:0)  0@48r weight:0.000000e+00
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACMa: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
48B	  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
64B	  $rdi = COPY %0:gr64
80B	  $rsi = COPY %1:gr64
96B	  $rdx = COPY %2:gr64
112B	  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACMa.

Before MISched:
# Machine code for function $s7partial1ACMa: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

bb.0 (%ir-block.1):
  liveins: $rdi
  %0:gr64 = COPY $rdi
  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
  $rdi = COPY %0:gr64
  $rsi = COPY %1:gr64
  $rdx = COPY %2:gr64
  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACMa.

********** MI Scheduling **********
$s7partial1ACMa:%bb.0 
  From: %0:gr64 = COPY $rdi
    To: TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %0:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
    SU(3): Anti Latency=0
  Single Issue       : false;
SU(1):   %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%1
  Single Issue       : false;
SU(2):   %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%2
  Single Issue       : false;
SU(3):   $rdi = COPY %0:gr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   $rsi = COPY %1:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%1
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $rdx = COPY %2:gr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%2
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) $rdx = COPY %2:gr64
  Ready @0c
  BotQ.A TopLatency SU(5) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 2 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(4) $rsi = COPY %1:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $rdi = COPY %0:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 0 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
  Ready @1c
  SBPort01 +1x6u
  *** Critical resource SBPort01: 0c
  SBPort015 +1x4u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort01
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
  Ready @1c
  SBPort01 +1x6u
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 2
  Executed: 1c
  Critical: 1c, 2 SBPort01
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:gr64 = COPY $rdi
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 1c
  Critical: 1c, 2 SBPort01
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %0:gr64 = COPY $rdi
SU(1):   %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
SU(2):   %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
SU(3):   $rdi = COPY %0:gr64
SU(4):   $rsi = COPY %1:gr64
SU(5):   $rdx = COPY %2:gr64

********** INTERVALS **********
DIL [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
DIH [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
HDI [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
%0 [16r,64r:0)  0@16r weight:0.000000e+00
%1 [32r,80r:0)  0@32r weight:0.000000e+00
%2 [48r,96r:0)  0@48r weight:0.000000e+00
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACMa: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
48B	  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
64B	  $rdi = COPY %0:gr64
80B	  $rsi = COPY %1:gr64
96B	  $rdx = COPY %2:gr64
112B	  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACMa.


block-frequency: $s7partial1ACMa
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACMa
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1ACMa
********** Compute Spill Weights **********
********** Function: $s7partial1ACMa
********** INTERVALS **********
DIL [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
DIH [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
HDI [0B,16r:0)[64r,112r:1)  0@0B-phi 1@64r
%0 [16r,64r:0)  0@16r weight:4.508928e-03
%1 [32r,80r:0)  0@32r weight:2.254464e-03
%2 [48r,96r:0)  0@48r weight:2.254464e-03
RegMasks: 112r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1ACMa: NoPHIs, TracksLiveness
Function Live Ins: $rdi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
48B	  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
64B	  $rdi = COPY %0:gr64
80B	  $rsi = COPY %1:gr64
96B	  $rdx = COPY %2:gr64
112B	  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

# End machine code for function $s7partial1ACMa.


selectOrSplit GR64:%0 [16r,64r:0)  0@16r weight:4.508928e-03 w=4.508928e-03
hints: $rdi
assigning %0 to $rdi: DIL [16r,64r:0)  0@16r DIH [16r,64r:0)  0@16r HDI [16r,64r:0)  0@16r

selectOrSplit GR64:%1 [32r,80r:0)  0@32r weight:2.254464e-03 w=2.254464e-03
hints: $rsi
assigning %1 to $rsi: SIL [32r,80r:0)  0@32r SIH [32r,80r:0)  0@32r HSI [32r,80r:0)  0@32r

selectOrSplit GR64:%2 [48r,96r:0)  0@48r weight:2.254464e-03 w=2.254464e-03
hints: $rdx
assigning %2 to $rdx: DH [48r,96r:0)  0@48r DL [48r,96r:0)  0@48r HDX [48r,96r:0)  0@48r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1ACMa
********** REGISTER MAP **********
[%0 -> $rdi] GR64
[%1 -> $rsi] GR64
[%2 -> $rdx] GR64

0B	bb.0 (%ir-block.1):
	  liveins: $rdi
16B	  %0:gr64 = COPY $rdi
32B	  %1:gr64 = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
48B	  %2:gr64 = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
64B	  $rdi = COPY killed %0:gr64
80B	  $rsi = COPY killed %1:gr64
96B	  $rdx = COPY killed %2:gr64
112B	  TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
> renamable $rdi = COPY $rdi
Identity copy: renamable $rdi = COPY $rdi
  deleted.
> renamable $rsi = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
> renamable $rdx = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
> $rdi = COPY killed renamable $rdi
Identity copy: $rdi = COPY killed renamable $rdi
  deleted.
> $rsi = COPY killed renamable $rsi
Identity copy: $rsi = COPY killed renamable $rsi
  deleted.
> $rdx = COPY killed renamable $rdx
Identity copy: $rdx = COPY killed renamable $rdx
  deleted.
> TCRETURNdi64 @"$s7partial1BCMaTm", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
********** Stack Slot Coloring **********
********** Function: $s7partial1ACMa
MCP: CopyPropagateBlock 
******** Post-regalloc Machine LICM: $s7partial1ACMa ********

block-frequency: $s7partial1ACMa
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACMa
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing $s7partial1ACMa
Look into: 0 
Nothing to shrink-wrap
MCP: CopyPropagateBlock 
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1ACMa
	discovered a new reachable node %bb.0

block-frequency: $s7partial1ACMa
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1ACMa
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rsi:	0	renamable $rsi = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
$rsi:	0	renamable $rsi = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
$rsi:	0	renamable $rsi = LEA64r $rip, 1, $noreg, @"$s7partial1ACML", $noreg
$rdx:	1	renamable $rdx = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
$rdx:	1	renamable $rdx = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
$rdx:	1	renamable $rdx = nuw LEA64r $rip, 1, $noreg, @"$s7partial1ACMf" + 16, $noreg
********** FIX EXECUTION DOMAIN: VR128X **********
%bb.0: entry
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1ACMa **********
X86 Retpoline Thunks
	discovered a new reachable node %3
	discovered a new reachable node %6
	discovered a new reachable node %9
[SafeStack] Function: $s7partial1BCMaTm
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %3
	discovered a new reachable node %6
	discovered a new reachable node %9
	discovered a new reachable node %3
	discovered a new reachable node %6
	discovered a new reachable node %9
---- Branch Probability Info : $s7partial1BCMaTm ----

Computing probabilities for 
Computing probabilities for 
Computing probabilities for 
set edge  -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge  -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%



=== $s7partial1BCMaTm
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %3
Creating new node: t4: i64,ch = CopyFromReg t0, Register:i64 %4
Creating new node: t6: i64,ch = CopyFromReg t0, Register:i64 %5
Creating constant: t7: i64 = Constant<0>
Creating new node: t8: i64 = undef
Creating new node: t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64
Creating new node: t11: ch = CopyToReg t0, Register:i64 %0, t9
Creating new node: t13: i1 = setcc t9, Constant:i64<0>, seteq:ch
Creating constant: t14: i1 = Constant<-1>
Creating new node: t15: i1 = xor t13, Constant:i1<-1>
Creating new node: t17: ch = brcond t11, t15, BasicBlock:ch< 0x7f9e6a81ee08>
Creating new node: t19: ch = br t17, BasicBlock:ch< 0x7f9e6a81ed40>
Initial selection DAG: %bb.0 '$s7partial1BCMaTm:'
SelectionDAG has 20 nodes:
  t0: ch = EntryToken
  t2: i64,ch = CopyFromReg t0, Register:i64 %3
  t6: i64,ch = CopyFromReg t0, Register:i64 %5
    t4: i64,ch = CopyFromReg t0, Register:i64 %4
  t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64
      t11: ch = CopyToReg t0, Register:i64 %0, t9
        t13: i1 = setcc t9, Constant:i64<0>, seteq:ch
      t15: i1 = xor t13, Constant:i1<-1>
    t17: ch = brcond t11, t15, BasicBlock:ch< 0x7f9e6a81ee08>
  t19: ch = br t17, BasicBlock:ch< 0x7f9e6a81ed40>



Combining: t19: ch = br t17, BasicBlock:ch< 0x7f9e6a81ed40>

Combining: t18: ch = BasicBlock< 0x7f9e6a81ed40>

Combining: t17: ch = brcond t11, t15, BasicBlock:ch< 0x7f9e6a81ee08>
Creating new node: t21: i1 = setcc t9, Constant:i64<0>, setne:ch
Creating new node: t22: ch = brcond t11, t21, BasicBlock:ch< 0x7f9e6a81ee08>
 ... into: t22: ch = brcond t11, t21, BasicBlock:ch< 0x7f9e6a81ee08>

Combining: t19: ch = br t22, BasicBlock:ch< 0x7f9e6a81ed40>

Combining: t22: ch = brcond t11, t21, BasicBlock:ch< 0x7f9e6a81ee08>

Combining: t21: i1 = setcc t9, Constant:i64<0>, setne:ch

Combining: t20: ch = setne

Combining: t16: ch = BasicBlock< 0x7f9e6a81ee08>

Combining: t11: ch = CopyToReg t0, Register:i64 %0, t9

Combining: t10: i64 = Register %0

Combining: t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64

Combining: t8: i64 = undef

Combining: t7: i64 = Constant<0>

Combining: t4: i64,ch = CopyFromReg t0, Register:i64 %4

Combining: t3: i64 = Register %4

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1BCMaTm:'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %4
  t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64
      t11: ch = CopyToReg t0, Register:i64 %0, t9
      t21: i1 = setcc t9, Constant:i64<0>, setne:ch
    t22: ch = brcond t11, t21, BasicBlock:ch< 0x7f9e6a81ee08>
  t19: ch = br t22, BasicBlock:ch< 0x7f9e6a81ed40>


Legalizing node: t20: ch = setne
Analyzing result type: ch
Legal result type
Legally typed node: t20: ch = setne

Legalizing node: t18: ch = BasicBlock< 0x7f9e6a81ed40>
Analyzing result type: ch
Legal result type
Legally typed node: t18: ch = BasicBlock< 0x7f9e6a81ed40>

Legalizing node: t16: ch = BasicBlock< 0x7f9e6a81ee08>
Analyzing result type: ch
Legal result type
Legally typed node: t16: ch = BasicBlock< 0x7f9e6a81ee08>

Legalizing node: t10: i64 = Register %0
Ignoring node results
Legally typed node: t10: i64 = Register %0

Legalizing node: t8: i64 = undef
Analyzing result type: i64
Legal result type
Legally typed node: t8: i64 = undef

Legalizing node: t7: i64 = Constant<0>
Analyzing result type: i64
Legal result type
Legally typed node: t7: i64 = Constant<0>

Legalizing node: t3: i64 = Register %4
Ignoring node results
Legally typed node: t3: i64 = Register %4

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t4: i64,ch = CopyFromReg t0, Register:i64 %4
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t4: i64,ch = CopyFromReg t0, Register:i64 %4

Legalizing node: t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t4: i64,ch = CopyFromReg t0, Register:i64 %4
Legal operand
Analyzing operand: t8: i64 = undef
Legal operand
Legally typed node: t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64

Legalizing node: t11: ch = CopyToReg t0, Register:i64 %0, t9
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64
Legal operand
Legally typed node: t11: ch = CopyToReg t0, Register:i64 %0, t9

Legalizing node: t21: i1 = setcc t9, Constant:i64<0>, setne:ch
Analyzing result type: i1
Promote integer result: t21: i1 = setcc t9, Constant:i64<0>, setne:ch

Creating new node: t23: i8 = setcc t9, Constant:i64<0>, setne:ch
Legalizing node: t22: ch = brcond t11, t21, BasicBlock:ch< 0x7f9e6a81ee08>
Analyzing result type: ch
Legal result type
Analyzing operand: t11: ch = CopyToReg t0, Register:i64 %0, t9
Legal operand
Analyzing operand: t21: i1 = setcc t9, Constant:i64<0>, setne:ch
Promote integer operand: t22: ch = brcond t11, t21, BasicBlock:ch< 0x7f9e6a81ee08>

Creating new node: t24: i8 = zero_extend t21
Legalizing node: t24: i8 = zero_extend t21
Analyzing result type: i8
Legal result type
Analyzing operand: t21: i1 = setcc t9, Constant:i64<0>, setne:ch
Promote integer operand: t24: i8 = zero_extend t21

Creating constant: t25: i8 = Constant<1>
Creating new node: t26: i8 = and t23, Constant:i8<1>
Legalizing node: t25: i8 = Constant<1>
Analyzing result type: i8
Legal result type
Legally typed node: t25: i8 = Constant<1>

Legalizing node: t23: i8 = setcc t9, Constant:i64<0>, setne:ch
Analyzing result type: i8
Legal result type
Analyzing operand: t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64
Legal operand
Analyzing operand: t7: i64 = Constant<0>
Legal operand
Analyzing operand: t20: ch = setne
Legal operand
Legally typed node: t23: i8 = setcc t9, Constant:i64<0>, setne:ch

Legalizing node: t26: i8 = and t23, Constant:i8<1>
Analyzing result type: i8
Legal result type
Analyzing operand: t23: i8 = setcc t9, Constant:i64<0>, setne:ch
Legal operand
Analyzing operand: t25: i8 = Constant<1>
Legal operand
Legally typed node: t26: i8 = and t23, Constant:i8<1>

Legalizing node: t22: ch = brcond t11, t26, BasicBlock:ch< 0x7f9e6a81ee08>
Analyzing result type: ch
Legal result type
Analyzing operand: t11: ch = CopyToReg t0, Register:i64 %0, t9
Legal operand
Analyzing operand: t26: i8 = and t23, Constant:i8<1>
Legal operand
Analyzing operand: t16: ch = BasicBlock< 0x7f9e6a81ee08>
Legal operand
Legally typed node: t22: ch = brcond t11, t26, BasicBlock:ch< 0x7f9e6a81ee08>

Legalizing node: t19: ch = br t22, BasicBlock:ch< 0x7f9e6a81ed40>
Analyzing result type: ch
Legal result type
Analyzing operand: t22: ch = brcond t11, t26, BasicBlock:ch< 0x7f9e6a81ee08>
Legal operand
Analyzing operand: t18: ch = BasicBlock< 0x7f9e6a81ed40>
Legal operand
Legally typed node: t19: ch = br t22, BasicBlock:ch< 0x7f9e6a81ed40>

Legalizing node: t65535: ch = handlenode t19
Analyzing result type: ch
Legal result type
Analyzing operand: t19: ch = br t22, BasicBlock:ch< 0x7f9e6a81ed40>
Legal operand
Legally typed node: t65535: ch = handlenode t19

Type-legalized selection DAG: %bb.0 '$s7partial1BCMaTm:'
SelectionDAG has 16 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %4
  t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64
      t11: ch = CopyToReg t0, Register:i64 %0, t9
        t23: i8 = setcc t9, Constant:i64<0>, setne:ch
      t26: i8 = and t23, Constant:i8<1>
    t22: ch = brcond t11, t26, BasicBlock:ch< 0x7f9e6a81ee08>
  t19: ch = br t22, BasicBlock:ch< 0x7f9e6a81ed40>



Combining: t26: i8 = and t23, Constant:i8<1>

Replacing.2 t26: i8 = and t23, Constant:i8<1>

With: t23: i8 = setcc t9, Constant:i64<0>, setne:ch


Combining: t23: i8 = setcc t9, Constant:i64<0>, setne:ch

Combining: t22: ch = brcond t11, t23, BasicBlock:ch< 0x7f9e6a81ee08>

Combining: t20: ch = setne

Combining: t19: ch = br t22, BasicBlock:ch< 0x7f9e6a81ed40>

Combining: t18: ch = BasicBlock< 0x7f9e6a81ed40>

Combining: t16: ch = BasicBlock< 0x7f9e6a81ee08>

Combining: t11: ch = CopyToReg t0, Register:i64 %0, t9

Combining: t10: i64 = Register %0

Combining: t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64

Combining: t8: i64 = undef

Combining: t7: i64 = Constant<0>

Combining: t4: i64,ch = CopyFromReg t0, Register:i64 %4

Combining: t3: i64 = Register %4

Combining: t0: ch = EntryToken
Optimized type-legalized selection DAG: %bb.0 '$s7partial1BCMaTm:'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %4
  t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64
      t11: ch = CopyToReg t0, Register:i64 %0, t9
      t23: i8 = setcc t9, Constant:i64<0>, setne:ch
    t22: ch = brcond t11, t23, BasicBlock:ch< 0x7f9e6a81ee08>
  t19: ch = br t22, BasicBlock:ch< 0x7f9e6a81ed40>



Legalizing: t19: ch = br t22, BasicBlock:ch< 0x7f9e6a81ed40>
Legal node: nothing to do

Legalizing: t22: ch = brcond t11, t23, BasicBlock:ch< 0x7f9e6a81ee08>
Trying custom legalization
Creating new node: t27: i32 = X86ISD::CMP t9, Constant:i64<0>
Creating constant: t28: i8 = Constant<5>
Creating new node: t29: i8 = X86ISD::SETCC Constant:i8<5>, t27
Creating new node: t30: ch = X86ISD::BRCOND t11, BasicBlock:ch< 0x7f9e6a81ee08>, Constant:i8<5>, t27
Successfully custom legalized node
 ... replacing: t22: ch = brcond t11, t23, BasicBlock:ch< 0x7f9e6a81ee08>
     with:      t30: ch = X86ISD::BRCOND t11, BasicBlock:ch< 0x7f9e6a81ee08>, Constant:i8<5>, t27

Legalizing: t11: ch = CopyToReg t0, Register:i64 %0, t9
Legal node: nothing to do

Legalizing: t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64
Legalizing non-extending load operation

Legalizing: t4: i64,ch = CopyFromReg t0, Register:i64 %4
Legal node: nothing to do

Legalizing: t18: ch = BasicBlock< 0x7f9e6a81ed40>
Legal node: nothing to do

Legalizing: t16: ch = BasicBlock< 0x7f9e6a81ee08>
Legal node: nothing to do

Legalizing: t10: i64 = Register %0

Legalizing: t8: i64 = undef
Legal node: nothing to do

Legalizing: t7: i64 = Constant<0>
Legal node: nothing to do

Legalizing: t3: i64 = Register %4

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t30: ch = X86ISD::BRCOND t11, BasicBlock:ch< 0x7f9e6a81ee08>, Constant:i8<5>, t27
Legal node: nothing to do

Legalizing: t28: i8 = Constant<5>
Legal node: nothing to do

Legalizing: t27: i32 = X86ISD::CMP t9, Constant:i64<0>
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1BCMaTm:'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %4
  t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64
      t11: ch = CopyToReg t0, Register:i64 %0, t9
      t27: i32 = X86ISD::CMP t9, Constant:i64<0>
    t30: ch = X86ISD::BRCOND t11, BasicBlock:ch< 0x7f9e6a81ee08>, Constant:i8<5>, t27
  t19: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>



Legalizing: t30: ch = X86ISD::BRCOND t11, BasicBlock:ch< 0x7f9e6a81ee08>, Constant:i8<5>, t27
Legal node: nothing to do

Combining: t30: ch = X86ISD::BRCOND t11, BasicBlock:ch< 0x7f9e6a81ee08>, Constant:i8<5>, t27

Legalizing: t28: i8 = Constant<5>
Legal node: nothing to do

Combining: t28: i8 = Constant<5>

Legalizing: t27: i32 = X86ISD::CMP t9, Constant:i64<0>
Legal node: nothing to do

Combining: t27: i32 = X86ISD::CMP t9, Constant:i64<0>

Legalizing: t19: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>
Legal node: nothing to do

Combining: t19: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>

Legalizing: t11: ch = CopyToReg t0, Register:i64 %0, t9
Legal node: nothing to do

Combining: t11: ch = CopyToReg t0, Register:i64 %0, t9

Legalizing: t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64
Legalizing non-extending load operation

Combining: t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64

Legalizing: t4: i64,ch = CopyFromReg t0, Register:i64 %4
Legal node: nothing to do

Combining: t4: i64,ch = CopyFromReg t0, Register:i64 %4

Legalizing: t18: ch = BasicBlock< 0x7f9e6a81ed40>
Legal node: nothing to do

Combining: t18: ch = BasicBlock< 0x7f9e6a81ed40>

Legalizing: t16: ch = BasicBlock< 0x7f9e6a81ee08>
Legal node: nothing to do

Combining: t16: ch = BasicBlock< 0x7f9e6a81ee08>

Legalizing: t10: i64 = Register %0

Combining: t10: i64 = Register %0

Legalizing: t8: i64 = undef
Legal node: nothing to do

Combining: t8: i64 = undef

Legalizing: t7: i64 = Constant<0>
Legal node: nothing to do

Combining: t7: i64 = Constant<0>

Legalizing: t3: i64 = Register %4

Combining: t3: i64 = Register %4

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1BCMaTm:'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %4
  t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64
      t11: ch = CopyToReg t0, Register:i64 %0, t9
      t27: i32 = X86ISD::CMP t9, Constant:i64<0>
    t30: ch = X86ISD::BRCOND t11, BasicBlock:ch< 0x7f9e6a81ee08>, Constant:i8<5>, t27
  t19: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t19: ch = br t30, BasicBlock:ch< 0x7f9e6a81ed40>
ISEL: Starting pattern match
  Initial Opcode index to 131331
  Morphed node: t19: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t30
ISEL: Match complete!

ISEL: Starting selection on root node: t30: ch = X86ISD::BRCOND t11, BasicBlock:ch< 0x7f9e6a81ee08>, Constant:i8<5>, t27
ISEL: Starting pattern match
  Initial Opcode index to 130713
Creating constant: t31: i8 = TargetConstant<5>
Creating new node: t33: ch,glue = CopyToReg t11, Register:i32 $eflags, t27
  Morphed node: t30: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81ee08>, TargetConstant:i8<5>, t33, t33:1
ISEL: Match complete!

ISEL: Starting selection on root node: t11: ch = CopyToReg t0, Register:i64 %0, t9

ISEL: Starting selection on root node: t27: i32 = X86ISD::CMP t9, Constant:i64<0>
ISEL: Starting pattern match
  Initial Opcode index to 21504
  OpcodeSwitch from 21508 to 21859
  Match failed at index 21861
  Continuing at 22080
  Skipped scope entry (due to false predicate) at index 22085, continuing at 22116
  Skipped scope entry (due to false predicate) at index 22117, continuing at 22148
  Skipped scope entry (due to false predicate) at index 22149, continuing at 22180
  Match failed at index 22184
  Continuing at 22212
  Continuing at 22213
  Match failed at index 22220
  Continuing at 22314
  Skipped scope entry (due to false predicate) at index 22319, continuing at 22393
  Skipped scope entry (due to false predicate) at index 22394, continuing at 22468
  Match failed at index 22317
  Continuing at 22469
  Match failed at index 22472
  Continuing at 22675
  Skipped scope entry (due to false predicate) at index 22680, continuing at 22724
  Skipped scope entry (due to false predicate) at index 22725, continuing at 22791
  Skipped scope entry (due to false predicate) at index 22792, continuing at 22858
  Morphed node: t27: i32 = TEST64rr t9, t9
ISEL: Match complete!

ISEL: Starting selection on root node: t9: i64,ch = load<(load 8 from %ir.1)> t0, t4, undef:i64
ISEL: Starting pattern match
  Initial Opcode index to 114898
  Match failed at index 114907
  Continuing at 114924
  Match failed at index 114927
  Continuing at 114944
  Match failed at index 114947
  Continuing at 114964
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t34: i8 = TargetConstant<1>
Creating constant: t36: i32 = TargetConstant<0>
  Morphed node: t9: i64,ch = MOV64rm<Mem:(load 8 from %ir.1)> t4, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t4: i64,ch = CopyFromReg t0, Register:i64 %4

ISEL: Starting selection on root node: t18: ch = BasicBlock< 0x7f9e6a81ed40>

ISEL: Starting selection on root node: t16: ch = BasicBlock< 0x7f9e6a81ee08>

ISEL: Starting selection on root node: t10: i64 = Register %0

ISEL: Starting selection on root node: t3: i64 = Register %4

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1BCMaTm:'
SelectionDAG has 18 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %4
  t9: i64,ch = MOV64rm<Mem:(load 8 from %ir.1)> t4, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0
    t11: ch = CopyToReg t0, Register:i64 %0, t9
    t27: i32 = TEST64rr t9, t9
  t33: ch,glue = CopyToReg t11, Register:i32 $eflags, t27
    t30: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81ee08>, TargetConstant:i8<5>, t33, t33:1
  t19: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t30


********** List Scheduling %bb.0 '' **********
SU(0): t19: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t30

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Barrier
SU(1): t30: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81ee08>, TargetConstant:i8<5>, t33, t33:1

    t33: ch,glue = CopyToReg t11, Register:i32 $eflags, t27

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(5): Ord  Latency=1 Barrier
    SU(2): Data Latency=1 Reg=$eflags
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(2): t27: i32 = TEST64rr t9, t9

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1
  Successors:
    SU(1): Data Latency=1 Reg=$eflags
SU(3): t9: i64,ch = MOV64rm<Mem:(load 8 from %ir.1)> t4, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1
  Successors:
    SU(2): Data Latency=1
    SU(5): Data Latency=1
SU(4): t4: i64,ch = CopyFromReg t0, Register:i64 %4

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=1
SU(5): t11: ch = CopyToReg t0, Register:i64 %0, t9

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1
  Successors:
    SU(1): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t19: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t30


*** Scheduling [0]: SU(0): t19: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t30


Examining Available:
Height 1: SU(1): t30: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81ee08>, TargetConstant:i8<5>, t33, t33:1

    t33: ch,glue = CopyToReg t11, Register:i32 $eflags, t27


*** Scheduling [1]: SU(1): t30: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81ee08>, TargetConstant:i8<5>, t33, t33:1

    t33: ch,glue = CopyToReg t11, Register:i32 $eflags, t27


Examining Available:
Height 2: SU(2): t27: i32 = TEST64rr t9, t9

Height 2: SU(5): t11: ch = CopyToReg t0, Register:i64 %0, t9


*** Scheduling [2]: SU(2): t27: i32 = TEST64rr t9, t9


Examining Available:
Height 2: SU(5): t11: ch = CopyToReg t0, Register:i64 %0, t9


*** Scheduling [3]: SU(5): t11: ch = CopyToReg t0, Register:i64 %0, t9


Examining Available:
Height 4: SU(3): t9: i64,ch = MOV64rm<Mem:(load 8 from %ir.1)> t4, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0


*** Scheduling [4]: SU(3): t9: i64,ch = MOV64rm<Mem:(load 8 from %ir.1)> t4, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0


Examining Available:
Height 5: SU(4): t4: i64,ch = CopyFromReg t0, Register:i64 %4


*** Scheduling [5]: SU(4): t4: i64,ch = CopyFromReg t0, Register:i64 %4

*** Final schedule ***
SU(4): t4: i64,ch = CopyFromReg t0, Register:i64 %4

SU(3): t9: i64,ch = MOV64rm<Mem:(load 8 from %ir.1)> t4, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0

SU(5): t11: ch = CopyToReg t0, Register:i64 %0, t9

SU(2): t27: i32 = TEST64rr t9, t9

SU(1): t30: ch = JCC_1 BasicBlock:ch< 0x7f9e6a81ee08>, TargetConstant:i8<5>, t33, t33:1

    t33: ch,glue = CopyToReg t11, Register:i32 $eflags, t27

SU(0): t19: ch = JMP_1 BasicBlock:ch< 0x7f9e6a81ed40>, t30


Total amount of phi nodes to update: 1
Node 0 : (0x7f9e6a81eed0, 2147483648)
Creating new node: t3: i64,ch = CopyFromReg t0, Register:i64 %5
Creating constant: t4: i64 = TargetConstant<0>
Creating new node: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Creating new node: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3
Creating new node: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
Creating new node: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
Creating new node: t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1
Creating new node: t15: ch = CopyToReg t0, Register:i64 %1, t13
Creating new node: t17: i64,ch = CopyFromReg t0, Register:i64 %4
Creating new node: t19: ch = TokenFactor t15, t18
Initial selection DAG: %bb.1 '$s7partial1BCMaTm:'
SelectionDAG has 20 nodes:
  t0: ch = EntryToken
  t1: i64 = GlobalAddress<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0
    t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
    t3: i64,ch = CopyFromReg t0, Register:i64 %5
  t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3
  t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
  t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
  t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1
    t15: ch = CopyToReg t0, Register:i64 %1, t13
      t17: i64,ch = CopyFromReg t0, Register:i64 %4
    t18: ch = AtomicStore<(store release 8 into %ir.1)> t13:1, t17, t13
  t19: ch = TokenFactor t15, t18



Combining: t19: ch = TokenFactor t15, t18

Combining: t18: ch = AtomicStore<(store release 8 into %ir.1)> t13:1, t17, t13

Combining: t17: i64,ch = CopyFromReg t0, Register:i64 %4

Combining: t16: i64 = Register %4

Combining: t15: ch = CopyToReg t0, Register:i64 %1, t13

Combining: t14: i64 = Register %1

Combining: t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1

Combining: t12: i64 = Register $rax

Combining: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1

Combining: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1

Combining: t9: Untyped = RegisterMask

Combining: t8: i64 = TargetGlobalAddress<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0

Combining: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3

Combining: t6: i64 = Register $rdi

Combining: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t4: i64 = TargetConstant<0>

Combining: t3: i64,ch = CopyFromReg t0, Register:i64 %5

Combining: t2: i64 = Register %5

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.1 '$s7partial1BCMaTm:'
SelectionDAG has 19 nodes:
  t0: ch = EntryToken
    t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
    t3: i64,ch = CopyFromReg t0, Register:i64 %5
  t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3
  t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
  t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
  t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1
    t15: ch = CopyToReg t0, Register:i64 %1, t13
      t17: i64,ch = CopyFromReg t0, Register:i64 %4
    t18: ch = AtomicStore<(store release 8 into %ir.1)> t13:1, t17, t13
  t19: ch = TokenFactor t15, t18


Legalizing node: t16: i64 = Register %4
Ignoring node results
Legally typed node: t16: i64 = Register %4

Legalizing node: t14: i64 = Register %1
Ignoring node results
Legally typed node: t14: i64 = Register %1

Legalizing node: t12: i64 = Register $rax
Ignoring node results
Legally typed node: t12: i64 = Register $rax

Legalizing node: t9: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t9: Untyped = RegisterMask

Legalizing node: t8: i64 = TargetGlobalAddress<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0
Analyzing result type: i64
Legal result type
Legally typed node: t8: i64 = TargetGlobalAddress<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0

Legalizing node: t6: i64 = Register $rdi
Ignoring node results
Legally typed node: t6: i64 = Register $rdi

Legalizing node: t4: i64 = TargetConstant<0>
Ignoring node results
Legally typed node: t4: i64 = TargetConstant<0>

Legalizing node: t2: i64 = Register %5
Ignoring node results
Legally typed node: t2: i64 = Register %5

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t3: i64,ch = CopyFromReg t0, Register:i64 %5
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t3: i64,ch = CopyFromReg t0, Register:i64 %5

Legalizing node: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing node: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
Legal operand
Analyzing operand: t3: i64,ch = CopyFromReg t0, Register:i64 %5
Legal operand
Legally typed node: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3

Legalizing node: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3
Legal operand
Analyzing operand: t8: i64 = TargetGlobalAddress<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0
Legal operand
Analyzing operand: t9: Untyped = RegisterMask
Legal operand
Analyzing operand: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3
Legal operand
Legally typed node: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1

Legalizing node: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
Legal operand
Analyzing operand: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
Legal operand
Legally typed node: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1

Legalizing node: t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
Legal operand
Analyzing operand: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
Legal operand
Legally typed node: t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1

Legalizing node: t15: ch = CopyToReg t0, Register:i64 %1, t13
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1
Legal operand
Legally typed node: t15: ch = CopyToReg t0, Register:i64 %1, t13

Legalizing node: t17: i64,ch = CopyFromReg t0, Register:i64 %4
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t17: i64,ch = CopyFromReg t0, Register:i64 %4

Legalizing node: t18: ch = AtomicStore<(store release 8 into %ir.1)> t13:1, t17, t13
Analyzing result type: ch
Legal result type
Analyzing operand: t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1
Legal operand
Analyzing operand: t17: i64,ch = CopyFromReg t0, Register:i64 %4
Legal operand
Analyzing operand: t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1
Legal operand
Legally typed node: t18: ch = AtomicStore<(store release 8 into %ir.1)> t13:1, t17, t13

Legalizing node: t19: ch = TokenFactor t15, t18
Analyzing result type: ch
Legal result type
Analyzing operand: t15: ch = CopyToReg t0, Register:i64 %1, t13
Legal operand
Analyzing operand: t18: ch = AtomicStore<(store release 8 into %ir.1)> t13:1, t17, t13
Legal operand
Legally typed node: t19: ch = TokenFactor t15, t18

Legalizing node: t65535: ch = handlenode t19
Analyzing result type: ch
Legal result type
Analyzing operand: t19: ch = TokenFactor t15, t18
Legal operand
Legally typed node: t65535: ch = handlenode t19

Type-legalized selection DAG: %bb.1 '$s7partial1BCMaTm:'
SelectionDAG has 19 nodes:
  t0: ch = EntryToken
    t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
    t3: i64,ch = CopyFromReg t0, Register:i64 %5
  t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3
  t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
  t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
  t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1
    t15: ch = CopyToReg t0, Register:i64 %1, t13
      t17: i64,ch = CopyFromReg t0, Register:i64 %4
    t18: ch = AtomicStore<(store release 8 into %ir.1)> t13:1, t17, t13
  t19: ch = TokenFactor t15, t18



Legalizing: t19: ch = TokenFactor t15, t18
Legal node: nothing to do

Legalizing: t15: ch = CopyToReg t0, Register:i64 %1, t13
Legal node: nothing to do

Legalizing: t18: ch = AtomicStore<(store release 8 into %ir.1)> t13:1, t17, t13
Trying custom legalization

Legalizing: t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1
Legal node: nothing to do

Legalizing: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1

Legalizing: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
Legal node: nothing to do

Legalizing: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3
Legal node: nothing to do

Legalizing: t17: i64,ch = CopyFromReg t0, Register:i64 %4
Legal node: nothing to do

Legalizing: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t3: i64,ch = CopyFromReg t0, Register:i64 %5
Legal node: nothing to do

Legalizing: t16: i64 = Register %4

Legalizing: t14: i64 = Register %1

Legalizing: t12: i64 = Register $rax

Legalizing: t9: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t8: i64 = TargetGlobalAddress<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0
Legal node: nothing to do

Legalizing: t6: i64 = Register $rdi

Legalizing: t4: i64 = TargetConstant<0>

Legalizing: t2: i64 = Register %5

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.1 '$s7partial1BCMaTm:'
SelectionDAG has 19 nodes:
  t0: ch = EntryToken
    t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
    t3: i64,ch = CopyFromReg t0, Register:i64 %5
  t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3
  t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
  t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
  t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1
    t15: ch = CopyToReg t0, Register:i64 %1, t13
      t17: i64,ch = CopyFromReg t0, Register:i64 %4
    t18: ch = AtomicStore<(store release 8 into %ir.1)> t13:1, t17, t13
  t19: ch = TokenFactor t15, t18



Legalizing: t19: ch = TokenFactor t15, t18
Legal node: nothing to do

Combining: t19: ch = TokenFactor t15, t18

Legalizing: t15: ch = CopyToReg t0, Register:i64 %1, t13
Legal node: nothing to do

Combining: t15: ch = CopyToReg t0, Register:i64 %1, t13

Legalizing: t18: ch = AtomicStore<(store release 8 into %ir.1)> t13:1, t17, t13
Trying custom legalization

Combining: t18: ch = AtomicStore<(store release 8 into %ir.1)> t13:1, t17, t13

Legalizing: t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1
Legal node: nothing to do

Combining: t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1

Legalizing: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1

Combining: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1

Legalizing: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
Legal node: nothing to do

Combining: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1

Legalizing: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3
Legal node: nothing to do

Combining: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3

Legalizing: t17: i64,ch = CopyFromReg t0, Register:i64 %4
Legal node: nothing to do

Combining: t17: i64,ch = CopyFromReg t0, Register:i64 %4

Legalizing: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Combining: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>

Legalizing: t3: i64,ch = CopyFromReg t0, Register:i64 %5
Legal node: nothing to do

Combining: t3: i64,ch = CopyFromReg t0, Register:i64 %5

Legalizing: t16: i64 = Register %4

Combining: t16: i64 = Register %4

Legalizing: t14: i64 = Register %1

Combining: t14: i64 = Register %1

Legalizing: t12: i64 = Register $rax

Combining: t12: i64 = Register $rax

Legalizing: t9: Untyped = RegisterMask
Legal node: nothing to do

Combining: t9: Untyped = RegisterMask

Legalizing: t8: i64 = TargetGlobalAddress<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0
Legal node: nothing to do

Combining: t8: i64 = TargetGlobalAddress<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0

Legalizing: t6: i64 = Register $rdi

Combining: t6: i64 = Register $rdi

Legalizing: t4: i64 = TargetConstant<0>

Combining: t4: i64 = TargetConstant<0>

Legalizing: t2: i64 = Register %5

Combining: t2: i64 = Register %5

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.1 '$s7partial1BCMaTm:'
SelectionDAG has 19 nodes:
  t0: ch = EntryToken
    t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
    t3: i64,ch = CopyFromReg t0, Register:i64 %5
  t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3
  t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
  t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
  t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1
    t15: ch = CopyToReg t0, Register:i64 %1, t13
      t17: i64,ch = CopyFromReg t0, Register:i64 %4
    t18: ch = AtomicStore<(store release 8 into %ir.1)> t13:1, t17, t13
  t19: ch = TokenFactor t15, t18


===== Instruction selection begins: %bb.1 ''

ISEL: Starting selection on root node: t19: ch = TokenFactor t15, t18

ISEL: Starting selection on root node: t15: ch = CopyToReg t0, Register:i64 %1, t13

ISEL: Starting selection on root node: t18: ch = AtomicStore<(store release 8 into %ir.1)> t13:1, t17, t13
ISEL: Starting pattern match
  Initial Opcode index to 18714
  Match failed at index 18721
  Continuing at 21182
  Match failed at index 21185
  Continuing at 21280
  Match failed at index 21283
  Continuing at 21415
  Skipped scope entry (due to false predicate) at index 21419, continuing at 21438
  Skipped scope entry (due to false predicate) at index 21439, continuing at 21458
  Skipped scope entry (due to false predicate) at index 21459, continuing at 21478
MatchAddress: X86ISelAddressMode 0x7ffee7e8a258
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t20: i8 = TargetConstant<1>
Creating constant: t22: i32 = TargetConstant<0>
  Morphed node: t18: ch = MOV64mr<Mem:(store release 8 into %ir.1)> t17, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t13, t13:1
ISEL: Match complete!

ISEL: Starting selection on root node: t13: i64,ch,glue = CopyFromReg t11, Register:i64 $rax, t11:1

ISEL: Starting selection on root node: t11: ch,glue = callseq_end t10, TargetConstant:i64<0>, TargetConstant:i64<0>, t10:1
ISEL: Starting pattern match
  Initial Opcode index to 130027
  Skipped scope entry (due to false predicate) at index 130043, continuing at 130054
  Morphed node: t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1
ISEL: Match complete!

ISEL: Starting selection on root node: t10: ch,glue = X86ISD::CALL t7, TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7:1
ISEL: Starting pattern match
  Initial Opcode index to 91510
  Match failed at index 91515
  Continuing at 91598
  OpcodeSwitch from 91604 to 91608
  TypeSwitch[i64] from 91608 to 91611
  Morphed node: t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1
ISEL: Match complete!

ISEL: Starting selection on root node: t7: ch,glue = CopyToReg t5, Register:i64 $rdi, t3

ISEL: Starting selection on root node: t17: i64,ch = CopyFromReg t0, Register:i64 %4

ISEL: Starting selection on root node: t5: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>
ISEL: Starting pattern match
  Initial Opcode index to 130070
  Skipped scope entry (due to false predicate) at index 130085, continuing at 130100
  Morphed node: t5: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0
ISEL: Match complete!

ISEL: Starting selection on root node: t3: i64,ch = CopyFromReg t0, Register:i64 %5

ISEL: Starting selection on root node: t16: i64 = Register %4

ISEL: Starting selection on root node: t14: i64 = Register %1

ISEL: Starting selection on root node: t12: i64 = Register $rax

ISEL: Starting selection on root node: t9: Untyped = RegisterMask

ISEL: Starting selection on root node: t8: i64 = TargetGlobalAddress<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0

ISEL: Starting selection on root node: t6: i64 = Register $rdi

ISEL: Starting selection on root node: t4: i64 = TargetConstant<0>

ISEL: Starting selection on root node: t2: i64 = Register %5

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.1 '$s7partial1BCMaTm:'
SelectionDAG has 23 nodes:
  t0: ch = EntryToken
    t5: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0
    t3: i64,ch = CopyFromReg t0, Register:i64 %5
  t7: ch,glue = CopyToReg t5:1, Register:i64 $rdi, t3
  t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1
  t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1
  t13: i64,ch,glue = CopyFromReg t11:1, Register:i64 $rax, t11:2
    t15: ch = CopyToReg t0, Register:i64 %1, t13
      t17: i64,ch = CopyFromReg t0, Register:i64 %4
    t18: ch = MOV64mr<Mem:(store release 8 into %ir.1)> t17, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t13, t13:1
  t19: ch = TokenFactor t15, t18


********** List Scheduling %bb.1 '' **********
SU(0): t19: ch = TokenFactor t15, t18

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Barrier
    SU(1): Ord  Latency=1 Barrier
SU(1): t18: ch = MOV64mr<Mem:(store release 8 into %ir.1)> t17, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t13, t13:1

  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1
    SU(2): Data Latency=1
    SU(2): Ord  Latency=1 Barrier
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(2): t13: i64,ch,glue = CopyFromReg t11:1, Register:i64 $rax, t11:2

    t7: ch,glue = CopyToReg t5:1, Register:i64 $rdi, t3

    t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1

    t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1

  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(4): Ord  Latency=1 Barrier
    SU(3): Data Latency=1
  Successors:
    SU(1): Data Latency=1
    SU(1): Ord  Latency=1 Barrier
    SU(6): Data Latency=1
SU(3): t3: i64,ch = CopyFromReg t0, Register:i64 %5

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Data Latency=1
SU(4): t5: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Ord  Latency=1 Barrier
SU(5): t17: i64,ch = CopyFromReg t0, Register:i64 %4

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Data Latency=1
SU(6): t15: ch = CopyToReg t0, Register:i64 %1, t13

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1
  Successors:
    SU(0): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t19: ch = TokenFactor t15, t18


*** Scheduling [0]: SU(0): t19: ch = TokenFactor t15, t18


Examining Available:
Height 1: SU(1): t18: ch = MOV64mr<Mem:(store release 8 into %ir.1)> t17, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t13, t13:1

Height 1: SU(6): t15: ch = CopyToReg t0, Register:i64 %1, t13


*** Scheduling [1]: SU(1): t18: ch = MOV64mr<Mem:(store release 8 into %ir.1)> t17, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t13, t13:1


Examining Available:
Height 2: SU(5): t17: i64,ch = CopyFromReg t0, Register:i64 %4

Height 1: SU(6): t15: ch = CopyToReg t0, Register:i64 %1, t13


*** Scheduling [2]: SU(5): t17: i64,ch = CopyFromReg t0, Register:i64 %4


Examining Available:
Height 1: SU(6): t15: ch = CopyToReg t0, Register:i64 %1, t13


*** Scheduling [3]: SU(6): t15: ch = CopyToReg t0, Register:i64 %1, t13


Examining Available:
Height 4: SU(2): t13: i64,ch,glue = CopyFromReg t11:1, Register:i64 $rax, t11:2

    t7: ch,glue = CopyToReg t5:1, Register:i64 $rdi, t3

    t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1

    t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1


*** Scheduling [4]: SU(2): t13: i64,ch,glue = CopyFromReg t11:1, Register:i64 $rax, t11:2

    t7: ch,glue = CopyToReg t5:1, Register:i64 $rdi, t3

    t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1

    t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1


Examining Available:
Height 5: SU(3): t3: i64,ch = CopyFromReg t0, Register:i64 %5

Height 5: SU(4): t5: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0


*** Scheduling [5]: SU(3): t3: i64,ch = CopyFromReg t0, Register:i64 %5


Examining Available:
Height 5: SU(4): t5: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0


*** Scheduling [6]: SU(4): t5: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

*** Final schedule ***
SU(4): t5: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0

SU(3): t3: i64,ch = CopyFromReg t0, Register:i64 %5

SU(2): t13: i64,ch,glue = CopyFromReg t11:1, Register:i64 $rax, t11:2

    t7: ch,glue = CopyToReg t5:1, Register:i64 $rdi, t3

    t10: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%objc_class* (%objc_class*)* @swift_getInitializedObjCClass> 0, Register:i64 $rdi, RegisterMask:Untyped, t7, t7:1

    t11: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t10, t10:1

SU(6): t15: ch = CopyToReg t0, Register:i64 %1, t13

SU(5): t17: i64,ch = CopyFromReg t0, Register:i64 %4

SU(1): t18: ch = MOV64mr<Mem:(store release 8 into %ir.1)> t17, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t13, t13:1

SU(0): t19: ch = TokenFactor t15, t18


Total amount of phi nodes to update: 1
Node 0 : (0x7f9e6a81eed0, 2147483649)
Creating new node: t1: i64 = undef
Creating new node: t2: i64,i64 = merge_values undef:i64, undef:i64
Creating new node: t4: i64,ch = CopyFromReg t0, Register:i64 %2
Creating new node: t5: i64,i64 = merge_values t4, undef:i64
Creating constant: t6: i64 = Constant<0>
Creating new node: t7: i64,i64 = merge_values t5, Constant:i64<0>
Creating constant: t8: i32 = TargetConstant<0>
Creating new node: t10: ch,glue = CopyToReg t0, Register:i64 $rax, t7
Creating new node: t12: ch,glue = CopyToReg t10, Register:i64 $rdx, t7:1, t10:1
Creating new node: t13: ch = X86ISD::RET_FLAG t12, TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12:1
Initial selection DAG: %bb.2 '$s7partial1BCMaTm:'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
  t2: i64,i64 = merge_values undef:i64, undef:i64
      t4: i64,ch = CopyFromReg t0, Register:i64 %2
    t5: i64,i64 = merge_values t4, undef:i64
  t7: i64,i64 = merge_values t5, Constant:i64<0>
  t10: ch,glue = CopyToReg t0, Register:i64 $rax, t7
  t12: ch,glue = CopyToReg t10, Register:i64 $rdx, t7:1, t10:1
  t13: ch = X86ISD::RET_FLAG t12, TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12:1



Combining: t13: ch = X86ISD::RET_FLAG t12, TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12:1

Combining: t12: ch,glue = CopyToReg t10, Register:i64 $rdx, t7:1, t10:1

Combining: t11: i64 = Register $rdx

Combining: t10: ch,glue = CopyToReg t0, Register:i64 $rax, t7

Combining: t9: i64 = Register $rax

Combining: t8: i32 = TargetConstant<0>

Combining: t7: i64,i64 = merge_values t5, Constant:i64<0>

Combining: t10: ch,glue = CopyToReg t0, Register:i64 $rax, t5

Combining: t12: ch,glue = CopyToReg t10, Register:i64 $rdx, Constant:i64<0>, t10:1

Combining: t6: i64 = Constant<0>

Combining: t5: i64,i64 = merge_values t4, undef:i64

Combining: t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4

Combining: t4: i64,ch = CopyFromReg t0, Register:i64 %2

Combining: t3: i64 = Register %2

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.2 '$s7partial1BCMaTm:'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %2
  t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4
  t12: ch,glue = CopyToReg t10, Register:i64 $rdx, Constant:i64<0>, t10:1
  t13: ch = X86ISD::RET_FLAG t12, TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12:1


Legalizing node: t11: i64 = Register $rdx
Ignoring node results
Legally typed node: t11: i64 = Register $rdx

Legalizing node: t9: i64 = Register $rax
Ignoring node results
Legally typed node: t9: i64 = Register $rax

Legalizing node: t8: i32 = TargetConstant<0>
Ignoring node results
Legally typed node: t8: i32 = TargetConstant<0>

Legalizing node: t6: i64 = Constant<0>
Analyzing result type: i64
Legal result type
Legally typed node: t6: i64 = Constant<0>

Legalizing node: t3: i64 = Register %2
Ignoring node results
Legally typed node: t3: i64 = Register %2

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t4: i64,ch = CopyFromReg t0, Register:i64 %2
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t4: i64,ch = CopyFromReg t0, Register:i64 %2

Legalizing node: t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t4: i64,ch = CopyFromReg t0, Register:i64 %2
Legal operand
Legally typed node: t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4

Legalizing node: t12: ch,glue = CopyToReg t10, Register:i64 $rdx, Constant:i64<0>, t10:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4
Legal operand
Analyzing operand: t6: i64 = Constant<0>
Legal operand
Analyzing operand: t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4
Legal operand
Legally typed node: t12: ch,glue = CopyToReg t10, Register:i64 $rdx, Constant:i64<0>, t10:1

Legalizing node: t13: ch = X86ISD::RET_FLAG t12, TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12:1
Analyzing result type: ch
Legal result type
Analyzing operand: t12: ch,glue = CopyToReg t10, Register:i64 $rdx, Constant:i64<0>, t10:1
Legal operand
Analyzing operand: t12: ch,glue = CopyToReg t10, Register:i64 $rdx, Constant:i64<0>, t10:1
Legal operand
Legally typed node: t13: ch = X86ISD::RET_FLAG t12, TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12:1

Legalizing node: t65535: ch = handlenode t13
Analyzing result type: ch
Legal result type
Analyzing operand: t13: ch = X86ISD::RET_FLAG t12, TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12:1
Legal operand
Legally typed node: t65535: ch = handlenode t13

Type-legalized selection DAG: %bb.2 '$s7partial1BCMaTm:'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %2
  t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4
  t12: ch,glue = CopyToReg t10, Register:i64 $rdx, Constant:i64<0>, t10:1
  t13: ch = X86ISD::RET_FLAG t12, TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12:1



Legalizing: t13: ch = X86ISD::RET_FLAG t12, TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12:1
Legal node: nothing to do

Legalizing: t12: ch,glue = CopyToReg t10, Register:i64 $rdx, Constant:i64<0>, t10:1
Legal node: nothing to do

Legalizing: t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4
Legal node: nothing to do

Legalizing: t4: i64,ch = CopyFromReg t0, Register:i64 %2
Legal node: nothing to do

Legalizing: t11: i64 = Register $rdx

Legalizing: t9: i64 = Register $rax

Legalizing: t8: i32 = TargetConstant<0>

Legalizing: t6: i64 = Constant<0>
Legal node: nothing to do

Legalizing: t3: i64 = Register %2

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.2 '$s7partial1BCMaTm:'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %2
  t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4
  t12: ch,glue = CopyToReg t10, Register:i64 $rdx, Constant:i64<0>, t10:1
  t13: ch = X86ISD::RET_FLAG t12, TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12:1



Legalizing: t13: ch = X86ISD::RET_FLAG t12, TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12:1
Legal node: nothing to do

Combining: t13: ch = X86ISD::RET_FLAG t12, TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12:1

Legalizing: t12: ch,glue = CopyToReg t10, Register:i64 $rdx, Constant:i64<0>, t10:1
Legal node: nothing to do

Combining: t12: ch,glue = CopyToReg t10, Register:i64 $rdx, Constant:i64<0>, t10:1

Legalizing: t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4
Legal node: nothing to do

Combining: t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4

Legalizing: t4: i64,ch = CopyFromReg t0, Register:i64 %2
Legal node: nothing to do

Combining: t4: i64,ch = CopyFromReg t0, Register:i64 %2

Legalizing: t11: i64 = Register $rdx

Combining: t11: i64 = Register $rdx

Legalizing: t9: i64 = Register $rax

Combining: t9: i64 = Register $rax

Legalizing: t8: i32 = TargetConstant<0>

Combining: t8: i32 = TargetConstant<0>

Legalizing: t6: i64 = Constant<0>
Legal node: nothing to do

Combining: t6: i64 = Constant<0>

Legalizing: t3: i64 = Register %2

Combining: t3: i64 = Register %2

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.2 '$s7partial1BCMaTm:'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %2
  t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4
  t12: ch,glue = CopyToReg t10, Register:i64 $rdx, Constant:i64<0>, t10:1
  t13: ch = X86ISD::RET_FLAG t12, TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12:1


===== Instruction selection begins: %bb.2 ''

ISEL: Starting selection on root node: t13: ch = X86ISD::RET_FLAG t12, TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12:1
ISEL: Starting pattern match
  Initial Opcode index to 130673
  Morphed node: t13: ch = RET TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12, t12:1
ISEL: Match complete!

ISEL: Starting selection on root node: t12: ch,glue = CopyToReg t10, Register:i64 $rdx, Constant:i64<0>, t10:1

ISEL: Starting selection on root node: t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4

ISEL: Starting selection on root node: t4: i64,ch = CopyFromReg t0, Register:i64 %2

ISEL: Starting selection on root node: t11: i64 = Register $rdx

ISEL: Starting selection on root node: t9: i64 = Register $rax

ISEL: Starting selection on root node: t8: i32 = TargetConstant<0>

ISEL: Starting selection on root node: t6: i64 = Constant<0>
ISEL: Starting pattern match
  Initial Opcode index to 125031
  TypeSwitch[i64] from 125035 to 125087
Creating constant: t14: i64 = TargetConstant<0>
  Created node: t15: i32,i32 = MOV32r0
Creating constant: t16: i32 = TargetConstant<6>
  Morphed node: t6: i64 = SUBREG_TO_REG TargetConstant:i64<0>, MOV32r0:i32,i32, TargetConstant:i32<6>
ISEL: Match complete!

ISEL: Starting selection on root node: t3: i64 = Register %2

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.2 '$s7partial1BCMaTm:'
SelectionDAG has 13 nodes:
  t0: ch = EntryToken
    t4: i64,ch = CopyFromReg t0, Register:i64 %2
  t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4
    t6: i64 = SUBREG_TO_REG TargetConstant:i64<0>, MOV32r0:i32,i32, TargetConstant:i32<6>
  t12: ch,glue = CopyToReg t10, Register:i64 $rdx, t6, t10:1
  t13: ch = RET TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12, t12:1


********** List Scheduling %bb.2 '' **********
SU(0): t13: ch = RET TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12, t12:1

    t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4

    t12: ch,glue = CopyToReg t10, Register:i64 $rdx, t6, t10:1

  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
    SU(3): Data Latency=1
SU(1): t6: i64 = SUBREG_TO_REG TargetConstant:i64<0>, MOV32r0:i32,i32, TargetConstant:i32<6>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1
  Successors:
    SU(0): Data Latency=1
SU(2): t15: i32,i32 = MOV32r0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Data Latency=1
SU(3): t4: i64,ch = CopyFromReg t0, Register:i64 %2

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t13: ch = RET TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12, t12:1

    t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4

    t12: ch,glue = CopyToReg t10, Register:i64 $rdx, t6, t10:1


*** Scheduling [0]: SU(0): t13: ch = RET TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12, t12:1

    t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4

    t12: ch,glue = CopyToReg t10, Register:i64 $rdx, t6, t10:1


Examining Available:
Height 1: SU(1): t6: i64 = SUBREG_TO_REG TargetConstant:i64<0>, MOV32r0:i32,i32, TargetConstant:i32<6>

Height 1: SU(3): t4: i64,ch = CopyFromReg t0, Register:i64 %2


*** Scheduling [1]: SU(1): t6: i64 = SUBREG_TO_REG TargetConstant:i64<0>, MOV32r0:i32,i32, TargetConstant:i32<6>


Examining Available:
Height 2: SU(2): t15: i32,i32 = MOV32r0

Height 1: SU(3): t4: i64,ch = CopyFromReg t0, Register:i64 %2


*** Scheduling [2]: SU(2): t15: i32,i32 = MOV32r0


Examining Available:
Height 1: SU(3): t4: i64,ch = CopyFromReg t0, Register:i64 %2


*** Scheduling [3]: SU(3): t4: i64,ch = CopyFromReg t0, Register:i64 %2

*** Final schedule ***
SU(3): t4: i64,ch = CopyFromReg t0, Register:i64 %2

SU(2): t15: i32,i32 = MOV32r0

SU(1): t6: i64 = SUBREG_TO_REG TargetConstant:i64<0>, MOV32r0:i32,i32, TargetConstant:i32<6>

SU(0): t13: ch = RET TargetConstant:i32<0>, Register:i64 $rax, Register:i64 $rdx, t12, t12:1

    t10: ch,glue = CopyToReg t0, Register:i64 $rax, t4

    t12: ch,glue = CopyToReg t10, Register:i64 $rdx, t6, t10:1


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1BCMaTm: IsSSA, TracksLiveness
Function Live Ins: $rsi in %4, $rdx in %5

bb.0 (%ir-block.3):
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rsi, $rdx
  %5:gr64 = COPY $rdx
  %4:gr64 = COPY $rsi
  %0:gr64 = MOV64rm %4:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
  TEST64rr %0:gr64, %0:gr64, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  CALL64pcrel32 @swift_getInitializedObjCClass, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %6:gr64 = COPY $rax
  %1:gr64 = COPY %6:gr64
  MOV64mr %4:gr64, 1, $noreg, 0, $noreg, %6:gr64 :: (store release 8 into %ir.1)

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1

  %2:gr64 = PHI %0:gr64, %bb.0, %1:gr64, %bb.1
  %7:gr32 = MOV32r0 implicit-def dead $eflags
  %8:gr64 = SUBREG_TO_REG 0, killed %7:gr32, %subreg.sub_32bit
  $rax = COPY %2:gr64
  $rdx = COPY %8:gr64
  RET 0, $rax, $rdx

# End machine code for function $s7partial1BCMaTm.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1BCMaTm: IsSSA, TracksLiveness
Function Live Ins: $rsi in %4, $rdx in %5

bb.0 (%ir-block.3):
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rsi, $rdx
  %5:gr64 = COPY $rdx
  %4:gr64 = COPY $rsi
  %0:gr64 = MOV64rm %4:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
  TEST64rr %0:gr64, %0:gr64, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  CALL64pcrel32 @swift_getInitializedObjCClass, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %6:gr64 = COPY $rax
  %1:gr64 = COPY %6:gr64
  MOV64mr %4:gr64, 1, $noreg, 0, $noreg, %6:gr64 :: (store release 8 into %ir.1)

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1

  %2:gr64 = PHI %0:gr64, %bb.0, %1:gr64, %bb.1
  %7:gr32 = MOV32r0 implicit-def dead $eflags
  %8:gr64 = SUBREG_TO_REG 0, killed %7:gr32, %subreg.sub_32bit
  $rax = COPY %2:gr64
  $rdx = COPY %8:gr64
  RET 0, $rax, $rdx

# End machine code for function $s7partial1BCMaTm.

# Machine code for function $s7partial1BCMaTm: IsSSA, TracksLiveness
Function Live Ins: $rsi in %4, $rdx in %5

0B	bb.0 (%ir-block.3):
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rsi, $rdx
16B	  %5:gr64 = COPY $rdx
32B	  %4:gr64 = COPY $rsi
48B	  %0:gr64 = MOV64rm %4:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
64B	  TEST64rr %0:gr64, %0:gr64, implicit-def $eflags
80B	  JCC_1 %bb.2, 5, implicit $eflags
96B	  JMP_1 %bb.1

112B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

128B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
144B	  $rdi = COPY %5:gr64
160B	  CALL64pcrel32 @swift_getInitializedObjCClass, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  %6:gr64 = COPY $rax
208B	  %1:gr64 = COPY %6:gr64
224B	  MOV64mr %4:gr64, 1, $noreg, 0, $noreg, %6:gr64 :: (store release 8 into %ir.1)

240B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1

256B	  %2:gr64 = PHI %0:gr64, %bb.0, %1:gr64, %bb.1
272B	  %7:gr32 = MOV32r0 implicit-def dead $eflags
288B	  %8:gr64 = SUBREG_TO_REG 0, killed %7:gr32, %subreg.sub_32bit
304B	  $rax = COPY %2:gr64
320B	  $rdx = COPY %8:gr64
336B	  RET 0, $rax, $rdx

# End machine code for function $s7partial1BCMaTm.

********** Stack Coloring **********
********** Function: $s7partial1BCMaTm
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.2
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1BCMaTm
Machine InstCombiner: $s7partial1BCMaTm
Combining MBB 
Combining MBB 
Combining MBB 
********** X86 cmov Conversion : $s7partial1BCMaTm**********
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.2
******** Pre-regalloc Machine LICM: $s7partial1BCMaTm ********
Entering: 
Entering: 
Exiting: 
Entering: 
Exiting: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.2
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 3, Num: 4
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.2
3: %bb.1
4: %bb.0
Found roots: %bb.2 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.0

block-frequency: $s7partial1BCMaTm
==================================
reverse-post-order-traversal
 - 0: BB0[]
 - 1: BB1[]
 - 2: BB2[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => [ local  ] weight = 805306368, succ = BB1[]
  => [ local  ] weight = 1342177280, succ = BB2[]
  => mass:  ffffffffffffffff
  => assign 5fffffffffffffff (a000000000000000) to BB1[]
  => assign a000000000000000 (0000000000000000) to BB2[]
 - node: BB1[]
  => [ local  ] weight = 2147483648, succ = BB2[]
  => mass:  5fffffffffffffff
  => assign 5fffffffffffffff (0000000000000000) to BB2[]
 - node: BB2[]
  => mass:  ffffffffffffffff
float-to-int: min = 0.375, max = 1.0, factor = 21.33333333
 - BB0[]: float = 1.0, scaled = 21.33333333, int = 21
 - BB1[]: float = 0.375, scaled = 8.0, int = 8
 - BB2[]: float = 1.0, scaled = 21.33333333, int = 21
block-frequency-info: $s7partial1BCMaTm
 - BB0[]: float = 1.0, int = 21
 - BB1[]: float = 0.375, int = 8
 - BB2[]: float = 1.0, int = 21

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1BCMaTm
Encountered load fold barrier on CALL64pcrel32 @swift_getInitializedObjCClass, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
Encountered load fold barrier on MOV64mr %4:gr64, 1, $noreg, 0, $noreg, %6:gr64 :: (store release 8 into %ir.1)
**** Analysing $s7partial1BCMaTm
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1BCMaTm **********
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.2
********** X86 EFLAGS copy lowering : $s7partial1BCMaTm **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1BCMaTm
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.2
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1BCMaTm
# Machine code for function $s7partial1BCMaTm: NoPHIs, TracksLiveness
Function Live Ins: $rsi in %4, $rdx in %5

0B	bb.0 (%ir-block.3):
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rsi, $rdx
16B	  %5:gr64 = COPY killed $rdx
32B	  %4:gr64 = COPY killed $rsi
48B	  %0:gr64 = MOV64rm %4:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
64B	  TEST64rr %0:gr64, %0:gr64, implicit-def $eflags
80B	  %9:gr64 = COPY killed %0:gr64
96B	  JCC_1 %bb.2, 5, implicit killed $eflags
112B	  JMP_1 %bb.1

128B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
160B	  $rdi = COPY killed %5:gr64
176B	  CALL64pcrel32 @swift_getInitializedObjCClass, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %6:gr64 = COPY killed $rax
224B	  %1:gr64 = COPY %6:gr64
240B	  MOV64mr killed %4:gr64, 1, $noreg, 0, $noreg, killed %6:gr64 :: (store release 8 into %ir.1)
256B	  %9:gr64 = COPY killed %1:gr64

272B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1

288B	  %2:gr64 = COPY killed %9:gr64
304B	  %7:gr32 = MOV32r0 implicit-def dead $eflags
320B	  %8:gr64 = SUBREG_TO_REG 0, killed %7:gr32, %subreg.sub_32bit
336B	  $rax = COPY killed %2:gr64
352B	  $rdx = COPY killed %8:gr64
368B	  RET 0, killed $rax, killed $rdx

# End machine code for function $s7partial1BCMaTm.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 SIL#0 SIH#0 HSI#0 DH#0 DL#0 HDX#0
Created 6 new intervals.
********** INTERVALS **********
DH [0B,16r:0)[352r,368r:1)  0@0B-phi 1@352r
DL [0B,16r:0)[352r,368r:1)  0@0B-phi 1@352r
HDX [0B,16r:0)[352r,368r:1)  0@0B-phi 1@352r
SIL [0B,32r:0)  0@0B-phi
SIH [0B,32r:0)  0@0B-phi
HSI [0B,32r:0)  0@0B-phi
%0 [48r,80r:0)  0@48r weight:0.000000e+00
%1 [224r,256r:0)  0@224r weight:0.000000e+00
%2 [288r,336r:0)  0@288r weight:0.000000e+00
%4 [32r,240r:0)  0@32r weight:0.000000e+00
%5 [16r,160r:0)  0@16r weight:0.000000e+00
%6 [208r,240r:0)  0@208r weight:0.000000e+00
%7 [304r,320r:0)  0@304r weight:0.000000e+00
%8 [320r,352r:0)  0@320r weight:0.000000e+00
%9 [80r,128B:0)[256r,272B:1)[272B,288r:2)  0@80r 1@256r 2@272B-phi weight:0.000000e+00
RegMasks: 176r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCMaTm: NoPHIs, TracksLiveness
Function Live Ins: $rsi in %4, $rdx in %5

0B	bb.0 (%ir-block.3):
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rsi, $rdx
16B	  %5:gr64 = COPY $rdx
32B	  %4:gr64 = COPY $rsi
48B	  %0:gr64 = MOV64rm %4:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
64B	  TEST64rr %0:gr64, %0:gr64, implicit-def $eflags
80B	  %9:gr64 = COPY %0:gr64
96B	  JCC_1 %bb.2, 5, implicit killed $eflags
112B	  JMP_1 %bb.1

128B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
160B	  $rdi = COPY %5:gr64
176B	  CALL64pcrel32 @swift_getInitializedObjCClass, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %6:gr64 = COPY killed $rax
224B	  %1:gr64 = COPY %6:gr64
240B	  MOV64mr %4:gr64, 1, $noreg, 0, $noreg, %6:gr64 :: (store release 8 into %ir.1)
256B	  %9:gr64 = COPY %1:gr64

272B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1

288B	  %2:gr64 = COPY %9:gr64
304B	  %7:gr32 = MOV32r0 implicit-def dead $eflags
320B	  %8:gr64 = SUBREG_TO_REG 0, %7:gr32, %subreg.sub_32bit
336B	  $rax = COPY %2:gr64
352B	  $rdx = COPY %8:gr64
368B	  RET 0, killed $rax, $rdx

# End machine code for function $s7partial1BCMaTm.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1BCMaTm
********** JOINING INTERVALS ***********
:
16B	%5:gr64 = COPY $rdx
	Considering merging %5 with $rdx
	Can only merge into reserved registers.
32B	%4:gr64 = COPY $rsi
	Considering merging %4 with $rsi
	Can only merge into reserved registers.
:
160B	$rdi = COPY %5:gr64
	Considering merging %5 with $rdi
	Can only merge into reserved registers.
208B	%6:gr64 = COPY killed $rax
	Considering merging %6 with $rax
	Can only merge into reserved registers.
:
320B	%8:gr64 = SUBREG_TO_REG 0, %7:gr32, %subreg.sub_32bit
	Considering merging to GR64_with_sub_8bit with %7 in %8:sub_32bit
		RHS = %7 [304r,320r:0)  0@304r weight:0.000000e+00
		LHS = %8 [320r,352r:0)  0@320r weight:0.000000e+00
		merge %8:0@320r into %7:0@304r --> @304r
		erased:	320r	%8:gr64 = SUBREG_TO_REG 0, %7:gr32, %subreg.sub_32bit
AllocationOrder(GR64) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r10 $r11 $rbx $r14 $r15 $r12 $r13 $rbp ]
AllocationOrder(GR64_with_sub_8bit) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r10 $r11 $rbx $r14 $r15 $r12 $r13 $rbp ]
		updated: 304B	undef %8.sub_32bit:gr64_with_sub_8bit = MOV32r0 implicit-def dead $eflags
	Success: %7:sub_32bit -> %8
	Result = %8 [304r,352r:0)  0@304r weight:0.000000e+00
336B	$rax = COPY %2:gr64
	Considering merging %2 with $rax
	Can only merge into reserved registers.
352B	$rdx = COPY %8:gr64_with_sub_8bit
	Considering merging %8 with $rdx
	Can only merge into reserved registers.
Remat: dead $edx = MOV32r0 implicit-def dead $eflags, implicit-def $rdx
Shrink: %8 [304r,352r:0)  0@304r weight:0.000000e+00
All defs dead: 304r	dead undef %8.sub_32bit:gr64_with_sub_8bit = MOV32r0 implicit-def dead $eflags
Shrunk: %8 [304r,304d:0)  0@304r weight:0.000000e+00
Deleting dead def 304r	dead undef %8.sub_32bit:gr64_with_sub_8bit = MOV32r0 implicit-def dead $eflags
80B	%9:gr64 = COPY %0:gr64
	Considering merging to GR64 with %0 in %9
		RHS = %0 [48r,80r:0)  0@48r weight:0.000000e+00
		LHS = %9 [80r,128B:0)[256r,272B:1)[272B,288r:2)  0@80r 1@256r 2@272B-phi weight:0.000000e+00
		merge %9:0@80r into %0:0@48r --> @48r
		erased:	80r	%9:gr64 = COPY %0:gr64
		updated: 48B	%9:gr64 = MOV64rm %4:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
		updated: 64B	TEST64rr %9:gr64, %9:gr64, implicit-def $eflags
	Success: %0 -> %9
	Result = %9 [48r,128B:0)[256r,272B:1)[272B,288r:2)  0@48r 1@256r 2@272B-phi weight:0.000000e+00
224B	%1:gr64 = COPY %6:gr64
	Considering merging to GR64 with %6 in %1
		RHS = %6 [208r,240r:0)  0@208r weight:0.000000e+00
		LHS = %1 [224r,256r:0)  0@224r weight:0.000000e+00
		merge %1:0@224r into %6:0@208r --> @208r
		erased:	224r	%1:gr64 = COPY %6:gr64
		updated: 208B	%1:gr64 = COPY killed $rax
		updated: 240B	MOV64mr %4:gr64, 1, $noreg, 0, $noreg, %1:gr64 :: (store release 8 into %ir.1)
	Success: %6 -> %1
	Result = %1 [208r,256r:0)  0@208r weight:0.000000e+00
256B	%9:gr64 = COPY %1:gr64
	Considering merging to GR64 with %1 in %9
		RHS = %1 [208r,256r:0)  0@208r weight:0.000000e+00
		LHS = %9 [48r,128B:0)[256r,272B:1)[272B,288r:2)  0@48r 1@256r 2@272B-phi weight:0.000000e+00
		merge %9:1@256r into %1:0@208r --> @208r
		erased:	256r	%9:gr64 = COPY %1:gr64
		updated: 208B	%9:gr64 = COPY killed $rax
		updated: 240B	MOV64mr %4:gr64, 1, $noreg, 0, $noreg, %9:gr64 :: (store release 8 into %ir.1)
	Success: %1 -> %9
	Result = %9 [48r,128B:0)[208r,272B:1)[272B,288r:2)  0@48r 1@208r 2@272B-phi weight:0.000000e+00
288B	%2:gr64 = COPY %9:gr64
	Considering merging to GR64 with %2 in %9
		RHS = %2 [288r,336r:0)  0@288r weight:0.000000e+00
		LHS = %9 [48r,128B:0)[208r,272B:1)[272B,288r:2)  0@48r 1@208r 2@272B-phi weight:0.000000e+00
		merge %2:0@288r into %9:2@272B --> @272B
		erased:	288r	%2:gr64 = COPY %9:gr64
		updated: 336B	$rax = COPY %9:gr64
	Success: %2 -> %9
	Result = %9 [48r,128B:0)[208r,272B:1)[272B,336r:2)  0@48r 1@208r 2@272B-phi weight:0.000000e+00
160B	$rdi = COPY %5:gr64
	Considering merging %5 with $rdi
	Can only merge into reserved registers.
336B	$rax = COPY %9:gr64
	Considering merging %9 with $rax
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
DH [0B,16r:0)[352r,368r:1)  0@0B-phi 1@352r
DL [0B,16r:0)[352r,368r:1)  0@0B-phi 1@352r
HDX [0B,16r:0)[352r,368r:1)  0@0B-phi 1@352r
SIL [0B,32r:0)  0@0B-phi
SIH [0B,32r:0)  0@0B-phi
HSI [0B,32r:0)  0@0B-phi
%4 [32r,240r:0)  0@32r weight:0.000000e+00
%5 [16r,160r:0)  0@16r weight:0.000000e+00
%9 [48r,128B:0)[208r,272B:1)[272B,336r:2)  0@48r 1@208r 2@272B-phi weight:0.000000e+00
RegMasks: 176r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCMaTm: NoPHIs, TracksLiveness
Function Live Ins: $rsi in %4, $rdx in %5

0B	bb.0 (%ir-block.3):
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rsi, $rdx
16B	  %5:gr64 = COPY $rdx
32B	  %4:gr64 = COPY $rsi
48B	  %9:gr64 = MOV64rm %4:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
64B	  TEST64rr %9:gr64, %9:gr64, implicit-def $eflags
96B	  JCC_1 %bb.2, 5, implicit killed $eflags
112B	  JMP_1 %bb.1

128B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
160B	  $rdi = COPY %5:gr64
176B	  CALL64pcrel32 @swift_getInitializedObjCClass, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %9:gr64 = COPY killed $rax
240B	  MOV64mr %4:gr64, 1, $noreg, 0, $noreg, %9:gr64 :: (store release 8 into %ir.1)

272B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1

336B	  $rax = COPY %9:gr64
352B	  dead $edx = MOV32r0 implicit-def dead $eflags, implicit-def $rdx
368B	  RET 0, killed $rax, $rdx

# End machine code for function $s7partial1BCMaTm.

Before MISched:
# Machine code for function $s7partial1BCMaTm: NoPHIs, TracksLiveness
Function Live Ins: $rsi in %4, $rdx in %5

bb.0 (%ir-block.3):
  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
  liveins: $rsi, $rdx
  %5:gr64 = COPY $rdx
  %4:gr64 = COPY $rsi
  %9:gr64 = MOV64rm %4:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
  TEST64rr %9:gr64, %9:gr64, implicit-def $eflags
  JCC_1 %bb.2, 5, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.6):
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  CALL64pcrel32 @swift_getInitializedObjCClass, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr64 = COPY killed $rax
  MOV64mr %4:gr64, 1, $noreg, 0, $noreg, %9:gr64 :: (store release 8 into %ir.1)

bb.2 (%ir-block.9):
; predecessors: %bb.0, %bb.1

  $rax = COPY %9:gr64
  dead $edx = MOV32r0 implicit-def dead $eflags, implicit-def $rdx
  RET 0, killed $rax, $rdx

# End machine code for function $s7partial1BCMaTm.

********** MI Scheduling **********
$s7partial1BCMaTm:%bb.0 
  From: %5:gr64 = COPY $rdx
    To: JCC_1 %bb.2, 5, implicit killed $eflags
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Macro fuse: SU(3) - ExitSU /  TEST64rr - JCC_1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   %4:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(2):   %9:gr64 = MOV64rm %4:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(1): Data Latency=0 Reg=%4
  Successors:
    SU(3): Data Latency=5 Reg=%9
  Single Issue       : false;
SU(3):   TEST64rr %9:gr64, %9:gr64, implicit-def $eflags
  # preds left       : 2
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=5 Reg=%9
    SU(0): Ord  Latency=0 Artificial
  Successors:
    ExitSU: Ord  Latency=0 Artificial
    ExitSU: Ord  Latency=0 Cluster
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 5, implicit killed $eflags
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=0 Cluster
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) TEST64rr %9:gr64, %9:gr64, implicit-def $eflags
  Ready @0c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) %9:gr64 = MOV64rm %4:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
  Ready @5c
  SBPort23 +1x6u
  *** Critical resource SBPort23: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 1 SBPort23
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %4:gr64 = COPY $rsi
  Ready @5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 1 SBPort23
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %5:gr64 = COPY $rdx
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 1 SBPort23
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gr64 = COPY $rdx
SU(1):   %4:gr64 = COPY $rsi
SU(2):   %9:gr64 = MOV64rm %4:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
SU(3):   TEST64rr %9:gr64, %9:gr64, implicit-def $eflags

********** MI Scheduling **********
$s7partial1BCMaTm:%bb.1 
  From: %9:gr64 = COPY killed $rax
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Global memory object and new barrier chain: SU(1).
SU(0):   %9:gr64 = COPY killed $rax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%9
  Single Issue       : false;
SU(1):   MOV64mr %4:gr64, 1, $noreg, 0, $noreg, %9:gr64 :: (store release 8 into %ir.1)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%9
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %4:gr64, 1, $noreg, 0, $noreg, %9:gr64 :: (store release 8 into %ir.1)
  Ready @0c
  SBPort4 +1x12u
  *** Critical resource SBPort4: 1c
  SBPort23 +1x6u
  SBPortAny +2x2u
BotQ.A @0c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 SBPort4
  ExpectedLatency: 0c
  - Resource limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:gr64 = COPY killed $rax
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 SBPort4
  ExpectedLatency: 0c
  - Resource limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %9:gr64 = COPY killed $rax
SU(1):   MOV64mr %4:gr64, 1, $noreg, 0, $noreg, %9:gr64 :: (store release 8 into %ir.1)

********** MI Scheduling **********
$s7partial1BCMaTm:%bb.2 
  From: $rax = COPY %9:gr64
    To: RET 0, killed $rax, $rdx
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rax = COPY %9:gr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   dead $edx = MOV32r0 implicit-def dead $eflags, implicit-def $rdx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   RET 0, killed $rax, $rdx
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) dead $edx = MOV32r0 implicit-def dead $eflags, implicit-def $rdx
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rax = COPY %9:gr64
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $rax = COPY %9:gr64
SU(1):   dead $edx = MOV32r0 implicit-def dead $eflags, implicit-def $rdx

********** INTERVALS **********
DH [0B,16r:0)[352r,368r:1)  0@0B-phi 1@352r
DL [0B,16r:0)[352r,368r:1)  0@0B-phi 1@352r
HDX [0B,16r:0)[352r,368r:1)  0@0B-phi 1@352r
SIL [0B,32r:0)  0@0B-phi
SIH [0B,32r:0)  0@0B-phi
HSI [0B,32r:0)  0@0B-phi
%4 [32r,240r:0)  0@32r weight:0.000000e+00
%5 [16r,160r:0)  0@16r weight:0.000000e+00
%9 [48r,128B:0)[208r,272B:1)[272B,336r:2)  0@48r 1@208r 2@272B-phi weight:0.000000e+00
RegMasks: 176r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCMaTm: NoPHIs, TracksLiveness
Function Live Ins: $rsi in %4, $rdx in %5

0B	bb.0 (%ir-block.3):
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rsi, $rdx
16B	  %5:gr64 = COPY $rdx
32B	  %4:gr64 = COPY $rsi
48B	  %9:gr64 = MOV64rm %4:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
64B	  TEST64rr %9:gr64, %9:gr64, implicit-def $eflags
96B	  JCC_1 %bb.2, 5, implicit killed $eflags
112B	  JMP_1 %bb.1

128B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
160B	  $rdi = COPY %5:gr64
176B	  CALL64pcrel32 @swift_getInitializedObjCClass, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %9:gr64 = COPY killed $rax
240B	  MOV64mr %4:gr64, 1, $noreg, 0, $noreg, %9:gr64 :: (store release 8 into %ir.1)

272B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1

336B	  $rax = COPY %9:gr64
352B	  dead $edx = MOV32r0 implicit-def dead $eflags, implicit-def $rdx
368B	  RET 0, killed $rax, $rdx

# End machine code for function $s7partial1BCMaTm.


block-frequency: $s7partial1BCMaTm
==================================
reverse-post-order-traversal
 - 0: BB0[]
 - 1: BB1[]
 - 2: BB2[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => [ local  ] weight = 805306368, succ = BB1[]
  => [ local  ] weight = 1342177280, succ = BB2[]
  => mass:  ffffffffffffffff
  => assign 5fffffffffffffff (a000000000000000) to BB1[]
  => assign a000000000000000 (0000000000000000) to BB2[]
 - node: BB1[]
  => [ local  ] weight = 2147483648, succ = BB2[]
  => mass:  5fffffffffffffff
  => assign 5fffffffffffffff (0000000000000000) to BB2[]
 - node: BB2[]
  => mass:  ffffffffffffffff
float-to-int: min = 0.375, max = 1.0, factor = 21.33333333
 - BB0[]: float = 1.0, scaled = 21.33333333, int = 21
 - BB1[]: float = 0.375, scaled = 8.0, int = 8
 - BB2[]: float = 1.0, scaled = 21.33333333, int = 21
block-frequency-info: $s7partial1BCMaTm
 - BB0[]: float = 1.0, int = 21
 - BB1[]: float = 0.375, int = 8
 - BB2[]: float = 1.0, int = 21

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1BCMaTm
********** Compute Spill Weights **********
********** Function: $s7partial1BCMaTm
********** INTERVALS **********
DH [0B,16r:0)[352r,368r:1)  0@0B-phi 1@352r
DL [0B,16r:0)[352r,368r:1)  0@0B-phi 1@352r
HDX [0B,16r:0)[352r,368r:1)  0@0B-phi 1@352r
SIL [0B,32r:0)  0@0B-phi
SIH [0B,32r:0)  0@0B-phi
HSI [0B,32r:0)  0@0B-phi
%4 [32r,240r:0)  0@32r weight:3.955200e-03
%5 [16r,160r:0)  0@16r weight:2.563901e-03
%9 [48r,128B:0)[208r,272B:1)[272B,336r:2)  0@48r 1@208r 2@272B-phi weight:6.269841e-03
RegMasks: 176r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCMaTm: NoPHIs, TracksLiveness
Function Live Ins: $rsi in %4, $rdx in %5

0B	bb.0 (%ir-block.3):
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rsi, $rdx
16B	  %5:gr64 = COPY $rdx
32B	  %4:gr64 = COPY $rsi
48B	  %9:gr64 = MOV64rm %4:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
64B	  TEST64rr %9:gr64, %9:gr64, implicit-def $eflags
96B	  JCC_1 %bb.2, 5, implicit killed $eflags
112B	  JMP_1 %bb.1

128B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
160B	  $rdi = COPY %5:gr64
176B	  CALL64pcrel32 @swift_getInitializedObjCClass, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %9:gr64 = COPY killed $rax
240B	  MOV64mr %4:gr64, 1, $noreg, 0, $noreg, %9:gr64 :: (store release 8 into %ir.1)

272B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1

336B	  $rax = COPY %9:gr64
352B	  dead $edx = MOV32r0 implicit-def dead $eflags, implicit-def $rdx
368B	  RET 0, killed $rax, $rdx

# End machine code for function $s7partial1BCMaTm.


selectOrSplit GR64:%4 [32r,240r:0)  0@32r weight:3.955200e-03 w=3.955200e-03
hints: $rsi
missed hint $rsi
assigning %4 to $rbx: BH [32r,240r:0)  0@32r BL [32r,240r:0)  0@32r HBX [32r,240r:0)  0@32r

selectOrSplit GR64:%9 [48r,128B:0)[208r,272B:1)[272B,336r:2)  0@48r 1@208r 2@272B-phi weight:6.269841e-03 w=6.269841e-03
hints: $rax
assigning %9 to $rax: AH [48r,128B:0)[208r,272B:1)[272B,336r:2)  0@48r 1@208r 2@272B-phi AL [48r,128B:0)[208r,272B:1)[272B,336r:2)  0@48r 1@208r 2@272B-phi HAX [48r,128B:0)[208r,272B:1)[272B,336r:2)  0@48r 1@208r 2@272B-phi

selectOrSplit GR64:%5 [16r,160r:0)  0@16r weight:2.563901e-03 w=2.563901e-03
hints: $rdx $rdi
assigning %5 to $rdx: DH [16r,160r:0)  0@16r DL [16r,160r:0)  0@16r HDX [16r,160r:0)  0@16r
Trying to reconcile hints for: %4($rbx)
%4($rbx) is recolorable.
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1BCMaTm
********** REGISTER MAP **********
[%4 -> $rbx] GR64
[%5 -> $rdx] GR64
[%9 -> $rax] GR64

0B	bb.0 (%ir-block.3):
	  successors: %bb.1(0x30000000), %bb.2(0x50000000); %bb.1(37.50%), %bb.2(62.50%)
	  liveins: $rdx, $rsi
16B	  %5:gr64 = COPY $rdx
32B	  %4:gr64 = COPY $rsi
48B	  %9:gr64 = MOV64rm %4:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
64B	  TEST64rr %9:gr64, %9:gr64, implicit-def $eflags
96B	  JCC_1 %bb.2, 5, implicit killed $eflags
112B	  JMP_1 %bb.1
> renamable $rdx = COPY $rdx
Identity copy: renamable $rdx = COPY $rdx
  deleted.
> renamable $rbx = COPY $rsi
> renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
> TEST64rr renamable $rax, renamable $rax, implicit-def $eflags
> JCC_1 %bb.2, 5, implicit killed $eflags
> JMP_1 %bb.1
128B	bb.1 (%ir-block.6):
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)
	  liveins: $rbx, $rdx
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
160B	  $rdi = COPY killed %5:gr64
176B	  CALL64pcrel32 @swift_getInitializedObjCClass, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %9:gr64 = COPY $rax
240B	  MOV64mr killed %4:gr64, 1, $noreg, 0, $noreg, %9:gr64 :: (store release 8 into %ir.1)
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> $rdi = COPY killed renamable $rdx
> CALL64pcrel32 @swift_getInitializedObjCClass, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
> renamable $rax = COPY $rax
Identity copy: renamable $rax = COPY $rax
  deleted.
> MOV64mr killed renamable $rbx, 1, $noreg, 0, $noreg, renamable $rax :: (store release 8 into %ir.1)
272B	bb.2 (%ir-block.9):
	; predecessors: %bb.0, %bb.1
	  liveins: $rax
336B	  $rax = COPY killed %9:gr64
352B	  dead $edx = MOV32r0 implicit-def dead $eflags, implicit-def $rdx
368B	  RET 0, $rax, $rdx
> $rax = COPY killed renamable $rax
Identity copy: $rax = COPY killed renamable $rax
  deleted.
> dead $edx = MOV32r0 implicit-def dead $eflags, implicit-def $rdx
> RET 0, $rax, $rdx
********** Stack Slot Coloring **********
********** Function: $s7partial1BCMaTm
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rbx = COPY $rsi
MCP: Replacing $rbx
     with $rsi
     in renamable $rax = MOV64rm renamable $rbx, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
     from renamable $rbx = COPY $rsi
MCP: After replacement: renamable $rax = MOV64rm $rsi, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)

MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $rdx
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rdx
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rdx
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rdx
MCP: CopyPropagateBlock 
******** Post-regalloc Machine LICM: $s7partial1BCMaTm ********

block-frequency: $s7partial1BCMaTm
==================================
reverse-post-order-traversal
 - 0: BB0[]
 - 1: BB1[]
 - 2: BB2[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => [ local  ] weight = 805306368, succ = BB1[]
  => [ local  ] weight = 1342177280, succ = BB2[]
  => mass:  ffffffffffffffff
  => assign 5fffffffffffffff (a000000000000000) to BB1[]
  => assign a000000000000000 (0000000000000000) to BB2[]
 - node: BB1[]
  => [ local  ] weight = 2147483648, succ = BB2[]
  => mass:  5fffffffffffffff
  => assign 5fffffffffffffff (0000000000000000) to BB2[]
 - node: BB2[]
  => mass:  ffffffffffffffff
float-to-int: min = 0.375, max = 1.0, factor = 21.33333333
 - BB0[]: float = 1.0, scaled = 21.33333333, int = 21
 - BB1[]: float = 0.375, scaled = 8.0, int = 8
 - BB2[]: float = 1.0, scaled = 21.33333333, int = 21
block-frequency-info: $s7partial1BCMaTm
 - BB0[]: float = 1.0, int = 21
 - BB1[]: float = 0.375, int = 8
 - BB2[]: float = 1.0, int = 21

		Looking for trivial roots
Found a new trivial root: %bb.2
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 3, Num: 4
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.2
3: %bb.1
4: %bb.0
Found roots: %bb.2 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.0
**** Analysing $s7partial1BCMaTm
Look into: 0 
No Shrink wrap candidate found

TryTailMergeBlocks: %bb.0, %bb.1
  with successor %bb.2
  which has fall-through from %bb.1
Looking for common tails of at least 3 instructions
MCP: CopyPropagateBlock 
MCP: CopyPropagateBlock 
MCP: Copy is a deletion candidate:   renamable $rbx = COPY $rsi
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $rdx
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rdx
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rdx
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rdx
MCP: Copy is used - not dead:   renamable $rbx = COPY $rsi
MCP: Copy is used - not dead:   renamable $rbx = COPY $rsi
MCP: Copy is used - not dead:   renamable $rbx = COPY $rsi
MCP: CopyPropagateBlock 
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1BCMaTm
real copy:   renamable $rbx = COPY $rsi
replaced by: $rbx = MOV64rr $rsi
real copy:   $rdi = COPY killed renamable $rdx
replaced by: $rdi = MOV64rr killed $rdx
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.2

block-frequency: $s7partial1BCMaTm
==================================
reverse-post-order-traversal
 - 0: BB0[]
 - 1: BB1[]
 - 2: BB2[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => [ local  ] weight = 805306368, succ = BB1[]
  => [ local  ] weight = 1342177280, succ = BB2[]
  => mass:  ffffffffffffffff
  => assign 5fffffffffffffff (a000000000000000) to BB1[]
  => assign a000000000000000 (0000000000000000) to BB2[]
 - node: BB1[]
  => [ local  ] weight = 2147483648, succ = BB2[]
  => mass:  5fffffffffffffff
  => assign 5fffffffffffffff (0000000000000000) to BB2[]
 - node: BB2[]
  => mass:  ffffffffffffffff
float-to-int: min = 0.375, max = 1.0, factor = 21.33333333
 - BB0[]: float = 1.0, scaled = 21.33333333, int = 21
 - BB1[]: float = 0.375, scaled = 8.0, int = 8
 - BB2[]: float = 1.0, scaled = 21.33333333, int = 21
block-frequency-info: $s7partial1BCMaTm
 - BB0[]: float = 1.0, int = 21
 - BB1[]: float = 0.375, int = 8
 - BB2[]: float = 1.0, int = 21

		Looking for trivial roots
Found a new trivial root: %bb.2
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 3, Num: 4
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.2
3: %bb.1
4: %bb.0
Found roots: %bb.2 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.0
Pre-computing triangle chains.
Selecting best successor for: %bb.0 ('')
    Candidate: %bb.1 (''), probability: 0x30000000 / 0x80000000 = 37.50%
    Setting it as best candidate
    Not a candidate: %bb.2 ('') -> 0x50000000 / 0x80000000 = 62.50% (prob) (non-cold CFG conflict)
    Selected: %bb.1 ('')
Merging from %bb.0 ('') to %bb.1 ('')
Selecting best successor for: %bb.1 ('')
    Candidate: %bb.2 (''), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: %bb.2 ('')
Merging from %bb.1 ('') to %bb.2 ('')
Selecting best successor for: %bb.2 ('')
Finished forming chain for header block %bb.0 ('')
[MBP] Function: $s7partial1BCMaTm
Placing chain %bb.0 ('')
          ... %bb.1 ('')
          ... %bb.2 ('')
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rax:	1	renamable $rax = MOV64rm $rsi, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
$rax:	1	renamable $rax = MOV64rm $rsi, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
$rax:	1	renamable $rax = MOV64rm $rsi, 1, $noreg, 0, $noreg :: (load 8 from %ir.1)
%bb.1: all preds known
$rbx:	0	$rbx = MOV64rr $rsi
$rbx:	0	$rbx = MOV64rr $rsi
$rbx:	0	$rbx = MOV64rr $rsi
$rdi:	1	$rdi = MOV64rr killed $rdx
$rdi:	1	$rdi = MOV64rr killed $rdx
$rdi:	1	$rdi = MOV64rr killed $rdx
%bb.2: all preds known
$edx:	0	dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx
$edx:	0	dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx
$edx:	0	dead $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx
$rbx:	1	$rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbx:	1	$rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbx:	1	$rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
%bb.0: entry
%bb.1: all preds known
%bb.2: all preds known
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.2
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1BCMaTm **********
X86 Retpoline Thunks
	discovered a new reachable node %1
[SafeStack] Function: $s7partial1BCACycfC
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %1
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCACycfC ----

Computing probabilities for 



=== $s7partial1BCACycfC
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Creating new node: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
Creating constant: t7: i32 = Constant<0>
Creating new node: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1
Initial selection DAG: %bb.0 '$s7partial1BCACycfC:'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
  t3: i64 = GlobalAddress<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
  t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1



Combining: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1

Combining: t8: Untyped = RegisterMask

Combining: t7: i32 = Constant<0>

Combining: t6: i64 = TargetGlobalAddress<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0

Combining: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2

Combining: t4: i64 = Register $r13

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t1: i64 = Register %0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1BCACycfC:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
  t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1


Legalizing node: t8: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t8: Untyped = RegisterMask

Legalizing node: t7: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t7: i32 = Constant<0>

Legalizing node: t6: i64 = TargetGlobalAddress<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t6: i64 = TargetGlobalAddress<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0

Legalizing node: t4: i64 = Register $r13
Ignoring node results
Legally typed node: t4: i64 = Register $r13

Legalizing node: t1: i64 = Register %0
Ignoring node results
Legally typed node: t1: i64 = Register %0

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing node: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Legally typed node: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2

Legalizing node: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
Legal operand
Analyzing operand: t6: i64 = TargetGlobalAddress<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0
Legal operand
Analyzing operand: t7: i32 = Constant<0>
Legal operand
Analyzing operand: t8: Untyped = RegisterMask
Legal operand
Analyzing operand: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
Legal operand
Legally typed node: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1

Legalizing node: t65535: ch = handlenode t9
Analyzing result type: ch
Legal result type
Analyzing operand: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1
Legal operand
Legally typed node: t65535: ch = handlenode t9

Type-legalized selection DAG: %bb.0 '$s7partial1BCACycfC:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
  t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1



Legalizing: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1
Legal node: nothing to do

Legalizing: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Legalizing: t8: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t7: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t6: i64 = TargetGlobalAddress<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0
Legal node: nothing to do

Legalizing: t4: i64 = Register $r13

Legalizing: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1BCACycfC:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
  t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1



Legalizing: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1
Legal node: nothing to do

Combining: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1

Legalizing: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
Legal node: nothing to do

Combining: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing: t8: Untyped = RegisterMask
Legal node: nothing to do

Combining: t8: Untyped = RegisterMask

Legalizing: t7: i32 = Constant<0>
Legal node: nothing to do

Combining: t7: i32 = Constant<0>

Legalizing: t6: i64 = TargetGlobalAddress<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0
Legal node: nothing to do

Combining: t6: i64 = TargetGlobalAddress<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0

Legalizing: t4: i64 = Register $r13

Combining: t4: i64 = Register $r13

Legalizing: t1: i64 = Register %0

Combining: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1BCACycfC:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
  t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1
ISEL: Starting pattern match
  Initial Opcode index to 40262
  Match failed at index 40267
  Continuing at 40335
  OpcodeSwitch from 40341 to 40345
  TypeSwitch[i64] from 40345 to 40369
Creating constant: t10: i32 = TargetConstant<0>
  Morphed node: t9: ch = TCRETURNdi64 TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, TargetConstant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5, t5:1
ISEL: Match complete!

ISEL: Starting selection on root node: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

ISEL: Starting selection on root node: t8: Untyped = RegisterMask

ISEL: Starting selection on root node: t6: i64 = TargetGlobalAddress<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0

ISEL: Starting selection on root node: t4: i64 = Register $r13

ISEL: Starting selection on root node: t1: i64 = Register %0

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1BCACycfC:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
  t9: ch = TCRETURNdi64 TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, TargetConstant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5, t5:1


********** List Scheduling %bb.0 '' **********
SU(0): t9: ch = TCRETURNdi64 TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, TargetConstant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t9: ch = TCRETURNdi64 TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, TargetConstant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2


*** Scheduling [0]: SU(0): t9: ch = TCRETURNdi64 TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, TargetConstant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2


Examining Available:
Height 1: SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [1]: SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

*** Final schedule ***
SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

SU(0): t9: ch = TCRETURNdi64 TargetGlobalAddress:i64<%T7partial1AC* (%swift.type*)* @"$s7partial1ACACycfC"> 0, TargetConstant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1BCACycfC: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $r13 = COPY %0:gr64
  TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCACycfC.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1BCACycfC: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $r13 = COPY %0:gr64
  TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCACycfC.

# Machine code for function $s7partial1BCACycfC: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $r13 = COPY %0:gr64
48B	  TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCACycfC.

********** Stack Coloring **********
********** Function: $s7partial1BCACycfC
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1BCACycfC
Machine InstCombiner: $s7partial1BCACycfC
Combining MBB 
********** X86 cmov Conversion : $s7partial1BCACycfC**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: $s7partial1BCACycfC ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: $s7partial1BCACycfC
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfC
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1BCACycfC
Encountered load fold barrier on TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13
**** Analysing $s7partial1BCACycfC
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1BCACycfC **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : $s7partial1BCACycfC **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1BCACycfC
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1BCACycfC
# Machine code for function $s7partial1BCACycfC: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY killed $r13
32B	  $r13 = COPY killed %0:gr64
48B	  TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $r13

# End machine code for function $s7partial1BCACycfC.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 R13B#0 R13BH#0 R13WH#0
Created 3 new intervals.
********** INTERVALS **********
R13B [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13BH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13WH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCACycfC: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $r13 = COPY %0:gr64
48B	  TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCACycfC.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1BCACycfC
********** JOINING INTERVALS ***********
:
16B	%0:gr64 = COPY $r13
	Considering merging %0 with $r13
	Can only merge into reserved registers.
32B	$r13 = COPY %0:gr64
	Considering merging %0 with $r13
	Can only merge into reserved registers.
32B	$r13 = COPY %0:gr64
	Considering merging %0 with $r13
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
R13B [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13BH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13WH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCACycfC: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $r13 = COPY %0:gr64
48B	  TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCACycfC.

Before MISched:
# Machine code for function $s7partial1BCACycfC: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $r13 = COPY %0:gr64
  TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCACycfC.

AllocationOrder(GR32) = [ $eax $ecx $edx $esi $edi $r8d $r9d $r10d $r11d $ebx $r14d $r15d $r12d $r13d ]
AllocationOrder(GR16) = [ $ax $cx $dx $si $di $r8w $r9w $r10w $r11w $bx $r14w $r15w $r12w $r13w ]
AllocationOrder(GR8) = [ $al $cl $dl $sil $dil $r8b $r9b $r10b $r11b $bl $r14b $r15b $r12b $r13b ]
********** MI Scheduling **********
$s7partial1BCACycfC:%bb.0 
  From: %0:gr64 = COPY $r13
    To: TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %0:gr64 = COPY $r13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%0
    SU(1): Anti Latency=0
  Single Issue       : false;
SU(1):   $r13 = COPY %0:gr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $r13 = COPY %0:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:gr64 = COPY $r13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %0:gr64 = COPY $r13
SU(1):   $r13 = COPY %0:gr64

********** INTERVALS **********
R13B [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13BH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13WH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCACycfC: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $r13 = COPY %0:gr64
48B	  TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCACycfC.


block-frequency: $s7partial1BCACycfC
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfC
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1BCACycfC
********** Compute Spill Weights **********
********** Function: $s7partial1BCACycfC
********** INTERVALS **********
R13B [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13BH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13WH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
%0 [16r,32r:0)  0@16r weight:INF
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCACycfC: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $r13 = COPY %0:gr64
48B	  TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCACycfC.


selectOrSplit GR64:%0 [16r,32r:0)  0@16r weight:INF w=INF
AllocationOrder(GR64) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r10 $r11 $rbx $r14 $r15 $r12 $r13 ]
hints: $r13
assigning %0 to $r13: R13B [16r,32r:0)  0@16r R13BH [16r,32r:0)  0@16r R13WH [16r,32r:0)  0@16r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1BCACycfC
********** REGISTER MAP **********
[%0 -> $r13] GR64

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $r13 = COPY killed %0:gr64
48B	  TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13
> renamable $r13 = COPY $r13
Identity copy: renamable $r13 = COPY $r13
  deleted.
> $r13 = COPY killed renamable $r13
Identity copy: $r13 = COPY killed renamable $r13
  deleted.
> TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13
********** Stack Slot Coloring **********
********** Function: $s7partial1BCACycfC
MCP: CopyPropagateBlock 
******** Post-regalloc Machine LICM: $s7partial1BCACycfC ********

block-frequency: $s7partial1BCACycfC
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfC
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing $s7partial1BCACycfC
Look into: 0 
Use or define CSR(1) or FI(0): TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

Use or define CSR(1) or FI(0): TCRETURNdi64 @"$s7partial1ACACycfC", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

Restore point needs to be spanned on several blocks
No Shrink wrap candidate found
MCP: CopyPropagateBlock 
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1BCACycfC
	discovered a new reachable node %bb.0

block-frequency: $s7partial1BCACycfC
====================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCACycfC
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	2	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	2	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	2	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
%bb.0: entry
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1BCACycfC **********
X86 Retpoline Thunks
	discovered a new reachable node %1
[SafeStack] Function: $s7partial1BCfD
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %1
	discovered a new reachable node %1
---- Branch Probability Info : $s7partial1BCfD ----

Computing probabilities for 



=== $s7partial1BCfD
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Creating new node: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
Creating constant: t7: i32 = Constant<0>
Creating new node: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1
Initial selection DAG: %bb.0 '$s7partial1BCfD:'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
  t3: i64 = GlobalAddress<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
  t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1



Combining: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1

Combining: t8: Untyped = RegisterMask

Combining: t7: i32 = Constant<0>

Combining: t6: i64 = TargetGlobalAddress<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0

Combining: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2

Combining: t4: i64 = Register $r13

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Combining: t1: i64 = Register %0

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '$s7partial1BCfD:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
  t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1


Legalizing node: t8: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t8: Untyped = RegisterMask

Legalizing node: t7: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t7: i32 = Constant<0>

Legalizing node: t6: i64 = TargetGlobalAddress<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0
Analyzing result type: i64
Legal result type
Legally typed node: t6: i64 = TargetGlobalAddress<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0

Legalizing node: t4: i64 = Register $r13
Ignoring node results
Legally typed node: t4: i64 = Register $r13

Legalizing node: t1: i64 = Register %0
Ignoring node results
Legally typed node: t1: i64 = Register %0

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing node: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal operand
Legally typed node: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2

Legalizing node: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
Legal operand
Analyzing operand: t6: i64 = TargetGlobalAddress<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0
Legal operand
Analyzing operand: t7: i32 = Constant<0>
Legal operand
Analyzing operand: t8: Untyped = RegisterMask
Legal operand
Analyzing operand: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
Legal operand
Legally typed node: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1

Legalizing node: t65535: ch = handlenode t9
Analyzing result type: ch
Legal result type
Analyzing operand: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1
Legal operand
Legally typed node: t65535: ch = handlenode t9

Type-legalized selection DAG: %bb.0 '$s7partial1BCfD:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
  t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1



Legalizing: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1
Legal node: nothing to do

Legalizing: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Legalizing: t8: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t7: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t6: i64 = TargetGlobalAddress<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0
Legal node: nothing to do

Legalizing: t4: i64 = Register $r13

Legalizing: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.0 '$s7partial1BCfD:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
  t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1



Legalizing: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1
Legal node: nothing to do

Combining: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1

Legalizing: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
Legal node: nothing to do

Combining: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %0
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %0

Legalizing: t8: Untyped = RegisterMask
Legal node: nothing to do

Combining: t8: Untyped = RegisterMask

Legalizing: t7: i32 = Constant<0>
Legal node: nothing to do

Combining: t7: i32 = Constant<0>

Legalizing: t6: i64 = TargetGlobalAddress<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0
Legal node: nothing to do

Combining: t6: i64 = TargetGlobalAddress<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0

Legalizing: t4: i64 = Register $r13

Combining: t4: i64 = Register $r13

Legalizing: t1: i64 = Register %0

Combining: t1: i64 = Register %0

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '$s7partial1BCfD:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
  t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t9: ch,glue = X86ISD::TC_RETURN t5, TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, Constant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5:1
ISEL: Starting pattern match
  Initial Opcode index to 40262
  Match failed at index 40267
  Continuing at 40335
  OpcodeSwitch from 40341 to 40345
  TypeSwitch[i64] from 40345 to 40369
Creating constant: t10: i32 = TargetConstant<0>
  Morphed node: t9: ch = TCRETURNdi64 TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, TargetConstant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5, t5:1
ISEL: Match complete!

ISEL: Starting selection on root node: t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %0

ISEL: Starting selection on root node: t8: Untyped = RegisterMask

ISEL: Starting selection on root node: t6: i64 = TargetGlobalAddress<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0

ISEL: Starting selection on root node: t4: i64 = Register $r13

ISEL: Starting selection on root node: t1: i64 = Register %0

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '$s7partial1BCfD:'
SelectionDAG has 9 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %0
  t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2
  t9: ch = TCRETURNdi64 TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, TargetConstant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5, t5:1


********** List Scheduling %bb.0 '' **********
SU(0): t9: ch = TCRETURNdi64 TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, TargetConstant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t9: ch = TCRETURNdi64 TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, TargetConstant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2


*** Scheduling [0]: SU(0): t9: ch = TCRETURNdi64 TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, TargetConstant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2


Examining Available:
Height 1: SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0


*** Scheduling [1]: SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

*** Final schedule ***
SU(1): t2: i64,ch = CopyFromReg t0, Register:i64 %0

SU(0): t9: ch = TCRETURNdi64 TargetGlobalAddress:i64<void (%T7partial1AC*)* @"$s7partial1ACfD"> 0, TargetConstant:i32<0>, Register:i64 $r13, RegisterMask:Untyped, t5, t5:1

    t5: ch,glue = CopyToReg t0, Register:i64 $r13, t2


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function $s7partial1BCfD: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $r13 = COPY %0:gr64
  TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCfD.

***** Machine Function before Domain Reassignment *****
# Machine code for function $s7partial1BCfD: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $r13 = COPY %0:gr64
  TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCfD.

# Machine code for function $s7partial1BCfD: IsSSA, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $r13 = COPY %0:gr64
48B	  TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCfD.

********** Stack Coloring **********
********** Function: $s7partial1BCfD
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: $s7partial1BCfD
Machine InstCombiner: $s7partial1BCfD
Combining MBB 
********** X86 cmov Conversion : $s7partial1BCfD**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: $s7partial1BCfD ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: $s7partial1BCfD
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfD
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: $s7partial1BCfD
Encountered load fold barrier on TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13
**** Analysing $s7partial1BCfD
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : $s7partial1BCfD **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : $s7partial1BCfD **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: $s7partial1BCfD
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: $s7partial1BCfD
# Machine code for function $s7partial1BCfD: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY killed $r13
32B	  $r13 = COPY killed %0:gr64
48B	  TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $r13

# End machine code for function $s7partial1BCfD.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 R13B#0 R13BH#0 R13WH#0
Created 3 new intervals.
********** INTERVALS **********
R13B [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13BH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13WH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCfD: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $r13 = COPY %0:gr64
48B	  TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCfD.

********** SIMPLE REGISTER COALESCING **********
********** Function: $s7partial1BCfD
********** JOINING INTERVALS ***********
:
16B	%0:gr64 = COPY $r13
	Considering merging %0 with $r13
	Can only merge into reserved registers.
32B	$r13 = COPY %0:gr64
	Considering merging %0 with $r13
	Can only merge into reserved registers.
32B	$r13 = COPY %0:gr64
	Considering merging %0 with $r13
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
R13B [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13BH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13WH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCfD: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $r13 = COPY %0:gr64
48B	  TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCfD.

Before MISched:
# Machine code for function $s7partial1BCfD: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

bb.0 (%ir-block.1):
  liveins: $r13
  %0:gr64 = COPY $r13
  $r13 = COPY %0:gr64
  TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCfD.

********** MI Scheduling **********
$s7partial1BCfD:%bb.0 
  From: %0:gr64 = COPY $r13
    To: TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %0:gr64 = COPY $r13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%0
    SU(1): Anti Latency=0
  Single Issue       : false;
SU(1):   $r13 = COPY %0:gr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $r13 = COPY %0:gr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:gr64 = COPY $r13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %0:gr64 = COPY $r13
SU(1):   $r13 = COPY %0:gr64

********** INTERVALS **********
R13B [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13BH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13WH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
%0 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCfD: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $r13 = COPY %0:gr64
48B	  TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCfD.


block-frequency: $s7partial1BCfD
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfD
 - BB0[]: float = 1.0, int = 8

********** GREEDY REGISTER ALLOCATION **********
********** Function: $s7partial1BCfD
********** Compute Spill Weights **********
********** Function: $s7partial1BCfD
********** INTERVALS **********
R13B [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13BH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
R13WH [0B,16r:0)[32r,48r:1)  0@0B-phi 1@32r
%0 [16r,32r:0)  0@16r weight:INF
RegMasks: 48r
********** MACHINEINSTRS **********
# Machine code for function $s7partial1BCfD: NoPHIs, TracksLiveness
Function Live Ins: $r13 in %0

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $r13 = COPY %0:gr64
48B	  TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

# End machine code for function $s7partial1BCfD.


selectOrSplit GR64:%0 [16r,32r:0)  0@16r weight:INF w=INF
hints: $r13
assigning %0 to $r13: R13B [16r,32r:0)  0@16r R13BH [16r,32r:0)  0@16r R13WH [16r,32r:0)  0@16r
********** REWRITE VIRTUAL REGISTERS **********
********** Function: $s7partial1BCfD
********** REGISTER MAP **********
[%0 -> $r13] GR64

0B	bb.0 (%ir-block.1):
	  liveins: $r13
16B	  %0:gr64 = COPY $r13
32B	  $r13 = COPY killed %0:gr64
48B	  TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13
> renamable $r13 = COPY $r13
Identity copy: renamable $r13 = COPY $r13
  deleted.
> $r13 = COPY killed renamable $r13
Identity copy: $r13 = COPY killed renamable $r13
  deleted.
> TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13
********** Stack Slot Coloring **********
********** Function: $s7partial1BCfD
MCP: CopyPropagateBlock 
******** Post-regalloc Machine LICM: $s7partial1BCfD ********

block-frequency: $s7partial1BCfD
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfD
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing $s7partial1BCfD
Look into: 0 
Use or define CSR(1) or FI(0): TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

Use or define CSR(1) or FI(0): TCRETURNdi64 @"$s7partial1ACfD", 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $r13

Restore point needs to be spanned on several blocks
No Shrink wrap candidate found
MCP: CopyPropagateBlock 
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: $s7partial1BCfD
	discovered a new reachable node %bb.0

block-frequency: $s7partial1BCfD
================================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: $s7partial1BCfD
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	1	$rbp = frame-setup MOV64rr $rsp
$rbp:	2	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	2	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
$rbp:	2	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
********** FIX EXECUTION DOMAIN: VR128X **********
%bb.0: entry
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: $s7partial1BCfD **********
X86 Retpoline Thunks
assembler backend - pre-layout
--
<MCAssembler
  Sections:[
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a71b470 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71b4c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,31,C0,5D,C3] (8 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6b946990 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b943250 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,EF,BE,10,00,00,00,BA,07,00,00,00,5D] (18 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b945030 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1145 <MCOperand Expr:(_swift_allocObject)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6bb4e580 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6bb43160 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,E8,5D,C3] (9 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6b945160 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b94bb10 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,48,89,F7,5D] (8 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b946350 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1145 <MCOperand Expr:(_$s7partial1AC1fySbxlFTf4dd_n)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a43cd30 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a4108d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,E8,5D,C3] (9 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6bb43240 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6bb4efa0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,EF,BE,10,00,00,00,BA,07,00,00,00,5D] (18 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6bb42f00 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1145 <MCOperand Expr:(_swift_deallocClassInstance)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a71b720 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71bae0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,31,C0,5D,C3] (8 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6b944de0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b9466c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,E8,5D,C3] (9 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a4107e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a4112f0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,E8,5D,C3] (9 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a718e60 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71b1e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,E8,00,00,00,00,BE,10,00,00,00,BA,07,00,00,00,48,89,C7,5D] (23 bytes),
        Fixups:[<MCFixup Offset:5 Value:_$s7partial1BCMa-4 Kind:136>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a71bd50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1145 <MCOperand Expr:(_swift_allocObject)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6b9431d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b948d50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,41,55,53,48,83,EC,10,E8,00,00,00,00,49,89,C5,66,C7,45,E8,09,00,48,8B,08,48,8D,05,00,00,00,00,48,39,C1] (38 bytes),
        Fixups:[<MCFixup Offset:12 Value:_$s7partial8makeAorBAA1ACyF-4 Kind:136>,
                <MCFixup Offset:31 Value:(_$s7partial1ACMf+16)-4 Kind:128>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b9483c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1128 <MCOperand Expr:(LBB10_1)> <MCOperand Imm:4>>>,
      <MCDataFragment<MCFragment 0x7f9e6b93ee20 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[48,8D,05,00,00,00,00,48,39,C1] (10 bytes),
        Fixups:[<MCFixup Offset:3 Value:(_$s7partial1BCMf+16)-4 Kind:128>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b93ef00 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1128 <MCOperand Expr:(LBB10_3)> <MCOperand Imm:4>>>,
      <MCDataFragment<MCFragment 0x7f9e6b93f030 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[48,8B,35,00,00,00,00,48,8D,7D,E8,FF,51,58,89,C3,4C,89,EF,E8,00,00,00,00] (24 bytes),
        Fixups:[<MCFixup Offset:3 Value:_$ss6UInt16VN@GOTPCREL-4 Kind:129>,
                <MCFixup Offset:20 Value:_swift_release-4 Kind:136>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b93f4c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1145 <MCOperand Expr:(LBB10_5)>>>,
      <MCDataFragment<MCFragment 0x7f9e6b945540 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[E8,00,00,00,00,48,89,C3,4C,89,EF,E8,00,00,00,00,48,3B,1D,00,00,00,00,0F,94,C3] (26 bytes),
        Fixups:[<MCFixup Offset:1 Value:_$s7partial1ACMa-4 Kind:136>,
                <MCFixup Offset:12 Value:_swift_release-4 Kind:136>,
                <MCFixup Offset:19 Value:_$ss6UInt16VN@GOTPCREL-4 Kind:131>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b945620 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1145 <MCOperand Expr:(LBB10_5)>>>,
      <MCDataFragment<MCFragment 0x7f9e6b945750 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[4C,89,EF,E8,00,00,00,00,31,DB,89,D8,48,83,C4,10,5B,41,5D,5D,C3] (21 bytes),
        Fixups:[<MCFixup Offset:4 Value:_swift_release-4 Kind:136>]>,
      <MCAlignFragment<MCFragment 0x7f9e6b94bbf0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b94a6c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,53,50,48,89,FB,E8,00,00,00,00,48,39,D8,0F,94,C0,48,83,C4,08,5B,5D,C3] (27 bytes),
        Fixups:[<MCFixup Offset:10 Value:_$s7partial1ACMa-4 Kind:136>]>,
      <MCAlignFragment<MCFragment 0x7f9e6b94bc40 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b948790 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[48,8D,35,00,00,00,00,48,8D,15,00,00,00,00] (14 bytes),
        Fixups:[<MCFixup Offset:3 Value:_$s7partial1BCML-4 Kind:128>,
                <MCFixup Offset:10 Value:(_$s7partial1BCMf+16)-4 Kind:128>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b908a50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1145 <MCOperand Expr:(_$s7partial1BCMaTm)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a40d3d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a4113d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[48,8D,35,00,00,00,00,48,8D,15,00,00,00,00] (14 bytes),
        Fixups:[<MCFixup Offset:3 Value:_$s7partial1ACML-4 Kind:128>,
                <MCFixup Offset:10 Value:(_$s7partial1ACMf+16)-4 Kind:128>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a411ad0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1145 <MCOperand Expr:(_$s7partial1BCMaTm)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a4114c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a411510 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[53,48,8B,06,48,85,C0] (7 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a4115f0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1128 <MCOperand Expr:(LBB14_2)> <MCOperand Imm:5>>>,
      <MCDataFragment<MCFragment 0x7f9e6a412310 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[48,89,F3,48,89,D7,E8,00,00,00,00,48,89,03,31,D2,5B,C3] (18 bytes),
        Fixups:[<MCFixup Offset:7 Value:_swift_getInitializedObjCClass-4 Kind:136>]>,
      <MCAlignFragment<MCFragment 0x7f9e6a71c470 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71bbc0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,5D] (5 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a71c230 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1145 <MCOperand Expr:(_$s7partial1ACACycfC)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a71a070 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71c0a0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,5D] (5 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a71c7e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1145 <MCOperand Expr:(_$s7partial1ACfD)>>>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a71ab60 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a71b770 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_OBJC_METACLASS_$__TtCs12_SwiftObject Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a718600 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71b850 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_OBJC_METACLASS_$__TtCs12_SwiftObject Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a718360 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71b930 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:__objc_empty_cache Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7183b0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7187b0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ba10 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a718890 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:l__METACLASS_DATA__TtC7partial1A Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a718290 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a71ff90 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a71ffe0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACfD Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7200c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720110 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$sBoWV Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7201f0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720240 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMm Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a720320 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720370 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_OBJC_CLASS_$__TtCs12_SwiftObject Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a720450 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7204a0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:__objc_empty_cache Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a720580 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7205d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7206b0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720700 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:l__DATA__TtC7partial1A+2 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7207e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720830 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720910 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720960 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720a40 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720a90 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720b70 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720bc0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[07,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720ca0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720cf0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720dd0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720e20 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[70,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720f00 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720f50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721030 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721080 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMn Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a721160 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7211b0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721290 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7212e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACACycfC Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7213c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721410 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1AC1fySbxlF Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7214f0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a722090 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a7220e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_OBJC_METACLASS_$__TtCs12_SwiftObject Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7221c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722210 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMm Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7222f0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722340 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:__objc_empty_cache Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a722420 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722470 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722550 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7225e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:l__METACLASS_DATA__TtC7partial1B Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7226c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a725df0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a725e40 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BCfD Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725f20 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725f70 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$sBoWV Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a726050 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7260a0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BCMm Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a726180 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7261d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMf+16 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7262b0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726300 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:__objc_empty_cache Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7263e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726430 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726510 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726560 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:l__DATA__TtC7partial1B+2 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a726640 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726690 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726770 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7267c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7268a0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7268f0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7269d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726a20 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[07,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726b00 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726b50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726c30 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726c80 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[70,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726d60 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726db0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726e90 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726ee0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BCMn Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a726fc0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727010 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7270f0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727140 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BCACycfC Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a727220 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727270 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BC1fySbxlF Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a727350 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a718970 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[5F,54,74,43,37,70,61,72,74,69,61,6C,31,41,00,5F,54,74,43,37,70,61,72,74,69,61,6C,31,42,00] (30 bytes)>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a71c360 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a718a50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[81,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71c3b0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71c910 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[28,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71b2c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71c9f0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[28,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71b310 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cad0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a719c30 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cbb0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a719c80 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cc90 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:L___unnamed_1 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71b3a0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cd70 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71b3f0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71ce50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71cf30 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cf80 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d060 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d0b0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d190 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d1e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d2c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a71d310 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a71d360 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[80,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d440 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d490 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d570 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d5c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d6a0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d6f0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d7d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d820 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d900 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d950 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:L___unnamed_1 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71da30 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71da80 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71db60 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71dbb0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71dc90 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71dce0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ddc0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71de10 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71def0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71df40 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71e020 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a722710 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a722760 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[81,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722840 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722890 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[28,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722970 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7229c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[28,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722aa0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722af0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722bd0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722c20 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722d00 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722d50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:L___unnamed_4 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a722e30 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722e80 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722f60 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722fb0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723090 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7230e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7231c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723210 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7232f0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723340 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723420 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a7234a0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a7234f0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[80,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7235d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723620 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723700 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723750 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723830 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723880 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723960 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7239b0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723a90 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723ae0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:L___unnamed_4 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a723bc0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723c10 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723cf0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723d40 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723e20 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723e70 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723f50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723fa0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724080 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7240d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7241b0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a71e070 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[70,61,72,74,69,61,6C,00] (8 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a71e180 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a71e1d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71e2b0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e300 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71e3e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e430 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(l___unnamed_2-_$s7partialMXM)-8 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71e510 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e560 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[41,00] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a71e700 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a71e750 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[50,00,00,80] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71e830 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e880 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partialMXM-_$s7partial1ACMn)-4 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71e960 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e9b0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(l___unnamed_3-_$s7partial1ACMn)-8 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71ea90 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71eae0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMa-_$s7partial1ACMn)-12 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71ebc0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71ec40 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMF-_$s7partial1ACMn)-16 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71ed20 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71ed70 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ee50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71eea0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ef80 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71efd0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f0b0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f100 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f1e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f230 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f310 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f360 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0A,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f440 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f490 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0A,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f570 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f5c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f6a0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f6f0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[01,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f7d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f820 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACACycfC-_$s7partial1ACMn)-56 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71f900 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f950 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71fa30 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71fa80 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71fb60 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71fbb0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1AC1fySbxlF-_$s7partial1ACMn)-64 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71fc90 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71fce0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71fdc0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724220 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[42,00] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a7243e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a724430 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[50,00,00,40] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724510 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724560 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partialMXM-_$s7partial1BCMn)-4 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a724640 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724690 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(l___unnamed_5-_$s7partial1BCMn)-8 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a724770 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7247c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCMa-_$s7partial1BCMn)-12 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7248a0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724920 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCMF-_$s7partial1BCMn)-16 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a724a00 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724a50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_symbolic _____ 7partial1AC-_$s7partial1BCMn)-20 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a724b30 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724b80 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724c60 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724cb0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724d90 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724de0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724ec0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724f10 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724ff0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725040 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725120 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725170 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725250 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7252a0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_$s7partial1BCMn)-48 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725380 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7253d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_$s7partial1BCMn)+8 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725500 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725550 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BC1fySbxlF-_$s7partial1BCMn)-56 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725630 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725680 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725760 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7257b0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_$s7partial1BCMn)-60 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725890 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7258e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_$s7partial1BCMn)-12 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7259c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725a10 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCACycfC-_$s7partial1BCMn)-68 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725af0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725b40 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725c20 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a7281d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:2 Value:0 ValueSize:1 MaxBytesToEmit:2>>,
      <MCDataFragment<MCFragment 0x7f9e6a728220 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[03,00] (2 bytes)>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a71fe10 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a71fe60 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ff40 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:8>,
      <MCAlignFragment<MCFragment 0x7f9e6a725c70 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a725cc0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725da0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:8>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a7215d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:2 Value:0 ValueSize:1 MaxBytesToEmit:2>>,
      <MCDataFragment<MCFragment 0x7f9e6a721620 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[01] (1 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721700 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721750 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_symbolic _____ 7partial1AC)-1 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a721830 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721880 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00] (1 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721960 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a7273d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:2 Value:0 ValueSize:1 MaxBytesToEmit:2>>,
      <MCDataFragment<MCFragment 0x7f9e6a727420 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[01] (1 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727500 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727550 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCMn-_symbolic _____ 7partial1BC)-1 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a727630 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727680 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00] (1 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727760 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a721a20 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a721a70 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:_symbolic _____ 7partial1AC-_$s7partial1ACMF Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a721b50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721ba0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721c80 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721cd0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[01,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721db0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721e00 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721ee0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721f30 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722010 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a7277b0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a727800 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:_symbolic _____ 7partial1BC-_$s7partial1BCMF Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7278e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727930 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_symbolic _____ 7partial1AC-_$s7partial1BCMF)-4 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a727a10 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727a60 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[01,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727b40 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727b90 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727c70 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727cc0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727da0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a727ef0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a727f40 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMn-l_type_metadata_table Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a728020 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a728070 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCMn-l_type_metadata_table)-4 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a728150 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a728360 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[17,B3,AC,3C,23,0E,8F,60,84,E9,E4,0A,0E,E3,AE,BB] (16 bytes)>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a728490 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a7284e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (16 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACN Kind:4>,
                <MCFixup Offset:8 Value:_$s7partial1BCN Kind:4>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a7286c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,40,07,02,05] (8 bytes)>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a717ac0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a717b10 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,19,00,02,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01,00,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (96 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:4>,
                <MCFixup Offset:8 Value: Kind:3>,
                <MCFixup Offset:32 Value: Kind:4>,
                <MCFixup Offset:40 Value: Kind:3>,
                <MCFixup Offset:64 Value: Kind:4>,
                <MCFixup Offset:72 Value: Kind:3>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a728af0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,01,7A,52,00,01,78,10,01,10,0C,07,08,90,01] (22 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:3>]>,
      <MCAlignFragment<MCFragment 0x7f9e6a717f60 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a728bd0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (25 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:3>,
                <MCFixup Offset:4 Value: Kind:3>,
                <MCFixup Offset:8 Value: Kind:4>,
                <MCFixup Offset:16 Value: Kind:4>]>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a728cb0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a728d40 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0E,10] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a728e20 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a728eb0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[86,02] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a728f90 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729020 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0D,06] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a717bf0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a729100 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (25 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:3>,
                <MCFixup Offset:4 Value: Kind:3>,
                <MCFixup Offset:8 Value: Kind:4>,
                <MCFixup Offset:16 Value: Kind:4>]>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a7291e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729270 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0E,10] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729350 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a7293e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[86,02] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a7294c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729550 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0D,06] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729630 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a7296c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[83,04] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a7297a0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729830 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[8D,03] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a718120 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a729910 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (25 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:3>,
                <MCFixup Offset:4 Value: Kind:3>,
                <MCFixup Offset:8 Value: Kind:4>,
                <MCFixup Offset:16 Value: Kind:4>]>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a7299f0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729a80 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0E,10] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729b60 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729bf0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[86,02] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729cd0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729d60 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0D,06] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729e40 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729ed0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[83,03] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a729fb0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a7287a0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>]>],
  Symbols:[(_main, Index:0, ),
           (_$s7partial1ACACycfC, Index:0, ),
           (_swift_allocObject, Index:0, ),
           (_$s7partial1ACACycfc, Index:0, ),
           (_$s7partial1AC1fySbxlF, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (_$s7partial1AC1fySbxlFTf4dd_n, Index:0, ),
           (, Index:0, ),
           (_$s7partial1ACfd, Index:0, ),
           (_$s7partial1ACfD, Index:0, ),
           (_swift_deallocClassInstance, Index:0, ),
           (_$s7partial1BC1fySbxlF, Index:0, ),
           (_$s7partial1BCfd, Index:0, ),
           (_$s7partial1BCACycfc, Index:0, ),
           (_$s7partial8makeAorBAA1ACyF, Index:0, ),
           (_$s7partial1BCMa, Index:0, ),
           (_$s7partial1gSbyF, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (_$s7partial1ACMf, Index:0, ),
           (LBB10_1, Index:0, ),
           (_$s7partial1BCMf, Index:0, ),
           (LBB10_3, Index:0, ),
           (_$ss6UInt16VN, Index:0, ),
           (_swift_release, Index:0, ),
           (LBB10_5, Index:0, ),
           (_$s7partial1ACMa, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (_$s7partial1BCML, Index:0, ),
           (_$s7partial1BCMaTm, Index:0, ),
           (_$s7partial1ACML, Index:0, ),
           (LBB14_2, Index:0, ),
           (_swift_getInitializedObjCClass, Index:0, ),
           (_$s7partial1BCACycfC, Index:0, ),
           (_$s7partial1BCfD, Index:0, ),
           (_$s7partial1ACMm, Index:0, ),
           (_OBJC_METACLASS_$__TtCs12_SwiftObject, Index:0, ),
           (__objc_empty_cache, Index:0, ),
           (l__METACLASS_DATA__TtC7partial1A, Index:0, ),
           (L___unnamed_1, Index:0, ),
           (l__DATA__TtC7partial1A, Index:0, ),
           (l___unnamed_2, Index:0, ),
           (_$s7partialMXM, Index:0, ),
           (l___unnamed_3, Index:0, ),
           (_$s7partial1ACMn, Index:0, ),
           (_$s7partial1ACMF, Index:0, ),
           (_$sBoWV, Index:0, ),
           (_OBJC_CLASS_$__TtCs12_SwiftObject, Index:0, ),
           (_symbolic _____ 7partial1AC, Index:0, ),
           (_$s7partial1BCMm, Index:0, ),
           (l__METACLASS_DATA__TtC7partial1B, Index:0, ),
           (L___unnamed_4, Index:0, ),
           (l__DATA__TtC7partial1B, Index:0, ),
           (l___unnamed_5, Index:0, ),
           (_$s7partial1BCMn, Index:0, ),
           (_$s7partial1BCMF, Index:0, ),
           (_symbolic _____ 7partial1BC, Index:0, ),
           (l_type_metadata_table, Index:0, ),
           (___swift_reflection_version, Index:0, ),
           (l_llvm.swift_module_hash, Index:0, ),
           (_objc_classes, Index:0, ),
           (_$s7partial1ACN, Index:0, ),
           (_$s7partial1BCN, Index:0, ),
           (L_OBJC_IMAGE_INFO, Index:0, ),
           (_$s7partial1ACACycfCTq, Index:0, ),
           (_$s7partial1AC1fySbxlFTq, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, )]>
assembler backend - post-relaxation
--
<MCAssembler
  Sections:[
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a71b470 LayoutOrder:0 Offset:0 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71b4c0 LayoutOrder:1 Offset:0 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,31,C0,5D,C3] (8 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6b946990 LayoutOrder:2 Offset:8 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b943250 LayoutOrder:3 Offset:16 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,EF,BE,10,00,00,00,BA,07,00,00,00,5D] (18 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b945030 LayoutOrder:4 Offset:34 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_swift_allocObject)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6bb4e580 LayoutOrder:5 Offset:39 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6bb43160 LayoutOrder:6 Offset:48 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,E8,5D,C3] (9 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6b945160 LayoutOrder:7 Offset:57 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b94bb10 LayoutOrder:8 Offset:64 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,48,89,F7,5D] (8 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b946350 LayoutOrder:9 Offset:72 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_$s7partial1AC1fySbxlFTf4dd_n)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a43cd30 LayoutOrder:10 Offset:77 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a4108d0 LayoutOrder:11 Offset:80 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,E8,5D,C3] (9 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6bb43240 LayoutOrder:12 Offset:89 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6bb4efa0 LayoutOrder:13 Offset:96 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,EF,BE,10,00,00,00,BA,07,00,00,00,5D] (18 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6bb42f00 LayoutOrder:14 Offset:114 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_swift_deallocClassInstance)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a71b720 LayoutOrder:15 Offset:119 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71bae0 LayoutOrder:16 Offset:128 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,31,C0,5D,C3] (8 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6b944de0 LayoutOrder:17 Offset:136 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b9466c0 LayoutOrder:18 Offset:144 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,E8,5D,C3] (9 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a4107e0 LayoutOrder:19 Offset:153 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a4112f0 LayoutOrder:20 Offset:160 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,E8,5D,C3] (9 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a718e60 LayoutOrder:21 Offset:169 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71b1e0 LayoutOrder:22 Offset:176 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,E8,00,00,00,00,BE,10,00,00,00,BA,07,00,00,00,48,89,C7,5D] (23 bytes),
        Fixups:[<MCFixup Offset:5 Value:_$s7partial1BCMa-4 Kind:136>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a71bd50 LayoutOrder:23 Offset:199 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_swift_allocObject)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6b9431d0 LayoutOrder:24 Offset:204 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b948d50 LayoutOrder:25 Offset:208 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,41,55,53,48,83,EC,10,E8,00,00,00,00,49,89,C5,66,C7,45,E8,09,00,48,8B,08,48,8D,05,00,00,00,00,48,39,C1] (38 bytes),
        Fixups:[<MCFixup Offset:12 Value:_$s7partial8makeAorBAA1ACyF-4 Kind:136>,
                <MCFixup Offset:31 Value:(_$s7partial1ACMf+16)-4 Kind:128>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b9483c0 LayoutOrder:26 Offset:246 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1128 <MCOperand Expr:(LBB10_1)> <MCOperand Imm:4>>>,
      <MCDataFragment<MCFragment 0x7f9e6b93ee20 LayoutOrder:27 Offset:248 HasInstructions:1 BundlePadding:0>
        Contents:[48,8D,05,00,00,00,00,48,39,C1] (10 bytes),
        Fixups:[<MCFixup Offset:3 Value:(_$s7partial1BCMf+16)-4 Kind:128>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b93ef00 LayoutOrder:28 Offset:258 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1128 <MCOperand Expr:(LBB10_3)> <MCOperand Imm:4>>>,
      <MCDataFragment<MCFragment 0x7f9e6b93f030 LayoutOrder:29 Offset:260 HasInstructions:1 BundlePadding:0>
        Contents:[48,8B,35,00,00,00,00,48,8D,7D,E8,FF,51,58,89,C3,4C,89,EF,E8,00,00,00,00] (24 bytes),
        Fixups:[<MCFixup Offset:3 Value:_$ss6UInt16VN@GOTPCREL-4 Kind:129>,
                <MCFixup Offset:20 Value:_swift_release-4 Kind:136>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b93f4c0 LayoutOrder:30 Offset:284 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1145 <MCOperand Expr:(LBB10_5)>>>,
      <MCDataFragment<MCFragment 0x7f9e6b945540 LayoutOrder:31 Offset:286 HasInstructions:1 BundlePadding:0>
        Contents:[E8,00,00,00,00,48,89,C3,4C,89,EF,E8,00,00,00,00,48,3B,1D,00,00,00,00,0F,94,C3] (26 bytes),
        Fixups:[<MCFixup Offset:1 Value:_$s7partial1ACMa-4 Kind:136>,
                <MCFixup Offset:12 Value:_swift_release-4 Kind:136>,
                <MCFixup Offset:19 Value:_$ss6UInt16VN@GOTPCREL-4 Kind:131>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b945620 LayoutOrder:32 Offset:312 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1145 <MCOperand Expr:(LBB10_5)>>>,
      <MCDataFragment<MCFragment 0x7f9e6b945750 LayoutOrder:33 Offset:314 HasInstructions:1 BundlePadding:0>
        Contents:[4C,89,EF,E8,00,00,00,00,31,DB,89,D8,48,83,C4,10,5B,41,5D,5D,C3] (21 bytes),
        Fixups:[<MCFixup Offset:4 Value:_swift_release-4 Kind:136>]>,
      <MCAlignFragment<MCFragment 0x7f9e6b94bbf0 LayoutOrder:34 Offset:335 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b94a6c0 LayoutOrder:35 Offset:336 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,53,50,48,89,FB,E8,00,00,00,00,48,39,D8,0F,94,C0,48,83,C4,08,5B,5D,C3] (27 bytes),
        Fixups:[<MCFixup Offset:10 Value:_$s7partial1ACMa-4 Kind:136>]>,
      <MCAlignFragment<MCFragment 0x7f9e6b94bc40 LayoutOrder:36 Offset:363 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b948790 LayoutOrder:37 Offset:368 HasInstructions:1 BundlePadding:0>
        Contents:[48,8D,35,00,00,00,00,48,8D,15,00,00,00,00] (14 bytes),
        Fixups:[<MCFixup Offset:3 Value:_$s7partial1BCML-4 Kind:128>,
                <MCFixup Offset:10 Value:(_$s7partial1BCMf+16)-4 Kind:128>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b908a50 LayoutOrder:38 Offset:382 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_$s7partial1BCMaTm)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a40d3d0 LayoutOrder:39 Offset:387 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a4113d0 LayoutOrder:40 Offset:400 HasInstructions:1 BundlePadding:0>
        Contents:[48,8D,35,00,00,00,00,48,8D,15,00,00,00,00] (14 bytes),
        Fixups:[<MCFixup Offset:3 Value:_$s7partial1ACML-4 Kind:128>,
                <MCFixup Offset:10 Value:(_$s7partial1ACMf+16)-4 Kind:128>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a411ad0 LayoutOrder:41 Offset:414 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_$s7partial1BCMaTm)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a4114c0 LayoutOrder:42 Offset:419 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a411510 LayoutOrder:43 Offset:432 HasInstructions:1 BundlePadding:0>
        Contents:[53,48,8B,06,48,85,C0] (7 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a4115f0 LayoutOrder:44 Offset:439 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1128 <MCOperand Expr:(LBB14_2)> <MCOperand Imm:5>>>,
      <MCDataFragment<MCFragment 0x7f9e6a412310 LayoutOrder:45 Offset:441 HasInstructions:1 BundlePadding:0>
        Contents:[48,89,F3,48,89,D7,E8,00,00,00,00,48,89,03,31,D2,5B,C3] (18 bytes),
        Fixups:[<MCFixup Offset:7 Value:_swift_getInitializedObjCClass-4 Kind:136>]>,
      <MCAlignFragment<MCFragment 0x7f9e6a71c470 LayoutOrder:46 Offset:427 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71bbc0 LayoutOrder:47 Offset:432 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,5D] (5 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a71c230 LayoutOrder:48 Offset:437 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_$s7partial1ACACycfC)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a71a070 LayoutOrder:49 Offset:442 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71c0a0 LayoutOrder:50 Offset:448 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,5D] (5 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a71c7e0 LayoutOrder:51 Offset:453 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_$s7partial1ACfD)>>>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a71ab60 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a71b770 LayoutOrder:1 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_OBJC_METACLASS_$__TtCs12_SwiftObject Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a718600 LayoutOrder:2 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71b850 LayoutOrder:3 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_OBJC_METACLASS_$__TtCs12_SwiftObject Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a718360 LayoutOrder:4 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71b930 LayoutOrder:5 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:__objc_empty_cache Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7183b0 LayoutOrder:6 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7187b0 LayoutOrder:7 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ba10 LayoutOrder:8 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a718890 LayoutOrder:9 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:l__METACLASS_DATA__TtC7partial1A Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a718290 LayoutOrder:10 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a71ff90 LayoutOrder:11 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a71ffe0 LayoutOrder:12 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACfD Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7200c0 LayoutOrder:13 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720110 LayoutOrder:14 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$sBoWV Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7201f0 LayoutOrder:15 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720240 LayoutOrder:16 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMm Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a720320 LayoutOrder:17 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720370 LayoutOrder:18 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_OBJC_CLASS_$__TtCs12_SwiftObject Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a720450 LayoutOrder:19 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7204a0 LayoutOrder:20 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:__objc_empty_cache Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a720580 LayoutOrder:21 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7205d0 LayoutOrder:22 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7206b0 LayoutOrder:23 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720700 LayoutOrder:24 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:l__DATA__TtC7partial1A+2 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7207e0 LayoutOrder:25 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720830 LayoutOrder:26 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720910 LayoutOrder:27 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720960 LayoutOrder:28 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720a40 LayoutOrder:29 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720a90 LayoutOrder:30 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720b70 LayoutOrder:31 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720bc0 LayoutOrder:32 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[07,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720ca0 LayoutOrder:33 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720cf0 LayoutOrder:34 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720dd0 LayoutOrder:35 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720e20 LayoutOrder:36 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[70,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720f00 LayoutOrder:37 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720f50 LayoutOrder:38 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721030 LayoutOrder:39 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721080 LayoutOrder:40 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMn Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a721160 LayoutOrder:41 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7211b0 LayoutOrder:42 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721290 LayoutOrder:43 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7212e0 LayoutOrder:44 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACACycfC Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7213c0 LayoutOrder:45 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721410 LayoutOrder:46 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1AC1fySbxlF Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7214f0 LayoutOrder:47 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a722090 LayoutOrder:48 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a7220e0 LayoutOrder:49 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_OBJC_METACLASS_$__TtCs12_SwiftObject Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7221c0 LayoutOrder:50 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722210 LayoutOrder:51 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMm Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7222f0 LayoutOrder:52 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722340 LayoutOrder:53 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:__objc_empty_cache Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a722420 LayoutOrder:54 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722470 LayoutOrder:55 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722550 LayoutOrder:56 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7225e0 LayoutOrder:57 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:l__METACLASS_DATA__TtC7partial1B Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7226c0 LayoutOrder:58 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a725df0 LayoutOrder:59 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a725e40 LayoutOrder:60 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BCfD Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725f20 LayoutOrder:61 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725f70 LayoutOrder:62 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$sBoWV Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a726050 LayoutOrder:63 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7260a0 LayoutOrder:64 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BCMm Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a726180 LayoutOrder:65 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7261d0 LayoutOrder:66 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMf+16 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7262b0 LayoutOrder:67 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726300 LayoutOrder:68 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:__objc_empty_cache Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7263e0 LayoutOrder:69 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726430 LayoutOrder:70 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726510 LayoutOrder:71 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726560 LayoutOrder:72 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:l__DATA__TtC7partial1B+2 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a726640 LayoutOrder:73 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726690 LayoutOrder:74 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726770 LayoutOrder:75 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7267c0 LayoutOrder:76 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7268a0 LayoutOrder:77 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7268f0 LayoutOrder:78 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7269d0 LayoutOrder:79 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726a20 LayoutOrder:80 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[07,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726b00 LayoutOrder:81 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726b50 LayoutOrder:82 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726c30 LayoutOrder:83 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726c80 LayoutOrder:84 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[70,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726d60 LayoutOrder:85 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726db0 LayoutOrder:86 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726e90 LayoutOrder:87 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726ee0 LayoutOrder:88 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BCMn Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a726fc0 LayoutOrder:89 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727010 LayoutOrder:90 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7270f0 LayoutOrder:91 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727140 LayoutOrder:92 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BCACycfC Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a727220 LayoutOrder:93 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727270 LayoutOrder:94 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BC1fySbxlF Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a727350 LayoutOrder:95 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a718970 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[5F,54,74,43,37,70,61,72,74,69,61,6C,31,41,00,5F,54,74,43,37,70,61,72,74,69,61,6C,31,42,00] (30 bytes)>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a71c360 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a718a50 LayoutOrder:1 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[81,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71c3b0 LayoutOrder:2 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71c910 LayoutOrder:3 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[28,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71b2c0 LayoutOrder:4 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71c9f0 LayoutOrder:5 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[28,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71b310 LayoutOrder:6 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cad0 LayoutOrder:7 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a719c30 LayoutOrder:8 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cbb0 LayoutOrder:9 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a719c80 LayoutOrder:10 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cc90 LayoutOrder:11 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:L___unnamed_1 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71b3a0 LayoutOrder:12 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cd70 LayoutOrder:13 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71b3f0 LayoutOrder:14 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71ce50 LayoutOrder:15 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71cf30 LayoutOrder:16 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cf80 LayoutOrder:17 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d060 LayoutOrder:18 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d0b0 LayoutOrder:19 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d190 LayoutOrder:20 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d1e0 LayoutOrder:21 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d2c0 LayoutOrder:22 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a71d310 LayoutOrder:23 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a71d360 LayoutOrder:24 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[80,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d440 LayoutOrder:25 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d490 LayoutOrder:26 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d570 LayoutOrder:27 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d5c0 LayoutOrder:28 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d6a0 LayoutOrder:29 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d6f0 LayoutOrder:30 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d7d0 LayoutOrder:31 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d820 LayoutOrder:32 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d900 LayoutOrder:33 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d950 LayoutOrder:34 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:L___unnamed_1 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71da30 LayoutOrder:35 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71da80 LayoutOrder:36 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71db60 LayoutOrder:37 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71dbb0 LayoutOrder:38 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71dc90 LayoutOrder:39 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71dce0 LayoutOrder:40 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ddc0 LayoutOrder:41 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71de10 LayoutOrder:42 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71def0 LayoutOrder:43 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71df40 LayoutOrder:44 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71e020 LayoutOrder:45 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a722710 LayoutOrder:46 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a722760 LayoutOrder:47 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[81,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722840 LayoutOrder:48 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722890 LayoutOrder:49 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[28,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722970 LayoutOrder:50 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7229c0 LayoutOrder:51 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[28,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722aa0 LayoutOrder:52 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722af0 LayoutOrder:53 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722bd0 LayoutOrder:54 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722c20 LayoutOrder:55 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722d00 LayoutOrder:56 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722d50 LayoutOrder:57 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:L___unnamed_4 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a722e30 LayoutOrder:58 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722e80 LayoutOrder:59 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722f60 LayoutOrder:60 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722fb0 LayoutOrder:61 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723090 LayoutOrder:62 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7230e0 LayoutOrder:63 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7231c0 LayoutOrder:64 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723210 LayoutOrder:65 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7232f0 LayoutOrder:66 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723340 LayoutOrder:67 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723420 LayoutOrder:68 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a7234a0 LayoutOrder:69 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a7234f0 LayoutOrder:70 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[80,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7235d0 LayoutOrder:71 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723620 LayoutOrder:72 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723700 LayoutOrder:73 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723750 LayoutOrder:74 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723830 LayoutOrder:75 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723880 LayoutOrder:76 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723960 LayoutOrder:77 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7239b0 LayoutOrder:78 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723a90 LayoutOrder:79 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723ae0 LayoutOrder:80 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:L___unnamed_4 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a723bc0 LayoutOrder:81 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723c10 LayoutOrder:82 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723cf0 LayoutOrder:83 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723d40 LayoutOrder:84 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723e20 LayoutOrder:85 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723e70 LayoutOrder:86 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723f50 LayoutOrder:87 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723fa0 LayoutOrder:88 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724080 LayoutOrder:89 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7240d0 LayoutOrder:90 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7241b0 LayoutOrder:91 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a71e070 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[70,61,72,74,69,61,6C,00] (8 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a71e180 LayoutOrder:1 Offset:18446744073709551615 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a71e1d0 LayoutOrder:2 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71e2b0 LayoutOrder:3 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e300 LayoutOrder:4 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71e3e0 LayoutOrder:5 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e430 LayoutOrder:6 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(l___unnamed_2-_$s7partialMXM)-8 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71e510 LayoutOrder:7 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e560 LayoutOrder:8 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[41,00] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a71e700 LayoutOrder:9 Offset:18446744073709551615 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a71e750 LayoutOrder:10 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[50,00,00,80] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71e830 LayoutOrder:11 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e880 LayoutOrder:12 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partialMXM-_$s7partial1ACMn)-4 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71e960 LayoutOrder:13 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e9b0 LayoutOrder:14 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(l___unnamed_3-_$s7partial1ACMn)-8 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71ea90 LayoutOrder:15 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71eae0 LayoutOrder:16 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMa-_$s7partial1ACMn)-12 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71ebc0 LayoutOrder:17 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71ec40 LayoutOrder:18 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMF-_$s7partial1ACMn)-16 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71ed20 LayoutOrder:19 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71ed70 LayoutOrder:20 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ee50 LayoutOrder:21 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71eea0 LayoutOrder:22 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ef80 LayoutOrder:23 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71efd0 LayoutOrder:24 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f0b0 LayoutOrder:25 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f100 LayoutOrder:26 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f1e0 LayoutOrder:27 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f230 LayoutOrder:28 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f310 LayoutOrder:29 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f360 LayoutOrder:30 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0A,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f440 LayoutOrder:31 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f490 LayoutOrder:32 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0A,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f570 LayoutOrder:33 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f5c0 LayoutOrder:34 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f6a0 LayoutOrder:35 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f6f0 LayoutOrder:36 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[01,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f7d0 LayoutOrder:37 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f820 LayoutOrder:38 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACACycfC-_$s7partial1ACMn)-56 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71f900 LayoutOrder:39 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f950 LayoutOrder:40 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71fa30 LayoutOrder:41 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71fa80 LayoutOrder:42 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71fb60 LayoutOrder:43 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71fbb0 LayoutOrder:44 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1AC1fySbxlF-_$s7partial1ACMn)-64 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71fc90 LayoutOrder:45 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71fce0 LayoutOrder:46 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71fdc0 LayoutOrder:47 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724220 LayoutOrder:48 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[42,00] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a7243e0 LayoutOrder:49 Offset:18446744073709551615 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a724430 LayoutOrder:50 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[50,00,00,40] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724510 LayoutOrder:51 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724560 LayoutOrder:52 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partialMXM-_$s7partial1BCMn)-4 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a724640 LayoutOrder:53 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724690 LayoutOrder:54 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(l___unnamed_5-_$s7partial1BCMn)-8 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a724770 LayoutOrder:55 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7247c0 LayoutOrder:56 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCMa-_$s7partial1BCMn)-12 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7248a0 LayoutOrder:57 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724920 LayoutOrder:58 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCMF-_$s7partial1BCMn)-16 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a724a00 LayoutOrder:59 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724a50 LayoutOrder:60 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_symbolic _____ 7partial1AC-_$s7partial1BCMn)-20 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a724b30 LayoutOrder:61 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724b80 LayoutOrder:62 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724c60 LayoutOrder:63 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724cb0 LayoutOrder:64 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724d90 LayoutOrder:65 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724de0 LayoutOrder:66 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724ec0 LayoutOrder:67 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724f10 LayoutOrder:68 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724ff0 LayoutOrder:69 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725040 LayoutOrder:70 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725120 LayoutOrder:71 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725170 LayoutOrder:72 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725250 LayoutOrder:73 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7252a0 LayoutOrder:74 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_$s7partial1BCMn)-48 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725380 LayoutOrder:75 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7253d0 LayoutOrder:76 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_$s7partial1BCMn)+8 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725500 LayoutOrder:77 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725550 LayoutOrder:78 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BC1fySbxlF-_$s7partial1BCMn)-56 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725630 LayoutOrder:79 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725680 LayoutOrder:80 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725760 LayoutOrder:81 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7257b0 LayoutOrder:82 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_$s7partial1BCMn)-60 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725890 LayoutOrder:83 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7258e0 LayoutOrder:84 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_$s7partial1BCMn)-12 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7259c0 LayoutOrder:85 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725a10 LayoutOrder:86 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCACycfC-_$s7partial1BCMn)-68 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725af0 LayoutOrder:87 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725b40 LayoutOrder:88 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725c20 LayoutOrder:89 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a7281d0 LayoutOrder:90 Offset:18446744073709551615 HasInstructions:0>
        Alignment:2 Value:0 ValueSize:1 MaxBytesToEmit:2>>,
      <MCDataFragment<MCFragment 0x7f9e6a728220 LayoutOrder:91 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[03,00] (2 bytes)>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a71fe10 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a71fe60 LayoutOrder:1 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ff40 LayoutOrder:2 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:8>,
      <MCAlignFragment<MCFragment 0x7f9e6a725c70 LayoutOrder:3 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a725cc0 LayoutOrder:4 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725da0 LayoutOrder:5 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:8>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a7215d0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:2 Value:0 ValueSize:1 MaxBytesToEmit:2>>,
      <MCDataFragment<MCFragment 0x7f9e6a721620 LayoutOrder:1 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[01] (1 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721700 LayoutOrder:2 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721750 LayoutOrder:3 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_symbolic _____ 7partial1AC)-1 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a721830 LayoutOrder:4 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721880 LayoutOrder:5 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00] (1 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721960 LayoutOrder:6 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a7273d0 LayoutOrder:7 Offset:18446744073709551615 HasInstructions:0>
        Alignment:2 Value:0 ValueSize:1 MaxBytesToEmit:2>>,
      <MCDataFragment<MCFragment 0x7f9e6a727420 LayoutOrder:8 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[01] (1 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727500 LayoutOrder:9 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727550 LayoutOrder:10 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCMn-_symbolic _____ 7partial1BC)-1 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a727630 LayoutOrder:11 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727680 LayoutOrder:12 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00] (1 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727760 LayoutOrder:13 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a721a20 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a721a70 LayoutOrder:1 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:_symbolic _____ 7partial1AC-_$s7partial1ACMF Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a721b50 LayoutOrder:2 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721ba0 LayoutOrder:3 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721c80 LayoutOrder:4 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721cd0 LayoutOrder:5 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[01,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721db0 LayoutOrder:6 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721e00 LayoutOrder:7 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721ee0 LayoutOrder:8 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721f30 LayoutOrder:9 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722010 LayoutOrder:10 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a7277b0 LayoutOrder:11 Offset:18446744073709551615 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a727800 LayoutOrder:12 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:_symbolic _____ 7partial1BC-_$s7partial1BCMF Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7278e0 LayoutOrder:13 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727930 LayoutOrder:14 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_symbolic _____ 7partial1AC-_$s7partial1BCMF)-4 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a727a10 LayoutOrder:15 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727a60 LayoutOrder:16 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[01,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727b40 LayoutOrder:17 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727b90 LayoutOrder:18 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727c70 LayoutOrder:19 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727cc0 LayoutOrder:20 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727da0 LayoutOrder:21 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a727ef0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a727f40 LayoutOrder:1 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMn-l_type_metadata_table Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a728020 LayoutOrder:2 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a728070 LayoutOrder:3 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCMn-l_type_metadata_table)-4 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a728150 LayoutOrder:4 Offset:18446744073709551615 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a728360 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[17,B3,AC,3C,23,0E,8F,60,84,E9,E4,0A,0E,E3,AE,BB] (16 bytes)>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a728490 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a7284e0 LayoutOrder:1 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (16 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACN Kind:4>,
                <MCFixup Offset:8 Value:_$s7partial1BCN Kind:4>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a7286c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,40,07,02,05] (8 bytes)>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a717ac0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a717b10 LayoutOrder:1 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,19,00,02,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01,00,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (96 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:4>,
                <MCFixup Offset:8 Value: Kind:3>,
                <MCFixup Offset:32 Value: Kind:4>,
                <MCFixup Offset:40 Value: Kind:3>,
                <MCFixup Offset:64 Value: Kind:4>,
                <MCFixup Offset:72 Value: Kind:3>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a728af0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,01,7A,52,00,01,78,10,01,10,0C,07,08,90,01] (22 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:3>]>,
      <MCAlignFragment<MCFragment 0x7f9e6a717f60 LayoutOrder:1 Offset:18446744073709551615 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a728bd0 LayoutOrder:2 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (25 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:3>,
                <MCFixup Offset:4 Value: Kind:3>,
                <MCFixup Offset:8 Value: Kind:4>,
                <MCFixup Offset:16 Value: Kind:4>]>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a728cb0 LayoutOrder:3 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a728d40 LayoutOrder:4 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0E,10] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a728e20 LayoutOrder:5 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a728eb0 LayoutOrder:6 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[86,02] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a728f90 LayoutOrder:7 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729020 LayoutOrder:8 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0D,06] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a717bf0 LayoutOrder:9 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a729100 LayoutOrder:10 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (25 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:3>,
                <MCFixup Offset:4 Value: Kind:3>,
                <MCFixup Offset:8 Value: Kind:4>,
                <MCFixup Offset:16 Value: Kind:4>]>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a7291e0 LayoutOrder:11 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729270 LayoutOrder:12 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0E,10] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729350 LayoutOrder:13 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a7293e0 LayoutOrder:14 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[86,02] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a7294c0 LayoutOrder:15 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729550 LayoutOrder:16 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0D,06] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729630 LayoutOrder:17 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a7296c0 LayoutOrder:18 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[83,04] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a7297a0 LayoutOrder:19 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729830 LayoutOrder:20 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[8D,03] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a718120 LayoutOrder:21 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a729910 LayoutOrder:22 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (25 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:3>,
                <MCFixup Offset:4 Value: Kind:3>,
                <MCFixup Offset:8 Value: Kind:4>,
                <MCFixup Offset:16 Value: Kind:4>]>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a7299f0 LayoutOrder:23 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729a80 LayoutOrder:24 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0E,10] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729b60 LayoutOrder:25 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729bf0 LayoutOrder:26 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[86,02] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729cd0 LayoutOrder:27 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729d60 LayoutOrder:28 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0D,06] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729e40 LayoutOrder:29 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729ed0 LayoutOrder:30 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[83,03] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a729fb0 LayoutOrder:31 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a7287a0 LayoutOrder:32 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>]>],
  Symbols:[(_main, Index:0, ),
           (_$s7partial1ACACycfC, Index:0, ),
           (_swift_allocObject, Index:0, ),
           (_$s7partial1ACACycfc, Index:0, ),
           (_$s7partial1AC1fySbxlF, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (_$s7partial1AC1fySbxlFTf4dd_n, Index:0, ),
           (, Index:0, ),
           (_$s7partial1ACfd, Index:0, ),
           (_$s7partial1ACfD, Index:0, ),
           (_swift_deallocClassInstance, Index:0, ),
           (_$s7partial1BC1fySbxlF, Index:0, ),
           (_$s7partial1BCfd, Index:0, ),
           (_$s7partial1BCACycfc, Index:0, ),
           (_$s7partial8makeAorBAA1ACyF, Index:0, ),
           (_$s7partial1BCMa, Index:0, ),
           (_$s7partial1gSbyF, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (_$s7partial1ACMf, Index:0, ),
           (LBB10_1, Index:0, ),
           (_$s7partial1BCMf, Index:0, ),
           (LBB10_3, Index:0, ),
           (_$ss6UInt16VN, Index:0, ),
           (_swift_release, Index:0, ),
           (LBB10_5, Index:0, ),
           (_$s7partial1ACMa, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (_$s7partial1BCML, Index:0, ),
           (_$s7partial1BCMaTm, Index:0, ),
           (_$s7partial1ACML, Index:0, ),
           (LBB14_2, Index:0, ),
           (_swift_getInitializedObjCClass, Index:0, ),
           (_$s7partial1BCACycfC, Index:0, ),
           (_$s7partial1BCfD, Index:0, ),
           (_$s7partial1ACMm, Index:0, ),
           (_OBJC_METACLASS_$__TtCs12_SwiftObject, Index:0, ),
           (__objc_empty_cache, Index:0, ),
           (l__METACLASS_DATA__TtC7partial1A, Index:0, ),
           (L___unnamed_1, Index:0, ),
           (l__DATA__TtC7partial1A, Index:0, ),
           (l___unnamed_2, Index:0, ),
           (_$s7partialMXM, Index:0, ),
           (l___unnamed_3, Index:0, ),
           (_$s7partial1ACMn, Index:0, ),
           (_$s7partial1ACMF, Index:0, ),
           (_$sBoWV, Index:0, ),
           (_OBJC_CLASS_$__TtCs12_SwiftObject, Index:0, ),
           (_symbolic _____ 7partial1AC, Index:0, ),
           (_$s7partial1BCMm, Index:0, ),
           (l__METACLASS_DATA__TtC7partial1B, Index:0, ),
           (L___unnamed_4, Index:0, ),
           (l__DATA__TtC7partial1B, Index:0, ),
           (l___unnamed_5, Index:0, ),
           (_$s7partial1BCMn, Index:0, ),
           (_$s7partial1BCMF, Index:0, ),
           (_symbolic _____ 7partial1BC, Index:0, ),
           (l_type_metadata_table, Index:0, ),
           (___swift_reflection_version, Index:0, ),
           (l_llvm.swift_module_hash, Index:0, ),
           (_objc_classes, Index:0, ),
           (_$s7partial1ACN, Index:0, ),
           (_$s7partial1BCN, Index:0, ),
           (L_OBJC_IMAGE_INFO, Index:0, ),
           (_$s7partial1ACACycfCTq, Index:0, ),
           (_$s7partial1AC1fySbxlFTq, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, )]>
assembler backend - final-layout
--
<MCAssembler
  Sections:[
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a71b470 LayoutOrder:0 Offset:0 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71b4c0 LayoutOrder:1 Offset:0 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,31,C0,5D,C3] (8 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6b946990 LayoutOrder:2 Offset:8 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b943250 LayoutOrder:3 Offset:16 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,EF,BE,10,00,00,00,BA,07,00,00,00,5D] (18 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b945030 LayoutOrder:4 Offset:34 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_swift_allocObject)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6bb4e580 LayoutOrder:5 Offset:39 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6bb43160 LayoutOrder:6 Offset:48 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,E8,5D,C3] (9 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6b945160 LayoutOrder:7 Offset:57 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b94bb10 LayoutOrder:8 Offset:64 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,48,89,F7,5D] (8 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b946350 LayoutOrder:9 Offset:72 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_$s7partial1AC1fySbxlFTf4dd_n)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a43cd30 LayoutOrder:10 Offset:77 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a4108d0 LayoutOrder:11 Offset:80 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,E8,5D,C3] (9 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6bb43240 LayoutOrder:12 Offset:89 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6bb4efa0 LayoutOrder:13 Offset:96 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,EF,BE,10,00,00,00,BA,07,00,00,00,5D] (18 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6bb42f00 LayoutOrder:14 Offset:114 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_swift_deallocClassInstance)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a71b720 LayoutOrder:15 Offset:119 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71bae0 LayoutOrder:16 Offset:128 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,31,C0,5D,C3] (8 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6b944de0 LayoutOrder:17 Offset:136 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b9466c0 LayoutOrder:18 Offset:144 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,E8,5D,C3] (9 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a4107e0 LayoutOrder:19 Offset:153 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a4112f0 LayoutOrder:20 Offset:160 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,4C,89,E8,5D,C3] (9 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a718e60 LayoutOrder:21 Offset:169 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71b1e0 LayoutOrder:22 Offset:176 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,E8,00,00,00,00,BE,10,00,00,00,BA,07,00,00,00,48,89,C7,5D] (23 bytes),
        Fixups:[<MCFixup Offset:5 Value:_$s7partial1BCMa-4 Kind:136>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a71bd50 LayoutOrder:23 Offset:199 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_swift_allocObject)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6b9431d0 LayoutOrder:24 Offset:204 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b948d50 LayoutOrder:25 Offset:208 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,41,55,53,48,83,EC,10,E8,00,00,00,00,49,89,C5,66,C7,45,E8,09,00,48,8B,08,48,8D,05,00,00,00,00,48,39,C1] (38 bytes),
        Fixups:[<MCFixup Offset:12 Value:_$s7partial8makeAorBAA1ACyF-4 Kind:136>,
                <MCFixup Offset:31 Value:(_$s7partial1ACMf+16)-4 Kind:128>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b9483c0 LayoutOrder:26 Offset:246 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1128 <MCOperand Expr:(LBB10_1)> <MCOperand Imm:4>>>,
      <MCDataFragment<MCFragment 0x7f9e6b93ee20 LayoutOrder:27 Offset:248 HasInstructions:1 BundlePadding:0>
        Contents:[48,8D,05,00,00,00,00,48,39,C1] (10 bytes),
        Fixups:[<MCFixup Offset:3 Value:(_$s7partial1BCMf+16)-4 Kind:128>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b93ef00 LayoutOrder:28 Offset:258 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1128 <MCOperand Expr:(LBB10_3)> <MCOperand Imm:4>>>,
      <MCDataFragment<MCFragment 0x7f9e6b93f030 LayoutOrder:29 Offset:260 HasInstructions:1 BundlePadding:0>
        Contents:[48,8B,35,00,00,00,00,48,8D,7D,E8,FF,51,58,89,C3,4C,89,EF,E8,00,00,00,00] (24 bytes),
        Fixups:[<MCFixup Offset:3 Value:_$ss6UInt16VN@GOTPCREL-4 Kind:129>,
                <MCFixup Offset:20 Value:_swift_release-4 Kind:136>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b93f4c0 LayoutOrder:30 Offset:284 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1145 <MCOperand Expr:(LBB10_5)>>>,
      <MCDataFragment<MCFragment 0x7f9e6b945540 LayoutOrder:31 Offset:286 HasInstructions:1 BundlePadding:0>
        Contents:[E8,00,00,00,00,48,89,C3,4C,89,EF,E8,00,00,00,00,48,3B,1D,00,00,00,00,0F,94,C3] (26 bytes),
        Fixups:[<MCFixup Offset:1 Value:_$s7partial1ACMa-4 Kind:136>,
                <MCFixup Offset:12 Value:_swift_release-4 Kind:136>,
                <MCFixup Offset:19 Value:_$ss6UInt16VN@GOTPCREL-4 Kind:131>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b945620 LayoutOrder:32 Offset:312 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1145 <MCOperand Expr:(LBB10_5)>>>,
      <MCDataFragment<MCFragment 0x7f9e6b945750 LayoutOrder:33 Offset:314 HasInstructions:1 BundlePadding:0>
        Contents:[4C,89,EF,E8,00,00,00,00,31,DB,89,D8,48,83,C4,10,5B,41,5D,5D,C3] (21 bytes),
        Fixups:[<MCFixup Offset:4 Value:_swift_release-4 Kind:136>]>,
      <MCAlignFragment<MCFragment 0x7f9e6b94bbf0 LayoutOrder:34 Offset:335 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b94a6c0 LayoutOrder:35 Offset:336 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,53,50,48,89,FB,E8,00,00,00,00,48,39,D8,0F,94,C0,48,83,C4,08,5B,5D,C3] (27 bytes),
        Fixups:[<MCFixup Offset:10 Value:_$s7partial1ACMa-4 Kind:136>]>,
      <MCAlignFragment<MCFragment 0x7f9e6b94bc40 LayoutOrder:36 Offset:363 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6b948790 LayoutOrder:37 Offset:368 HasInstructions:1 BundlePadding:0>
        Contents:[48,8D,35,00,00,00,00,48,8D,15,00,00,00,00] (14 bytes),
        Fixups:[<MCFixup Offset:3 Value:_$s7partial1BCML-4 Kind:128>,
                <MCFixup Offset:10 Value:(_$s7partial1BCMf+16)-4 Kind:128>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6b908a50 LayoutOrder:38 Offset:382 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_$s7partial1BCMaTm)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a40d3d0 LayoutOrder:39 Offset:387 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a4113d0 LayoutOrder:40 Offset:400 HasInstructions:1 BundlePadding:0>
        Contents:[48,8D,35,00,00,00,00,48,8D,15,00,00,00,00] (14 bytes),
        Fixups:[<MCFixup Offset:3 Value:_$s7partial1ACML-4 Kind:128>,
                <MCFixup Offset:10 Value:(_$s7partial1ACMf+16)-4 Kind:128>]>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a411ad0 LayoutOrder:41 Offset:414 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_$s7partial1BCMaTm)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a4114c0 LayoutOrder:42 Offset:419 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a411510 LayoutOrder:43 Offset:432 HasInstructions:1 BundlePadding:0>
        Contents:[53,48,8B,06,48,85,C0] (7 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a4115f0 LayoutOrder:44 Offset:439 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1128 <MCOperand Expr:(LBB14_2)> <MCOperand Imm:5>>>,
      <MCDataFragment<MCFragment 0x7f9e6a412310 LayoutOrder:45 Offset:441 HasInstructions:1 BundlePadding:0>
        Contents:[48,89,F3,48,89,D7,E8,00,00,00,00,48,89,03,31,D2,5B,C3] (18 bytes),
        Fixups:[<MCFixup Offset:7 Value:_swift_getInitializedObjCClass-4 Kind:136>]>,
      <MCAlignFragment<MCFragment 0x7f9e6a71c470 LayoutOrder:46 Offset:459 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71bbc0 LayoutOrder:47 Offset:464 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,5D] (5 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a71c230 LayoutOrder:48 Offset:469 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_$s7partial1ACACycfC)>>>,
      <MCAlignFragment<MCFragment 0x7f9e6a71a070 LayoutOrder:49 Offset:474 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7f9e6a71c0a0 LayoutOrder:50 Offset:480 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,5D] (5 bytes)>,
      <MCRelaxableFragment<MCFragment 0x7f9e6a71c7e0 LayoutOrder:51 Offset:485 HasInstructions:1 BundlePadding:0>
        Inst:<MCInst #1147 <MCOperand Expr:(_$s7partial1ACfD)>>>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a71ab60 LayoutOrder:0 Offset:0 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a71b770 LayoutOrder:1 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_OBJC_METACLASS_$__TtCs12_SwiftObject Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a718600 LayoutOrder:2 Offset:8 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71b850 LayoutOrder:3 Offset:8 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_OBJC_METACLASS_$__TtCs12_SwiftObject Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a718360 LayoutOrder:4 Offset:16 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71b930 LayoutOrder:5 Offset:16 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:__objc_empty_cache Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7183b0 LayoutOrder:6 Offset:24 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7187b0 LayoutOrder:7 Offset:24 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ba10 LayoutOrder:8 Offset:32 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a718890 LayoutOrder:9 Offset:32 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:l__METACLASS_DATA__TtC7partial1A Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a718290 LayoutOrder:10 Offset:40 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a71ff90 LayoutOrder:11 Offset:40 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a71ffe0 LayoutOrder:12 Offset:40 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACfD Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7200c0 LayoutOrder:13 Offset:48 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720110 LayoutOrder:14 Offset:48 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$sBoWV Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7201f0 LayoutOrder:15 Offset:56 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720240 LayoutOrder:16 Offset:56 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMm Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a720320 LayoutOrder:17 Offset:64 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720370 LayoutOrder:18 Offset:64 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_OBJC_CLASS_$__TtCs12_SwiftObject Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a720450 LayoutOrder:19 Offset:72 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7204a0 LayoutOrder:20 Offset:72 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:__objc_empty_cache Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a720580 LayoutOrder:21 Offset:80 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7205d0 LayoutOrder:22 Offset:80 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7206b0 LayoutOrder:23 Offset:88 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720700 LayoutOrder:24 Offset:88 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:l__DATA__TtC7partial1A+2 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7207e0 LayoutOrder:25 Offset:96 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720830 LayoutOrder:26 Offset:96 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720910 LayoutOrder:27 Offset:100 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720960 LayoutOrder:28 Offset:100 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720a40 LayoutOrder:29 Offset:104 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720a90 LayoutOrder:30 Offset:104 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720b70 LayoutOrder:31 Offset:108 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720bc0 LayoutOrder:32 Offset:108 HasInstructions:0 BundlePadding:0>
        Contents:[07,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720ca0 LayoutOrder:33 Offset:110 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720cf0 LayoutOrder:34 Offset:110 HasInstructions:0 BundlePadding:0>
        Contents:[00,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720dd0 LayoutOrder:35 Offset:112 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720e20 LayoutOrder:36 Offset:112 HasInstructions:0 BundlePadding:0>
        Contents:[70,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a720f00 LayoutOrder:37 Offset:116 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a720f50 LayoutOrder:38 Offset:116 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721030 LayoutOrder:39 Offset:120 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721080 LayoutOrder:40 Offset:120 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMn Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a721160 LayoutOrder:41 Offset:128 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7211b0 LayoutOrder:42 Offset:128 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721290 LayoutOrder:43 Offset:136 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7212e0 LayoutOrder:44 Offset:136 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACACycfC Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7213c0 LayoutOrder:45 Offset:144 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721410 LayoutOrder:46 Offset:144 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1AC1fySbxlF Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7214f0 LayoutOrder:47 Offset:152 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a722090 LayoutOrder:48 Offset:152 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a7220e0 LayoutOrder:49 Offset:152 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_OBJC_METACLASS_$__TtCs12_SwiftObject Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7221c0 LayoutOrder:50 Offset:160 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722210 LayoutOrder:51 Offset:160 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMm Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7222f0 LayoutOrder:52 Offset:168 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722340 LayoutOrder:53 Offset:168 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:__objc_empty_cache Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a722420 LayoutOrder:54 Offset:176 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722470 LayoutOrder:55 Offset:176 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722550 LayoutOrder:56 Offset:184 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7225e0 LayoutOrder:57 Offset:184 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:l__METACLASS_DATA__TtC7partial1B Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7226c0 LayoutOrder:58 Offset:192 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a725df0 LayoutOrder:59 Offset:192 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a725e40 LayoutOrder:60 Offset:192 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BCfD Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725f20 LayoutOrder:61 Offset:200 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725f70 LayoutOrder:62 Offset:200 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$sBoWV Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a726050 LayoutOrder:63 Offset:208 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7260a0 LayoutOrder:64 Offset:208 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BCMm Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a726180 LayoutOrder:65 Offset:216 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7261d0 LayoutOrder:66 Offset:216 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMf+16 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7262b0 LayoutOrder:67 Offset:224 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726300 LayoutOrder:68 Offset:224 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:__objc_empty_cache Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7263e0 LayoutOrder:69 Offset:232 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726430 LayoutOrder:70 Offset:232 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726510 LayoutOrder:71 Offset:240 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726560 LayoutOrder:72 Offset:240 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:l__DATA__TtC7partial1B+2 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a726640 LayoutOrder:73 Offset:248 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726690 LayoutOrder:74 Offset:248 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726770 LayoutOrder:75 Offset:252 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7267c0 LayoutOrder:76 Offset:252 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7268a0 LayoutOrder:77 Offset:256 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7268f0 LayoutOrder:78 Offset:256 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7269d0 LayoutOrder:79 Offset:260 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726a20 LayoutOrder:80 Offset:260 HasInstructions:0 BundlePadding:0>
        Contents:[07,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726b00 LayoutOrder:81 Offset:262 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726b50 LayoutOrder:82 Offset:262 HasInstructions:0 BundlePadding:0>
        Contents:[00,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726c30 LayoutOrder:83 Offset:264 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726c80 LayoutOrder:84 Offset:264 HasInstructions:0 BundlePadding:0>
        Contents:[70,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726d60 LayoutOrder:85 Offset:268 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726db0 LayoutOrder:86 Offset:268 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a726e90 LayoutOrder:87 Offset:272 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a726ee0 LayoutOrder:88 Offset:272 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BCMn Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a726fc0 LayoutOrder:89 Offset:280 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727010 LayoutOrder:90 Offset:280 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7270f0 LayoutOrder:91 Offset:288 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727140 LayoutOrder:92 Offset:288 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BCACycfC Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a727220 LayoutOrder:93 Offset:296 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727270 LayoutOrder:94 Offset:296 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1BC1fySbxlF Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a727350 LayoutOrder:95 Offset:304 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a718970 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[5F,54,74,43,37,70,61,72,74,69,61,6C,31,41,00,5F,54,74,43,37,70,61,72,74,69,61,6C,31,42,00] (30 bytes)>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a71c360 LayoutOrder:0 Offset:0 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a718a50 LayoutOrder:1 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[81,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71c3b0 LayoutOrder:2 Offset:4 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71c910 LayoutOrder:3 Offset:4 HasInstructions:0 BundlePadding:0>
        Contents:[28,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71b2c0 LayoutOrder:4 Offset:8 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71c9f0 LayoutOrder:5 Offset:8 HasInstructions:0 BundlePadding:0>
        Contents:[28,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71b310 LayoutOrder:6 Offset:12 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cad0 LayoutOrder:7 Offset:12 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a719c30 LayoutOrder:8 Offset:16 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cbb0 LayoutOrder:9 Offset:16 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a719c80 LayoutOrder:10 Offset:24 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cc90 LayoutOrder:11 Offset:24 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:L___unnamed_1 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71b3a0 LayoutOrder:12 Offset:32 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cd70 LayoutOrder:13 Offset:32 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71b3f0 LayoutOrder:14 Offset:40 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71ce50 LayoutOrder:15 Offset:40 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71cf30 LayoutOrder:16 Offset:48 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71cf80 LayoutOrder:17 Offset:48 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d060 LayoutOrder:18 Offset:56 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d0b0 LayoutOrder:19 Offset:56 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d190 LayoutOrder:20 Offset:64 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d1e0 LayoutOrder:21 Offset:64 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d2c0 LayoutOrder:22 Offset:72 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a71d310 LayoutOrder:23 Offset:72 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a71d360 LayoutOrder:24 Offset:72 HasInstructions:0 BundlePadding:0>
        Contents:[80,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d440 LayoutOrder:25 Offset:76 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d490 LayoutOrder:26 Offset:76 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d570 LayoutOrder:27 Offset:80 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d5c0 LayoutOrder:28 Offset:80 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d6a0 LayoutOrder:29 Offset:84 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d6f0 LayoutOrder:30 Offset:84 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d7d0 LayoutOrder:31 Offset:88 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d820 LayoutOrder:32 Offset:88 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71d900 LayoutOrder:33 Offset:96 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71d950 LayoutOrder:34 Offset:96 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:L___unnamed_1 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71da30 LayoutOrder:35 Offset:104 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71da80 LayoutOrder:36 Offset:104 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71db60 LayoutOrder:37 Offset:112 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71dbb0 LayoutOrder:38 Offset:112 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71dc90 LayoutOrder:39 Offset:120 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71dce0 LayoutOrder:40 Offset:120 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ddc0 LayoutOrder:41 Offset:128 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71de10 LayoutOrder:42 Offset:128 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71def0 LayoutOrder:43 Offset:136 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71df40 LayoutOrder:44 Offset:136 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71e020 LayoutOrder:45 Offset:144 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a722710 LayoutOrder:46 Offset:144 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a722760 LayoutOrder:47 Offset:144 HasInstructions:0 BundlePadding:0>
        Contents:[81,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722840 LayoutOrder:48 Offset:148 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722890 LayoutOrder:49 Offset:148 HasInstructions:0 BundlePadding:0>
        Contents:[28,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722970 LayoutOrder:50 Offset:152 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7229c0 LayoutOrder:51 Offset:152 HasInstructions:0 BundlePadding:0>
        Contents:[28,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722aa0 LayoutOrder:52 Offset:156 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722af0 LayoutOrder:53 Offset:156 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722bd0 LayoutOrder:54 Offset:160 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722c20 LayoutOrder:55 Offset:160 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722d00 LayoutOrder:56 Offset:168 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722d50 LayoutOrder:57 Offset:168 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:L___unnamed_4 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a722e30 LayoutOrder:58 Offset:176 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722e80 LayoutOrder:59 Offset:176 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722f60 LayoutOrder:60 Offset:184 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a722fb0 LayoutOrder:61 Offset:184 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723090 LayoutOrder:62 Offset:192 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7230e0 LayoutOrder:63 Offset:192 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7231c0 LayoutOrder:64 Offset:200 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723210 LayoutOrder:65 Offset:200 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7232f0 LayoutOrder:66 Offset:208 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723340 LayoutOrder:67 Offset:208 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723420 LayoutOrder:68 Offset:216 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a7234a0 LayoutOrder:69 Offset:216 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a7234f0 LayoutOrder:70 Offset:216 HasInstructions:0 BundlePadding:0>
        Contents:[80,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7235d0 LayoutOrder:71 Offset:220 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723620 LayoutOrder:72 Offset:220 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723700 LayoutOrder:73 Offset:224 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723750 LayoutOrder:74 Offset:224 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723830 LayoutOrder:75 Offset:228 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723880 LayoutOrder:76 Offset:228 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723960 LayoutOrder:77 Offset:232 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7239b0 LayoutOrder:78 Offset:232 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723a90 LayoutOrder:79 Offset:240 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723ae0 LayoutOrder:80 Offset:240 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes),
        Fixups:[<MCFixup Offset:0 Value:L___unnamed_4 Kind:4>]>,
      <MCFillFragment<MCFragment 0x7f9e6a723bc0 LayoutOrder:81 Offset:248 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723c10 LayoutOrder:82 Offset:248 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723cf0 LayoutOrder:83 Offset:256 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723d40 LayoutOrder:84 Offset:256 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723e20 LayoutOrder:85 Offset:264 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723e70 LayoutOrder:86 Offset:264 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a723f50 LayoutOrder:87 Offset:272 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a723fa0 LayoutOrder:88 Offset:272 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724080 LayoutOrder:89 Offset:280 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7240d0 LayoutOrder:90 Offset:280 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00] (8 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a7241b0 LayoutOrder:91 Offset:288 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a71e070 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[70,61,72,74,69,61,6C,00] (8 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a71e180 LayoutOrder:1 Offset:8 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a71e1d0 LayoutOrder:2 Offset:8 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71e2b0 LayoutOrder:3 Offset:12 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e300 LayoutOrder:4 Offset:12 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71e3e0 LayoutOrder:5 Offset:16 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e430 LayoutOrder:6 Offset:16 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(l___unnamed_2-_$s7partialMXM)-8 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71e510 LayoutOrder:7 Offset:20 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e560 LayoutOrder:8 Offset:20 HasInstructions:0 BundlePadding:0>
        Contents:[41,00] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a71e700 LayoutOrder:9 Offset:22 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a71e750 LayoutOrder:10 Offset:24 HasInstructions:0 BundlePadding:0>
        Contents:[50,00,00,80] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71e830 LayoutOrder:11 Offset:28 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e880 LayoutOrder:12 Offset:28 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partialMXM-_$s7partial1ACMn)-4 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71e960 LayoutOrder:13 Offset:32 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71e9b0 LayoutOrder:14 Offset:32 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(l___unnamed_3-_$s7partial1ACMn)-8 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71ea90 LayoutOrder:15 Offset:36 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71eae0 LayoutOrder:16 Offset:36 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMa-_$s7partial1ACMn)-12 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71ebc0 LayoutOrder:17 Offset:40 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71ec40 LayoutOrder:18 Offset:40 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMF-_$s7partial1ACMn)-16 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71ed20 LayoutOrder:19 Offset:44 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71ed70 LayoutOrder:20 Offset:44 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ee50 LayoutOrder:21 Offset:48 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71eea0 LayoutOrder:22 Offset:48 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ef80 LayoutOrder:23 Offset:52 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71efd0 LayoutOrder:24 Offset:52 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f0b0 LayoutOrder:25 Offset:56 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f100 LayoutOrder:26 Offset:56 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f1e0 LayoutOrder:27 Offset:60 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f230 LayoutOrder:28 Offset:60 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f310 LayoutOrder:29 Offset:64 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f360 LayoutOrder:30 Offset:64 HasInstructions:0 BundlePadding:0>
        Contents:[0A,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f440 LayoutOrder:31 Offset:68 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f490 LayoutOrder:32 Offset:68 HasInstructions:0 BundlePadding:0>
        Contents:[0A,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f570 LayoutOrder:33 Offset:72 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f5c0 LayoutOrder:34 Offset:72 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f6a0 LayoutOrder:35 Offset:76 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f6f0 LayoutOrder:36 Offset:76 HasInstructions:0 BundlePadding:0>
        Contents:[01,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71f7d0 LayoutOrder:37 Offset:80 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f820 LayoutOrder:38 Offset:80 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACACycfC-_$s7partial1ACMn)-56 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71f900 LayoutOrder:39 Offset:84 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71f950 LayoutOrder:40 Offset:84 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71fa30 LayoutOrder:41 Offset:84 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71fa80 LayoutOrder:42 Offset:84 HasInstructions:0 BundlePadding:0>
        Contents:[10,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71fb60 LayoutOrder:43 Offset:88 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71fbb0 LayoutOrder:44 Offset:88 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1AC1fySbxlF-_$s7partial1ACMn)-64 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a71fc90 LayoutOrder:45 Offset:92 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a71fce0 LayoutOrder:46 Offset:92 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71fdc0 LayoutOrder:47 Offset:92 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724220 LayoutOrder:48 Offset:92 HasInstructions:0 BundlePadding:0>
        Contents:[42,00] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a7243e0 LayoutOrder:49 Offset:94 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a724430 LayoutOrder:50 Offset:96 HasInstructions:0 BundlePadding:0>
        Contents:[50,00,00,40] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724510 LayoutOrder:51 Offset:100 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724560 LayoutOrder:52 Offset:100 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partialMXM-_$s7partial1BCMn)-4 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a724640 LayoutOrder:53 Offset:104 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724690 LayoutOrder:54 Offset:104 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(l___unnamed_5-_$s7partial1BCMn)-8 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a724770 LayoutOrder:55 Offset:108 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7247c0 LayoutOrder:56 Offset:108 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCMa-_$s7partial1BCMn)-12 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7248a0 LayoutOrder:57 Offset:112 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724920 LayoutOrder:58 Offset:112 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCMF-_$s7partial1BCMn)-16 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a724a00 LayoutOrder:59 Offset:116 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724a50 LayoutOrder:60 Offset:116 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_symbolic _____ 7partial1AC-_$s7partial1BCMn)-20 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a724b30 LayoutOrder:61 Offset:120 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724b80 LayoutOrder:62 Offset:120 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724c60 LayoutOrder:63 Offset:124 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724cb0 LayoutOrder:64 Offset:124 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724d90 LayoutOrder:65 Offset:128 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724de0 LayoutOrder:66 Offset:128 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724ec0 LayoutOrder:67 Offset:132 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a724f10 LayoutOrder:68 Offset:132 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a724ff0 LayoutOrder:69 Offset:136 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725040 LayoutOrder:70 Offset:136 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725120 LayoutOrder:71 Offset:140 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725170 LayoutOrder:72 Offset:140 HasInstructions:0 BundlePadding:0>
        Contents:[02,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725250 LayoutOrder:73 Offset:144 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7252a0 LayoutOrder:74 Offset:144 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_$s7partial1BCMn)-48 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725380 LayoutOrder:75 Offset:148 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7253d0 LayoutOrder:76 Offset:148 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_$s7partial1BCMn)+8 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725500 LayoutOrder:77 Offset:152 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725550 LayoutOrder:78 Offset:152 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BC1fySbxlF-_$s7partial1BCMn)-56 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725630 LayoutOrder:79 Offset:156 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725680 LayoutOrder:80 Offset:156 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725760 LayoutOrder:81 Offset:156 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7257b0 LayoutOrder:82 Offset:156 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_$s7partial1BCMn)-60 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725890 LayoutOrder:83 Offset:160 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a7258e0 LayoutOrder:84 Offset:160 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_$s7partial1BCMn)-12 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7259c0 LayoutOrder:85 Offset:164 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725a10 LayoutOrder:86 Offset:164 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCACycfC-_$s7partial1BCMn)-68 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a725af0 LayoutOrder:87 Offset:168 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a725b40 LayoutOrder:88 Offset:168 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725c20 LayoutOrder:89 Offset:168 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a7281d0 LayoutOrder:90 Offset:168 HasInstructions:0>
        Alignment:2 Value:0 ValueSize:1 MaxBytesToEmit:2>>,
      <MCDataFragment<MCFragment 0x7f9e6a728220 LayoutOrder:91 Offset:168 HasInstructions:0 BundlePadding:0>
        Contents:[03,00] (2 bytes)>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a71fe10 LayoutOrder:0 Offset:0 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a71fe60 LayoutOrder:1 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a71ff40 LayoutOrder:2 Offset:0 HasInstructions:0> Value:0 ValueSize:1 NumValues:8>,
      <MCAlignFragment<MCFragment 0x7f9e6a725c70 LayoutOrder:3 Offset:8 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a725cc0 LayoutOrder:4 Offset:8 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a725da0 LayoutOrder:5 Offset:8 HasInstructions:0> Value:0 ValueSize:1 NumValues:8>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a7215d0 LayoutOrder:0 Offset:0 HasInstructions:0>
        Alignment:2 Value:0 ValueSize:1 MaxBytesToEmit:2>>,
      <MCDataFragment<MCFragment 0x7f9e6a721620 LayoutOrder:1 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[01] (1 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721700 LayoutOrder:2 Offset:1 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721750 LayoutOrder:3 Offset:1 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1ACMn-_symbolic _____ 7partial1AC)-1 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a721830 LayoutOrder:4 Offset:5 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721880 LayoutOrder:5 Offset:5 HasInstructions:0 BundlePadding:0>
        Contents:[00] (1 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721960 LayoutOrder:6 Offset:6 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a7273d0 LayoutOrder:7 Offset:6 HasInstructions:0>
        Alignment:2 Value:0 ValueSize:1 MaxBytesToEmit:2>>,
      <MCDataFragment<MCFragment 0x7f9e6a727420 LayoutOrder:8 Offset:6 HasInstructions:0 BundlePadding:0>
        Contents:[01] (1 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727500 LayoutOrder:9 Offset:7 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727550 LayoutOrder:10 Offset:7 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCMn-_symbolic _____ 7partial1BC)-1 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a727630 LayoutOrder:11 Offset:11 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727680 LayoutOrder:12 Offset:11 HasInstructions:0 BundlePadding:0>
        Contents:[00] (1 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727760 LayoutOrder:13 Offset:12 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a721a20 LayoutOrder:0 Offset:0 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a721a70 LayoutOrder:1 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:_symbolic _____ 7partial1AC-_$s7partial1ACMF Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a721b50 LayoutOrder:2 Offset:4 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721ba0 LayoutOrder:3 Offset:4 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721c80 LayoutOrder:4 Offset:8 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721cd0 LayoutOrder:5 Offset:8 HasInstructions:0 BundlePadding:0>
        Contents:[01,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721db0 LayoutOrder:6 Offset:10 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721e00 LayoutOrder:7 Offset:10 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a721ee0 LayoutOrder:8 Offset:12 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a721f30 LayoutOrder:9 Offset:12 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a722010 LayoutOrder:10 Offset:16 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCAlignFragment<MCFragment 0x7f9e6a7277b0 LayoutOrder:11 Offset:16 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a727800 LayoutOrder:12 Offset:16 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:_symbolic _____ 7partial1BC-_$s7partial1BCMF Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a7278e0 LayoutOrder:13 Offset:20 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727930 LayoutOrder:14 Offset:20 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_symbolic _____ 7partial1AC-_$s7partial1BCMF)-4 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a727a10 LayoutOrder:15 Offset:24 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727a60 LayoutOrder:16 Offset:24 HasInstructions:0 BundlePadding:0>
        Contents:[01,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727b40 LayoutOrder:17 Offset:26 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727b90 LayoutOrder:18 Offset:26 HasInstructions:0 BundlePadding:0>
        Contents:[0C,00] (2 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727c70 LayoutOrder:19 Offset:28 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a727cc0 LayoutOrder:20 Offset:28 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes)>,
      <MCFillFragment<MCFragment 0x7f9e6a727da0 LayoutOrder:21 Offset:32 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a727ef0 LayoutOrder:0 Offset:0 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a727f40 LayoutOrder:1 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACMn-l_type_metadata_table Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a728020 LayoutOrder:2 Offset:4 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>,
      <MCDataFragment<MCFragment 0x7f9e6a728070 LayoutOrder:3 Offset:4 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00] (4 bytes),
        Fixups:[<MCFixup Offset:0 Value:(_$s7partial1BCMn-l_type_metadata_table)-4 Kind:3>]>,
      <MCFillFragment<MCFragment 0x7f9e6a728150 LayoutOrder:4 Offset:8 HasInstructions:0> Value:0 ValueSize:1 NumValues:0>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a728360 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[17,B3,AC,3C,23,0E,8F,60,84,E9,E4,0A,0E,E3,AE,BB] (16 bytes)>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a728490 LayoutOrder:0 Offset:0 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a7284e0 LayoutOrder:1 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (16 bytes),
        Fixups:[<MCFixup Offset:0 Value:_$s7partial1ACN Kind:4>,
                <MCFixup Offset:8 Value:_$s7partial1BCN Kind:4>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a7286c0 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,40,07,02,05] (8 bytes)>]>,
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7f9e6a717ac0 LayoutOrder:0 Offset:0 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a717b10 LayoutOrder:1 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,19,00,02,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,01,00,01,01,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (96 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:4>,
                <MCFixup Offset:8 Value: Kind:3>,
                <MCFixup Offset:32 Value: Kind:4>,
                <MCFixup Offset:40 Value: Kind:3>,
                <MCFixup Offset:64 Value: Kind:4>,
                <MCFixup Offset:72 Value: Kind:3>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7f9e6a728af0 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,01,7A,52,00,01,78,10,01,10,0C,07,08,90,01] (22 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:3>]>,
      <MCAlignFragment<MCFragment 0x7f9e6a717f60 LayoutOrder:1 Offset:22 HasInstructions:0>
        Alignment:4 Value:0 ValueSize:1 MaxBytesToEmit:4>>,
      <MCDataFragment<MCFragment 0x7f9e6a728bd0 LayoutOrder:2 Offset:24 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (25 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:3>,
                <MCFixup Offset:4 Value: Kind:3>,
                <MCFixup Offset:8 Value: Kind:4>,
                <MCFixup Offset:16 Value: Kind:4>]>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a728cb0 LayoutOrder:3 Offset:49 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a728d40 LayoutOrder:4 Offset:50 HasInstructions:0 BundlePadding:0>
        Contents:[0E,10] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a728e20 LayoutOrder:5 Offset:52 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a728eb0 LayoutOrder:6 Offset:52 HasInstructions:0 BundlePadding:0>
        Contents:[86,02] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a728f90 LayoutOrder:7 Offset:54 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729020 LayoutOrder:8 Offset:55 HasInstructions:0 BundlePadding:0>
        Contents:[0D,06] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a717bf0 LayoutOrder:9 Offset:57 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a729100 LayoutOrder:10 Offset:64 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (25 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:3>,
                <MCFixup Offset:4 Value: Kind:3>,
                <MCFixup Offset:8 Value: Kind:4>,
                <MCFixup Offset:16 Value: Kind:4>]>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a7291e0 LayoutOrder:11 Offset:89 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729270 LayoutOrder:12 Offset:90 HasInstructions:0 BundlePadding:0>
        Contents:[0E,10] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729350 LayoutOrder:13 Offset:92 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a7293e0 LayoutOrder:14 Offset:92 HasInstructions:0 BundlePadding:0>
        Contents:[86,02] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a7294c0 LayoutOrder:15 Offset:94 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729550 LayoutOrder:16 Offset:95 HasInstructions:0 BundlePadding:0>
        Contents:[0D,06] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729630 LayoutOrder:17 Offset:97 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a7296c0 LayoutOrder:18 Offset:98 HasInstructions:0 BundlePadding:0>
        Contents:[83,04] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a7297a0 LayoutOrder:19 Offset:100 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729830 LayoutOrder:20 Offset:100 HasInstructions:0 BundlePadding:0>
        Contents:[8D,03] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a718120 LayoutOrder:21 Offset:102 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a729910 LayoutOrder:22 Offset:104 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (25 bytes),
        Fixups:[<MCFixup Offset:0 Value: Kind:3>,
                <MCFixup Offset:4 Value: Kind:3>,
                <MCFixup Offset:8 Value: Kind:4>,
                <MCFixup Offset:16 Value: Kind:4>]>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a7299f0 LayoutOrder:23 Offset:129 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729a80 LayoutOrder:24 Offset:130 HasInstructions:0 BundlePadding:0>
        Contents:[0E,10] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729b60 LayoutOrder:25 Offset:132 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729bf0 LayoutOrder:26 Offset:132 HasInstructions:0 BundlePadding:0>
        Contents:[86,02] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729cd0 LayoutOrder:27 Offset:134 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729d60 LayoutOrder:28 Offset:135 HasInstructions:0 BundlePadding:0>
        Contents:[0D,06] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7f9e6a729e40 LayoutOrder:29 Offset:137 HasInstructions:0 BundlePadding:0>
        AddrDelta:->,
      <MCDataFragment<MCFragment 0x7f9e6a729ed0 LayoutOrder:30 Offset:138 HasInstructions:0 BundlePadding:0>
        Contents:[83,03] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7f9e6a729fb0 LayoutOrder:31 Offset:140 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7f9e6a7287a0 LayoutOrder:32 Offset:144 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>]>],
  Symbols:[(_main, Index:0, ),
           (_$s7partial1ACACycfC, Index:0, ),
           (_swift_allocObject, Index:0, ),
           (_$s7partial1ACACycfc, Index:0, ),
           (_$s7partial1AC1fySbxlF, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (_$s7partial1AC1fySbxlFTf4dd_n, Index:0, ),
           (, Index:0, ),
           (_$s7partial1ACfd, Index:0, ),
           (_$s7partial1ACfD, Index:0, ),
           (_swift_deallocClassInstance, Index:0, ),
           (_$s7partial1BC1fySbxlF, Index:0, ),
           (_$s7partial1BCfd, Index:0, ),
           (_$s7partial1BCACycfc, Index:0, ),
           (_$s7partial8makeAorBAA1ACyF, Index:0, ),
           (_$s7partial1BCMa, Index:0, ),
           (_$s7partial1gSbyF, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (_$s7partial1ACMf, Index:0, ),
           (LBB10_1, Index:0, ),
           (_$s7partial1BCMf, Index:0, ),
           (LBB10_3, Index:0, ),
           (_$ss6UInt16VN, Index:0, ),
           (_swift_release, Index:0, ),
           (LBB10_5, Index:0, ),
           (_$s7partial1ACMa, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (_$s7partial1BCML, Index:0, ),
           (_$s7partial1BCMaTm, Index:0, ),
           (_$s7partial1ACML, Index:0, ),
           (LBB14_2, Index:0, ),
           (_swift_getInitializedObjCClass, Index:0, ),
           (_$s7partial1BCACycfC, Index:0, ),
           (_$s7partial1BCfD, Index:0, ),
           (_$s7partial1ACMm, Index:0, ),
           (_OBJC_METACLASS_$__TtCs12_SwiftObject, Index:0, ),
           (__objc_empty_cache, Index:0, ),
           (l__METACLASS_DATA__TtC7partial1A, Index:0, ),
           (L___unnamed_1, Index:0, ),
           (l__DATA__TtC7partial1A, Index:0, ),
           (l___unnamed_2, Index:0, ),
           (_$s7partialMXM, Index:0, ),
           (l___unnamed_3, Index:0, ),
           (_$s7partial1ACMn, Index:0, ),
           (_$s7partial1ACMF, Index:0, ),
           (_$sBoWV, Index:0, ),
           (_OBJC_CLASS_$__TtCs12_SwiftObject, Index:0, ),
           (_symbolic _____ 7partial1AC, Index:0, ),
           (_$s7partial1BCMm, Index:0, ),
           (l__METACLASS_DATA__TtC7partial1B, Index:0, ),
           (L___unnamed_4, Index:0, ),
           (l__DATA__TtC7partial1B, Index:0, ),
           (l___unnamed_5, Index:0, ),
           (_$s7partial1BCMn, Index:0, ),
           (_$s7partial1BCMF, Index:0, ),
           (_symbolic _____ 7partial1BC, Index:0, ),
           (l_type_metadata_table, Index:0, ),
           (___swift_reflection_version, Index:0, ),
           (l_llvm.swift_module_hash, Index:0, ),
           (_objc_classes, Index:0, ),
           (_$s7partial1ACN, Index:0, ),
           (_$s7partial1BCN, Index:0, ),
           (L_OBJC_IMAGE_INFO, Index:0, ),
           (_$s7partial1ACACycfCTq, Index:0, ),
           (_$s7partial1AC1fySbxlFTq, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, ),
           (, Index:0, )]>
