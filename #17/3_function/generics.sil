sil_stage canonical

import Builtin
import Swift
import SwiftShims

@inline(never) func f<T>(_ v: T) -> Bool where T : Equatable

func g(_ v: UInt16) -> Bool

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  // function_ref specialized f<A>(_:)
  %2 = function_ref @$s8generics1fySbxSQRzlFs6UInt16V_Tg5Tf4d_n : $@convention(thin) () -> Bool // user: %3
  %3 = apply %2() : $@convention(thin) () -> Bool
  %4 = integer_literal $Builtin.Int32, 0          // user: %5
  %5 = struct $Int32 (%4 : $Builtin.Int32)        // user: %6
  return %5 : $Int32                              // id: %6
} // end sil function 'main'

// f<A>(_:)
sil hidden [noinline] @$s8generics1fySbxSQRzlF : $@convention(thin) <T where T : Equatable> (@in_guaranteed T) -> Bool {
// %0                                             // users: %4, %4, %1
bb0(%0 : $*T):
  debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
  %2 = metatype $@thick T.Type                    // user: %4
  %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
  %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
  return %4 : $Bool                               // id: %5
} // end sil function '$s8generics1fySbxSQRzlF'

// g(_:)
sil hidden @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool {
bb0(%0 : $UInt16):
  // function_ref specialized f<A>(_:)
  %1 = function_ref @$s8generics1fySbxSQRzlFs6UInt16V_Tg5Tf4d_n : $@convention(thin) () -> Bool // user: %2
  %2 = apply %1() : $@convention(thin) () -> Bool // user: %3
  return %2 : $Bool                               // id: %3
} // end sil function '$s8generics1gySbs6UInt16VF'

// protocol witness for static Equatable.== infix(_:_:) in conformance UInt16
sil shared_external [transparent] [thunk] @$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed UInt16, @in_guaranteed UInt16, @thick UInt16.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*UInt16, %1 : $*UInt16, %2 : $@thick UInt16.Type):
  %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
  %4 = load %3 : $*Builtin.Int16                  // user: %7
  %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
  %6 = load %5 : $*Builtin.Int16                  // user: %7
  %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
  %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
  return %8 : $Bool                               // id: %9
} // end sil function '$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW'

// specialized f<A>(_:)
sil shared [noinline] @$s8generics1fySbxSQRzlFs6UInt16V_Tg5Tf4d_n : $@convention(thin) () -> Bool {
bb0:
  %0 = integer_literal $Builtin.Int1, -1          // user: %1
  %1 = struct $Bool (%0 : $Builtin.Int1)          // user: %2
  return %1 : $Bool                               // id: %2
} // end sil function '$s8generics1fySbxSQRzlFs6UInt16V_Tg5Tf4d_n'

sil_witness_table public_external UInt16: Equatable module Swift {
  method #Equatable."=="!1: <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance UInt16
}



