Args: swift (LLVM option parsing) -debug 
Validating deps of /Users/kenta/swiftc/build/Xcode-DebugAssert/swift-macosx-x86_64/Debug/lib/swift/macosx/Swift.swiftmodule/x86_64.swiftmodule
Found up-to-date module at /Users/kenta/swiftc/build/Xcode-DebugAssert/swift-macosx-x86_64/Debug/lib/swift/macosx/Swift.swiftmodule/x86_64.swiftmodule; deferring to serialized module loader
_ExpressibleByBuiltinIntegerLiteral.lookupDirect(init(_builtinIntegerLiteral:)), hasLazyMembers()=1, useNamedLazyMemberLoading=1
lowering type for constant #f
  formal type: @convention(thin) <τ_0_0 where τ_0_0 : Equatable> (τ_0_0) -> Bool
  lowered AST type: @convention(thin) <τ_0_0 where τ_0_0 : Equatable> (τ_0_0) -> Bool
  SIL type: @convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool
lowering @$s8generics1fySbxSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool
(func_decl range=[generics.swift:2:1 - line:4:1] "f(_:)" <T : Equatable> interface type='<T where T : Equatable> (T) -> Bool' access=internal captures=(<generic> )
  (parameter_list
    (parameter "v" type='T' interface type='T') range=[generics.swift:2:21 - line:2:28])
  (result
    (type_ident
      (component id='Bool' bind=Swift.(file).Bool@/Users/kenta/swiftc/swift/stdlib/public/core/Bool.swift:64:15)))
  (binary_expr type='Bool' location=generics.swift:3:7 range=[generics.swift:3:5 - line:3:10] nothrow
    (dot_syntax_call_expr implicit type='(T, T) -> Bool' location=generics.swift:3:7 range=[generics.swift:3:7 - line:3:7] nothrow
      (declref_expr type='(T.Type) -> (T, T) -> Bool' location=generics.swift:3:7 range=[generics.swift:3:7 - line:3:7] decl=Swift.(file).Equatable.==@/Users/kenta/swiftc/swift/stdlib/public/core/Equatable.swift:176:15 [with (substitution_map generic_signature=<Self where Self : Equatable> (substitution Self -> T))] function_ref=unapplied)
      (type_expr implicit type='T.Type' location=generics.swift:3:7 range=[generics.swift:3:7 - line:3:7] typerepr='T'))
    (tuple_expr implicit type='(T, T)' location=generics.swift:3:5 range=[generics.swift:3:5 - line:3:10]
      (declref_expr type='T' location=generics.swift:3:5 range=[generics.swift:3:5 - line:3:5] decl=generics.(file).f(_:).v@generics.swift:2:24 function_ref=unapplied)
      (declref_expr type='T' location=generics.swift:3:10 range=[generics.swift:3:10 - line:3:10] decl=generics.(file).f(_:).v@generics.swift:2:24 function_ref=unapplied))))

lowering type for constant #Equatable."=="!1
  formal type: @convention(witness_method) <τ_0_0 where τ_0_0 : Equatable> (τ_0_0.Type) -> (τ_0_0, τ_0_0) -> Bool
  lowered AST type: @convention(witness_method) <τ_0_0 where τ_0_0 : Equatable> (τ_0_0, τ_0_0, τ_0_0.Type) -> Bool
  SIL type: @convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool
lowered sil:
// f<A>(_:)
sil hidden [ossa] @$s8generics1fySbxSQRzlF : $@convention(thin) <T where T : Equatable> (@in_guaranteed T) -> Bool {
// %0                                             // users: %4, %4, %1
bb0(%0 : $*T):
  debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
  %2 = metatype $@thick T.Type                    // user: %4
  %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
  %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
  return %4 : $Bool                               // id: %5
} // end sil function '$s8generics1fySbxSQRzlF'

	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
Input types for SIL function type @convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool:
$*τ_0_0
Verifying ownership of: %0 = argument of bb0 : $*T                        // users: %4, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = metatype $@thick T.Type                    // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   return %4 : $Bool                               // id: %5
    No lifetime ending users?! Bailing early.
  return %4 : $Bool                               // id: %5
function return type: $Bool
return inst type: $Bool
lowering type for constant #g
  formal type: @convention(thin) (UInt16) -> Bool
  lowered AST type: @convention(thin) (UInt16) -> Bool
  SIL type: @convention(thin) (UInt16) -> Bool
lowering @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool
(func_decl range=[generics.swift:6:1 - line:8:1] "g(_:)" interface type='(UInt16) -> Bool' access=internal
  (parameter_list
    (parameter "v" type='UInt16' interface type='UInt16') range=[generics.swift:6:7 - line:6:19])
  (result
    (type_ident
      (component id='Bool' bind=Swift.(file).Bool@/Users/kenta/swiftc/swift/stdlib/public/core/Bool.swift:64:15)))
  (call_expr type='Bool' location=generics.swift:7:5 range=[generics.swift:7:5 - line:7:8] nothrow arg_labels=_:
    (declref_expr type='(UInt16) -> Bool' location=generics.swift:7:5 range=[generics.swift:7:5 - line:7:5] decl=generics.(file).f@generics.swift:2:6 [with (substitution_map generic_signature=<T where T : Equatable> (substitution T -> UInt16))] function_ref=single)
    (paren_expr type='(UInt16)' location=generics.swift:7:7 range=[generics.swift:7:6 - line:7:8]
      (declref_expr type='UInt16' location=generics.swift:7:7 range=[generics.swift:7:7 - line:7:7] decl=generics.(file).g(_:).v@generics.swift:6:10 function_ref=unapplied))))

lowering type for constant #f
  formal type: @convention(thin) <τ_0_0 where τ_0_0 : Equatable> (τ_0_0) -> Bool
  lowered AST type: @convention(thin) <τ_0_0 where τ_0_0 : Equatable> (τ_0_0) -> Bool
  SIL type: @convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool
lowered sil:
// g(_:)
sil hidden [ossa] @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool {
// %0                                             // users: %3, %1
bb0(%0 : $UInt16):
  debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
  %2 = alloc_stack $UInt16                        // users: %6, %5, %3
  store %0 to [trivial] %2 : $*UInt16             // id: %3
  // function_ref f<A>(_:)
  %4 = function_ref @$s8generics1fySbxSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %5
  %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
  dealloc_stack %2 : $*UInt16                     // id: %6
  return %5 : $Bool                               // id: %7
} // end sil function '$s8generics1gySbs6UInt16VF'

	discovered a new reachable node bb0
Argument types for entry point BB:
$UInt16
Input types for SIL function type @convention(thin) (UInt16) -> Bool:
$UInt16
Verifying ownership of: %0 = argument of bb0 : $UInt16                    // users: %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
        Regular User:   store %0 to [trivial] %2 : $*UInt16             // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = alloc_stack $UInt16                        // users: %6, %5, %3
    Gathering and classifying uses!
        Regular User:   store %0 to [trivial] %2 : $*UInt16             // id: %3
        Regular User:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
        Regular User:   dealloc_stack %2 : $*UInt16                     // id: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref f<A>(_:)
  %4 = function_ref @$s8generics1fySbxSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   return %5 : $Bool                               // id: %7
    No lifetime ending users?! Bailing early.
  return %5 : $Bool                               // id: %7
function return type: $Bool
return inst type: $Bool
lowering type for constant #g
  formal type: @convention(thin) (UInt16) -> Bool
  lowered AST type: @convention(thin) (UInt16) -> Bool
  SIL type: @convention(thin) (UInt16) -> Bool
lowering type for constant #UInt16.init!allocator.1
  formal type: @convention(method) (UInt16.Type) -> (Builtin.IntLiteral) -> UInt16
  lowered AST type: @convention(method) (Builtin.IntLiteral, UInt16.Type) -> UInt16
  SIL type: @convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16
lowering type for constant #UInt16.init!allocator.1
  formal type: @convention(method) (UInt16.Type) -> (Builtin.IntLiteral) -> UInt16
  lowered AST type: @convention(method) (Builtin.IntLiteral, UInt16.Type) -> UInt16
  SIL type: @convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16
lowered toplevel sil:
// main
sil [ossa] @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.IntLiteral, 9     // user: %5
  %3 = metatype $@thin UInt16.Type                // user: %5
  // function_ref UInt16.init(_builtinIntegerLiteral:)
  %4 = function_ref @$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %5
  %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
  // function_ref g(_:)
  %6 = function_ref @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool // user: %7
  %7 = apply %6(%5) : $@convention(thin) (UInt16) -> Bool
  %8 = integer_literal $Builtin.Int32, 0          // user: %9
  %9 = struct $Int32 (%8 : $Builtin.Int32)        // user: %10
  return %9 : $Int32                              // id: %10
} // end sil function 'main'

	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Verifying ownership of: %0 = argument of bb0 : $Int32
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = integer_literal $Builtin.IntLiteral, 9     // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = metatype $@thin UInt16.Type                // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref UInt16.init(_builtinIntegerLiteral:)
  %4 = function_ref @$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%5) : $@convention(thin) (UInt16) -> Bool
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref g(_:)
  %6 = function_ref @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%5) : $@convention(thin) (UInt16) -> Bool
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = apply %6(%5) : $@convention(thin) (UInt16) -> Bool
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = integer_literal $Builtin.Int32, 0          // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = struct $Int32 (%8 : $Builtin.Int32)        // user: %10
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = struct $Int32 (%8 : $Builtin.Int32)        // user: %10
    Gathering and classifying uses!
        Regular User:   return %9 : $Int32                              // id: %10
    No lifetime ending users?! Bailing early.
  return %9 : $Int32                              // id: %10
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Verifying ownership of: %0 = argument of bb0 : $Int32
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = integer_literal $Builtin.IntLiteral, 9     // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = metatype $@thin UInt16.Type                // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref UInt16.init(_builtinIntegerLiteral:)
  %4 = function_ref @$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%5) : $@convention(thin) (UInt16) -> Bool
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref g(_:)
  %6 = function_ref @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%5) : $@convention(thin) (UInt16) -> Bool
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = apply %6(%5) : $@convention(thin) (UInt16) -> Bool
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = integer_literal $Builtin.Int32, 0          // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = struct $Int32 (%8 : $Builtin.Int32)        // user: %10
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = struct $Int32 (%8 : $Builtin.Int32)        // user: %10
    Gathering and classifying uses!
        Regular User:   return %9 : $Int32                              // id: %10
    No lifetime ending users?! Bailing early.
  return %9 : $Int32                              // id: %10
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
Input types for SIL function type @convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool:
$*τ_0_0
Verifying ownership of: %0 = argument of bb0 : $*T                        // users: %4, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = metatype $@thick T.Type                    // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   return %4 : $Bool                               // id: %5
    No lifetime ending users?! Bailing early.
  return %4 : $Bool                               // id: %5
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$UInt16
Input types for SIL function type @convention(thin) (UInt16) -> Bool:
$UInt16
Verifying ownership of: %0 = argument of bb0 : $UInt16                    // users: %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
        Regular User:   store %0 to [trivial] %2 : $*UInt16             // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = alloc_stack $UInt16                        // users: %6, %5, %3
    Gathering and classifying uses!
        Regular User:   store %0 to [trivial] %2 : $*UInt16             // id: %3
        Regular User:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
        Regular User:   dealloc_stack %2 : $*UInt16                     // id: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref f<A>(_:)
  %4 = function_ref @$s8generics1fySbxSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   return %5 : $Bool                               // id: %7
    No lifetime ending users?! Bailing early.
  return %5 : $Bool                               // id: %7
function return type: $Bool
return inst type: $Bool
*** Checking witness tables for duplicates ***
*** Checking default witness tables for duplicates ***
*** Checking property descriptors ***
CallerAnalysis: Creating caller info for: main
CallerAnalysis: Creating caller info for: $s8generics1fySbxSQRzlF
CallerAnalysis: Creating caller info for: $s8generics1gySbs6UInt16VF
CallerAnalysis: Creating caller info for: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
PMVerifierAnalysis. Add: main
PMVerifierAnalysis. Add: $s8generics1fySbxSQRzlF
PMVerifierAnalysis. Add: $s8generics1gySbs6UInt16VF
PMVerifierAnalysis. Add: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
*** Optimizing the module (Guaranteed Passes) *** 

Running SILGenCleanup on main

Running SILGenCleanup on $s8generics1fySbxSQRzlF

Running SILGenCleanup on $s8generics1gySbs6UInt16VF

Running SILGenCleanup on $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
        Failed speculative lookup of witness for: (abstract_conformance protocol=Equatable)#Equatable."=="!1
******** Performing Capture Promotion on: main********
Invalidating caller: main
******** Performing Capture Promotion on: $s8generics1fySbxSQRzlF********
Invalidating caller: $s8generics1fySbxSQRzlF
******** Performing Capture Promotion on: $s8generics1gySbs6UInt16VF********
Invalidating caller: $s8generics1gySbs6UInt16VF
******** Performing Capture Promotion on: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC********
Invalidating caller: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
Access Enforcement Selection in main
Invalidating caller: main
Access Enforcement Selection in $s8generics1fySbxSQRzlF
Invalidating caller: $s8generics1fySbxSQRzlF
Access Enforcement Selection in $s8generics1gySbs6UInt16VF
Invalidating caller: $s8generics1gySbs6UInt16VF
        Failed speculative lookup of witness for: (abstract_conformance protocol=Equatable)#Equatable."=="!1
*** No return function processing: $s8generics1fySbxSQRzlF
*** Definite Init visiting function: $s8generics1fySbxSQRzlF
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
Input types for SIL function type @convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool:
$*τ_0_0
Verifying ownership of: %0 = argument of bb0 : $*T                        // users: %4, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = metatype $@thick T.Type                    // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   return %4 : $Bool                               // id: %5
    No lifetime ending users?! Bailing early.
  return %4 : $Bool                               // id: %5
function return type: $Bool
return inst type: $Bool
*** DestroyHoisting on function: $s8generics1fySbxSQRzlF ***
*** No return function processing: $s8generics1gySbs6UInt16VF
*** Definite Init visiting function: $s8generics1gySbs6UInt16VF
	discovered a new reachable node bb0
Argument types for entry point BB:
$UInt16
Input types for SIL function type @convention(thin) (UInt16) -> Bool:
$UInt16
Verifying ownership of: %0 = argument of bb0 : $UInt16                    // users: %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
        Regular User:   store %0 to [trivial] %2 : $*UInt16             // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = alloc_stack $UInt16                        // users: %6, %5, %3
    Gathering and classifying uses!
        Regular User:   store %0 to [trivial] %2 : $*UInt16             // id: %3
        Regular User:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
        Regular User:   dealloc_stack %2 : $*UInt16                     // id: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref f<A>(_:)
  %4 = function_ref @$s8generics1fySbxSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   return %5 : $Bool                               // id: %7
    No lifetime ending users?! Bailing early.
  return %5 : $Bool                               // id: %7
function return type: $Bool
return inst type: $Bool
*** DestroyHoisting on function: $s8generics1gySbs6UInt16VF ***
*** No return function processing: main
*** Definite Init visiting function: main
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Verifying ownership of: %0 = argument of bb0 : $Int32
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = integer_literal $Builtin.IntLiteral, 9     // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = metatype $@thin UInt16.Type                // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref UInt16.init(_builtinIntegerLiteral:)
  %4 = function_ref @$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%5) : $@convention(thin) (UInt16) -> Bool
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref g(_:)
  %6 = function_ref @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%5) : $@convention(thin) (UInt16) -> Bool
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = apply %6(%5) : $@convention(thin) (UInt16) -> Bool
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = integer_literal $Builtin.Int32, 0          // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = struct $Int32 (%8 : $Builtin.Int32)        // user: %10
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = struct $Int32 (%8 : $Builtin.Int32)        // user: %10
    Gathering and classifying uses!
        Regular User:   return %9 : $Int32                              // id: %10
    No lifetime ending users?! Bailing early.
  return %9 : $Int32                              // id: %10
function return type: $Int32
return inst type: $Int32
*** DestroyHoisting on function: main ***
    Trying to devirtualize:   %7 = apply %6(%5) : $@convention(thin) (UInt16) -> Bool
    Trying to devirtualize:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Verifying ownership of: %0 = argument of bb0 : $Int32
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = integer_literal $Builtin.IntLiteral, 9     // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = metatype $@thin UInt16.Type                // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref UInt16.init(_builtinIntegerLiteral:)
  %4 = function_ref @$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4(%2, %3) : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%5) : $@convention(thin) (UInt16) -> Bool
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref g(_:)
  %6 = function_ref @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = apply %6(%5) : $@convention(thin) (UInt16) -> Bool
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = apply %6(%5) : $@convention(thin) (UInt16) -> Bool
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = integer_literal $Builtin.Int32, 0          // user: %9
    Gathering and classifying uses!
        Regular User:   %9 = struct $Int32 (%8 : $Builtin.Int32)        // user: %10
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %9 = struct $Int32 (%8 : $Builtin.Int32)        // user: %10
    Gathering and classifying uses!
        Regular User:   return %9 : $Int32                              // id: %10
    No lifetime ending users?! Bailing early.
  return %9 : $Int32                              // id: %10
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
Input types for SIL function type @convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool:
$*τ_0_0
Verifying ownership of: %0 = argument of bb0 : $*T                        // users: %4, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = metatype $@thick T.Type                    // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   return %4 : $Bool                               // id: %5
    No lifetime ending users?! Bailing early.
  return %4 : $Bool                               // id: %5
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$UInt16
Input types for SIL function type @convention(thin) (UInt16) -> Bool:
$UInt16
Verifying ownership of: %0 = argument of bb0 : $UInt16                    // users: %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
        Regular User:   store %0 to [trivial] %2 : $*UInt16             // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = alloc_stack $UInt16                        // users: %6, %5, %3
    Gathering and classifying uses!
        Regular User:   store %0 to [trivial] %2 : $*UInt16             // id: %3
        Regular User:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
        Regular User:   dealloc_stack %2 : $*UInt16                     // id: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref f<A>(_:)
  %4 = function_ref @$s8generics1fySbxSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   return %5 : $Bool                               // id: %7
    No lifetime ending users?! Bailing early.
  return %5 : $Bool                               // id: %7
function return type: $Bool
return inst type: $Bool
*** Checking witness tables for duplicates ***
*** Checking default witness tables for duplicates ***
*** Checking property descriptors ***
*** Deserialization Notification: DeserializeFunctionBody ***
    Begin Notifying: SILModule::SerializationCallback
    End Notifying: SILModule::SerializationCallback
    Begin Notifying: PassManagerDeserializationNotificationHandler
    End Notifying: PassManagerDeserializationNotificationHandler
*** Completed Deserialization Notifications for DeserializeFunctionBody
Deserialize SIL:
// UInt16.init(_builtinIntegerLiteral:)
sil public_external [transparent] [serialized] [canonical] [ossa] @$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC : $@convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16 {
// %0                                             // user: %2
bb0(%0 : $Builtin.IntLiteral, %1 : $@thin UInt16.Type):
  %2 = builtin "s_to_u_checked_trunc_IntLiteral_Int16"(%0 : $Builtin.IntLiteral) : $(Builtin.Int16, Builtin.Int1) // user: %3
  (%3, %4) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1) // user: %5
  %5 = struct $UInt16 (%3 : $Builtin.Int16)       // user: %6
  return %5 : $UInt16                             // id: %6
} // end sil function '$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC'

Deserialized $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC from Swift
Inlining @$ss6UInt16V22_builtinIntegerLiteralABBI_tcfC into @main
    Trying to devirtualize:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
        Failed speculative lookup of witness for: (abstract_conformance protocol=Equatable)#Equatable."=="!1
    Trying to devirtualize:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
Invalidating caller: main
Invalidating caller: $s8generics1fySbxSQRzlF
Invalidating caller: $s8generics1gySbs6UInt16VF
Invalidating caller: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
Process imports in function: main
Process imports in function: $s8generics1fySbxSQRzlF
Process imports in function: $s8generics1gySbs6UInt16VF
Process imports in function: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
        Failed speculative lookup of witness for: (abstract_conformance protocol=Equatable)#Equatable."=="!1
*** ConstPropagation processing: 
*** Diagnose Unreachable processing: $s8generics1fySbxSQRzlF
Invalidating caller: $s8generics1fySbxSQRzlF
        Failed speculative lookup of witness for: (abstract_conformance protocol=Equatable)#Equatable."=="!1
	discovered a new reachable node bb0
*** PMO Optimize Memory Accesses looking at:   %2 = alloc_stack $UInt16                        // users: %6, %5, %3
*** ConstPropagation processing: 
*** PMO Dead Allocation Elimination looking at:   %2 = alloc_stack $UInt16                        // users: %6, %5, %3
*** Failed to remove autogenerated alloc: kept alive by:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
*** Diagnose Unreachable processing: $s8generics1gySbs6UInt16VF
Invalidating caller: $s8generics1gySbs6UInt16VF
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %10 = struct $Int32 (%9 : $Builtin.Int32)       // user: %11
    User:   return %10 : $Int32                             // id: %11
Visiting:   %9 = integer_literal $Builtin.Int32, 0          // user: %10
    User:   %10 = struct $Int32 (%9 : $Builtin.Int32)       // user: %11
Visiting:   %10 = struct $Int32 (%9 : $Builtin.Int32)       // user: %11
    User:   return %10 : $Int32                             // id: %11
Visiting:   %6 = struct $UInt16 (%4 : $Builtin.Int16)       // user: %8
    User:   %8 = apply %7(%6) : $@convention(thin) (UInt16) -> Bool
Visiting:   %2 = integer_literal $Builtin.IntLiteral, 9     // user: %3
    User:   %3 = builtin "s_to_u_checked_trunc_IntLiteral_Int16"(%2 : $Builtin.IntLiteral) : $(Builtin.Int16, Builtin.Int1) // user: %4
Visiting:   %4 = tuple (%2 : $Builtin.Int16, %3 : $Builtin.Int1) // user: %5
    User:   (%5, %6) = destructure_tuple %4 : $(Builtin.Int16, Builtin.Int1) // user: %7
Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
    User:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    User:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool
Invalidating caller: main
*** Diagnose Unreachable processing: main
Invalidating caller: main
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %5 = struct $UInt16 (%3 : $Builtin.Int16)       // user: %6
    User:   return %5 : $UInt16                             // id: %6
*** Diagnose Unreachable processing: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
Invalidating caller: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
	discovered a new reachable node bb0
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Verifying ownership of: %0 = argument of bb0 : $Int32
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref g(_:)
  %4 = function_ref @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = integer_literal $Builtin.Int32, 0          // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = struct $Int32 (%6 : $Builtin.Int32)        // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = struct $Int32 (%6 : $Builtin.Int32)        // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $Int32                              // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $Int32                              // id: %8
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
Input types for SIL function type @convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool:
$*τ_0_0
Verifying ownership of: %0 = argument of bb0 : $*T                        // users: %4, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = metatype $@thick T.Type                    // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   return %4 : $Bool                               // id: %5
    No lifetime ending users?! Bailing early.
  return %4 : $Bool                               // id: %5
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$UInt16
Input types for SIL function type @convention(thin) (UInt16) -> Bool:
$UInt16
Verifying ownership of: %0 = argument of bb0 : $UInt16                    // users: %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
        Regular User:   store %0 to [trivial] %2 : $*UInt16             // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = alloc_stack $UInt16                        // users: %6, %5, %3
    Gathering and classifying uses!
        Regular User:   store %0 to [trivial] %2 : $*UInt16             // id: %3
        Regular User:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
        Regular User:   dealloc_stack %2 : $*UInt16                     // id: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref f<A>(_:)
  %4 = function_ref @$s8generics1fySbxSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   return %5 : $Bool                               // id: %7
    No lifetime ending users?! Bailing early.
  return %5 : $Bool                               // id: %7
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$Builtin.IntLiteral
$@thin UInt16.Type
Input types for SIL function type @convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16:
$Builtin.IntLiteral
$@thin UInt16.Type
Verifying ownership of: %0 = argument of bb0 : $Builtin.IntLiteral        // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = builtin "s_to_u_checked_trunc_IntLiteral_Int16"(%0 : $Builtin.IntLiteral) : $(Builtin.Int16, Builtin.Int1) // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $@thin UInt16.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = builtin "s_to_u_checked_trunc_IntLiteral_Int16"(%0 : $Builtin.IntLiteral) : $(Builtin.Int16, Builtin.Int1) // user: %3
    Gathering and classifying uses!
        Regular User:   (%3, %4) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1) // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of: (**%3**, %4) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1) // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = struct $UInt16 (%3 : $Builtin.Int16)       // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of: (%3, **%4**) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1)
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = struct $UInt16 (%3 : $Builtin.Int16)       // user: %6
    Gathering and classifying uses!
        Regular User:   return %5 : $UInt16                             // id: %6
    No lifetime ending users?! Bailing early.
  return %5 : $UInt16                             // id: %6
function return type: $UInt16
return inst type: $UInt16
*** Checking witness tables for duplicates ***
*** Checking default witness tables for duplicates ***
*** Checking property descriptors ***
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Verifying ownership of: %0 = argument of bb0 : $Int32
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref g(_:)
  %4 = function_ref @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = integer_literal $Builtin.Int32, 0          // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = struct $Int32 (%6 : $Builtin.Int32)        // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = struct $Int32 (%6 : $Builtin.Int32)        // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $Int32                              // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $Int32                              // id: %8
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
Input types for SIL function type @convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool:
$*τ_0_0
Verifying ownership of: %0 = argument of bb0 : $*T                        // users: %4, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = metatype $@thick T.Type                    // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   return %4 : $Bool                               // id: %5
    No lifetime ending users?! Bailing early.
  return %4 : $Bool                               // id: %5
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$UInt16
Input types for SIL function type @convention(thin) (UInt16) -> Bool:
$UInt16
Verifying ownership of: %0 = argument of bb0 : $UInt16                    // users: %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
        Regular User:   store %0 to [trivial] %2 : $*UInt16             // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = alloc_stack $UInt16                        // users: %6, %5, %3
    Gathering and classifying uses!
        Regular User:   store %0 to [trivial] %2 : $*UInt16             // id: %3
        Regular User:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
        Regular User:   dealloc_stack %2 : $*UInt16                     // id: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref f<A>(_:)
  %4 = function_ref @$s8generics1fySbxSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   return %5 : $Bool                               // id: %7
    No lifetime ending users?! Bailing early.
  return %5 : $Bool                               // id: %7
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$Builtin.IntLiteral
$@thin UInt16.Type
Input types for SIL function type @convention(method) (Builtin.IntLiteral, @thin UInt16.Type) -> UInt16:
$Builtin.IntLiteral
$@thin UInt16.Type
Verifying ownership of: %0 = argument of bb0 : $Builtin.IntLiteral        // user: %2
    Gathering and classifying uses!
        Regular User:   %2 = builtin "s_to_u_checked_trunc_IntLiteral_Int16"(%0 : $Builtin.IntLiteral) : $(Builtin.Int16, Builtin.Int1) // user: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $@thin UInt16.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = builtin "s_to_u_checked_trunc_IntLiteral_Int16"(%0 : $Builtin.IntLiteral) : $(Builtin.Int16, Builtin.Int1) // user: %3
    Gathering and classifying uses!
        Regular User:   (%3, %4) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1) // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of: (**%3**, %4) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1) // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = struct $UInt16 (%3 : $Builtin.Int16)       // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of: (%3, **%4**) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1)
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = struct $UInt16 (%3 : $Builtin.Int16)       // user: %6
    Gathering and classifying uses!
        Regular User:   return %5 : $UInt16                             // id: %6
    No lifetime ending users?! Bailing early.
  return %5 : $UInt16                             // id: %6
function return type: $UInt16
return inst type: $UInt16
*** Checking witness tables for duplicates ***
*** Checking default witness tables for duplicates ***
*** Checking property descriptors ***
CallerAnalysis: Creating caller info for: main
CallerAnalysis: Creating caller info for: $s8generics1fySbxSQRzlF
CallerAnalysis: Creating caller info for: $s8generics1gySbs6UInt16VF
CallerAnalysis: Creating caller info for: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
PMVerifierAnalysis. Add: main
PMVerifierAnalysis. Add: $s8generics1fySbxSQRzlF
PMVerifierAnalysis. Add: $s8generics1gySbs6UInt16VF
PMVerifierAnalysis. Add: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
*** Optimizing the module (SILOpt Prepare Passes) *** 
        Failed speculative lookup of witness for: (abstract_conformance protocol=Equatable)#Equatable."=="!1
MC: ADDING: 5 instrs to worklist
MC: Visiting:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1

MC: Visiting:   %2 = metatype $@thick T.Type                    // user: %4

MC: Visiting:   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4

MC: Visiting:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5

MC: Visiting:   return %4 : $Bool                               // id: %5

MC: ADDING: 7 instrs to worklist
MC: Visiting:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1

MC: Visiting:   %2 = alloc_stack $UInt16                        // users: %6, %5, %3

MC: Visiting:   store %0 to [trivial] %2 : $*UInt16             // id: %3

MC: Visiting:   // function_ref f<A>(_:)
  %4 = function_ref @$s8generics1fySbxSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %5

MC: Visiting:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7

MC: Visiting:   dealloc_stack %2 : $*UInt16                     // id: %6

MC: Visiting:   return %5 : $Bool                               // id: %7

MC: ADDING: 7 instrs to worklist
MC: Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3

MC: Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

MC: Visiting:   // function_ref g(_:)
  %4 = function_ref @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool // user: %5

MC: Visiting:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool

MC: Visiting:   %6 = integer_literal $Builtin.Int32, 0          // user: %7

MC: Visiting:   %7 = struct $Int32 (%6 : $Builtin.Int32)        // user: %8

MC: Visiting:   return %7 : $Int32                              // id: %8

MC: ADDING: 4 instrs to worklist
MC: Visiting:   %2 = builtin "s_to_u_checked_trunc_IntLiteral_Int16"(%0 : $Builtin.IntLiteral) : $(Builtin.Int16, Builtin.Int1) // user: %3

MC: Visiting:   (%3, %4) = destructure_tuple %2 : $(Builtin.Int16, Builtin.Int1) // user: %5

MC: Visiting:   %5 = struct $UInt16 (%3 : $Builtin.Int16)       // user: %6

MC: Visiting:   return %5 : $UInt16                             // id: %6

CallerAnalysis: Creating caller info for: main
CallerAnalysis: Creating caller info for: $s8generics1fySbxSQRzlF
CallerAnalysis: Creating caller info for: $s8generics1gySbs6UInt16VF
CallerAnalysis: Creating caller info for: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
PMVerifierAnalysis. Add: main
PMVerifierAnalysis. Add: $s8generics1fySbxSQRzlF
PMVerifierAnalysis. Add: $s8generics1gySbs6UInt16VF
PMVerifierAnalysis. Add: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
*** Optimizing the module (EarlyModulePasses) *** 
Running DeadFuncElimination
running dead function elimination
running function elimination
  anchor function: main
    scan function main
    scan function $s8generics1gySbs6UInt16VF
    scan function $s8generics1fySbxSQRzlF
  erase dead function $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
Invalidating caller: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
PMVerifierAnalysis. Delete: $ss6UInt16V22_builtinIntegerLiteralABBI_tcfC
        Failed speculative lookup of witness for: (abstract_conformance protocol=Equatable)#Equatable."=="!1
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Verifying ownership of: %0 = argument of bb0 : $Int32
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref g(_:)
  %4 = function_ref @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = integer_literal $Builtin.Int32, 0          // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = struct $Int32 (%6 : $Builtin.Int32)        // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = struct $Int32 (%6 : $Builtin.Int32)        // user: %8
    Gathering and classifying uses!
        Regular User:   return %7 : $Int32                              // id: %8
    No lifetime ending users?! Bailing early.
  return %7 : $Int32                              // id: %8
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$*T
Input types for SIL function type @convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool:
$*τ_0_0
Verifying ownership of: %0 = argument of bb0 : $*T                        // users: %4, %4, %1
    Gathering and classifying uses!
        Regular User:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = metatype $@thick T.Type                    // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   return %4 : $Bool                               // id: %5
    No lifetime ending users?! Bailing early.
  return %4 : $Bool                               // id: %5
function return type: $Bool
return inst type: $Bool
	discovered a new reachable node bb0
Argument types for entry point BB:
$UInt16
Input types for SIL function type @convention(thin) (UInt16) -> Bool:
$UInt16
Verifying ownership of: %0 = argument of bb0 : $UInt16                    // users: %3, %1
    Gathering and classifying uses!
        Regular User:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
        Regular User:   store %0 to [trivial] %2 : $*UInt16             // id: %3
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %2 = alloc_stack $UInt16                        // users: %6, %5, %3
    Gathering and classifying uses!
        Regular User:   store %0 to [trivial] %2 : $*UInt16             // id: %3
        Regular User:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
        Regular User:   dealloc_stack %2 : $*UInt16                     // id: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of:   // function_ref f<A>(_:)
  %4 = function_ref @$s8generics1fySbxSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
    Gathering and classifying uses!
        Regular User:   return %5 : $Bool                               // id: %7
    No lifetime ending users?! Bailing early.
  return %5 : $Bool                               // id: %7
function return type: $Bool
return inst type: $Bool
Invalidating caller: $s8generics1gySbs6UInt16VF
Process imports in function: main
Process imports in function: $s8generics1fySbxSQRzlF
Process imports in function: $s8generics1gySbs6UInt16VF
        Failed speculative lookup of witness for: (abstract_conformance protocol=Equatable)#Equatable."=="!1
Copy Peephole in Func $s8generics1fySbxSQRzlF
Copy Peephole in Func $s8generics1gySbs6UInt16VF
Copy Peephole in Func main
*** Optimizing the module (HighLevel+EarlyLoopOpt) *** 
        Failed speculative lookup of witness for: (abstract_conformance protocol=Equatable)#Equatable."=="!1
Copy Forwarding in Func $s8generics1fySbxSQRzlF
***** LowerAggregate on function: $s8generics1fySbxSQRzlF *****
Visiting:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
Visiting:   %2 = metatype $@thick T.Type                    // user: %4
Visiting:   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
Visiting:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
Visiting:   return %4 : $Bool                               // id: %5
***** SROA on function: $s8generics1fySbxSQRzlF *****
** Mem2Reg on function: $s8generics1fySbxSQRzlF **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
ExistentialSpecializer Pass: Bail! Due to canSpecializeCalleeFunction.
  %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
*** ConstPropagation processing: 
### Run SimplifyCFG on $s8generics1fySbxSQRzlF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s8generics1fySbxSQRzlF
SC: ADDING: 5 instrs to worklist
SC: Visiting:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1

SC: Visiting:   %2 = metatype $@thick T.Type                    // user: %4

SC: Visiting:   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4

SC: Visiting:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5

SC: Visiting:   return %4 : $Bool                               // id: %5

***** Devirtualizer on function:$s8generics1fySbxSQRzlF *****
    Trying to devirtualize:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
        Failed speculative lookup of witness for: (abstract_conformance protocol=Equatable)#Equatable."=="!1
***** GenericSpecializer on function:$s8generics1fySbxSQRzlF *****
### Run SimplifyCFG on $s8generics1fySbxSQRzlF
	discovered a new reachable node bb0
***** CSE on function: $s8generics1fySbxSQRzlF *****
SILCSE VISITING:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1

SILCSE VISITING:   %2 = metatype $@thick T.Type                    // user: %4

SILCSE Adding to value table:   %2 = metatype $@thick T.Type                    // user: %4
 ->   %2 = metatype $@thick T.Type                    // user: %4

SILCSE VISITING:   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4

SILCSE Adding to value table:   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
 ->   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4

SILCSE VISITING:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5

        Failed speculative lookup of witness for: (abstract_conformance protocol=Equatable)#Equatable."=="!1
SILCSE VISITING:   return %4 : $Bool                               // id: %5

*** RLE on function: $s8generics1fySbxSQRzlF ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// f<A>(_:)
sil hidden @$s8generics1fySbxSQRzlF : $@convention(thin) <T where T : Equatable> (@in_guaranteed T) -> Bool {
// %0                                             // users: %4, %4, %1
bb0(%0 : $*T):
  debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
  %2 = metatype $@thick T.Type                    // user: %4
  %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
  %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
  return %4 : $Bool                               // id: %5
} // end sil function '$s8generics1fySbxSQRzlF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
Marking as live:
  return %4 : $Bool                               // id: %5
Marking as live:
  %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
Marking as live:
%0 = argument of bb0 : $*T                        // users: %4, %4, %1
Marking as live:
  debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
Marking as live:
  %2 = metatype $@thick T.Type                    // user: %4
***** CodeMotion on function: $s8generics1fySbxSQRzlF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7fe52e045cd0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s8generics1fySbxSQRzlF ***
***** Processing $s8generics1fySbxSQRzlF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
VISITING:
      %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
VISITING:
      %2 = metatype $@thick T.Type                    // user: %4
VISITING:
      debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
VISITING:
      %2 = metatype $@thick T.Type                    // user: %4
VISITING:
      %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
VISITING:
      %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
VISITING:
      return %4 : $Bool                               // id: %5
**** Computing ARC Matching Sets for $s8generics1fySbxSQRzlF ****

*** ARCCM on function: $s8generics1fySbxSQRzlF ***
** StackPromotion **
No loops in $s8generics1fySbxSQRzlF
***** CSE on function: $s8generics1fySbxSQRzlF *****
SILCSE VISITING:   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1

SILCSE VISITING:   %2 = metatype $@thick T.Type                    // user: %4

SILCSE Adding to value table:   %2 = metatype $@thick T.Type                    // user: %4
 ->   %2 = metatype $@thick T.Type                    // user: %4

SILCSE VISITING:   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4

SILCSE Adding to value table:   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
 ->   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4

SILCSE VISITING:   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5

SILCSE VISITING:   return %4 : $Bool                               // id: %5

Running AccessEnforcementReleaseSinking on $s8generics1fySbxSQRzlF
Found a barrier   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
, clearing last seen end_access
Running local AccessEnforcementOpts on $s8generics1fySbxSQRzlF
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s8generics1fySbxSQRzlF
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s8generics1fySbxSQRzlF
Removing in BB
sil_scope 1 { loc "generics.swift":2:6 parent @$s8generics1fySbxSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool }
sil_scope 2 { loc "generics.swift":2:38 parent 1 }
// %0                                             // users: %4, %4, %1
bb0(%0 : $*T):
  debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
  %2 = metatype $@thick T.Type                    // user: %4
  %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
  %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
  return %4 : $Bool                               // id: %5
 not a check_bounds call   debug_value_addr %0 : $*T, let, name "v", argno 1 // id: %1
 not a check_bounds call   %2 = metatype $@thick T.Type                    // user: %4
 not a check_bounds call   %3 = witness_method $T, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %4
 no safe because kMayChangeAny   %4 = apply %3<T>(%0, %0, %2) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %5
 not a check_bounds call   return %4 : $Bool                               // id: %5
No loops in $s8generics1fySbxSQRzlF
COW Array Opts in Func $s8generics1fySbxSQRzlF
  Skipping Function: No loops.
Copy Forwarding in Func $s8generics1gySbs6UInt16VF
***** LowerAggregate on function: $s8generics1gySbs6UInt16VF *****
Visiting:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
Visiting:   %2 = alloc_stack $UInt16                        // users: %3, %6, %5
Visiting:   store %0 to %2 : $*UInt16                       // id: %3
Visiting:   // function_ref f<A>(_:)
  %4 = function_ref @$s8generics1fySbxSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %5
Visiting:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
Visiting:   dealloc_stack %2 : $*UInt16                     // id: %6
Visiting:   return %5 : $Bool                               // id: %7
***** SROA on function: $s8generics1gySbs6UInt16VF *****
    Visiting use:   store %0 to %2 : $*UInt16                       // id: %3
        Found a store into the projection.
    Visiting use:   dealloc_stack %2 : $*UInt16                     // id: %6
    Visiting use:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
        Found unknown user, pointer escapes!
** Mem2Reg on function: $s8generics1gySbs6UInt16VF **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** Memory to register looking at:   %2 = alloc_stack $UInt16                        // users: %3, %6, %5
*** AllocStack is captured by:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s8generics1fySbxSQRzlF -> abort
*** ConstPropagation processing: 
### Run SimplifyCFG on $s8generics1gySbs6UInt16VF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s8generics1gySbs6UInt16VF
SC: ADDING: 7 instrs to worklist
SC: Visiting:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1

SC: Visiting:   %2 = alloc_stack $UInt16                        // users: %3, %6, %5

SC: Visiting:   store %0 to %2 : $*UInt16                       // id: %3

SC: Visiting:   // function_ref f<A>(_:)
  %4 = function_ref @$s8generics1fySbxSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %5

SC: Visiting:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7

SC: Visiting:   dealloc_stack %2 : $*UInt16                     // id: %6

SC: Visiting:   return %5 : $Bool                               // id: %7

***** Devirtualizer on function:$s8generics1gySbs6UInt16VF *****
    Trying to devirtualize:   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
***** GenericSpecializer on function:$s8generics1gySbs6UInt16VF *****


*** ApplyInst in function $s8generics1gySbs6UInt16VF:
     %2 = alloc_stack $UInt16                     // users: %3, %6, %5
     // function_ref f<A>(_:)
  %4 = function_ref @$s8generics1fySbxSQRzlF : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %5
->   %5 = apply %4<UInt16>(%2) : $@convention(thin) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0) -> Bool // user: %7
     return %5 : $Bool                            // id: %7



Checking for a specialization cycle:
Caller: $s8generics1gySbs6UInt16VF
Callee: $s8generics1fySbxSQRzlF
Substitutions:
(substitution_map generic_signature=<T where T : Equatable>
  (substitution T -> UInt16)
  (conformance type=T
    (normal_conformance type=UInt16 protocol=Equatable lazy)))Stop the scan: Current caller is not a specialization
    Specialized function $s8generics1fySbxSQRzlFs6UInt16V_Tg5
Could not find an existing specialization for: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
Creating a specialization: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
CallerAnalysis: Creating caller info for: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
PMVerifierAnalysis. Add|Mod: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
Created specialized function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
Specialized function type: @convention(thin) (UInt16) -> Bool
Invalidating caller: $s8generics1gySbs6UInt16VF
Copy Forwarding in Func $s8generics1fySbxSQRzlFs6UInt16V_Tg5
***** LowerAggregate on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
Visiting:   %1 = alloc_stack $UInt16                        // users: %8, %7, %7, %4, %2
Visiting:   store %0 to %1 : $*UInt16                       // id: %2
Visiting:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %3
Visiting:   debug_value_addr %1 : $*UInt16, let, name "v", argno 1 // id: %4
Visiting:   %5 = metatype $@thick UInt16.Type               // user: %7
Visiting:   %6 = witness_method $UInt16, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %7
Visiting:   %7 = apply %6<UInt16>(%1, %1, %5) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %9
Visiting:   dealloc_stack %1 : $*UInt16                     // id: %8
Visiting:   return %7 : $Bool                               // id: %9
***** SROA on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
    Visiting use:   dealloc_stack %1 : $*UInt16                     // id: %8
    Visiting use:   %7 = apply %6<UInt16>(%1, %1, %5) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %9
        Found unknown user, pointer escapes!
** Mem2Reg on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** Memory to register looking at:   %1 = alloc_stack $UInt16                        // users: %8, %7, %7, %4, %2
*** AllocStack is captured by:   %7 = apply %6<UInt16>(%1, %1, %5) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %9
ExistentialSpecializer Pass: Bail! Due to canSpecializeCalleeFunction.
  %7 = apply %6<UInt16>(%1, %1, %5) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %9
*** ConstPropagation processing: 
### Run SimplifyCFG on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
SC: ADDING: 9 instrs to worklist
SC: Visiting:   %1 = alloc_stack $UInt16                        // users: %8, %7, %7, %4, %2

SC: Visiting:   store %0 to %1 : $*UInt16                       // id: %2

SC: Visiting:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %3

SC: Visiting:   debug_value_addr %1 : $*UInt16, let, name "v", argno 1 // id: %4

SC: Visiting:   %5 = metatype $@thick UInt16.Type               // user: %7

SC: Visiting:   %6 = witness_method $UInt16, #Equatable."=="!1 : <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %7

SC: Visiting:   %7 = apply %6<UInt16>(%1, %1, %5) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %9

SC: Visiting:   dealloc_stack %1 : $*UInt16                     // id: %8

SC: Visiting:   return %7 : $Bool                               // id: %9

***** Devirtualizer on function:$s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
    Trying to devirtualize:   %7 = apply %6<UInt16>(%1, %1, %5) : $@convention(witness_method: Equatable) <τ_0_0 where τ_0_0 : Equatable> (@in_guaranteed τ_0_0, @in_guaranteed τ_0_0, @thick τ_0_0.Type) -> Bool // user: %9
*** Deserialization Notification: Deserialize ***
    Begin Notifying: SILModule::SerializationCallback
    End Notifying: SILModule::SerializationCallback
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: PassManagerDeserializationNotificationHandler
CallerAnalysis: Creating caller info for: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
PMVerifierAnalysis. Add|Mod: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
    End Notifying: PassManagerDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
    End Notifying: FunctionBodyDeserializationNotificationHandler
*** Completed Deserialization Notifications for Deserialize
*** Deserialization Notification: DeserializeWitnessTableEntries ***
    Begin Notifying: SILModule::SerializationCallback
    End Notifying: SILModule::SerializationCallback
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: PassManagerDeserializationNotificationHandler
    End Notifying: PassManagerDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
    End Notifying: FunctionBodyDeserializationNotificationHandler
*** Completed Deserialization Notifications for DeserializeWitnessTableEntries
Deserialize SIL:
sil_witness_table public_external [serialized] UInt16: Equatable module Swift {
  method #Equatable."=="!1: <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance UInt16
}

Imported function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
*** Deserialization Notification: DeserializeFunctionBody ***
    Begin Notifying: SILModule::SerializationCallback
    End Notifying: SILModule::SerializationCallback
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
Stripping all markers in: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
    End Notifying: FunctionBodyDeserializationNotificationHandler
    Begin Notifying: PassManagerDeserializationNotificationHandler
    End Notifying: PassManagerDeserializationNotificationHandler
    Begin Notifying: FunctionBodyDeserializationNotificationHandler
    End Notifying: FunctionBodyDeserializationNotificationHandler
*** Completed Deserialization Notifications for DeserializeFunctionBody
Deserialize SIL:
// protocol witness for static Equatable.== infix(_:_:) in conformance UInt16
sil shared_external [transparent] [serialized] [thunk] [ossa] @$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed UInt16, @in_guaranteed UInt16, @thick UInt16.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %4
bb0(%0 : $*UInt16, %1 : $*UInt16, %2 : $@thick UInt16.Type):
  %3 = load [trivial] %0 : $*UInt16               // user: %5
  %4 = load [trivial] %1 : $*UInt16               // user: %6
  %5 = struct_extract %3 : $UInt16, #UInt16._value // user: %7
  %6 = struct_extract %4 : $UInt16, #UInt16._value // user: %7
  %7 = builtin "cmp_eq_Int16"(%5 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
  %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %11
  br bb1                                          // id: %9

bb1:                                              // Preds: bb0
  br bb2                                          // id: %10

bb2:                                              // Preds: bb1
  return %8 : $Bool                               // id: %11
} // end sil function '$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW'

Deserialized $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW from Swift
	discovered a new reachable node bb0
	discovered a new reachable node bb1
	discovered a new reachable node bb2
Argument types for entry point BB:
$*UInt16
$*UInt16
$@thick UInt16.Type
Input types for SIL function type @convention(witness_method: Equatable) (@in_guaranteed UInt16, @in_guaranteed UInt16, @thick UInt16.Type) -> Bool:
$*UInt16
$*UInt16
$@thick UInt16.Type
Verifying ownership of: %0 = argument of bb0 : $*UInt16                   // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = load [trivial] %0 : $*UInt16               // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $*UInt16                   // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = load [trivial] %1 : $*UInt16               // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of: %2 = argument of bb0 : $@thick UInt16.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = load [trivial] %0 : $*UInt16               // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = struct_extract %3 : $UInt16, #UInt16._value // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = load [trivial] %1 : $*UInt16               // user: %6
    Gathering and classifying uses!
        Regular User:   %6 = struct_extract %4 : $UInt16, #UInt16._value // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = struct_extract %3 : $UInt16, #UInt16._value // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = builtin "cmp_eq_Int16"(%5 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = struct_extract %4 : $UInt16, #UInt16._value // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = builtin "cmp_eq_Int16"(%5 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = builtin "cmp_eq_Int16"(%5 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
    Gathering and classifying uses!
        Regular User:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %11
    Gathering and classifying uses!
        Regular User:   return %8 : $Bool                               // id: %11
    No lifetime ending users?! Bailing early.
  return %8 : $Bool                               // id: %11
function return type: $Bool
return inst type: $Bool
Process imports in function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
Invalidating caller: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
*** ConstPropagation processing: 
Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %11
    User:   return %8 : $Bool                               // id: %11
***** Devirtualizer on function:$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW *****
	discovered a new reachable node bb0
	discovered a new reachable node bb1
	discovered a new reachable node bb2
** StackPromotion **
***** GenericSpecializer on function:$s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
***** Devirtualizer on function:$s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
    Trying to devirtualize:   %7 = apply %6(%1, %1, %5) : $@convention(witness_method: Equatable) (@in_guaranteed UInt16, @in_guaranteed UInt16, @thick UInt16.Type) -> Bool // user: %9

Inline into caller: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
    inline [3->1] $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
Invalidating caller: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
Copy Forwarding in Func $s8generics1fySbxSQRzlFs6UInt16V_Tg5
***** LowerAggregate on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
Visiting:   %1 = alloc_stack $UInt16                        // users: %6, %5, %11, %4, %2
Visiting:   store %0 to %1 : $*UInt16                       // id: %2
Visiting:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %3
Visiting:   debug_value_addr %1 : $*UInt16, let, name "v", argno 1 // id: %4
Visiting:   %5 = load %1 : $*UInt16                         // user: %7
Visiting:   %6 = load %1 : $*UInt16                         // user: %8
Visiting:   %7 = struct_extract %5 : $UInt16, #UInt16._value // user: %9
Visiting:   %8 = struct_extract %6 : $UInt16, #UInt16._value // user: %9
Visiting:   %9 = builtin "cmp_eq_Int16"(%7 : $Builtin.Int16, %8 : $Builtin.Int16) : $Builtin.Int1 // user: %10
Visiting:   %10 = struct $Bool (%9 : $Builtin.Int1)         // user: %12
Visiting:   dealloc_stack %1 : $*UInt16                     // id: %11
Visiting:   return %10 : $Bool                              // id: %12
***** SROA on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
    Visiting use:   %6 = load %1 : $*UInt16                         // user: %8
        Found a load of the projection.
    Visiting use:   %5 = load %1 : $*UInt16                         // user: %7
        Found a load of the projection.
    Visiting use:   dealloc_stack %1 : $*UInt16                     // id: %11
    Visiting use:   store %0 to %1 : $*UInt16                       // id: %2
        Found a store into the projection.
** Mem2Reg on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** Memory to register looking at:   %1 = alloc_stack $UInt16                        // users: %6, %5, %11, %4, %2
*** AllocStack has non-write use:   %6 = load %1 : $*UInt16                         // user: %8
*** Promoting in-block:   %1 = alloc_stack $UInt16                        // users: %6, %5, %11, %4, %2
*** Deleting single block AllocStackInst:   %1 = alloc_stack $UInt16                        // user: %3
Invalidating caller: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
*** ConstPropagation processing: 
Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
    User:   return %8 : $Bool                               // id: %9
### Run SimplifyCFG on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
SC: ADDING: 9 instrs to worklist
SC: Visiting:   %1 = alloc_stack $UInt16                        // users: %2, %4

SC: Visiting:   dealloc_stack %1 : $*UInt16                     // id: %2

SC: Visiting:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %3

SC: Visiting:   debug_value_addr %1 : $*UInt16, let, name "v", argno 1 // id: %4

SC: Visiting:   %5 = struct_extract %0 : $UInt16, #UInt16._value // user: %7

SC: Visiting:   %6 = struct_extract %0 : $UInt16, #UInt16._value // user: %7

SC: Visiting:   %7 = builtin "cmp_eq_Int16"(%5 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8

SC: Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9

SC: Visiting:   return %8 : $Bool                               // id: %9

***** Devirtualizer on function:$s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
***** GenericSpecializer on function:$s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
** Mem2Reg on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 **
	discovered a new reachable node bb0
*** Memory to register looking at:   %1 = alloc_stack $UInt16                        // users: %2, %4
*** Deleting store-only AllocStack:   %1 = alloc_stack $UInt16
Invalidating caller: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
*** ConstPropagation processing: 
Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6
    User:   return %5 : $Bool                               // id: %6
### Run SimplifyCFG on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
SC: ADDING: 6 instrs to worklist
SC: Visiting:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1

SC: Visiting:   %2 = struct_extract %0 : $UInt16, #UInt16._value // user: %4

SC: Visiting:   %3 = struct_extract %0 : $UInt16, #UInt16._value // user: %4

SC: Visiting:   %4 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %3 : $Builtin.Int16) : $Builtin.Int1 // user: %5

SC: Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %6

SC: Visiting:   return %5 : $Bool                               // id: %6

### Run SimplifyCFG on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
	discovered a new reachable node bb0
***** CSE on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
SILCSE VISITING:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1

SILCSE VISITING:   %2 = struct_extract %0 : $UInt16, #UInt16._value // user: %4

SILCSE Adding to value table:   %2 = struct_extract %0 : $UInt16, #UInt16._value // user: %4
 ->   %2 = struct_extract %0 : $UInt16, #UInt16._value // user: %4

SILCSE VISITING:   %3 = struct_extract %0 : $UInt16, #UInt16._value // user: %4

SILCSE CSE:   %3 = struct_extract %0 : $UInt16, #UInt16._value // user: %4
  to:   %2 = struct_extract %0 : $UInt16, #UInt16._value // user: %4

SILCSE VISITING:   %3 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %4

SILCSE Adding to value table:   %3 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %4
 ->   %3 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %4

SILCSE VISITING:   %4 = struct $Bool (%3 : $Builtin.Int1)          // user: %5

SILCSE Adding to value table:   %4 = struct $Bool (%3 : $Builtin.Int1)          // user: %5
 ->   %4 = struct $Bool (%3 : $Builtin.Int1)          // user: %5

SILCSE VISITING:   return %4 : $Bool                               // id: %5

Invalidating caller: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
*** RLE on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 ***
*** ConstPropagation processing: 
Visiting:   %4 = struct $Bool (%3 : $Builtin.Int1)          // user: %5
    User:   return %4 : $Bool                               // id: %5
***** CSE on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
SILCSE VISITING:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1

SILCSE VISITING:   %2 = struct_extract %0 : $UInt16, #UInt16._value // users: %3, %3

SILCSE Adding to value table:   %2 = struct_extract %0 : $UInt16, #UInt16._value // users: %3, %3
 ->   %2 = struct_extract %0 : $UInt16, #UInt16._value // users: %3, %3

SILCSE VISITING:   %3 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %4

SILCSE Adding to value table:   %3 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %4
 ->   %3 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %4

SILCSE VISITING:   %4 = struct $Bool (%3 : $Builtin.Int1)          // user: %5

SILCSE Adding to value table:   %4 = struct $Bool (%3 : $Builtin.Int1)          // user: %5
 ->   %4 = struct $Bool (%3 : $Builtin.Int1)          // user: %5

SILCSE VISITING:   return %4 : $Bool                               // id: %5

		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// specialized f<A>(_:)
sil shared @$s8generics1fySbxSQRzlFs6UInt16V_Tg5 : $@convention(thin) (UInt16) -> Bool {
// %0                                             // users: %2, %1
bb0(%0 : $UInt16):
  debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
  %2 = struct_extract %0 : $UInt16, #UInt16._value // users: %3, %3
  %3 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %4
  %4 = struct $Bool (%3 : $Builtin.Int1)          // user: %5
  return %4 : $Bool                               // id: %5
} // end sil function '$s8generics1fySbxSQRzlFs6UInt16V_Tg5'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %4 : $Bool                               // id: %5
Marking as live:
  %4 = struct $Bool (%3 : $Builtin.Int1)          // user: %5
Marking as live:
  %3 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %4
Marking as live:
  %2 = struct_extract %0 : $UInt16, #UInt16._value // users: %3, %3
Marking as live:
%0 = argument of bb0 : $UInt16                    // users: %2, %1
Marking as live:
  debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
***** CodeMotion on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7fe52bc69ad0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 ***
***** Processing $s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %4 = struct $Bool (%3 : $Builtin.Int1)          // user: %5
VISITING:
      %3 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %4
VISITING:
      %2 = struct_extract %0 : $UInt16, #UInt16._value // users: %3, %3
VISITING:
      debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
VISITING:
      %2 = struct_extract %0 : $UInt16, #UInt16._value // users: %3, %3
VISITING:
      %3 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %4
VISITING:
      %4 = struct $Bool (%3 : $Builtin.Int1)          // user: %5
VISITING:
      return %4 : $Bool                               // id: %5
**** Computing ARC Matching Sets for $s8generics1fySbxSQRzlFs6UInt16V_Tg5 ****

### Run SimplifyCFG on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
	discovered a new reachable node bb0
*** ARCCM on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 ***
***** LowerAggregate on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
Visiting:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
Visiting:   %2 = struct_extract %0 : $UInt16, #UInt16._value // users: %3, %3
Visiting:   %3 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %4
Visiting:   %4 = struct $Bool (%3 : $Builtin.Int1)          // user: %5
Visiting:   return %4 : $Bool                               // id: %5


SILCOMBINE ITERATION #0 on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
SC: ADDING: 5 instrs to worklist
SC: Visiting:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1

SC: Visiting:   %2 = struct_extract %0 : $UInt16, #UInt16._value // users: %3, %3

SC: Visiting:   %3 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %4

SC: Old =   %4 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %5

    New =   %3 = integer_literal $Builtin.Int1, -1

SC: Replacing   %4 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1 // user: %5

    with   %3 = integer_literal $Builtin.Int1, -1

SC: ADD:   %3 = integer_literal $Builtin.Int1, -1          // user: %5

SC: ERASE   %4 = builtin "cmp_eq_Int16"(%2 : $Builtin.Int16, %2 : $Builtin.Int16) : $Builtin.Int1

SC: add op   %2 = struct_extract %0 : $UInt16, #UInt16._value // users: %4, %4

 from erased inst to worklist
SC: ADD:   %2 = struct_extract %0 : $UInt16, #UInt16._value // users: %4, %4

SC: add op   %2 = struct_extract %0 : $UInt16, #UInt16._value // users: %4, %4

 from erased inst to worklist
SC: add   %3 = integer_literal $Builtin.Int1, -1          // user: %4
 from tracking list to worklist
SC: DCE:   %2 = struct_extract %0 : $UInt16, #UInt16._value

SC: ERASE   %2 = struct_extract %0 : $UInt16, #UInt16._value

SC: Visiting:   %2 = integer_literal $Builtin.Int1, -1          // user: %3

SC: Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4



SILCOMBINE ITERATION #1 on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
SC: ADDING: 4 instrs to worklist
SC: Visiting:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1

SC: Visiting:   %2 = integer_literal $Builtin.Int1, -1          // user: %3

SC: Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4

Invalidating caller: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
***** SROA on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
** Mem2Reg on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// specialized f<A>(_:)
sil shared @$s8generics1fySbxSQRzlFs6UInt16V_Tg5 : $@convention(thin) (UInt16) -> Bool {
// %0                                             // user: %1
bb0(%0 : $UInt16):
  debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
  %2 = integer_literal $Builtin.Int1, -1          // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s8generics1fySbxSQRzlFs6UInt16V_Tg5'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Bool                               // id: %4
Marking as live:
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int1, -1          // user: %3
Removing dead argument:
%0 = argument of bb0 : $UInt16                    // user: %1
Removing dead instruction:
  debug_value undef : $UInt16, let, name "v", argno 1 // id: %1
Invalidating caller: $s8generics1fySbxSQRzlFs6UInt16V_Tg5


SILCOMBINE ITERATION #0 on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %1 = integer_literal $Builtin.Int1, -1          // user: %2

SC: Visiting:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3

SC: Visiting:   return %2 : $Bool                               // id: %3

### Run SimplifyCFG on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
	discovered a new reachable node bb0
** StackPromotion **
No loops in $s8generics1fySbxSQRzlFs6UInt16V_Tg5
// specialized f<A>(_:)
sil shared @$s8generics1fySbxSQRzlFs6UInt16V_Tg5 : $@convention(thin) (UInt16) -> Bool {
bb0(%0 : $UInt16):
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
  return %2 : $Bool                               // id: %3
} // end sil function '$s8generics1fySbxSQRzlFs6UInt16V_Tg5'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %2 : $Bool                               // id: %3
Marking as live:
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
Marking as live:
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
Removing dead argument:
%0 = argument of bb0 : $UInt16
Invalidating caller: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
***** CSE on function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5 *****
SILCSE VISITING:   %1 = integer_literal $Builtin.Int1, -1          // user: %2

SILCSE Adding to value table:   %1 = integer_literal $Builtin.Int1, -1          // user: %2
 ->   %1 = integer_literal $Builtin.Int1, -1          // user: %2

SILCSE VISITING:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3

SILCSE Adding to value table:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
 ->   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3

SILCSE VISITING:   return %2 : $Bool                               // id: %3



SILCOMBINE ITERATION #0 on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %1 = integer_literal $Builtin.Int1, -1          // user: %2

SC: Visiting:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3

SC: Visiting:   return %2 : $Bool                               // id: %3

### Run SimplifyCFG on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
	discovered a new reachable node bb0
Running AccessEnforcementReleaseSinking on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
Running local AccessEnforcementOpts on $s8generics1fySbxSQRzlFs6UInt16V_Tg5
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s8generics1fySbxSQRzlFs6UInt16V_Tg5
*** ConstPropagation processing: 
Visiting:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
    User:   return %2 : $Bool                               // id: %3
Visiting:   %1 = integer_literal $Builtin.Int1, -1          // user: %2
    User:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
Visiting:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
    User:   return %2 : $Bool                               // id: %3
Removing in BB
sil_scope 1 { loc "generics.swift":2:6 parent @$s8generics1fySbxSQRzlFs6UInt16V_Tg5 : $@convention(thin) (UInt16) -> Bool }
sil_scope 2 { loc "generics.swift":2:6 parent @$s8generics1fySbxSQRzlFs6UInt16V_Tg5 : $@convention(thin) (UInt16) -> Bool }
sil_scope 3 { loc "generics.swift":2:38 parent 2 }
sil_scope 4 { loc "generics.swift":3:7 parent 3 }
sil_scope 5 { loc "<compiler-generated>":0:0 parent @$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed UInt16, @in_guaranteed UInt16, @thick UInt16.Type) -> Bool inlined_at 4 }
bb0(%0 : $UInt16):
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
  return %2 : $Bool                               // id: %3
 not a check_bounds call   %1 = integer_literal $Builtin.Int1, -1          // user: %2
 not a check_bounds call   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
 not a check_bounds call   return %2 : $Bool                               // id: %3
No loops in $s8generics1fySbxSQRzlFs6UInt16V_Tg5
// specialized f<A>(_:)
sil shared @$s8generics1fySbxSQRzlFs6UInt16V_Tg5 : $@convention(thin) (UInt16) -> Bool {
bb0(%0 : $UInt16):
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
  return %2 : $Bool                               // id: %3
} // end sil function '$s8generics1fySbxSQRzlFs6UInt16V_Tg5'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %2 : $Bool                               // id: %3
Marking as live:
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
Marking as live:
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
Removing dead argument:
%0 = argument of bb0 : $UInt16
Invalidating caller: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
COW Array Opts in Func $s8generics1fySbxSQRzlFs6UInt16V_Tg5
  Skipping Function: No loops.
// specialized f<A>(_:)
sil shared @$s8generics1fySbxSQRzlFs6UInt16V_Tg5 : $@convention(thin) (UInt16) -> Bool {
bb0(%0 : $UInt16):
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
  return %2 : $Bool                               // id: %3
} // end sil function '$s8generics1fySbxSQRzlFs6UInt16V_Tg5'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %2 : $Bool                               // id: %3
Marking as live:
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
Marking as live:
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
Removing dead argument:
%0 = argument of bb0 : $UInt16
Invalidating caller: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
***** Devirtualizer on function:$s8generics1gySbs6UInt16VF *****
    Trying to devirtualize:   %6 = apply %4(%5) : $@convention(thin) (UInt16) -> Bool // user: %8
	discovered a new reachable node bb0
recompute function-effect analysis with UpdateID 1
  >> analyze $s8generics1fySbxSQRzlFs6UInt16V_Tg5
  << finished $s8generics1fySbxSQRzlFs6UInt16V_Tg5
new iteration
  update callers of $s8generics1fySbxSQRzlFs6UInt16V_Tg5

Inline into caller: $s8generics1gySbs6UInt16VF
    decision {c=0, b=40, l=0, c-w=0/4, bb=1, c-bb=2} $s8generics1fySbxSQRzlFs6UInt16V_Tg5
    inline [1->1] $s8generics1fySbxSQRzlFs6UInt16V_Tg5
Invalidating caller: $s8generics1gySbs6UInt16VF
Copy Forwarding in Func $s8generics1gySbs6UInt16VF
***** LowerAggregate on function: $s8generics1gySbs6UInt16VF *****
Visiting:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
Visiting:   %2 = alloc_stack $UInt16                        // users: %3, %6
Visiting:   store %0 to %2 : $*UInt16                       // id: %3
Visiting:   %4 = integer_literal $Builtin.Int1, -1          // user: %5
Visiting:   %5 = struct $Bool (%4 : $Builtin.Int1)          // user: %7
Visiting:   dealloc_stack %2 : $*UInt16                     // id: %6
Visiting:   return %5 : $Bool                               // id: %7
***** SROA on function: $s8generics1gySbs6UInt16VF *****
    Visiting use:   store %0 to %2 : $*UInt16                       // id: %3
        Found a store into the projection.
    Visiting use:   dealloc_stack %2 : $*UInt16                     // id: %6
** Mem2Reg on function: $s8generics1gySbs6UInt16VF **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** Memory to register looking at:   %2 = alloc_stack $UInt16                        // users: %3, %6
*** Deleting store-only AllocStack:   %2 = alloc_stack $UInt16
Invalidating caller: $s8generics1gySbs6UInt16VF
*** ConstPropagation processing: 
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
    User:   return %3 : $Bool                               // id: %4
Visiting:   %2 = integer_literal $Builtin.Int1, -1          // user: %3
    User:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
    User:   return %3 : $Bool                               // id: %4
### Run SimplifyCFG on $s8generics1gySbs6UInt16VF
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on $s8generics1gySbs6UInt16VF
SC: ADDING: 4 instrs to worklist
SC: Visiting:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1

SC: Visiting:   %2 = integer_literal $Builtin.Int1, -1          // user: %3

SC: Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SC: Visiting:   return %3 : $Bool                               // id: %4

***** Devirtualizer on function:$s8generics1gySbs6UInt16VF *****
***** GenericSpecializer on function:$s8generics1gySbs6UInt16VF *****
** Mem2Reg on function: $s8generics1gySbs6UInt16VF **
	discovered a new reachable node bb0
### Run SimplifyCFG on $s8generics1gySbs6UInt16VF
	discovered a new reachable node bb0
***** CSE on function: $s8generics1gySbs6UInt16VF *****
SILCSE VISITING:   debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1

SILCSE VISITING:   %2 = integer_literal $Builtin.Int1, -1          // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int1, -1          // user: %3
 ->   %2 = integer_literal $Builtin.Int1, -1          // user: %3

SILCSE VISITING:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SILCSE Adding to value table:   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
 ->   %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4

SILCSE VISITING:   return %3 : $Bool                               // id: %4

*** RLE on function: $s8generics1gySbs6UInt16VF ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// g(_:)
sil hidden @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool {
// %0                                             // user: %1
bb0(%0 : $UInt16):
  debug_value %0 : $UInt16, let, name "v", argno 1 // id: %1
  %2 = integer_literal $Builtin.Int1, -1          // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$s8generics1gySbs6UInt16VF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Bool                               // id: %4
Marking as live:
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int1, -1          // user: %3
Removing dead argument:
%0 = argument of bb0 : $UInt16                    // user: %1
Removing dead instruction:
  debug_value undef : $UInt16, let, name "v", argno 1 // id: %1
Invalidating caller: $s8generics1gySbs6UInt16VF
***** CodeMotion on function: $s8generics1gySbs6UInt16VF *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7fe52bf2de00
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $s8generics1gySbs6UInt16VF ***
***** Processing $s8generics1gySbs6UInt16VF *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
VISITING:
      %1 = integer_literal $Builtin.Int1, -1          // user: %2
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %1 = integer_literal $Builtin.Int1, -1          // user: %2
VISITING:
      %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
VISITING:
      return %2 : $Bool                               // id: %3
**** Computing ARC Matching Sets for $s8generics1gySbs6UInt16VF ****

### Run SimplifyCFG on $s8generics1gySbs6UInt16VF
	discovered a new reachable node bb0
*** ARCCM on function: $s8generics1gySbs6UInt16VF ***
***** LowerAggregate on function: $s8generics1gySbs6UInt16VF *****
Visiting:   %1 = integer_literal $Builtin.Int1, -1          // user: %2
Visiting:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
Visiting:   return %2 : $Bool                               // id: %3


SILCOMBINE ITERATION #0 on $s8generics1gySbs6UInt16VF
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %1 = integer_literal $Builtin.Int1, -1          // user: %2

SC: Visiting:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3

SC: Visiting:   return %2 : $Bool                               // id: %3

***** SROA on function: $s8generics1gySbs6UInt16VF *****
** Mem2Reg on function: $s8generics1gySbs6UInt16VF **
	discovered a new reachable node bb0
// g(_:)
sil hidden @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool {
bb0(%0 : $UInt16):
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
  return %2 : $Bool                               // id: %3
} // end sil function '$s8generics1gySbs6UInt16VF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %2 : $Bool                               // id: %3
Marking as live:
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
Marking as live:
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
Removing dead argument:
%0 = argument of bb0 : $UInt16
Invalidating caller: $s8generics1gySbs6UInt16VF


SILCOMBINE ITERATION #0 on $s8generics1gySbs6UInt16VF
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %1 = integer_literal $Builtin.Int1, -1          // user: %2

SC: Visiting:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3

SC: Visiting:   return %2 : $Bool                               // id: %3

### Run SimplifyCFG on $s8generics1gySbs6UInt16VF
	discovered a new reachable node bb0
** StackPromotion **
No loops in $s8generics1gySbs6UInt16VF
// g(_:)
sil hidden @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool {
bb0(%0 : $UInt16):
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
  return %2 : $Bool                               // id: %3
} // end sil function '$s8generics1gySbs6UInt16VF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %2 : $Bool                               // id: %3
Marking as live:
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
Marking as live:
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
Removing dead argument:
%0 = argument of bb0 : $UInt16
Invalidating caller: $s8generics1gySbs6UInt16VF
***** CSE on function: $s8generics1gySbs6UInt16VF *****
SILCSE VISITING:   %1 = integer_literal $Builtin.Int1, -1          // user: %2

SILCSE Adding to value table:   %1 = integer_literal $Builtin.Int1, -1          // user: %2
 ->   %1 = integer_literal $Builtin.Int1, -1          // user: %2

SILCSE VISITING:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3

SILCSE Adding to value table:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
 ->   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3

SILCSE VISITING:   return %2 : $Bool                               // id: %3



SILCOMBINE ITERATION #0 on $s8generics1gySbs6UInt16VF
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %1 = integer_literal $Builtin.Int1, -1          // user: %2

SC: Visiting:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3

SC: Visiting:   return %2 : $Bool                               // id: %3

### Run SimplifyCFG on $s8generics1gySbs6UInt16VF
	discovered a new reachable node bb0
Running AccessEnforcementReleaseSinking on $s8generics1gySbs6UInt16VF
Running local AccessEnforcementOpts on $s8generics1gySbs6UInt16VF
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $s8generics1gySbs6UInt16VF
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $s8generics1gySbs6UInt16VF
*** ConstPropagation processing: 
Visiting:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
    User:   return %2 : $Bool                               // id: %3
Visiting:   %1 = integer_literal $Builtin.Int1, -1          // user: %2
    User:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
Visiting:   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
    User:   return %2 : $Bool                               // id: %3
Removing in BB
sil_scope 1 { loc "generics.swift":6:6 parent @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool }
sil_scope 2 { loc "generics.swift":6:29 parent 1 }
sil_scope 3 { loc "generics.swift":7:5 parent 2 }
sil_scope 4 { loc "generics.swift":2:6 parent @$s8generics1fySbxSQRzlFs6UInt16V_Tg5 : $@convention(thin) (UInt16) -> Bool inlined_at 3 }
sil_scope 5 { loc "generics.swift":2:6 parent @$s8generics1fySbxSQRzlFs6UInt16V_Tg5 : $@convention(thin) (UInt16) -> Bool inlined_at 3 }
sil_scope 6 { loc "generics.swift":2:38 parent 5 inlined_at 3 }
sil_scope 7 { loc "generics.swift":3:7 parent 6 inlined_at 3 }
sil_scope 8 { loc "<compiler-generated>":0:0 parent @$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed UInt16, @in_guaranteed UInt16, @thick UInt16.Type) -> Bool inlined_at 7 }
bb0(%0 : $UInt16):
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
  return %2 : $Bool                               // id: %3
 not a check_bounds call   %1 = integer_literal $Builtin.Int1, -1          // user: %2
 not a check_bounds call   %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
 not a check_bounds call   return %2 : $Bool                               // id: %3
No loops in $s8generics1gySbs6UInt16VF
// g(_:)
sil hidden @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool {
bb0(%0 : $UInt16):
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
  return %2 : $Bool                               // id: %3
} // end sil function '$s8generics1gySbs6UInt16VF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %2 : $Bool                               // id: %3
Marking as live:
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
Marking as live:
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
Removing dead argument:
%0 = argument of bb0 : $UInt16
Invalidating caller: $s8generics1gySbs6UInt16VF
COW Array Opts in Func $s8generics1gySbs6UInt16VF
  Skipping Function: No loops.
// g(_:)
sil hidden @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool {
bb0(%0 : $UInt16):
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
  return %2 : $Bool                               // id: %3
} // end sil function '$s8generics1gySbs6UInt16VF'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %2 : $Bool                               // id: %3
Marking as live:
  %2 = struct $Bool (%1 : $Builtin.Int1)          // user: %3
Marking as live:
  %1 = integer_literal $Builtin.Int1, -1          // user: %2
Removing dead argument:
%0 = argument of bb0 : $UInt16
Invalidating caller: $s8generics1gySbs6UInt16VF
Copy Forwarding in Func main
***** LowerAggregate on function: main *****
Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Visiting:   // function_ref g(_:)
  %4 = function_ref @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool // user: %5
Visiting:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool
Visiting:   %6 = integer_literal $Builtin.Int32, 0          // user: %7
Visiting:   %7 = struct $Int32 (%6 : $Builtin.Int32)        // user: %8
Visiting:   return %7 : $Int32                              // id: %8
***** SROA on function: main *****
** Mem2Reg on function: main **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
ExistentialSpecializer Pass: Bail! Due to canSpecializeExistentialArgsInFunction in function: $s8generics1gySbs6UInt16VF -> abort
*** ConstPropagation processing: 
Visiting:   %7 = struct $Int32 (%6 : $Builtin.Int32)        // user: %8
    User:   return %7 : $Int32                              // id: %8
Visiting:   %6 = integer_literal $Builtin.Int32, 0          // user: %7
    User:   %7 = struct $Int32 (%6 : $Builtin.Int32)        // user: %8
Visiting:   %7 = struct $Int32 (%6 : $Builtin.Int32)        // user: %8
    User:   return %7 : $Int32                              // id: %8
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    User:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool
Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3
    User:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5
    User:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool
### Run SimplifyCFG on main
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on main
SC: ADDING: 7 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int16, 9          // user: %3

SC: Visiting:   %3 = struct $UInt16 (%2 : $Builtin.Int16)       // user: %5

SC: Visiting:   // function_ref g(_:)
  %4 = function_ref @$s8generics1gySbs6UInt16VF : $@convention(thin) (UInt16) -> Bool // user: %5

SC: Visiting:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool

SC: Visiting:   %6 = integer_literal $Builtin.Int32, 0          // user: %7

SC: Visiting:   %7 = struct $Int32 (%6 : $Builtin.Int32)        // user: %8

SC: Visiting:   return %7 : $Int32                              // id: %8

***** Devirtualizer on function:main *****
    Trying to devirtualize:   %5 = apply %4(%3) : $@convention(thin) (UInt16) -> Bool
***** GenericSpecializer on function:main *****
recompute function-effect analysis with UpdateID 2
  >> analyze $s8generics1gySbs6UInt16VF
  << finished $s8generics1gySbs6UInt16VF
new iteration
  update callers of $s8generics1gySbs6UInt16VF

Inline into caller: main
    pure-call decision $s8generics1gySbs6UInt16VF
    inline [1->1] $s8generics1gySbs6UInt16VF
Invalidating caller: main
Copy Forwarding in Func main
***** LowerAggregate on function: main *****
Visiting:   %2 = integer_literal $Builtin.Int1, -1          // user: %3
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)
Visiting:   %4 = integer_literal $Builtin.Int32, 0          // user: %5
Visiting:   %5 = struct $Int32 (%4 : $Builtin.Int32)        // user: %6
Visiting:   return %5 : $Int32                              // id: %6
***** SROA on function: main *****
** Mem2Reg on function: main **
	discovered a new reachable node bb0
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %5 = struct $Int32 (%4 : $Builtin.Int32)        // user: %6
    User:   return %5 : $Int32                              // id: %6
Visiting:   %4 = integer_literal $Builtin.Int32, 0          // user: %5
    User:   %5 = struct $Int32 (%4 : $Builtin.Int32)        // user: %6
Visiting:   %5 = struct $Int32 (%4 : $Builtin.Int32)        // user: %6
    User:   return %5 : $Int32                              // id: %6
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)
Visiting:   %2 = integer_literal $Builtin.Int1, -1          // user: %3
    User:   %3 = struct $Bool (%2 : $Builtin.Int1)
Visiting:   %3 = struct $Bool (%2 : $Builtin.Int1)
### Run SimplifyCFG on main
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on main
SC: DCE:   %3 = struct $Bool (%2 : $Builtin.Int1)

SC: ERASE   %3 = struct $Bool (%2 : $Builtin.Int1)

SC: ADDING: 4 instrs to worklist
SC: DCE:   %2 = integer_literal $Builtin.Int1, -1

SC: ERASE   %2 = integer_literal $Builtin.Int1, -1

SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4



SILCOMBINE ITERATION #1 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

Invalidating caller: main
***** Devirtualizer on function:main *****
***** GenericSpecializer on function:main *****
	discovered a new reachable node bb0
** Mem2Reg on function: main **
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
### Run SimplifyCFG on main
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

### Run SimplifyCFG on main
	discovered a new reachable node bb0
***** CSE on function: main *****
SILCSE VISITING:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
 ->   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE VISITING:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE Adding to value table:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
 ->   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE VISITING:   return %3 : $Int32                              // id: %4

*** RLE on function: main ***
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main
***** CodeMotion on function: main *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7fe52e046490
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: main ***
***** Processing main *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
VISITING:
      %2 = integer_literal $Builtin.Int32, 0          // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = integer_literal $Builtin.Int32, 0          // user: %3
VISITING:
      %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
VISITING:
      return %3 : $Int32                              // id: %4
**** Computing ARC Matching Sets for main ****

### Run SimplifyCFG on main
	discovered a new reachable node bb0
*** ARCCM on function: main ***
***** LowerAggregate on function: main *****
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   return %3 : $Int32                              // id: %4


SILCOMBINE ITERATION #0 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

***** SROA on function: main *****
** Mem2Reg on function: main **
	discovered a new reachable node bb0
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main


SILCOMBINE ITERATION #0 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

### Run SimplifyCFG on main
	discovered a new reachable node bb0
** StackPromotion **
No loops in main
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main
***** CSE on function: main *****
SILCSE VISITING:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
 ->   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE VISITING:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE Adding to value table:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
 ->   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE VISITING:   return %3 : $Int32                              // id: %4



SILCOMBINE ITERATION #0 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

### Run SimplifyCFG on main
	discovered a new reachable node bb0
Running AccessEnforcementReleaseSinking on main
Running local AccessEnforcementOpts on main
**** LOOP REGION FUNCTION INFO ****
Analyzing function: main
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in main
*** ConstPropagation processing: 
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
Removing in BB
sil_scope 1 {  parent @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 }
sil_scope 2 { loc "generics.swift":10:1 parent 1 }
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
 not a check_bounds call   %2 = integer_literal $Builtin.Int32, 0          // user: %3
 not a check_bounds call   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
 not a check_bounds call   return %3 : $Int32                              // id: %4
No loops in main
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main
COW Array Opts in Func main
  Skipping Function: No loops.
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main
*** Optimizing the module (MidModulePasses+StackPromote) *** 
Running DeadFuncElimination
running dead function elimination
running function elimination
    scan witness table $ss6UInt16VSQsWP
  anchor function: main
    scan function main
    scan function $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
  erase dead function $s8generics1gySbs6UInt16VF
Invalidating caller: $s8generics1gySbs6UInt16VF
  invalidate $s8generics1gySbs6UInt16VF
PMVerifierAnalysis. Delete: $s8generics1gySbs6UInt16VF
  erase dead function $s8generics1fySbxSQRzlF
Invalidating caller: $s8generics1fySbxSQRzlF
PMVerifierAnalysis. Delete: $s8generics1fySbxSQRzlF
  erase dead function $s8generics1fySbxSQRzlFs6UInt16V_Tg5
Invalidating caller: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
  invalidate $s8generics1fySbxSQRzlFs6UInt16V_Tg5
PMVerifierAnalysis. Delete: $s8generics1fySbxSQRzlFs6UInt16V_Tg5
Process imports in function: main
Process imports in function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
** GlobalPropertyOpt **
  scan function main
    scan basic block 0
  scan function $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
    scan basic block 0
    scan basic block 1
    scan basic block 2
  propagate properties
     address escapes: unknown-address
      set not-native: unknown-address
    handle non-native entry: unknown-address
** StackPromotion in main **
*** Optimizing the module (MidLevel) *** 
Copy Forwarding in Func main
***** LowerAggregate on function: main *****
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   return %3 : $Int32                              // id: %4
***** SROA on function: main *****
** Mem2Reg on function: main **
	discovered a new reachable node bb0
*** ConstPropagation processing: 
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
### Run SimplifyCFG on main
	discovered a new reachable node bb0


SILCOMBINE ITERATION #0 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

***** Devirtualizer on function:main *****
***** GenericSpecializer on function:main *****
Serializing SILModule in SerializeSILPass
Invalidating caller: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
	discovered a new reachable node bb0
	discovered a new reachable node bb1
	discovered a new reachable node bb2
Argument types for entry point BB:
$*UInt16
$*UInt16
$@thick UInt16.Type
Input types for SIL function type @convention(witness_method: Equatable) (@in_guaranteed UInt16, @in_guaranteed UInt16, @thick UInt16.Type) -> Bool:
$*UInt16
$*UInt16
$@thick UInt16.Type
Verifying ownership of: %0 = argument of bb0 : $*UInt16                   // user: %3
    Gathering and classifying uses!
        Regular User:   %3 = load [trivial] %0 : $*UInt16               // user: %5
    No lifetime ending users?! Bailing early.
Verifying ownership of: %1 = argument of bb0 : $*UInt16                   // user: %4
    Gathering and classifying uses!
        Regular User:   %4 = load [trivial] %1 : $*UInt16               // user: %6
    No lifetime ending users?! Bailing early.
Verifying ownership of: %2 = argument of bb0 : $@thick UInt16.Type
    Gathering and classifying uses!
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %3 = load [trivial] %0 : $*UInt16               // user: %5
    Gathering and classifying uses!
        Regular User:   %5 = struct_extract %3 : $UInt16, #UInt16._value // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %4 = load [trivial] %1 : $*UInt16               // user: %6
    Gathering and classifying uses!
        Regular User:   %6 = struct_extract %4 : $UInt16, #UInt16._value // user: %7
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %5 = struct_extract %3 : $UInt16, #UInt16._value // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = builtin "cmp_eq_Int16"(%5 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %6 = struct_extract %4 : $UInt16, #UInt16._value // user: %7
    Gathering and classifying uses!
        Regular User:   %7 = builtin "cmp_eq_Int16"(%5 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %7 = builtin "cmp_eq_Int16"(%5 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
    Gathering and classifying uses!
        Regular User:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %11
    No lifetime ending users?! Bailing early.
Verifying ownership of:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %11
    Gathering and classifying uses!
        Regular User:   return %8 : $Bool                               // id: %11
    No lifetime ending users?! Bailing early.
  return %8 : $Bool                               // id: %11
function return type: $Bool
return inst type: $Bool
Invalidating caller: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
### Run SimplifyCFG on main
	discovered a new reachable node bb0
***** CSE on function: main *****
SILCSE VISITING:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
 ->   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE VISITING:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE Adding to value table:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
 ->   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE VISITING:   return %3 : $Int32                              // id: %4

*** RLE on function: main ***
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main
***** CodeMotion on function: main *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7fe52e0461c0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: main ***
***** Processing main *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
VISITING:
      %2 = integer_literal $Builtin.Int32, 0          // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = integer_literal $Builtin.Int32, 0          // user: %3
VISITING:
      %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
VISITING:
      return %3 : $Int32                              // id: %4
**** Computing ARC Matching Sets for main ****

### Run SimplifyCFG on main
	discovered a new reachable node bb0
*** ARCCM on function: main ***
*** FSO on function: main ***
Constructing Projection Tree For : $Int32
Constructing Projection Tree For : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
	discovered a new reachable node bb0
	discovered a new reachable node bb1
	discovered a new reachable node bb2
** Mem2Reg on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW **
	discovered a new reachable node bb0
	discovered a new reachable node bb1
	discovered a new reachable node bb2
*** ConstPropagation processing: 
Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %11
    User:   return %8 : $Bool                               // id: %11
### Run SimplifyCFG on $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
merge bb1 with bb2
merge bb0 with bb1
	discovered a new reachable node bb0
	discovered a new reachable node bb0
Invalidating caller: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW


SILCOMBINE ITERATION #0 on $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
SC: ADDING: 7 instrs to worklist
SC: ADD:   %3 = struct_element_addr %0 : $*UInt16, #UInt16._value

SC: ADD:   %4 = load %3 : $*Builtin.Int16

Replacing   %7 = struct_extract %5 : $UInt16, #UInt16._value // user: %9
    with   %4 = load %3 : $*Builtin.Int16

SC: ERASE   %7 = struct_extract %5 : $UInt16, #UInt16._value

SC: add op   %5 = load %0 : $*UInt16                         // user: %7

 from erased inst to worklist
SC: ADD:   %5 = load %0 : $*UInt16                         // user: %7

SC: ERASE   %5 = load %0 : $*UInt16

SC: Visiting:   %4 = load %3 : $*Builtin.Int16                  // user: %7

SC: Visiting:   %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4

SC: ADD:   %5 = struct_element_addr %1 : $*UInt16, #UInt16._value

SC: ADD:   %6 = load %5 : $*Builtin.Int16

Replacing   %8 = struct_extract %7 : $UInt16, #UInt16._value // user: %9
    with   %6 = load %5 : $*Builtin.Int16

SC: ERASE   %8 = struct_extract %7 : $UInt16, #UInt16._value

SC: add op   %7 = load %1 : $*UInt16                         // user: %8

 from erased inst to worklist
SC: ADD:   %7 = load %1 : $*UInt16                         // user: %8

SC: ERASE   %7 = load %1 : $*UInt16

SC: Visiting:   %6 = load %5 : $*Builtin.Int16                  // user: %7

SC: Visiting:   %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6

SC: Visiting:   %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8

SC: Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9

SC: Visiting:   return %8 : $Bool                               // id: %9



SILCOMBINE ITERATION #1 on $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
SC: ADDING: 7 instrs to worklist
SC: Visiting:   %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4

SC: Visiting:   %4 = load %3 : $*Builtin.Int16                  // user: %7

SC: Visiting:   %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6

SC: Visiting:   %6 = load %5 : $*Builtin.Int16                  // user: %7

SC: Visiting:   %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8

SC: Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9

SC: Visiting:   return %8 : $Bool                               // id: %9

Invalidating caller: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
### Run SimplifyCFG on $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
	discovered a new reachable node bb0
	discovered a new reachable node bb0
***** CSE on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW *****
SILCSE VISITING:   %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4

SILCSE Adding to value table:   %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
 ->   %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4

SILCSE VISITING:   %4 = load %3 : $*Builtin.Int16                  // user: %7

SILCSE VISITING:   %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6

SILCSE Adding to value table:   %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
 ->   %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6

SILCSE VISITING:   %6 = load %5 : $*Builtin.Int16                  // user: %7

SILCSE VISITING:   %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8

SILCSE Adding to value table:   %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
 ->   %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8

SILCSE VISITING:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9

SILCSE Adding to value table:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
 ->   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9

SILCSE VISITING:   return %8 : $Bool                               // id: %9

*** RLE on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW ***
Visiting type: $*Builtin.Int16
    No projections. Finished projection list
LSLocation #0%0 = argument of bb0 : $*UInt16                   // user: %3
Projection Path [$*UInt16
  Field: var _value: Builtin.Int16 in: $*Builtin.Int16]
LSLocation #1%1 = argument of bb0 : $*UInt16                   // user: %5
Projection Path [$*UInt16
  Field: var _value: Builtin.Int16 in: $*Builtin.Int16]
PROCESS bb0 for RLE.
Visiting type: $Builtin.Int16
    No projections. Finished projection list
*** ConstPropagation processing: 
Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
    User:   return %8 : $Bool                               // id: %9
		Looking for trivial roots
Found a new trivial root: bb0
Last visited node: bb0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: bb0
Found roots: bb0 
	discovered a new reachable node nullptr
	discovered a new reachable node bb0
// protocol witness for static Equatable.== infix(_:_:) in conformance UInt16
sil shared_external [transparent] [thunk] @$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed UInt16, @in_guaranteed UInt16, @thick UInt16.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*UInt16, %1 : $*UInt16, %2 : $@thick UInt16.Type):
  %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
  %4 = load %3 : $*Builtin.Int16                  // user: %7
  %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
  %6 = load %5 : $*Builtin.Int16                  // user: %7
  %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
  %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
  return %8 : $Bool                               // id: %9
} // end sil function '$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %8 : $Bool                               // id: %9
Marking as live:
  %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
Marking as live:
  %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
Marking as live:
  %4 = load %3 : $*Builtin.Int16                  // user: %7
Marking as live:
  %6 = load %5 : $*Builtin.Int16                  // user: %7
Marking as live:
  %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
Marking as live:
%1 = argument of bb0 : $*UInt16                   // user: %5
Marking as live:
  %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
Marking as live:
%0 = argument of bb0 : $*UInt16                   // user: %3
Removing dead argument:
%2 = argument of bb0 : $@thick UInt16.Type
Invalidating caller: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
***** CodeMotion on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7fe52e0475a0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW ***
***** Processing $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
VISITING:
      %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
VISITING:
      %6 = load %5 : $*Builtin.Int16                  // user: %7
VISITING:
      %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
VISITING:
      %4 = load %3 : $*Builtin.Int16                  // user: %7
VISITING:
      %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
VISITING:
      %4 = load %3 : $*Builtin.Int16                  // user: %7
VISITING:
      %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
VISITING:
      %6 = load %5 : $*Builtin.Int16                  // user: %7
VISITING:
      %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
VISITING:
      %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
VISITING:
      return %8 : $Bool                               // id: %9
**** Computing ARC Matching Sets for $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW ****

### Run SimplifyCFG on $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
	discovered a new reachable node bb0
*** ARCCM on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW ***
*** FSO on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW ***
Constructing Projection Tree For : $*UInt16
Constructing Projection Tree For : $*UInt16
Constructing Projection Tree For : $@thick UInt16.Type
*** Optimizing the module (ClosureSpecialize) *** 
Running DeadFuncElimination
running dead function elimination
running function elimination
    scan witness table $ss6UInt16VSQsWP
  anchor function: main
    scan function main
    scan function $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
*** DSE on function: main ***


SILCOMBINE ITERATION #0 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

*** ConstPropagation processing: 
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
    User:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
    User:   return %3 : $Int32                              // id: %4
*** DSE on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW ***


SILCOMBINE ITERATION #0 on $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
SC: ADDING: 7 instrs to worklist
SC: Visiting:   %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4

SC: Visiting:   %4 = load %3 : $*Builtin.Int16                  // user: %7

SC: Visiting:   %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6

SC: Visiting:   %6 = load %5 : $*Builtin.Int16                  // user: %7

SC: Visiting:   %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8

SC: Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9

SC: Visiting:   return %8 : $Bool                               // id: %9

*** ConstPropagation processing: 
Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
    User:   return %8 : $Bool                               // id: %9
Optimizing callsites that take closure argument in main
** StackPromotion in main **
** StackPromotion **
Optimizing callsites that take closure argument in $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
** StackPromotion in $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW **
** StackPromotion **
*** Optimizing the module (LowLevel) *** 
** ReleaseDevirtualizer **
Copy Forwarding in Func main
***** LowerAggregate on function: main *****
Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Visiting:   return %3 : $Int32                              // id: %4
***** SROA on function: main *****
** Mem2Reg on function: main **
	discovered a new reachable node bb0
***** Devirtualizer on function:main *****
***** GenericSpecializer on function:main *****
### Run SimplifyCFG on main
	discovered a new reachable node bb0
***** CSE on function: main *****
SILCSE VISITING:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE Adding to value table:   %2 = integer_literal $Builtin.Int32, 0          // user: %3
 ->   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SILCSE VISITING:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE Adding to value table:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
 ->   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SILCSE VISITING:   return %3 : $Int32                              // id: %4

*** RLE on function: main ***
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main
***** CodeMotion on function: main *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7fe52e0475a0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: main ***
***** Processing main *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
VISITING:
      %2 = integer_literal $Builtin.Int32, 0          // user: %3
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %2 = integer_literal $Builtin.Int32, 0          // user: %3
VISITING:
      %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
VISITING:
      return %3 : $Int32                              // id: %4
**** Computing ARC Matching Sets for main ****

### Run SimplifyCFG on main
	discovered a new reachable node bb0
Running on function main
***** CodeMotion on function: main *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7fe52e047670
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: main ***
*** DSE on function: main ***
*** FSO on function: main ***
Constructing Projection Tree For : $Int32
Constructing Projection Tree For : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
** ReleaseDevirtualizer **
Copy Forwarding in Func $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
***** LowerAggregate on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW *****
Visiting:   %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
Visiting:   %4 = load %3 : $*Builtin.Int16                  // user: %7
Visiting:   %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
Visiting:   %6 = load %5 : $*Builtin.Int16                  // user: %7
Visiting:   %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
Visiting:   return %8 : $Bool                               // id: %9
***** SROA on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW *****
** Mem2Reg on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW **
	discovered a new reachable node bb0
***** Devirtualizer on function:$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW *****
***** GenericSpecializer on function:$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW *****
### Run SimplifyCFG on $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
	discovered a new reachable node bb0
***** CSE on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW *****
SILCSE VISITING:   %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4

SILCSE Adding to value table:   %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
 ->   %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4

SILCSE VISITING:   %4 = load %3 : $*Builtin.Int16                  // user: %7

SILCSE VISITING:   %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6

SILCSE Adding to value table:   %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
 ->   %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6

SILCSE VISITING:   %6 = load %5 : $*Builtin.Int16                  // user: %7

SILCSE VISITING:   %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8

SILCSE Adding to value table:   %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
 ->   %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8

SILCSE VISITING:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9

SILCSE Adding to value table:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
 ->   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9

SILCSE VISITING:   return %8 : $Bool                               // id: %9

*** RLE on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW ***
LSLocation #0%0 = argument of bb0 : $*UInt16                   // user: %3
Projection Path [$*UInt16
  Field: var _value: Builtin.Int16 in: $*Builtin.Int16]
LSLocation #1%1 = argument of bb0 : $*UInt16                   // user: %5
Projection Path [$*UInt16
  Field: var _value: Builtin.Int16 in: $*Builtin.Int16]
PROCESS bb0 for RLE.
// protocol witness for static Equatable.== infix(_:_:) in conformance UInt16
sil shared_external [transparent] [thunk] @$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed UInt16, @in_guaranteed UInt16, @thick UInt16.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*UInt16, %1 : $*UInt16, %2 : $@thick UInt16.Type):
  %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
  %4 = load %3 : $*Builtin.Int16                  // user: %7
  %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
  %6 = load %5 : $*Builtin.Int16                  // user: %7
  %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
  %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
  return %8 : $Bool                               // id: %9
} // end sil function '$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %8 : $Bool                               // id: %9
Marking as live:
  %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
Marking as live:
  %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
Marking as live:
  %4 = load %3 : $*Builtin.Int16                  // user: %7
Marking as live:
  %6 = load %5 : $*Builtin.Int16                  // user: %7
Marking as live:
  %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
Marking as live:
%1 = argument of bb0 : $*UInt16                   // user: %5
Marking as live:
  %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
Marking as live:
%0 = argument of bb0 : $*UInt16                   // user: %3
Removing dead argument:
%2 = argument of bb0 : $@thick UInt16.Type
Invalidating caller: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
***** CodeMotion on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7fe52e0477c0
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW ***
***** Processing $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW *****
<<<< Processing Bottom Up! >>>>
Processing BB#: 0
Merging Successors!
>>>> Bottom Up!
VISITING:
      %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
VISITING:
      %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
VISITING:
      %6 = load %5 : $*Builtin.Int16                  // user: %7
VISITING:
      %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
VISITING:
      %4 = load %3 : $*Builtin.Int16                  // user: %7
VISITING:
      %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
<<<< Processing Top Down! >>>>
Processing BB#: 0
Merging Predecessors!
>>>> Top Down!
VISITING:
      %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
VISITING:
      %4 = load %3 : $*Builtin.Int16                  // user: %7
VISITING:
      %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
VISITING:
      %6 = load %5 : $*Builtin.Int16                  // user: %7
VISITING:
      %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
VISITING:
      %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
VISITING:
      return %8 : $Bool                               // id: %9
**** Computing ARC Matching Sets for $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW ****

### Run SimplifyCFG on $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
	discovered a new reachable node bb0
Running on function $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
***** CodeMotion on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW *****
Visiting BB RPO#0
    Predecessors (empty if no predecessors):
    State Addr: 0x7fe52e047910
    Merging predecessors!
            No Preds.
    Attempting to move releases into predecessors!
    Performing the dataflow!
*** ARCCM on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW ***
*** DSE on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW ***
*** FSO on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW ***
  cannot specialize function -> abort
*** Optimizing the module (LateLoopOpt) *** 
Running DeadFuncElimination
running dead function elimination
running function elimination
    scan witness table $ss6UInt16VSQsWP
  anchor function: main
    scan function main
    scan function $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
Running AccessEnforcementReleaseSinking on main
Running local AccessEnforcementOpts on main
Skipping AccessConflictAndMergeAnalysis...
No loops in main
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %3 : $Int32                              // id: %4
Marking as live:
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
Marking as live:
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
Removing dead argument:
%0 = argument of bb0 : $Int32
Removing dead argument:
%1 = argument of bb0 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Invalidating caller: main


SILCOMBINE ITERATION #0 on main
SC: ADDING: 3 instrs to worklist
SC: Visiting:   %2 = integer_literal $Builtin.Int32, 0          // user: %3

SC: Visiting:   %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4

SC: Visiting:   return %3 : $Int32                              // id: %4

### Run SimplifyCFG on main
	discovered a new reachable node bb0
*** ARCCM on function: main ***
Running AccessEnforcementReleaseSinking on main
Running local AccessEnforcementOpts on main
Skipping AccessConflictAndMergeAnalysis...
Running AccessEnforcementReleaseSinking on $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
Running local AccessEnforcementOpts on $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
**** LOOP REGION FUNCTION INFO ****
Analyzing function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
Visiting BB Regions:
Visiting BB: bb0 RPO: 0
Checking Preds for Back Edges

Initializing Loop Region 1
Skipping AccessConflictAndMergeAnalysis...
No loops in $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
// protocol witness for static Equatable.== infix(_:_:) in conformance UInt16
sil shared_external [transparent] [thunk] @$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed UInt16, @in_guaranteed UInt16, @thick UInt16.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*UInt16, %1 : $*UInt16, %2 : $@thick UInt16.Type):
  %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
  %4 = load %3 : $*Builtin.Int16                  // user: %7
  %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
  %6 = load %5 : $*Builtin.Int16                  // user: %7
  %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
  %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
  return %8 : $Bool                               // id: %9
} // end sil function '$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW'

=============================--------------------------------
Inorder PostDominator Tree: DFSNumbers invalid: 0 slow queries.
  [1]  <<exit node>> {4294967295,4294967295} [0]
    [2] bb0 {4294967295,4294967295} [1]
Roots: bb0 
Marking as live:
  return %8 : $Bool                               // id: %9
Marking as live:
  %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
Marking as live:
  %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
Marking as live:
  %4 = load %3 : $*Builtin.Int16                  // user: %7
Marking as live:
  %6 = load %5 : $*Builtin.Int16                  // user: %7
Marking as live:
  %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
Marking as live:
%1 = argument of bb0 : $*UInt16                   // user: %5
Marking as live:
  %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
Marking as live:
%0 = argument of bb0 : $*UInt16                   // user: %3
Removing dead argument:
%2 = argument of bb0 : $@thick UInt16.Type
Invalidating caller: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW


SILCOMBINE ITERATION #0 on $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
SC: ADDING: 7 instrs to worklist
SC: Visiting:   %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4

SC: Visiting:   %4 = load %3 : $*Builtin.Int16                  // user: %7

SC: Visiting:   %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6

SC: Visiting:   %6 = load %5 : $*Builtin.Int16                  // user: %7

SC: Visiting:   %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8

SC: Visiting:   %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9

SC: Visiting:   return %8 : $Bool                               // id: %9

### Run SimplifyCFG on $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
	discovered a new reachable node bb0
*** ARCCM on function: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW ***
Running AccessEnforcementReleaseSinking on $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
Running local AccessEnforcementOpts on $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
Skipping AccessConflictAndMergeAnalysis...
No loops in main
No loops in $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
*** Optimizing the module (SIL Debug Info Generator) *** 
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
  return %3 : $Int32                              // id: %4
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$*UInt16
$*UInt16
$@thick UInt16.Type
Input types for SIL function type @convention(witness_method: Equatable) (@in_guaranteed UInt16, @in_guaranteed UInt16, @thick UInt16.Type) -> Bool:
$*UInt16
$*UInt16
$@thick UInt16.Type
  return %8 : $Bool                               // id: %9
function return type: $Bool
return inst type: $Bool
*** Checking witness tables for duplicates ***
Witness Table:
sil_witness_table public_external UInt16: Equatable module Swift {
  method #Equatable."=="!1: <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance UInt16
}

*** Checking default witness tables for duplicates ***
*** Checking property descriptors ***
	discovered a new reachable node bb0
Argument types for entry point BB:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
Input types for SIL function type @convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32:
$Int32
$UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>
  return %3 : $Int32                              // id: %4
function return type: $Int32
return inst type: $Int32
	discovered a new reachable node bb0
Argument types for entry point BB:
$*UInt16
$*UInt16
$@thick UInt16.Type
Input types for SIL function type @convention(witness_method: Equatable) (@in_guaranteed UInt16, @in_guaranteed UInt16, @thick UInt16.Type) -> Bool:
$*UInt16
$*UInt16
$@thick UInt16.Type
  return %8 : $Bool                               // id: %9
function return type: $Bool
return inst type: $Bool
*** Checking witness tables for duplicates ***
Witness Table:
sil_witness_table public_external UInt16: Equatable module Swift {
  method #Equatable."=="!1: <Self where Self : Equatable> (Self.Type) -> (Self, Self) -> Bool : @$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW	// protocol witness for static Equatable.== infix(_:_:) in conformance UInt16
}

*** Checking default witness tables for duplicates ***
*** Checking property descriptors ***
CallerAnalysis: Creating caller info for: main
CallerAnalysis: Creating caller info for: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
PMVerifierAnalysis. Add: main
PMVerifierAnalysis. Add: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
*** Optimizing the module (Address Lowering) *** 
CallerAnalysis: Creating caller info for: main
CallerAnalysis: Creating caller info for: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
PMVerifierAnalysis. Add: main
PMVerifierAnalysis. Add: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
*** Optimizing the module (IRGen Preparation) *** 

REWRITING: main// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'

Invalidating caller: main

REWRITING: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW// protocol witness for static Equatable.== infix(_:_:) in conformance UInt16
sil shared_external [transparent] [thunk] @$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW : $@convention(witness_method: Equatable) (@in_guaranteed UInt16, @in_guaranteed UInt16, @thick UInt16.Type) -> Bool {
// %0                                             // user: %3
// %1                                             // user: %5
bb0(%0 : $*UInt16, %1 : $*UInt16, %2 : $@thick UInt16.Type):
  %3 = struct_element_addr %0 : $*UInt16, #UInt16._value // user: %4
  %4 = load %3 : $*Builtin.Int16                  // user: %7
  %5 = struct_element_addr %1 : $*UInt16, #UInt16._value // user: %6
  %6 = load %5 : $*Builtin.Int16                  // user: %7
  %7 = builtin "cmp_eq_Int16"(%4 : $Builtin.Int16, %6 : $Builtin.Int16) : $Builtin.Int1 // user: %8
  %8 = struct $Bool (%7 : $Builtin.Int1)          // user: %9
  return %8 : $Bool                               // id: %9
} // end sil function '$ss6UInt16VSQsSQ2eeoiySbx_xtFZTW'

Invalidating caller: $ss6UInt16VSQsSQ2eeoiySbx_xtFZTW
emitting SIL function: @main
// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int32, 0          // user: %3
  %3 = struct $Int32 (%2 : $Builtin.Int32)        // user: %4
  return %3 : $Int32                              // id: %4
} // end sil function 'main'


define i32 @main(i32, i8**) #0 !dbg !6 {
  %3 = alloca i1
  %4 = bitcast i8** %1 to i8*
  ret i32 0, !dbg !19
}
	discovered a new reachable node %2

Features:+sse2,+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87
CPU:penryn

Subtarget features: SSELevel 5, 3DNowLevel 1, 64bit 1
G_ADD (opcode 35): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SUB (opcode 36): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_MUL (opcode 37): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SDIV (opcode 38): 1 type index
.. the first uncovered type index: 1, OK
G_UDIV (opcode 39): 1 type index
.. opcode 39 is aliased to 38
.. opcode 38 is aliased to 0
.. the first uncovered type index: 1, OK
G_SREM (opcode 40): 1 type index
.. opcode 40 is aliased to 38
.. opcode 38 is aliased to 0
.. the first uncovered type index: 1, OK
G_UREM (opcode 41): 1 type index
.. opcode 41 is aliased to 38
.. opcode 38 is aliased to 0
.. the first uncovered type index: 1, OK
G_AND (opcode 42): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_OR (opcode 43): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_XOR (opcode 44): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_IMPLICIT_DEF (opcode 45): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_PHI (opcode 46): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FRAME_INDEX (opcode 47): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_GLOBAL_VALUE (opcode 48): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_EXTRACT (opcode 49): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UNMERGE_VALUES (opcode 50): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_INSERT (opcode 51): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_MERGE_VALUES (opcode 52): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BUILD_VECTOR (opcode 53): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BUILD_VECTOR_TRUNC (opcode 54): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CONCAT_VECTORS (opcode 55): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_PTRTOINT (opcode 56): 2 type indices
.. the first uncovered type index: 2, OK
G_INTTOPTR (opcode 57): 2 type indices
.. the first uncovered type index: 2, OK
G_BITCAST (opcode 58): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_INTRINSIC_TRUNC (opcode 59): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_INTRINSIC_ROUND (opcode 60): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_LOAD (opcode 61): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SEXTLOAD (opcode 62): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ZEXTLOAD (opcode 63): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_STORE (opcode 64): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMIC_CMPXCHG_WITH_SUCCESS (opcode 65): 3 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMIC_CMPXCHG (opcode 66): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_XCHG (opcode 67): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_ADD (opcode 68): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_SUB (opcode 69): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_AND (opcode 70): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_NAND (opcode 71): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_OR (opcode 72): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_XOR (opcode 73): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_MAX (opcode 74): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_MIN (opcode 75): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UMAX (opcode 76): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UMIN (opcode 77): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BRCOND (opcode 78): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_BRINDIRECT (opcode 79): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_INTRINSIC (opcode 80): 0 type indices
.. type index coverage check SKIPPED: no rules defined
G_INTRINSIC_W_SIDE_EFFECTS (opcode 81): 0 type indices
.. type index coverage check SKIPPED: no rules defined
G_ANYEXT (opcode 82): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_TRUNC (opcode 83): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CONSTANT (opcode 84): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FCONSTANT (opcode 85): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_VASTART (opcode 86): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_VAARG (opcode 87): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SEXT (opcode 88): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ZEXT (opcode 89): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SHL (opcode 90): 2 type indices
.. the first uncovered type index: 2, OK
G_LSHR (opcode 91): 2 type indices
.. opcode 91 is aliased to 90
.. opcode 90 is aliased to 0
.. the first uncovered type index: 2, OK
G_ASHR (opcode 92): 2 type indices
.. opcode 92 is aliased to 90
.. opcode 90 is aliased to 0
.. the first uncovered type index: 2, OK
G_ICMP (opcode 93): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FCMP (opcode 94): 2 type indices
.. the first uncovered type index: 2, OK
G_SELECT (opcode 95): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UADDO (opcode 96): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UADDE (opcode 97): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_USUBO (opcode 98): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_USUBE (opcode 99): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SADDO (opcode 100): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SADDE (opcode 101): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SSUBO (opcode 102): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SSUBE (opcode 103): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UMULO (opcode 104): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SMULO (opcode 105): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UMULH (opcode 106): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SMULH (opcode 107): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FADD (opcode 108): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FSUB (opcode 109): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FMUL (opcode 110): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FMA (opcode 111): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FDIV (opcode 112): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FREM (opcode 113): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FPOW (opcode 114): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FEXP (opcode 115): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FEXP2 (opcode 116): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FLOG (opcode 117): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FLOG2 (opcode 118): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FLOG10 (opcode 119): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FNEG (opcode 120): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FPEXT (opcode 121): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FPTRUNC (opcode 122): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FPTOSI (opcode 123): 2 type indices
.. the first uncovered type index: 2, OK
G_FPTOUI (opcode 124): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SITOFP (opcode 125): 2 type indices
.. the first uncovered type index: 2, OK
G_UITOFP (opcode 126): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FABS (opcode 127): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FCOPYSIGN (opcode 128): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FCANONICALIZE (opcode 129): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_GEP (opcode 130): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_PTR_MASK (opcode 131): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SMIN (opcode 132): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SMAX (opcode 133): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_UMIN (opcode 134): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_UMAX (opcode 135): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_BR (opcode 136): 0 type indices
.. type index coverage check SKIPPED: no rules defined
G_BRJT (opcode 137): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_INSERT_VECTOR_ELT (opcode 138): 3 type indices
.. type index coverage check SKIPPED: no rules defined
G_EXTRACT_VECTOR_ELT (opcode 139): 3 type indices
.. type index coverage check SKIPPED: no rules defined
G_SHUFFLE_VECTOR (opcode 140): 3 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTTZ (opcode 141): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTTZ_ZERO_UNDEF (opcode 142): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTLZ (opcode 143): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTLZ_ZERO_UNDEF (opcode 144): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTPOP (opcode 145): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BSWAP (opcode 146): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FCEIL (opcode 147): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FCOS (opcode 148): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FSIN (opcode 149): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FSQRT (opcode 150): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FFLOOR (opcode 151): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FRINT (opcode 152): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FNEARBYINT (opcode 153): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_ADDRSPACE_CAST (opcode 154): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BLOCK_ADDR (opcode 155): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_JUMP_TABLE (opcode 156): 1 type index
.. type index coverage check SKIPPED: no rules defined
	discovered a new reachable node %2
SROA function: main
EarlyCSE DCE:   %3 = bitcast i8** %1 to i8*
	discovered a new reachable node %2
Marking Block Executable: 
markOverdefined: i32 %0
markOverdefined: i8** %1

Popped off OI-WL: i8** %1

Popped off OI-WL: i32 %0

Popped off BBWL: 
  ret i32 0, !dbg !33

markConstant: i32 0: 
define i32 @main(i32, i8**) #0 !dbg !24 {
  ret i32 0, !dbg !33
}


Popped off I-WL: 
define i32 @main(i32, i8**) #0 !dbg !24 {
  ret i32 0, !dbg !33
}

RESOLVING UNDEFS
Marking Block Executable: 

Popped off BBWL: 
  ret i32 0, !dbg !33

Popped off V-WL: 
define i32 @main(i32, i8**) #0 !dbg !24 {
  ret i32 0, !dbg !33
}

	discovered a new reachable node %2
DeadArgumentEliminationPass - Deleting dead varargs
DeadArgumentEliminationPass - Determining liveness
DeadArgumentEliminationPass - Intrinsically live fn: main
	discovered a new reachable node %2


INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0, !dbg !33
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: 'main'<<0x7fe52bc73890>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: main: 0 call sites.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: 'main'<<0x7fe52bc73890>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %2
SROA function: main
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function 'main'
	discovered a new reachable node %2


INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0, !dbg !33
Calculated Rank[] = 3
Calculated Rank[] = 4
	discovered a new reachable node %2
	discovered a new reachable node %2


INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0, !dbg !33
Instruction Merger
GVN iteration: 0
SCCP on function 'main'
Marking Block Executable: 
markOverdefined: i32 %0
markOverdefined: i8** %1

Popped off OI-WL: i8** %1

Popped off OI-WL: i32 %0

Popped off BBWL: 
  ret i32 0, !dbg !33

RESOLVING UNDEFs
DemandedBits: Root:   ret i32 0, !dbg !33


INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0, !dbg !33
Jump threading on function 'main'
		Looking for trivial roots
Found a new trivial root: %2
Last visited node: %2
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %2
Found roots: %2 
	discovered a new reachable node nullptr
	discovered a new reachable node %2
mark live:   ret i32 0, !dbg !33
mark block live: 
post-dom root child is a return: 
work live:   ret i32 0, !dbg !33
final dead terminator blocks: 
	discovered a new reachable node %2


INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0, !dbg !33
Inliner visiting SCC: INDIRECTNODE: 0 call sites.
F2I: Looking at function main
	discovered a new reachable node %2
---- Branch Probability Info : main ----

Computing probabilities for 

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - : float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0, !dbg !33
	discovered a new reachable node %2
SLP: Analyzing blocks in main.


INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0, !dbg !33


INSTCOMBINE ITERATION #1 on main
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret i32 0, !dbg !33
size of module: 1
size of worklist: 0
size of FnTree: 0
	discovered a new reachable node %2
---- Branch Probability Info : main ----

Computing probabilities for 

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - : float = 1.0, int = 8


block-frequency: main
=====================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - : float = 1.0, int = 8

======
build tree: worklist-size=0
merge functions: tree-size=0
	discovered a new reachable node %2
	discovered a new reachable node %2
Module to be executed:
; ModuleID = 'generics'
source_filename = "generics"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

; Function Attrs: norecurse nounwind readnone
define i32 @main(i32, i8** nocapture readnone) local_unnamed_addr #0 !dbg !24 {
  ret i32 0, !dbg !33
}

attributes #0 = { norecurse nounwind readnone "frame-pointer"="all" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8, !9, !10}
!llvm.dbg.cu = !{!11, !19}
!swift.module.flags = !{!21}
!llvm.linker.options = !{!22, !23}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 10, i32 15]}
!1 = !{i32 1, !"Objective-C Version", i32 2}
!2 = !{i32 1, !"Objective-C Image Info Version", i32 0}
!3 = !{i32 1, !"Objective-C Image Info Section", !"__DATA,__objc_imageinfo,regular,no_dead_strip"}
!4 = !{i32 4, !"Objective-C Garbage Collection", i32 84018944}
!5 = !{i32 1, !"Objective-C Class Properties", i32 64}
!6 = !{i32 2, !"Dwarf Version", i32 4}
!7 = !{i32 2, !"Debug Info Version", i32 3}
!8 = !{i32 1, !"wchar_size", i32 4}
!9 = !{i32 7, !"PIC Level", i32 2}
!10 = !{i32 1, !"Swift Version", i32 7}
!11 = distinct !DICompileUnit(language: DW_LANG_Swift, file: !12, producer: "Swift version 5.2-dev (Swift 746b58e8e1)", isOptimized: true, runtimeVersion: 5, emissionKind: FullDebug, enums: !13, imports: !14)
!12 = !DIFile(filename: "generics.swift", directory: "")
!13 = !{}
!14 = !{!15, !17}
!15 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !12, entity: !16, file: !12)
!16 = !DIModule(scope: null, name: "generics", isysroot: "/Applications/Xcode_11.3.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk")
!17 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !12, entity: !18, file: !12)
!18 = !DIModule(scope: null, name: "Swift", includePath: "/Users/kenta/swiftc/build/Xcode-DebugAssert/swift-macosx-x86_64/Debug/lib/swift/macosx/Swift.swiftmodule/x86_64.swiftmodule", isysroot: "/Applications/Xcode_11.3.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk")
!19 = distinct !DICompileUnit(language: DW_LANG_ObjC, file: !20, producer: "clang version 7.0.0 (https://github.com/apple/llvm-project.git c3e5ae3fdebb67d936aeec2b04b7d2b6a784f69e)", isOptimized: true, runtimeVersion: 2, emissionKind: FullDebug, enums: !13, nameTableKind: None)
!20 = !DIFile(filename: "<swift-imported-modules>", directory: "/Users/kenta/Library/Mobile Documents/com~apple~CloudDocs/waiwai/3_function")
!21 = !{!"standard-library", i1 false}
!22 = !{!"-lswiftCore"}
!23 = !{!"-lobjc"}
!24 = distinct !DISubprogram(name: "main", linkageName: "main", scope: !16, file: !12, line: 1, type: !25, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !11, retainedNodes: !13)
!25 = !DISubroutineType(types: !26)
!26 = !{!27, !27, !29}
!27 = !DICompositeType(tag: DW_TAG_structure_type, name: "Int32", scope: !18, file: !28, size: 32, elements: !13, runtimeLang: DW_LANG_Swift, identifier: "$ss5Int32VD")
!28 = !DIFile(filename: "/Users/kenta/swiftc/build/Xcode-DebugAssert/swift-macosx-x86_64/Debug/lib/swift/macosx/Swift.swiftmodule/x86_64.swiftmodule", directory: "")
!29 = !DICompositeType(tag: DW_TAG_structure_type, scope: !18, file: !12, size: 64, elements: !30, runtimeLang: DW_LANG_Swift)
!30 = !{!31}
!31 = !DIDerivedType(tag: DW_TAG_member, scope: !18, file: !12, baseType: !32, size: 64)
!32 = !DICompositeType(tag: DW_TAG_structure_type, name: "UnsafeMutablePointer", scope: !18, file: !12, elements: !13, runtimeLang: DW_LANG_Swift, identifier: "$sSpySpys4Int8VGSgGD")
!33 = !DILocation(line: 0, scope: !34)
!34 = !DILexicalBlockFile(scope: !36, file: !35, discriminator: 0)
!35 = !DIFile(filename: "<compiler-generated>", directory: "")
!36 = distinct !DILexicalBlock(scope: !24, file: !12, line: 10, column: 1)

Features:+sse2,+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87
CPU:penryn

Subtarget features: SSELevel 5, 3DNowLevel 1, 64bit 1
G_ADD (opcode 35): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SUB (opcode 36): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_MUL (opcode 37): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SDIV (opcode 38): 1 type index
.. the first uncovered type index: 1, OK
G_UDIV (opcode 39): 1 type index
.. opcode 39 is aliased to 38
.. opcode 38 is aliased to 0
.. the first uncovered type index: 1, OK
G_SREM (opcode 40): 1 type index
.. opcode 40 is aliased to 38
.. opcode 38 is aliased to 0
.. the first uncovered type index: 1, OK
G_UREM (opcode 41): 1 type index
.. opcode 41 is aliased to 38
.. opcode 38 is aliased to 0
.. the first uncovered type index: 1, OK
G_AND (opcode 42): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_OR (opcode 43): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_XOR (opcode 44): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_IMPLICIT_DEF (opcode 45): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_PHI (opcode 46): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FRAME_INDEX (opcode 47): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_GLOBAL_VALUE (opcode 48): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_EXTRACT (opcode 49): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UNMERGE_VALUES (opcode 50): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_INSERT (opcode 51): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_MERGE_VALUES (opcode 52): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BUILD_VECTOR (opcode 53): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BUILD_VECTOR_TRUNC (opcode 54): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CONCAT_VECTORS (opcode 55): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_PTRTOINT (opcode 56): 2 type indices
.. the first uncovered type index: 2, OK
G_INTTOPTR (opcode 57): 2 type indices
.. the first uncovered type index: 2, OK
G_BITCAST (opcode 58): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_INTRINSIC_TRUNC (opcode 59): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_INTRINSIC_ROUND (opcode 60): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_LOAD (opcode 61): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SEXTLOAD (opcode 62): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ZEXTLOAD (opcode 63): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_STORE (opcode 64): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMIC_CMPXCHG_WITH_SUCCESS (opcode 65): 3 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMIC_CMPXCHG (opcode 66): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_XCHG (opcode 67): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_ADD (opcode 68): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_SUB (opcode 69): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_AND (opcode 70): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_NAND (opcode 71): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_OR (opcode 72): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_XOR (opcode 73): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_MAX (opcode 74): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_MIN (opcode 75): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UMAX (opcode 76): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UMIN (opcode 77): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BRCOND (opcode 78): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_BRINDIRECT (opcode 79): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_INTRINSIC (opcode 80): 0 type indices
.. type index coverage check SKIPPED: no rules defined
G_INTRINSIC_W_SIDE_EFFECTS (opcode 81): 0 type indices
.. type index coverage check SKIPPED: no rules defined
G_ANYEXT (opcode 82): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_TRUNC (opcode 83): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CONSTANT (opcode 84): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FCONSTANT (opcode 85): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_VASTART (opcode 86): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_VAARG (opcode 87): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SEXT (opcode 88): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_ZEXT (opcode 89): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SHL (opcode 90): 2 type indices
.. the first uncovered type index: 2, OK
G_LSHR (opcode 91): 2 type indices
.. opcode 91 is aliased to 90
.. opcode 90 is aliased to 0
.. the first uncovered type index: 2, OK
G_ASHR (opcode 92): 2 type indices
.. opcode 92 is aliased to 90
.. opcode 90 is aliased to 0
.. the first uncovered type index: 2, OK
G_ICMP (opcode 93): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FCMP (opcode 94): 2 type indices
.. the first uncovered type index: 2, OK
G_SELECT (opcode 95): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UADDO (opcode 96): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UADDE (opcode 97): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_USUBO (opcode 98): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_USUBE (opcode 99): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SADDO (opcode 100): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SADDE (opcode 101): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SSUBO (opcode 102): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SSUBE (opcode 103): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UMULO (opcode 104): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SMULO (opcode 105): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_UMULH (opcode 106): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SMULH (opcode 107): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FADD (opcode 108): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FSUB (opcode 109): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FMUL (opcode 110): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FMA (opcode 111): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FDIV (opcode 112): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FREM (opcode 113): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FPOW (opcode 114): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FEXP (opcode 115): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FEXP2 (opcode 116): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FLOG (opcode 117): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FLOG2 (opcode 118): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FLOG10 (opcode 119): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FNEG (opcode 120): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FPEXT (opcode 121): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FPTRUNC (opcode 122): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FPTOSI (opcode 123): 2 type indices
.. the first uncovered type index: 2, OK
G_FPTOUI (opcode 124): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_SITOFP (opcode 125): 2 type indices
.. the first uncovered type index: 2, OK
G_UITOFP (opcode 126): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FABS (opcode 127): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FCOPYSIGN (opcode 128): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_FCANONICALIZE (opcode 129): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_GEP (opcode 130): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_PTR_MASK (opcode 131): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SMIN (opcode 132): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_SMAX (opcode 133): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_UMIN (opcode 134): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_UMAX (opcode 135): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_BR (opcode 136): 0 type indices
.. type index coverage check SKIPPED: no rules defined
G_BRJT (opcode 137): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_INSERT_VECTOR_ELT (opcode 138): 3 type indices
.. type index coverage check SKIPPED: no rules defined
G_EXTRACT_VECTOR_ELT (opcode 139): 3 type indices
.. type index coverage check SKIPPED: no rules defined
G_SHUFFLE_VECTOR (opcode 140): 3 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTTZ (opcode 141): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTTZ_ZERO_UNDEF (opcode 142): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTLZ (opcode 143): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTLZ_ZERO_UNDEF (opcode 144): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_CTPOP (opcode 145): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BSWAP (opcode 146): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FCEIL (opcode 147): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FCOS (opcode 148): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FSIN (opcode 149): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FSQRT (opcode 150): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FFLOOR (opcode 151): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FRINT (opcode 152): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_FNEARBYINT (opcode 153): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_ADDRSPACE_CAST (opcode 154): 2 type indices
.. type index coverage check SKIPPED: no rules defined
G_BLOCK_ADDR (opcode 155): 1 type index
.. type index coverage check SKIPPED: no rules defined
G_JUMP_TABLE (opcode 156): 1 type index
.. type index coverage check SKIPPED: no rules defined
	discovered a new reachable node %2
	discovered a new reachable node %2
MergeICmpsLegacyPass: main
	discovered a new reachable node %2
---- Branch Probability Info : main ----

Computing probabilities for 

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - : float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: main
********** End Constant Hoisting **********
	discovered a new reachable node %2
*** Interleaved Access Pass: main
	discovered a new reachable node %2
---- Branch Probability Info : main ----

Computing probabilities for 

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: 
loop-detection
compute-mass-in-function
 - node: 
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - : float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - : float = 1.0, int = 8

	discovered a new reachable node %2
[SafeStack] Function: main
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %2
	discovered a new reachable node %2
---- Branch Probability Info : main ----

Computing probabilities for 



=== main
Creating new node: t2: i32,ch = CopyFromReg t0, Register:i32 %0
Creating new node: t4: i64,ch = CopyFromReg t0, Register:i64 %1
Creating constant: t5: i32 = Constant<0>
Creating constant: t6: i32 = TargetConstant<0>
Creating new node: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0
Creating new node: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1, <compiler-generated>:0
Initial selection DAG: %bb.0 'main:'
SelectionDAG has 10 nodes:
  t0: ch = EntryToken
  t2: i32,ch = CopyFromReg t0, Register:i32 %0
  t4: i64,ch = CopyFromReg t0, Register:i64 %1
  t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0
  t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1, <compiler-generated>:0



Combining: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1, <compiler-generated>:0

Combining: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0

Combining: t7: i32 = Register $eax

Combining: t6: i32 = TargetConstant<0>

Combining: t5: i32 = Constant<0>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 'main:'
SelectionDAG has 6 nodes:
    t0: ch = EntryToken
  t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0
  t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1, <compiler-generated>:0


Legalizing node: t7: i32 = Register $eax
Ignoring node results
Legally typed node: t7: i32 = Register $eax

Legalizing node: t6: i32 = TargetConstant<0>
Ignoring node results
Legally typed node: t6: i32 = TargetConstant<0>

Legalizing node: t5: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t5: i32 = Constant<0>

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t5: i32 = Constant<0>
Legal operand
Legally typed node: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0

Legalizing node: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1, <compiler-generated>:0
Analyzing result type: ch
Legal result type
Analyzing operand: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0
Legal operand
Analyzing operand: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0
Legal operand
Legally typed node: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1, <compiler-generated>:0

Legalizing node: t65535: ch = handlenode t9
Analyzing result type: ch
Legal result type
Analyzing operand: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1, <compiler-generated>:0
Legal operand
Legally typed node: t65535: ch = handlenode t9

Type-legalized selection DAG: %bb.0 'main:'
SelectionDAG has 6 nodes:
    t0: ch = EntryToken
  t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0
  t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1, <compiler-generated>:0



Legalizing: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1, <compiler-generated>:0
Legal node: nothing to do

Legalizing: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0
Legal node: nothing to do

Legalizing: t7: i32 = Register $eax

Legalizing: t6: i32 = TargetConstant<0>

Legalizing: t5: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.0 'main:'
SelectionDAG has 6 nodes:
    t0: ch = EntryToken
  t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0
  t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1, <compiler-generated>:0



Legalizing: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1, <compiler-generated>:0
Legal node: nothing to do

Combining: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1, <compiler-generated>:0

Legalizing: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0
Legal node: nothing to do

Combining: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0

Legalizing: t7: i32 = Register $eax

Combining: t7: i32 = Register $eax

Legalizing: t6: i32 = TargetConstant<0>

Combining: t6: i32 = TargetConstant<0>

Legalizing: t5: i32 = Constant<0>
Legal node: nothing to do

Combining: t5: i32 = Constant<0>

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 'main:'
SelectionDAG has 6 nodes:
    t0: ch = EntryToken
  t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0
  t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1, <compiler-generated>:0


===== Instruction selection begins: %bb.0 ''

ISEL: Starting selection on root node: t9: ch = X86ISD::RET_FLAG t8, TargetConstant:i32<0>, Register:i32 $eax, t8:1, <compiler-generated>:0
ISEL: Starting pattern match
  Morphed node: t9: ch = RET TargetConstant:i32<0>, Register:i32 $eax, t8, t8:1, <compiler-generated>:0
ISEL: Match complete!

ISEL: Starting selection on root node: t8: ch,glue = CopyToReg t0, Register:i32 $eax, Constant:i32<0>, <compiler-generated>:0

ISEL: Starting selection on root node: t7: i32 = Register $eax

ISEL: Starting selection on root node: t6: i32 = TargetConstant<0>

ISEL: Starting selection on root node: t5: i32 = Constant<0>
ISEL: Starting pattern match
  Initial Opcode index to 125031
  TypeSwitch[i32] from 125035 to 125038
  Morphed node: t5: i32,i32 = MOV32r0
ISEL: Match complete!

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 'main:'
SelectionDAG has 6 nodes:
    t0: ch = EntryToken
  t8: ch,glue = CopyToReg t0, Register:i32 $eax, MOV32r0:i32,i32, <compiler-generated>:0
  t9: ch = RET TargetConstant:i32<0>, Register:i32 $eax, t8, t8:1, <compiler-generated>:0


********** List Scheduling %bb.0 '' **********
SU(0): t9: ch = RET TargetConstant:i32<0>, Register:i32 $eax, t8, t8:1, <compiler-generated>:0

    t8: ch,glue = CopyToReg t0, Register:i32 $eax, MOV32r0:i32,i32, <compiler-generated>:0

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
SU(1): t5: i32,i32 = MOV32r0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t9: ch = RET TargetConstant:i32<0>, Register:i32 $eax, t8, t8:1, <compiler-generated>:0

    t8: ch,glue = CopyToReg t0, Register:i32 $eax, MOV32r0:i32,i32, <compiler-generated>:0


*** Scheduling [0]: SU(0): t9: ch = RET TargetConstant:i32<0>, Register:i32 $eax, t8, t8:1, <compiler-generated>:0

    t8: ch,glue = CopyToReg t0, Register:i32 $eax, MOV32r0:i32,i32, <compiler-generated>:0


Examining Available:
Height 1: SU(1): t5: i32,i32 = MOV32r0


*** Scheduling [1]: SU(1): t5: i32,i32 = MOV32r0

*** Final schedule ***
SU(1): t5: i32,i32 = MOV32r0

SU(0): t9: ch = RET TargetConstant:i32<0>, Register:i32 $eax, t8, t8:1, <compiler-generated>:0

    t8: ch,glue = CopyToReg t0, Register:i32 $eax, MOV32r0:i32,i32, <compiler-generated>:0


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function main: IsSSA, TracksLiveness

bb.0 (%ir-block.2):
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32, debug-location !33; <compiler-generated>:0
  RET 0, $eax, debug-location !33; <compiler-generated>:0

# End machine code for function main.

***** Machine Function before Domain Reassignment *****
# Machine code for function main: IsSSA, TracksLiveness

bb.0 (%ir-block.2):
  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32, debug-location !33; <compiler-generated>:0
  RET 0, $eax, debug-location !33; <compiler-generated>:0

# End machine code for function main.

# Machine code for function main: IsSSA, TracksLiveness

0B	bb.0 (%ir-block.2):
16B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
32B	  $eax = COPY %2:gr32, debug-location !33; <compiler-generated>:0
48B	  RET 0, $eax, debug-location !33; <compiler-generated>:0

# End machine code for function main.

********** Stack Coloring **********
********** Function: main
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: main
Machine InstCombiner: main
Combining MBB 
********** X86 cmov Conversion : main**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: main ********
Entering: 
Exiting: 
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - BB0[]: float = 1.0, int = 8

******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: main
**** Analysing main
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : main **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : main **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: main
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: main
# Machine code for function main: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.2):
16B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
32B	  $eax = COPY killed %2:gr32, debug-location !33; <compiler-generated>:0
48B	  RET 0, killed $eax, debug-location !33; <compiler-generated>:0

# End machine code for function main.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%2 [16r,32r:0)  0@16r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.2):
16B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
32B	  $eax = COPY %2:gr32, debug-location !33; <compiler-generated>:0
48B	  RET 0, killed $eax, debug-location !33; <compiler-generated>:0

# End machine code for function main.

********** SIMPLE REGISTER COALESCING **********
********** Function: main
********** JOINING INTERVALS ***********
:
32B	$eax = COPY %2:gr32, debug-location !33; <compiler-generated>:0
	Considering merging %2 with $eax
	Can only merge into reserved registers.
Remat: $eax = MOV32r0 implicit-def dead $eflags, debug-location !33; <compiler-generated>:0
Shrink: %2 [16r,32r:0)  0@16r weight:0.000000e+00
All defs dead: 16r	dead %2:gr32 = MOV32r0 implicit-def dead $eflags
Shrunk: %2 [16r,16d:0)  0@16r weight:0.000000e+00
Deleting dead def 16r	dead %2:gr32 = MOV32r0 implicit-def dead $eflags
Trying to inflate 0 regs.
********** INTERVALS **********
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.2):
32B	  $eax = MOV32r0 implicit-def dead $eflags, debug-location !33; <compiler-generated>:0
48B	  RET 0, killed $eax, debug-location !33; <compiler-generated>:0

# End machine code for function main.

Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness

bb.0 (%ir-block.2):
  $eax = MOV32r0 implicit-def dead $eflags, debug-location !33; <compiler-generated>:0
  RET 0, killed $eax, debug-location !33; <compiler-generated>:0

# End machine code for function main.

AllocationOrder(GR32) = [ $eax $ecx $edx $esi $edi $r8d $r9d $r10d $r11d $ebx $r14d $r15d $r12d $r13d ]
AllocationOrder(GR16) = [ $ax $cx $dx $si $di $r8w $r9w $r10w $r11w $bx $r14w $r15w $r12w $r13w ]
AllocationOrder(GR8) = [ $al $cl $dl $sil $dil $r8b $r9b $r10b $r11b $bl $r14b $r15b $r12b $r13b ]
********** INTERVALS **********
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.2):
32B	  $eax = MOV32r0 implicit-def dead $eflags, debug-location !33; <compiler-generated>:0
48B	  RET 0, killed $eax, debug-location !33; <compiler-generated>:0

# End machine code for function main.


block-frequency: main
=====================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - BB0[]: float = 1.0, int = 8

********** COMPUTING LIVE DEBUG VARIABLES: main **********
********** DEBUG VARIABLES **********
********** DEBUG LABELS **********
********** GREEDY REGISTER ALLOCATION **********
********** Function: main
********** Compute Spill Weights **********
********** Function: main
********** INTERVALS **********
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.2):
32B	  $eax = MOV32r0 implicit-def dead $eflags, debug-location !33; <compiler-generated>:0
48B	  RET 0, killed $eax, debug-location !33; <compiler-generated>:0

# End machine code for function main.

********** REWRITE VIRTUAL REGISTERS **********
********** Function: main
********** REGISTER MAP **********

0B	bb.0 (%ir-block.2):
32B	  $eax = MOV32r0 implicit-def dead $eflags, debug-location !33; <compiler-generated>:0
48B	  RET 0, killed $eax, debug-location !33; <compiler-generated>:0
> $eax = MOV32r0 implicit-def dead $eflags, debug-location !33; <compiler-generated>:0
> RET 0, killed $eax, debug-location !33; <compiler-generated>:0
********** EMITTING LIVE DEBUG VARIABLES **********
********** EMITTING LIVE DEBUG LABELS **********
********** Stack Slot Coloring **********
********** Function: main
MCP: CopyPropagateBlock 
******** Post-regalloc Machine LICM: main ********

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
**** Analysing main
Look into: 0 
Nothing to shrink-wrap
MCP: CopyPropagateBlock 
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: main
	discovered a new reachable node %bb.0

block-frequency: main
=====================
reverse-post-order-traversal
 - 0: BB0[]
loop-detection
compute-mass-in-function
 - node: BB0[]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: main
 - BB0[]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rbp:	3	$rbp = frame-setup MOV64rr $rsp
$rbp:	3	$rbp = frame-setup MOV64rr $rsp
$rbp:	3	$rbp = frame-setup MOV64rr $rsp
$eax:	5	$eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !33; <compiler-generated>:0
$eax:	5	$eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !33; <compiler-generated>:0
$eax:	5	$eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, debug-location !33; <compiler-generated>:0
$rbp:	6	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !33; <compiler-generated>:0
$rbp:	6	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !33; <compiler-generated>:0
$rbp:	6	$rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !33; <compiler-generated>:0
********** FIX EXECUTION DOMAIN: VR128X **********
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: main **********

Debug Range Extension

OutLocs after initialization

Processing Worklist
join MBB: 0

Final OutLocs


Final InLocs

X86 Retpoline Thunks
DbgValueHistoryMap:
assembler backend - pre-layout
--
<MCAssembler
  Sections:[
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7fe52e068940 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7fe52e068990 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,31,C0,5D,C3] (8 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069270 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,40,07,02,05] (8 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e0694e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[53,77,69,66,74,20,76,65,72,73,69,6F,6E,20,35,2E,32,2D,64,65,76,20,28,53,77,69,66,74,20,37,34,36,62,35,38,65,38,65,31,29,00,67,65,6E,65,72,69,63,73,2E,73,77,69,66,74,00,67,65,6E,65,72,69,63,73,00,2F,41,70,70,6C,69,63,61,74,69,6F,6E,73,2F,58,63,6F,64,65,5F,31,31,2E,33,2E,61,70,70,2F,43,6F,6E,74,65,6E,74,73,2F,44,65,76,65,6C,6F,70,65,72,2F,50,6C,61,74,66,6F,72,6D,73,2F,4D,61,63,4F,53,58,2E,70,6C,61,74,66,6F,72,6D,2F,44,65,76,65,6C,6F,70,65,72,2F,53,44,4B,73,2F,4D,61,63,4F,53,58,31,30,2E,31,35,2E,73,64,6B,00,53,77,69,66,74,00,2F,55,73,65,72,73,2F,6B,65,6E,74,61,2F,73,77,69,66,74,63,2F,62,75,69,6C,64,2F,58,63,6F,64,65,2D,44,65,62,75,67,41,73,73,65,72,74,2F,73,77,69,66,74,2D,6D,61,63,6F,73,78,2D,78,38,36,5F,36,34,2F,44,65,62,75,67,2F,6C,69,62,2F,73,77,69,66,74,2F,6D,61,63,6F,73,78,2F,53,77,69,66,74,2E,73,77,69,66,74,6D,6F,64,75,6C,65,2F,78,38,36,5F,36,34,2E,73,77,69,66,74,6D,6F,64,75,6C,65,00,6D,61,69,6E,00,49,6E,74,33,32,00,24,73,73,35,49,6E,74,33,32,56,44,00] (323 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069720 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[01,11,01,25,0E,13,05,03,0E,10,17,E1,7F,19,E5,7F,0B,11,01,12,06,00,00,02,1E,01,03,0E,82,7C,0E,00,00,03,2E,00,11,01,12,06,40,18,6E,0E,03,0E,3A,0B,3B,0B,49,13,3F,19,E1,7F,19,00,00,04,3A,00,18,13,00,00,05,1E,01,03,0E,80,7C,0E,82,7C,0E,00,00,06,13,00,03,0E,6E,0E,0B,0B,E6,7F,0B,00,00,00] (94 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069b50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,04,00,00,00,00,00,08,01,00,00,00,00,1E,00,29,00,00,00,00,00,00,00,05,00,00,00,00,00,00,00,00,08,00,00,00,02,38,00,00,00,41,00,00,00,03,00,00,00,00,00,00,00,00,08,00,00,00,01,56,2C,01,00,00,2C,01,00,00,01,01,60,00,00,00,00,04,27,00,00,00,05,AA,00,00,00,B0,00,00,00,41,00,00,00,06,31,01,00,00,37,01,00,00,04,1E,00,04,53,00,00,00,00] (114 bytes),
        Fixups:[<MCFixup Offset:0 Value:Lset0 Kind:3>,
                <MCFixup Offset:22 Value:Lset1 Kind:3>,
                <MCFixup Offset:27 Value:Lfunc_begin0 Kind:4>,
                <MCFixup Offset:49 Value:Lfunc_begin0 Kind:4>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069c30 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00] (1 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069d10 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[48,53,41,48,01,00,00,00,01,00,00,00,01,00,00,00,0C,00,00,00,00,00,00,00,01,00,00,00,01,00,06,00,00,00,00,00,6A,7F,9A,7C,00,00,00,00,2C,01,00,00,01,00,00,00,30,00,00,00,00,00,00,00] (60 bytes),
        Fixups:[<MCFixup Offset:40 Value:Lset2 Kind:3>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069df0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[48,53,41,48,01,00,00,00,01,00,00,00,00,00,00,00,0C,00,00,00,00,00,00,00,01,00,00,00,01,00,06,00,FF,FF,FF,FF] (36 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069f50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[48,53,41,48,01,00,00,00,01,00,00,00,00,00,00,00,0C,00,00,00,00,00,00,00,01,00,00,00,01,00,06,00,FF,FF,FF,FF] (36 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e06a080 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[48,53,41,48,01,00,00,00,01,00,00,00,01,00,00,00,14,00,00,00,00,00,00,00,03,00,00,00,01,00,06,00,03,00,05,00,04,00,0B,00,00,00,00,00,D5,42,66,0D,00,00,00,00,31,01,00,00,01,00,00,00,60,00,00,00,13,00,00,00,00,00,00] (71 bytes),
        Fixups:[<MCFixup Offset:48 Value:Lset3 Kind:3>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e060a90 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,FF,FF,FF,FF,04,00,08,00,01,78,10,0C,07,08,90,01] (20 bytes),
        Fixups:[<MCFixup Offset:0 Value:Ltmp8 Kind:3>]>,
      <MCAlignFragment<MCFragment 0x7fe52e0691c0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7fe52e068a70 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (24 bytes),
        Fixups:[<MCFixup Offset:0 Value:Ltmp11 Kind:3>,
                <MCFixup Offset:4 Value:Ltmp12 Kind:3>,
                <MCFixup Offset:8 Value:Ltmp0 Kind:4>,
                <MCFixup Offset:16 Value:Ltmp13 Kind:4>]>,
      <MCDwarfCallFrameFragment<MCFragment 0x7fe52e068b50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:Lcfi0-Ltmp0>,
      <MCDataFragment<MCFragment 0x7fe52e060cc0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0E,10] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7fe52e060da0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:Lcfi1-Lcfi0>,
      <MCDataFragment<MCFragment 0x7fe52e061070 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[86,02] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7fe52e060e30 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:Lcfi2-Lcfi1>,
      <MCDataFragment<MCFragment 0x7fe52e061150 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0D,06] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7fe52e069210 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7fe52e068e10 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e068ef0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,04,00,00,00,00,00,01,01,01,FB,0E,0D,00,01,01,01,01,00,00,00,01,00,00,01,00,67,65,6E,65,72,69,63,73,2E,73,77,69,66,74,00,00,00,00,00,00,09,02,00,00,00,00,00,00,00,00,11] (60 bytes),
        Fixups:[<MCFixup Offset:0 Value:Ltmp15 Kind:3>,
                <MCFixup Offset:6 Value:Ltmp17 Kind:3>,
                <MCFixup Offset:51 Value:Ltmp1 Kind:4>]>,
      <MCDwarfFragment<MCFragment 0x7fe52e061230 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:Lsec_end0-Ltmp1 LineDelta:9223372036854775807>,
      <MCDataFragment<MCFragment 0x7fe52e068fd0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>]>],
  Symbols:[(_main, Index:0, ),
           (Lfunc_begin0, Index:0, ),
           (Ltmp0, Index:0, ),
           (Ltmp1, Index:0, ),
           (Lcfi0, Index:0, ),
           (Lcfi1, Index:0, ),
           (Lcfi2, Index:0, ),
           (Ltmp2, Index:0, ),
           (Ltmp3, Index:0, ),
           (Lfunc_end0, Index:0, ),
           (Ltmp4, Index:0, ),
           (L_OBJC_IMAGE_INFO, Index:0, ),
           (Linfo_string, Index:0, ),
           (Lsection_abbrev, Index:0, ),
           (Lsection_info, Index:0, ),
           (Lcu_begin0, Index:0, ),
           (Lset0, Index:0, ),
           (Ldebug_info_end0, Index:0, ),
           (Ldebug_info_start0, Index:0, ),
           (Lset1, Index:0, ),
           (Lline_table_start0, Index:0, ),
           (Lsection_line, Index:0, ),
           (Ldebug_macinfo, Index:0, ),
           (Lnames_begin, Index:0, ),
           (Lset2, Index:0, ),
           (LNames0, Index:0, ),
           (Lobjc_begin, Index:0, ),
           (Lnamespac_begin, Index:0, ),
           (Ltypes_begin, Index:0, ),
           (Lset3, Index:0, ),
           (Ltypes0, Index:0, ),
           (Ltmp5, Index:0, ),
           (Ltmp6, Index:0, ),
           (Ltmp8, Index:0, ),
           (Ltmp7, Index:0, ),
           (Ltmp11, Index:0, ),
           (Ltmp10, Index:0, ),
           (Ltmp9, Index:0, ),
           (Ltmp12, Index:0, ),
           (Ltmp13, Index:0, ),
           (Ltmp15, Index:0, ),
           (Ltmp14, Index:0, ),
           (Ltmp17, Index:0, ),
           (Ltmp16, Index:0, ),
           (Lsec_end0, Index:0, )]>
assembler backend - post-relaxation
--
<MCAssembler
  Sections:[
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7fe52e068940 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7fe52e068990 LayoutOrder:1 Offset:18446744073709551615 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,31,C0,5D,C3] (8 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069270 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,40,07,02,05] (8 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e0694e0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[53,77,69,66,74,20,76,65,72,73,69,6F,6E,20,35,2E,32,2D,64,65,76,20,28,53,77,69,66,74,20,37,34,36,62,35,38,65,38,65,31,29,00,67,65,6E,65,72,69,63,73,2E,73,77,69,66,74,00,67,65,6E,65,72,69,63,73,00,2F,41,70,70,6C,69,63,61,74,69,6F,6E,73,2F,58,63,6F,64,65,5F,31,31,2E,33,2E,61,70,70,2F,43,6F,6E,74,65,6E,74,73,2F,44,65,76,65,6C,6F,70,65,72,2F,50,6C,61,74,66,6F,72,6D,73,2F,4D,61,63,4F,53,58,2E,70,6C,61,74,66,6F,72,6D,2F,44,65,76,65,6C,6F,70,65,72,2F,53,44,4B,73,2F,4D,61,63,4F,53,58,31,30,2E,31,35,2E,73,64,6B,00,53,77,69,66,74,00,2F,55,73,65,72,73,2F,6B,65,6E,74,61,2F,73,77,69,66,74,63,2F,62,75,69,6C,64,2F,58,63,6F,64,65,2D,44,65,62,75,67,41,73,73,65,72,74,2F,73,77,69,66,74,2D,6D,61,63,6F,73,78,2D,78,38,36,5F,36,34,2F,44,65,62,75,67,2F,6C,69,62,2F,73,77,69,66,74,2F,6D,61,63,6F,73,78,2F,53,77,69,66,74,2E,73,77,69,66,74,6D,6F,64,75,6C,65,2F,78,38,36,5F,36,34,2E,73,77,69,66,74,6D,6F,64,75,6C,65,00,6D,61,69,6E,00,49,6E,74,33,32,00,24,73,73,35,49,6E,74,33,32,56,44,00] (323 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069720 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[01,11,01,25,0E,13,05,03,0E,10,17,E1,7F,19,E5,7F,0B,11,01,12,06,00,00,02,1E,01,03,0E,82,7C,0E,00,00,03,2E,00,11,01,12,06,40,18,6E,0E,03,0E,3A,0B,3B,0B,49,13,3F,19,E1,7F,19,00,00,04,3A,00,18,13,00,00,05,1E,01,03,0E,80,7C,0E,82,7C,0E,00,00,06,13,00,03,0E,6E,0E,0B,0B,E6,7F,0B,00,00,00] (94 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069b50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,04,00,00,00,00,00,08,01,00,00,00,00,1E,00,29,00,00,00,00,00,00,00,05,00,00,00,00,00,00,00,00,08,00,00,00,02,38,00,00,00,41,00,00,00,03,00,00,00,00,00,00,00,00,08,00,00,00,01,56,2C,01,00,00,2C,01,00,00,01,01,60,00,00,00,00,04,27,00,00,00,05,AA,00,00,00,B0,00,00,00,41,00,00,00,06,31,01,00,00,37,01,00,00,04,1E,00,04,53,00,00,00,00] (114 bytes),
        Fixups:[<MCFixup Offset:0 Value:Lset0 Kind:3>,
                <MCFixup Offset:22 Value:Lset1 Kind:3>,
                <MCFixup Offset:27 Value:Lfunc_begin0 Kind:4>,
                <MCFixup Offset:49 Value:Lfunc_begin0 Kind:4>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069c30 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00] (1 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069d10 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[48,53,41,48,01,00,00,00,01,00,00,00,01,00,00,00,0C,00,00,00,00,00,00,00,01,00,00,00,01,00,06,00,00,00,00,00,6A,7F,9A,7C,00,00,00,00,2C,01,00,00,01,00,00,00,30,00,00,00,00,00,00,00] (60 bytes),
        Fixups:[<MCFixup Offset:40 Value:Lset2 Kind:3>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069df0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[48,53,41,48,01,00,00,00,01,00,00,00,00,00,00,00,0C,00,00,00,00,00,00,00,01,00,00,00,01,00,06,00,FF,FF,FF,FF] (36 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069f50 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[48,53,41,48,01,00,00,00,01,00,00,00,00,00,00,00,0C,00,00,00,00,00,00,00,01,00,00,00,01,00,06,00,FF,FF,FF,FF] (36 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e06a080 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[48,53,41,48,01,00,00,00,01,00,00,00,01,00,00,00,14,00,00,00,00,00,00,00,03,00,00,00,01,00,06,00,03,00,05,00,04,00,0B,00,00,00,00,00,D5,42,66,0D,00,00,00,00,31,01,00,00,01,00,00,00,60,00,00,00,13,00,00,00,00,00,00] (71 bytes),
        Fixups:[<MCFixup Offset:48 Value:Lset3 Kind:3>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e060a90 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,FF,FF,FF,FF,04,00,08,00,01,78,10,0C,07,08,90,01] (20 bytes),
        Fixups:[<MCFixup Offset:0 Value:Ltmp8 Kind:3>]>,
      <MCAlignFragment<MCFragment 0x7fe52e0691c0 LayoutOrder:1 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7fe52e068a70 LayoutOrder:2 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (24 bytes),
        Fixups:[<MCFixup Offset:0 Value:Ltmp11 Kind:3>,
                <MCFixup Offset:4 Value:Ltmp12 Kind:3>,
                <MCFixup Offset:8 Value:Ltmp0 Kind:4>,
                <MCFixup Offset:16 Value:Ltmp13 Kind:4>]>,
      <MCDwarfCallFrameFragment<MCFragment 0x7fe52e068b50 LayoutOrder:3 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:Lcfi0-Ltmp0>,
      <MCDataFragment<MCFragment 0x7fe52e060cc0 LayoutOrder:4 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0E,10] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7fe52e060da0 LayoutOrder:5 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:Lcfi1-Lcfi0>,
      <MCDataFragment<MCFragment 0x7fe52e061070 LayoutOrder:6 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[86,02] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7fe52e060e30 LayoutOrder:7 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:Lcfi2-Lcfi1>,
      <MCDataFragment<MCFragment 0x7fe52e061150 LayoutOrder:8 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[0D,06] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7fe52e069210 LayoutOrder:9 Offset:18446744073709551615 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7fe52e068e10 LayoutOrder:10 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e068ef0 LayoutOrder:0 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,04,00,00,00,00,00,01,01,01,FB,0E,0D,00,01,01,01,01,00,00,00,01,00,00,01,00,67,65,6E,65,72,69,63,73,2E,73,77,69,66,74,00,00,00,00,00,00,09,02,00,00,00,00,00,00,00,00,11] (60 bytes),
        Fixups:[<MCFixup Offset:0 Value:Ltmp15 Kind:3>,
                <MCFixup Offset:6 Value:Ltmp17 Kind:3>,
                <MCFixup Offset:51 Value:Ltmp1 Kind:4>]>,
      <MCDwarfFragment<MCFragment 0x7fe52e061230 LayoutOrder:1 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        AddrDelta:Lsec_end0-Ltmp1 LineDelta:9223372036854775807>,
      <MCDataFragment<MCFragment 0x7fe52e068fd0 LayoutOrder:2 Offset:18446744073709551615 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>]>],
  Symbols:[(_main, Index:0, ),
           (Lfunc_begin0, Index:0, ),
           (Ltmp0, Index:0, ),
           (Ltmp1, Index:0, ),
           (Lcfi0, Index:0, ),
           (Lcfi1, Index:0, ),
           (Lcfi2, Index:0, ),
           (Ltmp2, Index:0, ),
           (Ltmp3, Index:0, ),
           (Lfunc_end0, Index:0, ),
           (Ltmp4, Index:0, ),
           (L_OBJC_IMAGE_INFO, Index:0, ),
           (Linfo_string, Index:0, ),
           (Lsection_abbrev, Index:0, ),
           (Lsection_info, Index:0, ),
           (Lcu_begin0, Index:0, ),
           (Lset0, Index:0, ),
           (Ldebug_info_end0, Index:0, ),
           (Ldebug_info_start0, Index:0, ),
           (Lset1, Index:0, ),
           (Lline_table_start0, Index:0, ),
           (Lsection_line, Index:0, ),
           (Ldebug_macinfo, Index:0, ),
           (Lnames_begin, Index:0, ),
           (Lset2, Index:0, ),
           (LNames0, Index:0, ),
           (Lobjc_begin, Index:0, ),
           (Lnamespac_begin, Index:0, ),
           (Ltypes_begin, Index:0, ),
           (Lset3, Index:0, ),
           (Ltypes0, Index:0, ),
           (Ltmp5, Index:0, ),
           (Ltmp6, Index:0, ),
           (Ltmp8, Index:0, ),
           (Ltmp7, Index:0, ),
           (Ltmp11, Index:0, ),
           (Ltmp10, Index:0, ),
           (Ltmp9, Index:0, ),
           (Ltmp12, Index:0, ),
           (Ltmp13, Index:0, ),
           (Ltmp15, Index:0, ),
           (Ltmp14, Index:0, ),
           (Ltmp17, Index:0, ),
           (Ltmp16, Index:0, ),
           (Lsec_end0, Index:0, )]>
assembler backend - final-layout
--
<MCAssembler
  Sections:[
    <MCSection Fragments:[
      <MCAlignFragment<MCFragment 0x7fe52e068940 LayoutOrder:0 Offset:0 HasInstructions:0> (emit nops)
        Alignment:16 Value:0 ValueSize:1 MaxBytesToEmit:16>>,
      <MCDataFragment<MCFragment 0x7fe52e068990 LayoutOrder:1 Offset:0 HasInstructions:1 BundlePadding:0>
        Contents:[55,48,89,E5,31,C0,5D,C3] (8 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069270 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,40,07,02,05] (8 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e0694e0 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[53,77,69,66,74,20,76,65,72,73,69,6F,6E,20,35,2E,32,2D,64,65,76,20,28,53,77,69,66,74,20,37,34,36,62,35,38,65,38,65,31,29,00,67,65,6E,65,72,69,63,73,2E,73,77,69,66,74,00,67,65,6E,65,72,69,63,73,00,2F,41,70,70,6C,69,63,61,74,69,6F,6E,73,2F,58,63,6F,64,65,5F,31,31,2E,33,2E,61,70,70,2F,43,6F,6E,74,65,6E,74,73,2F,44,65,76,65,6C,6F,70,65,72,2F,50,6C,61,74,66,6F,72,6D,73,2F,4D,61,63,4F,53,58,2E,70,6C,61,74,66,6F,72,6D,2F,44,65,76,65,6C,6F,70,65,72,2F,53,44,4B,73,2F,4D,61,63,4F,53,58,31,30,2E,31,35,2E,73,64,6B,00,53,77,69,66,74,00,2F,55,73,65,72,73,2F,6B,65,6E,74,61,2F,73,77,69,66,74,63,2F,62,75,69,6C,64,2F,58,63,6F,64,65,2D,44,65,62,75,67,41,73,73,65,72,74,2F,73,77,69,66,74,2D,6D,61,63,6F,73,78,2D,78,38,36,5F,36,34,2F,44,65,62,75,67,2F,6C,69,62,2F,73,77,69,66,74,2F,6D,61,63,6F,73,78,2F,53,77,69,66,74,2E,73,77,69,66,74,6D,6F,64,75,6C,65,2F,78,38,36,5F,36,34,2E,73,77,69,66,74,6D,6F,64,75,6C,65,00,6D,61,69,6E,00,49,6E,74,33,32,00,24,73,73,35,49,6E,74,33,32,56,44,00] (323 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069720 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[01,11,01,25,0E,13,05,03,0E,10,17,E1,7F,19,E5,7F,0B,11,01,12,06,00,00,02,1E,01,03,0E,82,7C,0E,00,00,03,2E,00,11,01,12,06,40,18,6E,0E,03,0E,3A,0B,3B,0B,49,13,3F,19,E1,7F,19,00,00,04,3A,00,18,13,00,00,05,1E,01,03,0E,80,7C,0E,82,7C,0E,00,00,06,13,00,03,0E,6E,0E,0B,0B,E6,7F,0B,00,00,00] (94 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069b50 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,04,00,00,00,00,00,08,01,00,00,00,00,1E,00,29,00,00,00,00,00,00,00,05,00,00,00,00,00,00,00,00,08,00,00,00,02,38,00,00,00,41,00,00,00,03,00,00,00,00,00,00,00,00,08,00,00,00,01,56,2C,01,00,00,2C,01,00,00,01,01,60,00,00,00,00,04,27,00,00,00,05,AA,00,00,00,B0,00,00,00,41,00,00,00,06,31,01,00,00,37,01,00,00,04,1E,00,04,53,00,00,00,00] (114 bytes),
        Fixups:[<MCFixup Offset:0 Value:Lset0 Kind:3>,
                <MCFixup Offset:22 Value:Lset1 Kind:3>,
                <MCFixup Offset:27 Value:Lfunc_begin0 Kind:4>,
                <MCFixup Offset:49 Value:Lfunc_begin0 Kind:4>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069c30 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[00] (1 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069d10 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[48,53,41,48,01,00,00,00,01,00,00,00,01,00,00,00,0C,00,00,00,00,00,00,00,01,00,00,00,01,00,06,00,00,00,00,00,6A,7F,9A,7C,00,00,00,00,2C,01,00,00,01,00,00,00,30,00,00,00,00,00,00,00] (60 bytes),
        Fixups:[<MCFixup Offset:40 Value:Lset2 Kind:3>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069df0 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[48,53,41,48,01,00,00,00,01,00,00,00,00,00,00,00,0C,00,00,00,00,00,00,00,01,00,00,00,01,00,06,00,FF,FF,FF,FF] (36 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e069f50 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[48,53,41,48,01,00,00,00,01,00,00,00,00,00,00,00,0C,00,00,00,00,00,00,00,01,00,00,00,01,00,06,00,FF,FF,FF,FF] (36 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e06a080 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[48,53,41,48,01,00,00,00,01,00,00,00,01,00,00,00,14,00,00,00,00,00,00,00,03,00,00,00,01,00,06,00,03,00,05,00,04,00,0B,00,00,00,00,00,D5,42,66,0D,00,00,00,00,31,01,00,00,01,00,00,00,60,00,00,00,13,00,00,00,00,00,00] (71 bytes),
        Fixups:[<MCFixup Offset:48 Value:Lset3 Kind:3>]>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e060a90 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,FF,FF,FF,FF,04,00,08,00,01,78,10,0C,07,08,90,01] (20 bytes),
        Fixups:[<MCFixup Offset:0 Value:Ltmp8 Kind:3>]>,
      <MCAlignFragment<MCFragment 0x7fe52e0691c0 LayoutOrder:1 Offset:20 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7fe52e068a70 LayoutOrder:2 Offset:24 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00] (24 bytes),
        Fixups:[<MCFixup Offset:0 Value:Ltmp11 Kind:3>,
                <MCFixup Offset:4 Value:Ltmp12 Kind:3>,
                <MCFixup Offset:8 Value:Ltmp0 Kind:4>,
                <MCFixup Offset:16 Value:Ltmp13 Kind:4>]>,
      <MCDwarfCallFrameFragment<MCFragment 0x7fe52e068b50 LayoutOrder:3 Offset:48 HasInstructions:0 BundlePadding:0>
        AddrDelta:Lcfi0-Ltmp0>,
      <MCDataFragment<MCFragment 0x7fe52e060cc0 LayoutOrder:4 Offset:49 HasInstructions:0 BundlePadding:0>
        Contents:[0E,10] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7fe52e060da0 LayoutOrder:5 Offset:51 HasInstructions:0 BundlePadding:0>
        AddrDelta:Lcfi1-Lcfi0>,
      <MCDataFragment<MCFragment 0x7fe52e061070 LayoutOrder:6 Offset:51 HasInstructions:0 BundlePadding:0>
        Contents:[86,02] (2 bytes)>,
      <MCDwarfCallFrameFragment<MCFragment 0x7fe52e060e30 LayoutOrder:7 Offset:53 HasInstructions:0 BundlePadding:0>
        AddrDelta:Lcfi2-Lcfi1>,
      <MCDataFragment<MCFragment 0x7fe52e061150 LayoutOrder:8 Offset:54 HasInstructions:0 BundlePadding:0>
        Contents:[0D,06] (2 bytes)>,
      <MCAlignFragment<MCFragment 0x7fe52e069210 LayoutOrder:9 Offset:56 HasInstructions:0>
        Alignment:8 Value:0 ValueSize:1 MaxBytesToEmit:8>>,
      <MCDataFragment<MCFragment 0x7fe52e068e10 LayoutOrder:10 Offset:56 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>]>,
    <MCSection Fragments:[
      <MCDataFragment<MCFragment 0x7fe52e068ef0 LayoutOrder:0 Offset:0 HasInstructions:0 BundlePadding:0>
        Contents:[00,00,00,00,04,00,00,00,00,00,01,01,01,FB,0E,0D,00,01,01,01,01,00,00,00,01,00,00,01,00,67,65,6E,65,72,69,63,73,2E,73,77,69,66,74,00,00,00,00,00,00,09,02,00,00,00,00,00,00,00,00,11] (60 bytes),
        Fixups:[<MCFixup Offset:0 Value:Ltmp15 Kind:3>,
                <MCFixup Offset:6 Value:Ltmp17 Kind:3>,
                <MCFixup Offset:51 Value:Ltmp1 Kind:4>]>,
      <MCDwarfFragment<MCFragment 0x7fe52e061230 LayoutOrder:1 Offset:60 HasInstructions:0 BundlePadding:0>
        AddrDelta:Lsec_end0-Ltmp1 LineDelta:9223372036854775807>,
      <MCDataFragment<MCFragment 0x7fe52e068fd0 LayoutOrder:2 Offset:65 HasInstructions:0 BundlePadding:0>
        Contents:[] (0 bytes)>]>],
  Symbols:[(_main, Index:0, ),
           (Lfunc_begin0, Index:0, ),
           (Ltmp0, Index:0, ),
           (Ltmp1, Index:0, ),
           (Lcfi0, Index:0, ),
           (Lcfi1, Index:0, ),
           (Lcfi2, Index:0, ),
           (Ltmp2, Index:0, ),
           (Ltmp3, Index:0, ),
           (Lfunc_end0, Index:0, ),
           (Ltmp4, Index:0, ),
           (L_OBJC_IMAGE_INFO, Index:0, ),
           (Linfo_string, Index:0, ),
           (Lsection_abbrev, Index:0, ),
           (Lsection_info, Index:0, ),
           (Lcu_begin0, Index:0, ),
           (Lset0, Index:0, ),
           (Ldebug_info_end0, Index:0, ),
           (Ldebug_info_start0, Index:0, ),
           (Lset1, Index:0, ),
           (Lline_table_start0, Index:0, ),
           (Lsection_line, Index:0, ),
           (Ldebug_macinfo, Index:0, ),
           (Lnames_begin, Index:0, ),
           (Lset2, Index:0, ),
           (LNames0, Index:0, ),
           (Lobjc_begin, Index:0, ),
           (Lnamespac_begin, Index:0, ),
           (Ltypes_begin, Index:0, ),
           (Lset3, Index:0, ),
           (Ltypes0, Index:0, ),
           (Ltmp5, Index:0, ),
           (Ltmp6, Index:0, ),
           (Ltmp8, Index:0, ),
           (Ltmp7, Index:0, ),
           (Ltmp11, Index:0, ),
           (Ltmp10, Index:0, ),
           (Ltmp9, Index:0, ),
           (Ltmp12, Index:0, ),
           (Ltmp13, Index:0, ),
           (Ltmp15, Index:0, ),
           (Ltmp14, Index:0, ),
           (Ltmp17, Index:0, ),
           (Ltmp16, Index:0, ),
           (Lsec_end0, Index:0, )]>
Parse symbols:
emitSection SectionID: 0 Name: __text obj addr: 0x7fe52c1dead0 new addr: 0x130f8a000 DataSize: 8 StubBufSize: 0 Allocate: 8
	Type: 4 Name: _main SID: 0 Offset: 0x0 flags: 66
Parse relocations:
emitSection SectionID: 1 Name: __debug_info obj addr: 0x7fe52c1dec81 new addr: 0x130f8b000 DataSize: 120 StubBufSize: 23 Allocate: 144
	SectionID: 1
emitSection SectionID: 2 Name: __debug_frame obj addr: 0x7fe52c1dedc0 new addr: 0x130f8b090 DataSize: 56 StubBufSize: 8 Allocate: 71
	SectionID: 2
emitSection SectionID: 3 Name: __debug_line obj addr: 0x7fe52c1dedf8 new addr: 0x130f8b0d8 DataSize: 72 StubBufSize: 15 Allocate: 87
	SectionID: 3
----- Contents of section __text before relocations -----
0x0000000130f8a000: 55 48 89 e5 31 c0 5d c3
----- Contents of section __debug_info before relocations -----
0x0000000130f8b000: 6e 00 00 00 04 00 00 00 00 00 08 01 00 00 00 00
0x0000000130f8b010: 1e 00 29 00 00 00 00 00 00 00 05 00 00 00 00 00
0x0000000130f8b020: 00 00 00 08 00 00 00 02 38 00 00 00 41 00 00 00
0x0000000130f8b030: 03 00 00 00 00 00 00 00 00 08 00 00 00 01 56 2c
0x0000000130f8b040: 01 00 00 2c 01 00 00 01 01 60 00 00 00 00 04 27
0x0000000130f8b050: 00 00 00 05 aa 00 00 00 b0 00 00 00 41 00 00 00
0x0000000130f8b060: 06 31 01 00 00 37 01 00 00 04 1e 00 04 53 00 00
0x0000000130f8b070: 00 00 00 00 00 00 00 00
----- Contents of section __debug_frame before relocations -----
0x0000000130f8b090: 14 00 00 00 ff ff ff ff 04 00 08 00 01 78 10 0c
0x0000000130f8b0a0: 07 08 90 01 00 00 00 00 1c 00 00 00 00 00 00 00
0x0000000130f8b0b0: 00 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00
0x0000000130f8b0c0: 41 0e 10 86 02 43 0d 06
----- Contents of section __debug_line before relocations -----
0x0000000130f8b0d0:                         3d 00 00 00 04 00 26 00
0x0000000130f8b0e0: 00 00 01 01 01 fb 0e 0d 00 01 01 01 01 00 00 00
0x0000000130f8b0f0: 01 00 00 01 00 67 65 6e 65 72 69 63 73 2e 73 77
0x0000000130f8b100: 69 66 74 00 00 00 00 00 00 09 02 00 00 00 00 00
0x0000000130f8b110: 00 00 00 11 02 08 00 01 01 00 00 00 00 00 00 00
Resolving relocations Section #0	0x130f8a000
resolveRelocation Section: 1 LocalAddress: 0x130f8b031 FinalAddress: 0x0000000130f8b031 Value: 0x0000000130f8a000 Addend: 0 isPCRel: 0 MachoType: 0 Size: 8
resolveRelocation Section: 1 LocalAddress: 0x130f8b01b FinalAddress: 0x0000000130f8b01b Value: 0x0000000130f8a000 Addend: 0 isPCRel: 0 MachoType: 0 Size: 8
resolveRelocation Section: 2 LocalAddress: 0x130f8b0b0 FinalAddress: 0x0000000130f8b0b0 Value: 0x0000000130f8a000 Addend: 0 isPCRel: 0 MachoType: 0 Size: 8
resolveRelocation Section: 3 LocalAddress: 0x130f8b10b FinalAddress: 0x0000000130f8b10b Value: 0x0000000130f8a000 Addend: 0 isPCRel: 0 MachoType: 0 Size: 8
----- Contents of section __text after relocations -----
0x0000000130f8a000: 55 48 89 e5 31 c0 5d c3
----- Contents of section __debug_info after relocations -----
0x0000000130f8b000: 6e 00 00 00 04 00 00 00 00 00 08 01 00 00 00 00
0x0000000130f8b010: 1e 00 29 00 00 00 00 00 00 00 05 00 a0 f8 30 01
0x0000000130f8b020: 00 00 00 08 00 00 00 02 38 00 00 00 41 00 00 00
0x0000000130f8b030: 03 00 a0 f8 30 01 00 00 00 08 00 00 00 01 56 2c
0x0000000130f8b040: 01 00 00 2c 01 00 00 01 01 60 00 00 00 00 04 27
0x0000000130f8b050: 00 00 00 05 aa 00 00 00 b0 00 00 00 41 00 00 00
0x0000000130f8b060: 06 31 01 00 00 37 01 00 00 04 1e 00 04 53 00 00
0x0000000130f8b070: 00 00 00 00 00 00 00 00
----- Contents of section __debug_frame after relocations -----
0x0000000130f8b090: 14 00 00 00 ff ff ff ff 04 00 08 00 01 78 10 0c
0x0000000130f8b0a0: 07 08 90 01 00 00 00 00 1c 00 00 00 00 00 00 00
0x0000000130f8b0b0: 00 a0 f8 30 01 00 00 00 08 00 00 00 00 00 00 00
0x0000000130f8b0c0: 41 0e 10 86 02 43 0d 06
----- Contents of section __debug_line after relocations -----
0x0000000130f8b0d0:                         3d 00 00 00 04 00 26 00
0x0000000130f8b0e0: 00 00 01 01 01 fb 0e 0d 00 01 01 01 01 00 00 00
0x0000000130f8b0f0: 01 00 00 01 00 67 65 6e 65 72 69 63 73 2e 73 77
0x0000000130f8b100: 69 66 74 00 00 00 00 00 00 09 02 00 a0 f8 30 01
0x0000000130f8b110: 00 00 00 11 02 08 00 01 01 00 00 00 00 00 00 00
Running static constructors
Running main
JIT: ARGV = 0x7fe52bc644a0
JIT: ARGV[0] = 0x7fe52bc64ec0
----- Contents of section __text before relocations -----
0x0000000130f8a000: 55 48 89 e5 31 c0 5d c3
----- Contents of section __debug_info before relocations -----
0x0000000130f8b000: 6e 00 00 00 04 00 00 00 00 00 08 01 00 00 00 00
0x0000000130f8b010: 1e 00 29 00 00 00 00 00 00 00 05 00 a0 f8 30 01
0x0000000130f8b020: 00 00 00 08 00 00 00 02 38 00 00 00 41 00 00 00
0x0000000130f8b030: 03 00 a0 f8 30 01 00 00 00 08 00 00 00 01 56 2c
0x0000000130f8b040: 01 00 00 2c 01 00 00 01 01 60 00 00 00 00 04 27
0x0000000130f8b050: 00 00 00 05 aa 00 00 00 b0 00 00 00 41 00 00 00
0x0000000130f8b060: 06 31 01 00 00 37 01 00 00 04 1e 00 04 53 00 00
0x0000000130f8b070: 00 00 00 00 00 00 00 00
----- Contents of section __debug_frame before relocations -----
0x0000000130f8b090: 14 00 00 00 ff ff ff ff 04 00 08 00 01 78 10 0c
0x0000000130f8b0a0: 07 08 90 01 00 00 00 00 1c 00 00 00 00 00 00 00
0x0000000130f8b0b0: 00 a0 f8 30 01 00 00 00 08 00 00 00 00 00 00 00
0x0000000130f8b0c0: 41 0e 10 86 02 43 0d 06
----- Contents of section __debug_line before relocations -----
0x0000000130f8b0d0:                         3d 00 00 00 04 00 26 00
0x0000000130f8b0e0: 00 00 01 01 01 fb 0e 0d 00 01 01 01 01 00 00 00
0x0000000130f8b0f0: 01 00 00 01 00 67 65 6e 65 72 69 63 73 2e 73 77
0x0000000130f8b100: 69 66 74 00 00 00 00 00 00 09 02 00 a0 f8 30 01
0x0000000130f8b110: 00 00 00 11 02 08 00 01 01 00 00 00 00 00 00 00
----- Contents of section __text after relocations -----
0x0000000130f8a000: 55 48 89 e5 31 c0 5d c3
----- Contents of section __debug_info after relocations -----
0x0000000130f8b000: 6e 00 00 00 04 00 00 00 00 00 08 01 00 00 00 00
0x0000000130f8b010: 1e 00 29 00 00 00 00 00 00 00 05 00 a0 f8 30 01
0x0000000130f8b020: 00 00 00 08 00 00 00 02 38 00 00 00 41 00 00 00
0x0000000130f8b030: 03 00 a0 f8 30 01 00 00 00 08 00 00 00 01 56 2c
0x0000000130f8b040: 01 00 00 2c 01 00 00 01 01 60 00 00 00 00 04 27
0x0000000130f8b050: 00 00 00 05 aa 00 00 00 b0 00 00 00 41 00 00 00
0x0000000130f8b060: 06 31 01 00 00 37 01 00 00 04 1e 00 04 53 00 00
0x0000000130f8b070: 00 00 00 00 00 00 00 00
----- Contents of section __debug_frame after relocations -----
0x0000000130f8b090: 14 00 00 00 ff ff ff ff 04 00 08 00 01 78 10 0c
0x0000000130f8b0a0: 07 08 90 01 00 00 00 00 1c 00 00 00 00 00 00 00
0x0000000130f8b0b0: 00 a0 f8 30 01 00 00 00 08 00 00 00 00 00 00 00
0x0000000130f8b0c0: 41 0e 10 86 02 43 0d 06
----- Contents of section __debug_line after relocations -----
0x0000000130f8b0d0:                         3d 00 00 00 04 00 26 00
0x0000000130f8b0e0: 00 00 01 01 01 fb 0e 0d 00 01 01 01 01 00 00 00
0x0000000130f8b0f0: 01 00 00 01 00 67 65 6e 65 72 69 63 73 2e 73 77
0x0000000130f8b100: 69 66 74 00 00 00 00 00 00 09 02 00 a0 f8 30 01
0x0000000130f8b110: 00 00 00 11 02 08 00 01 01 00 00 00 00 00 00 00
